{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Features PSR-15 Middleware Create middleware applications, using as many layers as you want, and the architecture your project needs. PSR-7 HTTP Messages Built to consume PSR-7 ! Routing Route requests to middleware using the routing library of your choice . Dependency Injection Make your code flexible and robust, using the dependency injection container of your choice . Templating Create templated responses , using a variety of template engines. Error Handling Handle errors gracefully , using templated error pages, whoops , or your own solution! Get Started Now! Installation is only a Composer command away! $ composer create-project mezzio/mezzio-skeleton mezzio Mezzio provides interfaces for routing and templating, letting you choose what to use, and how you want to implement it. Our unique installer allows you to select your choices when starting your project! Learn more Applications, Simplified Write middleware: $pathMiddleware = function ( ServerRequestInterface $request, RequestHandlerInterface $handler ) { $uri = $request-&gt;getUri(); $path = $uri-&gt;getPath(); return new TextResponse('You visited ' . $path, 200, ['X-Path' =&gt; $path]); }; And add it to an application: $app-&gt;get('/path', $pathMiddleware); Learn more Learn more Features overview Quick Start Or use the sidebar menu to navigate to the section you're interested in.","title":"Home"},{"location":"#features","text":"","title":"Features"},{"location":"#get-started-now","text":"Installation is only a Composer command away! $ composer create-project mezzio/mezzio-skeleton mezzio Mezzio provides interfaces for routing and templating, letting you choose what to use, and how you want to implement it. Our unique installer allows you to select your choices when starting your project! Learn more","title":"Get Started Now!"},{"location":"#applications-simplified","text":"Write middleware: $pathMiddleware = function ( ServerRequestInterface $request, RequestHandlerInterface $handler ) { $uri = $request-&gt;getUri(); $path = $uri-&gt;getPath(); return new TextResponse('You visited ' . $path, 200, ['X-Path' =&gt; $path]); }; And add it to an application: $app-&gt;get('/path', $pathMiddleware); Learn more","title":"Applications, Simplified"},{"location":"#learn-more","text":"Features overview Quick Start Or use the sidebar menu to navigate to the section you're interested in.","title":"Learn more"},{"location":"why-mezzio/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/why-mezzio/'; });","title":"_reference_why_mezzio?"},{"location":"cookbook/autowiring-routes-and-pipelines/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/cookbook/autowiring-routes-and-pipelines/'; });","title":"_cookbook_autowiring_routes_and_pipeline_middleware"},{"location":"cookbook/common-prefix-for-routes/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/cookbook/common-prefix-for-routes/'; });","title":"_cookbook_prepending_a_common_path_to_all_routes"},{"location":"cookbook/custom-404-page-handling/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v1/cookbook/custom-404-page-handling/'; });","title":"_cookbook_setting_custom_404_page_handling"},{"location":"cookbook/debug-toolbars/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/cookbook/debug-toolbars/'; });","title":"_cookbook_enabling_debug_toolbars"},{"location":"cookbook/flash-messengers/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/cookbook/flash-messengers/'; });","title":"_cookbook_flash_messengers"},{"location":"cookbook/modular-layout/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v1/cookbook/modular-layout/'; });","title":"_cookbook_building_modular_applications"},{"location":"cookbook/passing-data-between-middleware/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/cookbook/passing-data-between-middleware/'; });","title":"_cookbook_passing_data_between_middleware"},{"location":"cookbook/route-specific-pipeline/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/cookbook/route-specific-pipeline/'; });","title":"_cookbook_route-specific_middleware_pipelines"},{"location":"cookbook/setting-locale-depending-routing-parameter/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/cookbook/setting-locale-depending-routing-parameter/'; });","title":"_cookbook_setting_a_locale_based_on_a_routing_parameter"},{"location":"cookbook/setting-locale-without-routing-parameter/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/cookbook/setting-locale-without-routing-parameter/'; });","title":"_cookbook_setting_a_locale_without_a_routing_parameter"},{"location":"cookbook/using-a-base-path/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/cookbook/using-a-base-path/'; });","title":"_cookbook_using_Mezzio_from_a_subdirectory"},{"location":"cookbook/using-custom-view-helpers/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/cookbook/using-custom-view-helpers/'; });","title":"_cookbook_registering_custom_view_helpers_when_using_laminas-view"},{"location":"cookbook/using-laminas-form-view-helpers/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/cookbook/using-laminas-form-view-helpers/'; });","title":"_cookbook_using_laminas-form_view_helpers"},{"location":"cookbook/using-routed-middleware-class-as-controller/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v2/cookbook/using-routed-middleware-class-as-controller/'; });","title":"_cookbook_handling_multiple_routes_in_a_single_class"},{"location":"features/application/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/application/'; });","title":"_features_application"},{"location":"features/emitters/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/emitters/'; });","title":"_features_emitters"},{"location":"features/error-handling/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/error-handling/'; });","title":"_features_error_handling"},{"location":"features/middleware-types/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/middleware-types/'; });","title":"_features_middleware_types"},{"location":"features/modular-applications/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/modular-applications/'; });","title":"_features_modular_applications"},{"location":"features/container/aura-di/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/container/aura-di/'; });","title":"_features_container_using_aura.di"},{"location":"features/container/delegator-factories/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/container/delegator-factories/'; });","title":"_features_container_delegator_factories"},{"location":"features/container/factories/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/container/factories/'; });","title":"_features_container_factories"},{"location":"features/container/intro/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/container/intro/'; });","title":"_features_container_intro"},{"location":"features/container/laminas-servicemanager/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/container/laminas-servicemanager/'; });","title":"_features_container_using_laminas-servicemanager"},{"location":"features/container/pimple/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/container/pimple/'; });","title":"_features_container_using_pimple"},{"location":"features/helpers/body-parse/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/helpers/body-parse/'; });","title":"_features_helpers_body_parsing_middleware"},{"location":"features/helpers/content-length/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/helpers/content-length/'; });","title":"_features_helpers_content_length_middleware"},{"location":"features/helpers/intro/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/helpers/intro/'; });","title":"_features_helpers_intro"},{"location":"features/helpers/server-url-helper/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/helpers/server-url-helper/'; });","title":"_features_helpers_serverurlhelper"},{"location":"features/helpers/url-helper/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/helpers/url-helper/'; });","title":"_features_helpers_urlhelper"},{"location":"features/middleware/implicit-methods-middleware/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/middleware/implicit-methods-middleware/'; });","title":"_features_middleware_implicit_head_and_options_middleware"},{"location":"features/router/aura/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/router/aura/'; });","title":"_features_router_using_aura"},{"location":"features/router/fast-route/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/router/fast-route/'; });","title":"_features_router_using_fastroute"},{"location":"features/router/interface/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/router/interface/'; });","title":"_features_router_interface"},{"location":"features/router/intro/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/router/intro/'; });","title":"_features_router_introduction"},{"location":"features/router/laminas-router/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/router/laminas-router/'; });","title":"_features_router_using_the Laminas Router"},{"location":"features/router/piping/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/router/piping/'; });","title":"_features_router_piping"},{"location":"features/router/uri-generation/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/router/uri-generation/'; });","title":"_features_router_uri_generation"},{"location":"features/template/interface/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/template/interface/'; });","title":"_features_template_interface"},{"location":"features/template/intro/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/template/intro/'; });","title":"_features_template_intro"},{"location":"features/template/laminas-view/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/template/laminas-view/'; });","title":"_features_template_laminas-view"},{"location":"features/template/middleware/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/template/middleware/'; });","title":"_features_template_middleware"},{"location":"features/template/plates/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/template/plates/'; });","title":"_features_template_plates"},{"location":"features/template/twig/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/features/template/twig/'; });","title":"_features_template_twig"},{"location":"getting-started/features/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/getting-started/features/'; });","title":"_getting_started_overview"},{"location":"getting-started/skeleton/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/getting-started/quick-start/'; });","title":"_getting_started_skeleton"},{"location":"getting-started/standalone/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v2/getting-started/standalone/'; });","title":"_getting_started_standalone"},{"location":"reference/cli-tooling/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/reference/cli-tooling/'; });","title":"_reference_cli_tooling"},{"location":"reference/mezzio-projects/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/reference/mezzio-projects/'; });","title":"_reference_mezzio_Projects"},{"location":"reference/usage-examples/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v2/reference/usage-examples/'; });","title":"_reference_usage_examples"},{"location":"reference/migration/rc-to-v1/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v1/reference/migration/rc-to-v1/'; });","title":"_migration_from_rc5_and_earlier"},{"location":"reference/migration/to-v1-1/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v1/reference/migration/to-v1-1/'; });","title":"_migration_to_mezzio_1.1"},{"location":"reference/migration/to-v2/","text":"document.addEventListener(\"DOMContentLoaded\", function (event) { window.location.pathname = '/mezzio/v3/reference/migration/'; });","title":"_migration_to_v2"},{"location":"v1/","text":"Mezzio: PSR-7 Middleware in Minutes Mezzio builds on Stratigility to provide a minimalist PSR-7 middleware framework for PHP, with the following features: Routing. Choose your own router; we support: Aura.Router FastRoute laminas-router DI Containers, via container-interop . All middleware composed in Mezzio may be retrieved from the composed container. Optionally, templating. We support: Plates Twig Laminas's PhpRenderer Error handling. Create templated error pages, or use tools like whoops for debugging purposes. Nested middleware applications. Write an application, and compose it later in another, optionally under a separate subpath. Simplfied installation . Our custom Composer -based installer prompts you for your initial stack choices, giving you exactly the base you want to start from. Essentially, Mezzio allows you to develop using the tools you prefer, and provides minimal structure and facilities to ease your development. Should I choose it over Laminas\\Mvc? That’s a good question. Here’s what we recommend. If you’re keen to get started, then keep reading and get started writing your first middleware application today!","title":"Mezzio: PSR-7 Middleware in Minutes"},{"location":"v1/#mezzio-psr-7-middleware-in-minutes","text":"Mezzio builds on Stratigility to provide a minimalist PSR-7 middleware framework for PHP, with the following features: Routing. Choose your own router; we support: Aura.Router FastRoute laminas-router DI Containers, via container-interop . All middleware composed in Mezzio may be retrieved from the composed container. Optionally, templating. We support: Plates Twig Laminas's PhpRenderer Error handling. Create templated error pages, or use tools like whoops for debugging purposes. Nested middleware applications. Write an application, and compose it later in another, optionally under a separate subpath. Simplfied installation . Our custom Composer -based installer prompts you for your initial stack choices, giving you exactly the base you want to start from. Essentially, Mezzio allows you to develop using the tools you prefer, and provides minimal structure and facilities to ease your development. Should I choose it over Laminas\\Mvc? That’s a good question. Here’s what we recommend. If you’re keen to get started, then keep reading and get started writing your first middleware application today!","title":"Mezzio: PSR-7 Middleware in Minutes"},{"location":"v1/why-mezzio/","text":"Should You Choose mezzio Over laminas-mvc? We recommend that you choose Mezzio for any new project — if the choice is yours to make . Why Use laminas-mvc? laminas-mvc is a proven platform, with half a decade of development behind it. It is stable and battle-tested in production platforms. Because it is opinionated about project structure and architecture, fewer decisions need be made up front; developers know where new code goes, and how it will wire into the overall application. Additionally, a number of training courses exist, including offerings by Zend , allowing you or your team to fully learn the framework and take advantage of all its features. Finally, laminas-mvc has a lively module ecosystem , allowing you to add features and capabilities to your application without needing to develop them from scratch. We Recommend Mezzio laminas-mvc has many preconceptions about how things work, yet they're very broad and general. What’s more, it also has several pre-wired structures in place that may either aid you — or get in your way. As a result, you are required to know a lot of what those things are — if you want to use it optimally. And to acquire that depth of knowledge, you’re going to need to spend a lot of time digging deep into laminas-mvc’s internals before you begin to get the most out of it. To quote Laminas project lead, Matthew Weier O’Phinney : The problem is that laminas-mvc is anything but beginner-friendly at this point. You're required to deep dive into the event manager, service manager, and module system — right from the outset; And to do this you need more than a passing understanding of object-oriented programming and a range of design patterns. Mezzio (specifically applications based on the Mezzio Skeleton Installer ) on the other hand, comes with barely any of these assumptions and requirements. It provides a very minimalist structure. Essentially all you have to become familiar with are five core components. These are: A DI container. A router. An error handler for development. A template engine (if you’re not creating an API). PSR-7 messages and http-interop (future PSR-15) middleware. In many cases, these are provided for you by the skeleton, and do not require any additional knowledge on your part. Given that, you can quickly get up to speed with the framework and begin creating the application that you need. We believe that this approach — in contrast to the laminas-mvc approach — is more flexible and accommodating. What’s more, you can mix and match the types of applications that you create. Do you just need an API? Great; you can do that quite quickly. Do you want an HTML-based front-end? That’s available too. When building applications with Mezzio, you can make use of the various Laminas components, or any third-party components or middleware. You can pick and choose what you need, as and when you need it. You’re not bound by many, if any, constraints and design decisions. In Conclusion For what it’s worth, we’re not saying that laminas-mvc is a poor choice! What we are saying is: The learning curve, from getting started to building the first application, is significantly lower with Mezzio The ways in which you can create applications, whether through multiple pieces of middleware or by combining multiple Mezzio apps, into one larger one, is a much more efficient and fluid way to work Ultimately, the choice is always up to you, your team, and your project’s needs. We just want to ensure that you’ve got all the information you need, to make an informed decision.","title":"Why choose Mezzio?"},{"location":"v1/why-mezzio/#should-you-choose-mezzio-over-laminas-mvc","text":"We recommend that you choose Mezzio for any new project — if the choice is yours to make .","title":"Should You Choose mezzio Over laminas-mvc?"},{"location":"v1/why-mezzio/#why-use-laminas-mvc","text":"laminas-mvc is a proven platform, with half a decade of development behind it. It is stable and battle-tested in production platforms. Because it is opinionated about project structure and architecture, fewer decisions need be made up front; developers know where new code goes, and how it will wire into the overall application. Additionally, a number of training courses exist, including offerings by Zend , allowing you or your team to fully learn the framework and take advantage of all its features. Finally, laminas-mvc has a lively module ecosystem , allowing you to add features and capabilities to your application without needing to develop them from scratch.","title":"Why Use laminas-mvc?"},{"location":"v1/why-mezzio/#we-recommend-mezzio","text":"laminas-mvc has many preconceptions about how things work, yet they're very broad and general. What’s more, it also has several pre-wired structures in place that may either aid you — or get in your way. As a result, you are required to know a lot of what those things are — if you want to use it optimally. And to acquire that depth of knowledge, you’re going to need to spend a lot of time digging deep into laminas-mvc’s internals before you begin to get the most out of it. To quote Laminas project lead, Matthew Weier O’Phinney : The problem is that laminas-mvc is anything but beginner-friendly at this point. You're required to deep dive into the event manager, service manager, and module system — right from the outset; And to do this you need more than a passing understanding of object-oriented programming and a range of design patterns. Mezzio (specifically applications based on the Mezzio Skeleton Installer ) on the other hand, comes with barely any of these assumptions and requirements. It provides a very minimalist structure. Essentially all you have to become familiar with are five core components. These are: A DI container. A router. An error handler for development. A template engine (if you’re not creating an API). PSR-7 messages and http-interop (future PSR-15) middleware. In many cases, these are provided for you by the skeleton, and do not require any additional knowledge on your part. Given that, you can quickly get up to speed with the framework and begin creating the application that you need. We believe that this approach — in contrast to the laminas-mvc approach — is more flexible and accommodating. What’s more, you can mix and match the types of applications that you create. Do you just need an API? Great; you can do that quite quickly. Do you want an HTML-based front-end? That’s available too. When building applications with Mezzio, you can make use of the various Laminas components, or any third-party components or middleware. You can pick and choose what you need, as and when you need it. You’re not bound by many, if any, constraints and design decisions.","title":"We Recommend Mezzio"},{"location":"v1/why-mezzio/#in-conclusion","text":"For what it’s worth, we’re not saying that laminas-mvc is a poor choice! What we are saying is: The learning curve, from getting started to building the first application, is significantly lower with Mezzio The ways in which you can create applications, whether through multiple pieces of middleware or by combining multiple Mezzio apps, into one larger one, is a much more efficient and fluid way to work Ultimately, the choice is always up to you, your team, and your project’s needs. We just want to ensure that you’ve got all the information you need, to make an informed decision.","title":"In Conclusion"},{"location":"v1/cookbook/common-prefix-for-routes/","text":"How can I prepend a common path to all my routes? You may have multiple middlewares providing their own functionality: $middleware1 = new UserMiddleware(); $middleware2 = new ProjectMiddleware(); $app = AppFactory::create(); $app-&gt;pipe($middleware1); $app-&gt;pipe($middleware2); $app-&gt;run(); Let's assume the above represents an API. As your application progresses, you may have a mixture of different content, and now want to have the above segregated under the path /api . This is essentially the same problem as addressed in the \"Segregating your application to a subpath\" example. To accomplish it: Create a new application. Pipe the previous application to the new one, under the path /api . $middleware1 = new UserMiddleware(); $middleware2 = new ProjectMiddleware(); $api = AppFactory::create(); $api-&gt;pipe($middleware1); $api-&gt;pipe($middleware2); $app = AppFactory::create(); $app-&gt;pipe('/api', $api); $app-&gt;run(); The above works, because every Application instance is itself middleware, and, more specifically, an instance of Stratigility's MiddlewarePipe , which provides the ability to compose middleware.","title":"Prepending a common path to all routes"},{"location":"v1/cookbook/common-prefix-for-routes/#how-can-i-prepend-a-common-path-to-all-my-routes","text":"You may have multiple middlewares providing their own functionality: $middleware1 = new UserMiddleware(); $middleware2 = new ProjectMiddleware(); $app = AppFactory::create(); $app-&gt;pipe($middleware1); $app-&gt;pipe($middleware2); $app-&gt;run(); Let's assume the above represents an API. As your application progresses, you may have a mixture of different content, and now want to have the above segregated under the path /api . This is essentially the same problem as addressed in the \"Segregating your application to a subpath\" example. To accomplish it: Create a new application. Pipe the previous application to the new one, under the path /api . $middleware1 = new UserMiddleware(); $middleware2 = new ProjectMiddleware(); $api = AppFactory::create(); $api-&gt;pipe($middleware1); $api-&gt;pipe($middleware2); $app = AppFactory::create(); $app-&gt;pipe('/api', $api); $app-&gt;run(); The above works, because every Application instance is itself middleware, and, more specifically, an instance of Stratigility's MiddlewarePipe , which provides the ability to compose middleware.","title":"How can I prepend a common path to all my routes?"},{"location":"v1/cookbook/custom-404-page-handling/","text":"How can I set custom 404 page handling? In some cases, you may want to handle 404 errors separately from the final handler . This can be done by registering middleware that operates late — specifically, after the routing middleware. Such middleware will be executed if no other middleware has executed, and/or when all other middleware calls return $next() without returning a response. Such situations typically mean that no middleware was able to complete the request. Your 404 handler can take one of two approaches: It can set the response status and call $next() with an error condition. In such a case, the final handler will likely be executed, but will have an explicit 404 status to work with. It can create and return a 404 response itself. Calling next with an error condition In the first approach, the NotFound middleware can be as simple as this: namespace Application; class NotFound { public function __invoke($req, $res, $next) { // Other things can be done here; e.g., logging return $next($req, $res-&gt;withStatus(404), 'Page Not Found'); } } This example uses the third, optional argument to $next() , which is an error condition. Internally, the final handler will typically see this, and return an error page of some sort. Since we set the response status, and it's an error status code, that status code will be used in the generated response. The TemplatedErrorHandler will use the error template in this particular case, so you will likely need to make some accommodations for 404 responses in that template if you choose this approach. 404 Middleware In the second approach, the NotFound middleware will return a full response. In our example here, we will render a specific template, and use this to seed and return a response. namespace Application; use Mezzio\\Template\\TemplateRendererInterface; class NotFound { private $renderer; public function __construct(TemplateRendererInterface $renderer) { $this-&gt;renderer = $renderer; } public function __invoke($req, $res, $next) { // other things can be done here; e.g., logging // Now set the response status and write to the body $response = $res-&gt;withStatus(404); $response-&gt;getBody()-&gt;write($this-&gt;renderer-&gt;render('error::not-found')); return $response; } } This approach allows you to have an application-specific workflow for 404 errors that does not rely on the final handler. Registering custom 404 handlers We can register either Application\\NotFound class above as service in the service container . In the case of the second approach, you would also need to provide a factory for creating the middleware (to ensure you inject the template renderer). From there, you still need to register the middleware. This middleware is not routed, and thus needs to be piped to the application instance. You can do this via either configuration, or manually. To do this via configuration, add an entry under the middleware_pipeline configuration, after the dispatch middleware: 'middleware_pipeline' =&gt; [ /* ... */ 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Mezzio\\Helper\\UrlHelperMiddleware::class, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], [ 'middleware' =&gt; 'Application\\NotFound', 'priority' =&gt; -1, ], /* ... */ ], The above example assumes you are using the ApplicationFactory and/or the Mezzio skeleton to manage your application instantiation and configuration. To manually add the middleware, you will need to pipe it to the application instance: $app-&gt;pipe($container-&gt;get('Application\\NotFound')); This must be done after : calling $app-&gt;pipeDispatchMiddleware() , OR pulling the Application instance from the service container (assuming you used the ApplicationFactory ). This is to ensure that the NotFound middleware executes after any routed middleware, as you only want it to execute if no routed middleware was selected.","title":"Setting custom 404 page handling"},{"location":"v1/cookbook/custom-404-page-handling/#how-can-i-set-custom-404-page-handling","text":"In some cases, you may want to handle 404 errors separately from the final handler . This can be done by registering middleware that operates late — specifically, after the routing middleware. Such middleware will be executed if no other middleware has executed, and/or when all other middleware calls return $next() without returning a response. Such situations typically mean that no middleware was able to complete the request. Your 404 handler can take one of two approaches: It can set the response status and call $next() with an error condition. In such a case, the final handler will likely be executed, but will have an explicit 404 status to work with. It can create and return a 404 response itself.","title":"How can I set custom 404 page handling?"},{"location":"v1/cookbook/custom-404-page-handling/#calling-next-with-an-error-condition","text":"In the first approach, the NotFound middleware can be as simple as this: namespace Application; class NotFound { public function __invoke($req, $res, $next) { // Other things can be done here; e.g., logging return $next($req, $res-&gt;withStatus(404), 'Page Not Found'); } } This example uses the third, optional argument to $next() , which is an error condition. Internally, the final handler will typically see this, and return an error page of some sort. Since we set the response status, and it's an error status code, that status code will be used in the generated response. The TemplatedErrorHandler will use the error template in this particular case, so you will likely need to make some accommodations for 404 responses in that template if you choose this approach.","title":"Calling next with an error condition"},{"location":"v1/cookbook/custom-404-page-handling/#404-middleware","text":"In the second approach, the NotFound middleware will return a full response. In our example here, we will render a specific template, and use this to seed and return a response. namespace Application; use Mezzio\\Template\\TemplateRendererInterface; class NotFound { private $renderer; public function __construct(TemplateRendererInterface $renderer) { $this-&gt;renderer = $renderer; } public function __invoke($req, $res, $next) { // other things can be done here; e.g., logging // Now set the response status and write to the body $response = $res-&gt;withStatus(404); $response-&gt;getBody()-&gt;write($this-&gt;renderer-&gt;render('error::not-found')); return $response; } } This approach allows you to have an application-specific workflow for 404 errors that does not rely on the final handler.","title":"404 Middleware"},{"location":"v1/cookbook/custom-404-page-handling/#registering-custom-404-handlers","text":"We can register either Application\\NotFound class above as service in the service container . In the case of the second approach, you would also need to provide a factory for creating the middleware (to ensure you inject the template renderer). From there, you still need to register the middleware. This middleware is not routed, and thus needs to be piped to the application instance. You can do this via either configuration, or manually. To do this via configuration, add an entry under the middleware_pipeline configuration, after the dispatch middleware: 'middleware_pipeline' =&gt; [ /* ... */ 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Mezzio\\Helper\\UrlHelperMiddleware::class, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], [ 'middleware' =&gt; 'Application\\NotFound', 'priority' =&gt; -1, ], /* ... */ ], The above example assumes you are using the ApplicationFactory and/or the Mezzio skeleton to manage your application instantiation and configuration. To manually add the middleware, you will need to pipe it to the application instance: $app-&gt;pipe($container-&gt;get('Application\\NotFound')); This must be done after : calling $app-&gt;pipeDispatchMiddleware() , OR pulling the Application instance from the service container (assuming you used the ApplicationFactory ). This is to ensure that the NotFound middleware executes after any routed middleware, as you only want it to execute if no routed middleware was selected.","title":"Registering custom 404 handlers"},{"location":"v1/cookbook/debug-toolbars/","text":"How can I get a debug toolbar for my Mezzio application? Many modern frameworks and applications provide debug toolbars: in-browser toolbars to provide profiling information of the request executed. These can provide invaluable details into application objects, database queries, and more. As an Mezzio user, how can you get similar functionality? Zend Server Z-Ray Zend Server ships with a tool called Z-Ray , which provides both a debug toolbar and debug console (for API debugging). Z-Ray is also currently available as a standalone technology preview , and can be added as an extension to an existing PHP installation. When using Zend Server or the standalone Z-Ray, you do not need to make any changes to your application whatsoever to benefit from it; you simply need to make sure Z-Ray is enabled and/or that you've set up a security token to selectively enable it on-demand. See the Z-Ray documentation for full usage details. bitExpert/prophiler-psr7-middleware Another option is bitExpert's prophiler-psr7-middleware . This package wraps fabfuel/prophiler , which provides a PHP-based profiling tool and toolbar; the bitExpert package wraps this in PSR-7 middleware to make consumption in those paradigms trivial. To add the toolbar middleware to your application, use composer: $ composer require bitExpert/prophiler-psr7-middleware From there, you will need to create a factory for the middleware, and add it to your middleware pipeline. Stephan Hochdörfer, author of the package, has written a post detailing these steps . Use locally One minor change we recommend over the directions Stephan provides is that you configure the factory and middleware in the config/autoload/middleware-pipeline.local.php file, vs the .global version. Doing so enables the middleware and toolbar only in the local environment — and not in production, where you likely do not want to expose such information! php-middleware/php-debug-bar php-middleware/php-debug-bar provides a PSR-7 middleware wrapper around maximebf/php-debugbar , a popular framework-agnostic debug bar for PHP projects. First, install the middleware in your application: $ composer require php-middleware/php-debug-bar This package provides a config provider. You can add it to your application in one of two ways: If you are using the ConfigManager , add an entry for it: $configManager = new Mezzio\\ConfigManager\\ConfigManager([ PhpMiddleware\\PhpDebugBar\\ConfigProvider::class, new Mezzio\\ConfigManager\\PhpFileProvider('config/autoload/{{,*.}global,{,*.}local}.php'), ]); If you are not using the ConfigManager, create a new configuration file, config/autoload/php-debugbar.global.php , with the following contents: &lt;?php use PhpMiddleware\\PhpDebugBar\\ConfigProvider; $provider = new ConfigProvider(); return $provider(); Use locally Remember to enable PhpMiddleware\\PhpDebugBar\\ConfigProvider only in your development environments!","title":"Enabling debug toolbars"},{"location":"v1/cookbook/debug-toolbars/#how-can-i-get-a-debug-toolbar-for-my-mezzio-application","text":"Many modern frameworks and applications provide debug toolbars: in-browser toolbars to provide profiling information of the request executed. These can provide invaluable details into application objects, database queries, and more. As an Mezzio user, how can you get similar functionality?","title":"How can I get a debug toolbar for my Mezzio application?"},{"location":"v1/cookbook/debug-toolbars/#zend-server-z-ray","text":"Zend Server ships with a tool called Z-Ray , which provides both a debug toolbar and debug console (for API debugging). Z-Ray is also currently available as a standalone technology preview , and can be added as an extension to an existing PHP installation. When using Zend Server or the standalone Z-Ray, you do not need to make any changes to your application whatsoever to benefit from it; you simply need to make sure Z-Ray is enabled and/or that you've set up a security token to selectively enable it on-demand. See the Z-Ray documentation for full usage details.","title":"Zend Server Z-Ray"},{"location":"v1/cookbook/debug-toolbars/#bitexpertprophiler-psr7-middleware","text":"Another option is bitExpert's prophiler-psr7-middleware . This package wraps fabfuel/prophiler , which provides a PHP-based profiling tool and toolbar; the bitExpert package wraps this in PSR-7 middleware to make consumption in those paradigms trivial. To add the toolbar middleware to your application, use composer: $ composer require bitExpert/prophiler-psr7-middleware From there, you will need to create a factory for the middleware, and add it to your middleware pipeline. Stephan Hochdörfer, author of the package, has written a post detailing these steps .","title":"bitExpert/prophiler-psr7-middleware"},{"location":"v1/cookbook/debug-toolbars/#php-middlewarephp-debug-bar","text":"php-middleware/php-debug-bar provides a PSR-7 middleware wrapper around maximebf/php-debugbar , a popular framework-agnostic debug bar for PHP projects. First, install the middleware in your application: $ composer require php-middleware/php-debug-bar This package provides a config provider. You can add it to your application in one of two ways: If you are using the ConfigManager , add an entry for it: $configManager = new Mezzio\\ConfigManager\\ConfigManager([ PhpMiddleware\\PhpDebugBar\\ConfigProvider::class, new Mezzio\\ConfigManager\\PhpFileProvider('config/autoload/{{,*.}global,{,*.}local}.php'), ]); If you are not using the ConfigManager, create a new configuration file, config/autoload/php-debugbar.global.php , with the following contents: &lt;?php use PhpMiddleware\\PhpDebugBar\\ConfigProvider; $provider = new ConfigProvider(); return $provider();","title":"php-middleware/php-debug-bar"},{"location":"v1/cookbook/flash-messengers/","text":"How Can I Implement Flash Messages? Flash messages are used to display one-time messages to a user. A typical use case is for setting and later displaying a successful submission via a Post/Redirect/Get (PRG) workflow, where the flash message would be set during the POST request, but displayed during the GET request. (PRG is used to prevent double-submission of forms.) As such, flash messages usually are session-based; the message is set in one request, and accessed and cleared in another. Mezzio does not provide native session facilities out-of-the-box, which means you will need: Session functionality. Flash message functionality, for handling message expiry from the session after first access. A number of flash message libraries already exist that can be integrated via middleware, and these typically either use PHP's ext/session functionality or have a dependency on a session library. Two such libraries are slim/flash and damess/mezzio-session-middleware. slim/flash Slim's Flash messages service provider can be used in Mezzio. It uses PHP's native session support. First, you'll need to add it to your application: $ composer require slim/flash Once you have, you'll need to create a factory to return middleware that will add the flash message provider to the request: namespace App; use Slim\\Flash\\Messages; class SlimFlashMiddlewareFactory { public function __invoke($container) { return function ($request, $response, $next) { // Start the session whenever we use this! session_start(); return $next( $request-&gt;withAttribute('flash', new Messages()), $response ); }; } } Now, let's register it with our middleware pipeline. In config/autoload/middleware-pipeline.global.php , make the following additions: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ 'App\\SlimFlashMiddleware' =&gt; App\\SlimFlashMiddlewareFactory::class, /* ... */ ], /* ... */ ], 'middleware_pipeline' =&gt; [ 'always' =&gt; [ 'middleware' =&gt; [ 'App\\SlimFlashMiddleware', /* ... */ ], 'priority' =&gt; 10000, ], /* ... */ ], ]; Where to register the flash middleware Sessions can sometimes be expensive. As such, you may not want the flash middleware enabled for every request. If this is the case, add the flash middleware as part of a route-specific pipeline instead. From here, you can add and read messages by accessing the request's flash attribute. As an example, middleware generating messages might read as follows: use Laminas\\Diactoros\\Response\\RedirectResponse; public function __invoke($request, $response, $next) { $flash = $request-&gt;getAttribute('flash'); $flash-&gt;addMessage('message', 'Hello World!'); return new RedirectResponse('/other-middleware'); } And middleware consuming the message might read: public function __invoke($request, $response, $next) { $flash = $request-&gt;getAttribute('flash'); $messages = $flash-&gt;getMessages(); // ... } From there, it's a matter of providing the flash messages to your template. damess/expressive-session-middleware and Aura.Session damess/mezzio-session-middleware provides middleware for initializing an Aura.Session instance; Aura.Session provides flash messaging capabilities as part of its featureset. Install it via Composer: $ composer require damess/mezzio-session-middleware In config/autoload/dependencies.global.php , add an entry for Aura.Session: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ Aura\\Session\\Session::class =&gt; DaMess\\Factory\\AuraSessionFactory::class, /* ... */ ], /* ... */ ], ]; In config/autoload/middleware-pipeline.global.php , add a factory entry for the damess/mezzio-session-middleware , and add it to the middleware pipeline: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ DaMess\\Http\\SessionMiddleware::class =&gt; DaMess\\Factory\\SessionMiddlewareFactory::class, /* ... */ ], /* ... */ ], 'middleware_pipeline' =&gt; [ 'always' =&gt; [ 'middleware' =&gt; [ DaMess\\Http\\SessionMiddleware::class, /* ... */ ], 'priority' =&gt; 10000, ], /* ... */ ], ]; Where to register the session middleware Sessions can sometimes be expensive. As such, you may not want the session middleware enabled for every request. If this is the case, add the session middleware as part of a route-specific pipeline instead. Once enabled, the SessionMiddleware will inject the Aura.Session instance into the request as the session attribute; you can thus retrieve it within middleware using the following: $session = $request-&gt;getAttribute('session'); To create and consume flash messages, use Aura.Session's flash values . As an example, the middleware that is processing a POST request might set a flash message: use Laminas\\Diactoros\\Response\\RedirectResponse; public function __invoke($request, $response, $next) { $session = $request-&gt;getAttribute('session'); $session-&gt;getSegment(__NAMESPACE__) -&gt;setFlash('message', 'Hello World!'); return new RedirectResponse('/other-middleware'); } Another middleware, to which the original middleware redirects, might look like this: public function __invoke($request, $response, $next) { $session = $request-&gt;getAttribute('session'); $message = $session-&gt;getSegment(__NAMESPACE__) -&gt;getFlash('message'); // ... } From there, it's a matter of providing the flash messages to your template.","title":"Flash Messengers"},{"location":"v1/cookbook/flash-messengers/#how-can-i-implement-flash-messages","text":"Flash messages are used to display one-time messages to a user. A typical use case is for setting and later displaying a successful submission via a Post/Redirect/Get (PRG) workflow, where the flash message would be set during the POST request, but displayed during the GET request. (PRG is used to prevent double-submission of forms.) As such, flash messages usually are session-based; the message is set in one request, and accessed and cleared in another. Mezzio does not provide native session facilities out-of-the-box, which means you will need: Session functionality. Flash message functionality, for handling message expiry from the session after first access. A number of flash message libraries already exist that can be integrated via middleware, and these typically either use PHP's ext/session functionality or have a dependency on a session library. Two such libraries are slim/flash and damess/mezzio-session-middleware.","title":"How Can I Implement Flash Messages?"},{"location":"v1/cookbook/flash-messengers/#slimflash","text":"Slim's Flash messages service provider can be used in Mezzio. It uses PHP's native session support. First, you'll need to add it to your application: $ composer require slim/flash Once you have, you'll need to create a factory to return middleware that will add the flash message provider to the request: namespace App; use Slim\\Flash\\Messages; class SlimFlashMiddlewareFactory { public function __invoke($container) { return function ($request, $response, $next) { // Start the session whenever we use this! session_start(); return $next( $request-&gt;withAttribute('flash', new Messages()), $response ); }; } } Now, let's register it with our middleware pipeline. In config/autoload/middleware-pipeline.global.php , make the following additions: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ 'App\\SlimFlashMiddleware' =&gt; App\\SlimFlashMiddlewareFactory::class, /* ... */ ], /* ... */ ], 'middleware_pipeline' =&gt; [ 'always' =&gt; [ 'middleware' =&gt; [ 'App\\SlimFlashMiddleware', /* ... */ ], 'priority' =&gt; 10000, ], /* ... */ ], ];","title":"slim/flash"},{"location":"v1/cookbook/flash-messengers/#damessexpressive-session-middleware-and-aurasession","text":"damess/mezzio-session-middleware provides middleware for initializing an Aura.Session instance; Aura.Session provides flash messaging capabilities as part of its featureset. Install it via Composer: $ composer require damess/mezzio-session-middleware In config/autoload/dependencies.global.php , add an entry for Aura.Session: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ Aura\\Session\\Session::class =&gt; DaMess\\Factory\\AuraSessionFactory::class, /* ... */ ], /* ... */ ], ]; In config/autoload/middleware-pipeline.global.php , add a factory entry for the damess/mezzio-session-middleware , and add it to the middleware pipeline: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ DaMess\\Http\\SessionMiddleware::class =&gt; DaMess\\Factory\\SessionMiddlewareFactory::class, /* ... */ ], /* ... */ ], 'middleware_pipeline' =&gt; [ 'always' =&gt; [ 'middleware' =&gt; [ DaMess\\Http\\SessionMiddleware::class, /* ... */ ], 'priority' =&gt; 10000, ], /* ... */ ], ];","title":"damess/expressive-session-middleware and Aura.Session"},{"location":"v1/cookbook/modular-layout/","text":"How can I make my application modular? Laminas applications have a concept of modules, independent units that can provide configuration, services, and hooks into its MVC lifecycle. This functionality is provided by laminas-modulemanager. While laminas-modulemanager could be used with Mezzio, we suggest another approach: modules that are based only on configuration. This powerful approach doesn't affect performance, and offers extensive flexibility: each module can provide its own services (with factories), default configuration, and routes. This cookbook will show how to organize modules using mtymek/mezzio-config-manager , a lightweight library that aggregates and merges configuration, optionally caching it. Install the configuration manager The configuration manager is available in Packagist: $ composer require mtymek/mezzio-config-manager Generate your config The default Mezzio skeleton installs a config/config.php file, which aggregates all configuration. When using the configuration manager, you will need to replace the contents of that file with the following code: &lt;?php use Mezzio\\ConfigManager\\ConfigManager; use Mezzio\\ConfigManager\\PhpFileProvider; $configManager = new ConfigManager([ new PhpFileProvider('config/autoload/{{,*.}global,{,*.}local}.php'), ]); return new ArrayObject($configManager-&gt;getMergedConfig()); If you open your application in a browser, it should still work in exactly the same way as it was before. Now you can start adding your modules. First module ConfigManager does not force you to use any particular structure for your module; its only requirement is to expose default configuration using a \"config provider\", which is simply an invokable class that returns a configuration array. For instance, this is how your module could provide its own routes: namespace MyModule; class ModuleConfig { public function __invoke() { return [ 'routes' =&gt; [ [ 'name' =&gt; 'api.list-transactions', 'path' =&gt; '/api/transactions', 'middleware' =&gt; App\\Action\\ListTransactionsAction::class, 'allowed_methods' =&gt; ['GET'], ], [ 'name' =&gt; 'api.refund-transaction', 'path' =&gt; '/api/refund', 'middleware' =&gt; App\\Action\\RefundAction::class, 'allowed_methods' =&gt; ['POST'], ], ], ]; } } Enabling the module Finally, you can enable your module by adding a reference to your config class within the arguments of the ConfigManager constructor in the config/config.php file: $configManager = new ConfigManager([ MyModule\\ModuleConfig::class, new PhpFileProvider('config/autoload/{{,*.}global,{,*.}local}.php'), ]); Caching configuration In order to provide configuration caching, two things must occur: First, you must define a config_cache_enabled key in your configuration somewhere. Second, you must pass a second argument to the ConfigManager , the location of the cache file to use. The config_cache_enabled key can be defined in any of your configuration providers, including the autoloaded configuration files. We recommend defining them in two locations: config/autoload/global.php should define the value to true , as the production setting. config/autoload/local.php should also define the setting, and use a value appropriate to the current environment. In development, for instance, this would be false . // config/autoload/global.php return [ 'config_cache_enabled' =&gt; true, /* ... */ ]; // config/autoload/local.php return [ 'config_cache_enabled' =&gt; false, // &lt;- development! /* ... */ ]; You would then alter your config/config.php file to add the second argument. The following example builds on the previous, and demonstrates having the AppConfig entry enabled. The configuration will be cached to data/config-cache.php in the application root: $configManager = new ConfigManager([ App\\AppConfig::class, new PhpFileProvider('config/autoload/{{,*.}global,{,*.}local}.php'), ], 'data/config-cache.php'); When the configuration cache path is present, if the config_cache_enabled flag is enabled, then configuration will be read from the cached configuration, instead of parsing and merging the various configuration sources. Final notes This approach may look simple, but it is flexible and powerful: You pass a list of config providers to the ConfigManager constructor. Configuration is merged in the same order as it is passed, with later entries having precedence. You can override module configuration using *.global.php and *.local.php files. If cached config is found, ConfigManager does not iterate over provider list. For more details, please refer to the Config Manager Documentation .","title":"Building modular applications"},{"location":"v1/cookbook/modular-layout/#how-can-i-make-my-application-modular","text":"Laminas applications have a concept of modules, independent units that can provide configuration, services, and hooks into its MVC lifecycle. This functionality is provided by laminas-modulemanager. While laminas-modulemanager could be used with Mezzio, we suggest another approach: modules that are based only on configuration. This powerful approach doesn't affect performance, and offers extensive flexibility: each module can provide its own services (with factories), default configuration, and routes. This cookbook will show how to organize modules using mtymek/mezzio-config-manager , a lightweight library that aggregates and merges configuration, optionally caching it.","title":"How can I make my application modular?"},{"location":"v1/cookbook/modular-layout/#install-the-configuration-manager","text":"The configuration manager is available in Packagist: $ composer require mtymek/mezzio-config-manager","title":"Install the configuration manager"},{"location":"v1/cookbook/modular-layout/#generate-your-config","text":"The default Mezzio skeleton installs a config/config.php file, which aggregates all configuration. When using the configuration manager, you will need to replace the contents of that file with the following code: &lt;?php use Mezzio\\ConfigManager\\ConfigManager; use Mezzio\\ConfigManager\\PhpFileProvider; $configManager = new ConfigManager([ new PhpFileProvider('config/autoload/{{,*.}global,{,*.}local}.php'), ]); return new ArrayObject($configManager-&gt;getMergedConfig()); If you open your application in a browser, it should still work in exactly the same way as it was before. Now you can start adding your modules.","title":"Generate your config"},{"location":"v1/cookbook/modular-layout/#first-module","text":"ConfigManager does not force you to use any particular structure for your module; its only requirement is to expose default configuration using a \"config provider\", which is simply an invokable class that returns a configuration array. For instance, this is how your module could provide its own routes: namespace MyModule; class ModuleConfig { public function __invoke() { return [ 'routes' =&gt; [ [ 'name' =&gt; 'api.list-transactions', 'path' =&gt; '/api/transactions', 'middleware' =&gt; App\\Action\\ListTransactionsAction::class, 'allowed_methods' =&gt; ['GET'], ], [ 'name' =&gt; 'api.refund-transaction', 'path' =&gt; '/api/refund', 'middleware' =&gt; App\\Action\\RefundAction::class, 'allowed_methods' =&gt; ['POST'], ], ], ]; } }","title":"First module"},{"location":"v1/cookbook/modular-layout/#enabling-the-module","text":"Finally, you can enable your module by adding a reference to your config class within the arguments of the ConfigManager constructor in the config/config.php file: $configManager = new ConfigManager([ MyModule\\ModuleConfig::class, new PhpFileProvider('config/autoload/{{,*.}global,{,*.}local}.php'), ]);","title":"Enabling the module"},{"location":"v1/cookbook/modular-layout/#caching-configuration","text":"In order to provide configuration caching, two things must occur: First, you must define a config_cache_enabled key in your configuration somewhere. Second, you must pass a second argument to the ConfigManager , the location of the cache file to use. The config_cache_enabled key can be defined in any of your configuration providers, including the autoloaded configuration files. We recommend defining them in two locations: config/autoload/global.php should define the value to true , as the production setting. config/autoload/local.php should also define the setting, and use a value appropriate to the current environment. In development, for instance, this would be false . // config/autoload/global.php return [ 'config_cache_enabled' =&gt; true, /* ... */ ]; // config/autoload/local.php return [ 'config_cache_enabled' =&gt; false, // &lt;- development! /* ... */ ]; You would then alter your config/config.php file to add the second argument. The following example builds on the previous, and demonstrates having the AppConfig entry enabled. The configuration will be cached to data/config-cache.php in the application root: $configManager = new ConfigManager([ App\\AppConfig::class, new PhpFileProvider('config/autoload/{{,*.}global,{,*.}local}.php'), ], 'data/config-cache.php'); When the configuration cache path is present, if the config_cache_enabled flag is enabled, then configuration will be read from the cached configuration, instead of parsing and merging the various configuration sources.","title":"Caching configuration"},{"location":"v1/cookbook/modular-layout/#final-notes","text":"This approach may look simple, but it is flexible and powerful: You pass a list of config providers to the ConfigManager constructor. Configuration is merged in the same order as it is passed, with later entries having precedence. You can override module configuration using *.global.php and *.local.php files. If cached config is found, ConfigManager does not iterate over provider list. For more details, please refer to the Config Manager Documentation .","title":"Final notes"},{"location":"v1/cookbook/route-specific-pipeline/","text":"How can I specify a route-specific middleware pipeline? Sometimes you may want to use a middleware pipeline only if a particular route is matched. As an example, for an API resource, you might want to: check for authentication credentials check for authorization for the selected action parse the incoming body validate the parsed body parameters before you actually execute the selected middleware. The above might each be encapsulated as discrete middleware, but should be executed within the routed middleware's context. You can accomplish this in one of two ways: Have your middleware service resolve to a MiddlewarePipe instance that composes the various middlewares. Specify an array of middlewares (either as actual instances, or as container service names); this effectively creates and returns a MiddlewarePipe . Resolving to a MiddlewarePipe You can do this programmatically within a container factory, assuming you are using a container that supports factories. use Interop\\Container\\ContainerInterface; use Laminas\\Stratigility\\MiddlewarePipe; class ApiResourcePipelineFactory { public function __invoke(ContainerInterface $container) { $pipeline = new MiddlewarePipe(); // These correspond to the bullet points above $pipeline-&gt;pipe($container-&gt;get('AuthenticationMiddleware')); $pipeline-&gt;pipe($container-&gt;get('AuthorizationMiddleware')); $pipeline-&gt;pipe($container-&gt;get('BodyParsingMiddleware')); $pipeline-&gt;pipe($container-&gt;get('ValidationMiddleware')); // This is the actual middleware you're routing to. $pipeline-&gt;pipe($container-&gt;get('ApiResource')); return $pipeline; } } This gives you full control over the creation of the pipeline. You would, however, need to ensure that you map the middleware to the pipeline factory when setting up your container configuration. One alternative when using laminas-servicemanager is to use a delegator factory . Delegator factories allow you to decorate the primary factory used to create the middleware in order to change the instance or return an alternate instance. In this case, we'd do the latter. The following is an example: use Interop\\Container\\ContainerInterface; use Laminas\\ServiceManager\\DelegatorFactoryInterface; use Laminas\\ServiceManager\\ServiceLocatorInterface; use Laminas\\Stratigility\\MiddlewarePipe; class ApiResourcePipelineDelegatorFactory implements DelegatorFactoryInterface { /** * laminas-servicemanager v3 support */ public function __invoke( ContainerInterface $container, $name, callable $callback, array $options = null ) { $pipeline = new MiddlewarePipe(); // These correspond to the bullet points above $pipeline-&gt;pipe($container-&gt;get('AuthenticationMiddleware')); $pipeline-&gt;pipe($container-&gt;get('AuthorizationMiddleware')); $pipeline-&gt;pipe($container-&gt;get('BodyParsingMiddleware')); $pipeline-&gt;pipe($container-&gt;get('ValidationMiddleware')); // This is the actual middleware you're routing to. $pipeline-&gt;pipe($callback()); return $pipeline; } /** * laminas-servicemanager v2 support */ public function createDelegatorWithName( ServiceLocatorInterface $container, $name, $requestedName, $callback ) { return $this($container, $name, $callback); } } When configuring the container, you'd do something like the following: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ 'AuthenticationMiddleware' =&gt; '...', 'AuthorizationMiddleware' =&gt; '...', 'BodyParsingMiddleware' =&gt; '...', 'ValidationMiddleware' =&gt; '...', 'ApiResourceMiddleware' =&gt; '...', ], 'delegators' =&gt; [ 'ApiResourceMiddleware' =&gt; [ 'ApiResourcePipelineDelegatorFactory', ], ], ], ]; This approach allows you to cleanly separate the factory for your middleware from the pipeline you want to compose it in, and allows you to re-use the pipeline creation across multiple middleware if desired. Middleware Arrays If you'd rather not create a factory for each such middleware, the other option is to use arrays of middlewares in your configuration or when routing manually. Via configuration looks like this: return [ 'routes' =&gt; [ [ 'name' =&gt; 'api-resource', 'path' =&gt; '/api/resource[/{id:[a-f0-9]{32}}]', 'allowed_methods' =&gt; ['GET', 'POST', 'PATCH', 'DELETE'], 'middleware' =&gt; [ 'AuthenticationMiddleware', 'AuthorizationMiddleware', 'BodyParsingMiddleware', 'ValidationMiddleware', 'ApiResourceMiddleware', ], ], ], ]; Manual routing looks like this: $app-&gt;route('/api/resource[/{id:[a-f0-9]{32}}]', [ 'AuthenticationMiddleware', 'AuthorizationMiddleware', 'BodyParsingMiddleware', 'ValidationMiddleware', 'ApiResourceMiddleware', ], ['GET', 'POST', 'PATCH', 'DELETE'], 'api-resource'); When either of these approaches are used, the individual middleware listed MUST be one of the following: a callable middleware; a service name of middleware available in the container; a fully qualified class name of a directly instantiable (no constructor arguments) middleware class. This approach is essentially equivalent to creating a factory that returns a middleware pipeline. What about pipeline middleware configuration? What if you want to do this with your pipeline middleware configuration? The answer is that the syntax is exactly the same! return [ 'middleware_pipeline' =&gt; [ 'api' =&gt; [ 'path' =&gt; '/api', 'middleware' =&gt; [ 'AuthenticationMiddleware', 'AuthorizationMiddleware', 'BodyParsingMiddleware', 'ValidationMiddleware', ], 'priority' =&gt; 100, ], ], ];","title":"Route-specific middleware pipelines"},{"location":"v1/cookbook/route-specific-pipeline/#how-can-i-specify-a-route-specific-middleware-pipeline","text":"Sometimes you may want to use a middleware pipeline only if a particular route is matched. As an example, for an API resource, you might want to: check for authentication credentials check for authorization for the selected action parse the incoming body validate the parsed body parameters before you actually execute the selected middleware. The above might each be encapsulated as discrete middleware, but should be executed within the routed middleware's context. You can accomplish this in one of two ways: Have your middleware service resolve to a MiddlewarePipe instance that composes the various middlewares. Specify an array of middlewares (either as actual instances, or as container service names); this effectively creates and returns a MiddlewarePipe .","title":"How can I specify a route-specific middleware pipeline?"},{"location":"v1/cookbook/route-specific-pipeline/#resolving-to-a-middlewarepipe","text":"You can do this programmatically within a container factory, assuming you are using a container that supports factories. use Interop\\Container\\ContainerInterface; use Laminas\\Stratigility\\MiddlewarePipe; class ApiResourcePipelineFactory { public function __invoke(ContainerInterface $container) { $pipeline = new MiddlewarePipe(); // These correspond to the bullet points above $pipeline-&gt;pipe($container-&gt;get('AuthenticationMiddleware')); $pipeline-&gt;pipe($container-&gt;get('AuthorizationMiddleware')); $pipeline-&gt;pipe($container-&gt;get('BodyParsingMiddleware')); $pipeline-&gt;pipe($container-&gt;get('ValidationMiddleware')); // This is the actual middleware you're routing to. $pipeline-&gt;pipe($container-&gt;get('ApiResource')); return $pipeline; } } This gives you full control over the creation of the pipeline. You would, however, need to ensure that you map the middleware to the pipeline factory when setting up your container configuration. One alternative when using laminas-servicemanager is to use a delegator factory . Delegator factories allow you to decorate the primary factory used to create the middleware in order to change the instance or return an alternate instance. In this case, we'd do the latter. The following is an example: use Interop\\Container\\ContainerInterface; use Laminas\\ServiceManager\\DelegatorFactoryInterface; use Laminas\\ServiceManager\\ServiceLocatorInterface; use Laminas\\Stratigility\\MiddlewarePipe; class ApiResourcePipelineDelegatorFactory implements DelegatorFactoryInterface { /** * laminas-servicemanager v3 support */ public function __invoke( ContainerInterface $container, $name, callable $callback, array $options = null ) { $pipeline = new MiddlewarePipe(); // These correspond to the bullet points above $pipeline-&gt;pipe($container-&gt;get('AuthenticationMiddleware')); $pipeline-&gt;pipe($container-&gt;get('AuthorizationMiddleware')); $pipeline-&gt;pipe($container-&gt;get('BodyParsingMiddleware')); $pipeline-&gt;pipe($container-&gt;get('ValidationMiddleware')); // This is the actual middleware you're routing to. $pipeline-&gt;pipe($callback()); return $pipeline; } /** * laminas-servicemanager v2 support */ public function createDelegatorWithName( ServiceLocatorInterface $container, $name, $requestedName, $callback ) { return $this($container, $name, $callback); } } When configuring the container, you'd do something like the following: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ 'AuthenticationMiddleware' =&gt; '...', 'AuthorizationMiddleware' =&gt; '...', 'BodyParsingMiddleware' =&gt; '...', 'ValidationMiddleware' =&gt; '...', 'ApiResourceMiddleware' =&gt; '...', ], 'delegators' =&gt; [ 'ApiResourceMiddleware' =&gt; [ 'ApiResourcePipelineDelegatorFactory', ], ], ], ]; This approach allows you to cleanly separate the factory for your middleware from the pipeline you want to compose it in, and allows you to re-use the pipeline creation across multiple middleware if desired.","title":"Resolving to a MiddlewarePipe"},{"location":"v1/cookbook/route-specific-pipeline/#middleware-arrays","text":"If you'd rather not create a factory for each such middleware, the other option is to use arrays of middlewares in your configuration or when routing manually. Via configuration looks like this: return [ 'routes' =&gt; [ [ 'name' =&gt; 'api-resource', 'path' =&gt; '/api/resource[/{id:[a-f0-9]{32}}]', 'allowed_methods' =&gt; ['GET', 'POST', 'PATCH', 'DELETE'], 'middleware' =&gt; [ 'AuthenticationMiddleware', 'AuthorizationMiddleware', 'BodyParsingMiddleware', 'ValidationMiddleware', 'ApiResourceMiddleware', ], ], ], ]; Manual routing looks like this: $app-&gt;route('/api/resource[/{id:[a-f0-9]{32}}]', [ 'AuthenticationMiddleware', 'AuthorizationMiddleware', 'BodyParsingMiddleware', 'ValidationMiddleware', 'ApiResourceMiddleware', ], ['GET', 'POST', 'PATCH', 'DELETE'], 'api-resource'); When either of these approaches are used, the individual middleware listed MUST be one of the following: a callable middleware; a service name of middleware available in the container; a fully qualified class name of a directly instantiable (no constructor arguments) middleware class. This approach is essentially equivalent to creating a factory that returns a middleware pipeline.","title":"Middleware Arrays"},{"location":"v1/cookbook/route-specific-pipeline/#what-about-pipeline-middleware-configuration","text":"What if you want to do this with your pipeline middleware configuration? The answer is that the syntax is exactly the same! return [ 'middleware_pipeline' =&gt; [ 'api' =&gt; [ 'path' =&gt; '/api', 'middleware' =&gt; [ 'AuthenticationMiddleware', 'AuthorizationMiddleware', 'BodyParsingMiddleware', 'ValidationMiddleware', ], 'priority' =&gt; 100, ], ], ];","title":"What about pipeline middleware configuration?"},{"location":"v1/cookbook/setting-locale-depending-routing-parameter/","text":"How can I set up the locale depending on a routing parameter? Localized web applications often set the locale (and therefor the language) based on a routing parameter, the session, or a specialized sub-domain. In this recipe we will concentrate on using a routing parameter. Routing parameters Using the approach in this chapter requires that you add a /:locale (or similar) segment to each and every route that can be localized, and, depending on the router used, may also require additional options for specifying constraints. If the majority of your routes are localized, this will become tedious quickly. In such a case, you may want to look at the related recipe on setting the locale without routing parameters . Setting up the route If you want to set the locale depending on a routing parameter, you first have to add a locale parameter to each route that requires localization. In this example we use the locale parameter, which should consist of two lowercase alphabetical characters: return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ Mezzio\\Router\\RouterInterface::class =&gt; Mezzio\\Router\\LaminasRouter::class, ], 'factories' =&gt; [ Application\\Action\\HomePageAction::class =&gt; Application\\Action\\HomePageFactory::class, Application\\Action\\ContactPageAction::class =&gt; Application\\Action\\ContactPageFactory::class, ], ], 'routes' =&gt; [ [ 'name' =&gt; 'home', 'path' =&gt; '/:locale', 'middleware' =&gt; Application\\Action\\HomePageAction::class, 'allowed_methods' =&gt; ['GET'], 'options' =&gt; [ 'constraints' =&gt; [ 'locale' =&gt; '[a-z]{2,3}([-_][a-zA-Z]{2}|)', ], ], ], [ 'name' =&gt; 'contact', 'path' =&gt; '/:locale/contact', 'middleware' =&gt; Application\\Action\\ContactPageAction::class, 'allowed_methods' =&gt; ['GET'], 'options' =&gt; [ 'constraints' =&gt; [ 'locale' =&gt; '[a-z]{2,3}([-_][a-zA-Z]{2}|)', ], ], ], ], ]; Note: Routing may differ based on router The routing examples in this recipe use syntax for the laminas-mvc router, and, as such, may not work in your application. For Aura.Router, the 'home' route as listed above would read: [ 'name' =&gt; 'home', 'path' =&gt; '/{locale}', 'middleware' =&gt; Application\\Action\\HomePageAction::class, 'allowed_methods' =&gt; ['GET'], 'options' =&gt; [ 'constraints' =&gt; [ 'tokens' =&gt; [ 'locale' =&gt; '[a-z]{2,3}([-_][a-zA-Z]{2}|)', ], ], ], ] For FastRoute: [ 'name' =&gt; 'home', 'path' =&gt; '/{locale:[a-z]{2,3}([-_][a-zA-Z]{2}|)}', 'middleware' =&gt; Application\\Action\\HomePageAction::class, 'allowed_methods' =&gt; ['GET'], ] As such, be aware as you read the examples that you might not be able to simply cut-and-paste them without modification. Create a route result middleware class for localization To make sure that you can set up the locale after the routing has been processed, you need to implement localization middleware that acts on the route result, and registered in the pipeline immediately following the routing middleware. Such a LocalizationMiddleware class could look similar to this: &lt;?php namespace Application\\I18n; use Locale; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; class LocalizationMiddleware { const LOCALIZATION_ATTRIBUTE = 'locale'; public function __invoke(ServerRequestInterface $request, ResponseInterface $response, callable $next = null) { // Get locale from route, fallback to the user's browser preference $locale = $request-&gt;getAttribute( 'locale', Locale::acceptFromHttp( isset($request-&gt;getServerParams()['HTTP_ACCEPT_LANGUAGE']) ? $request-&gt;getServerParams()['HTTP_ACCEPT_LANGUAGE'] : 'en_US' ) ); // Store the locale as a request attribute return $next($request-&gt;withAttribute(self::LOCALIZATION_ATTRIBUTE, $locale), $response); } } Locale::setDefault is unsafe Do not use Locale::setDefault($locale) to set a global static locale. PSR-7 apps may run in async processes, which could lead to another process overwriting the value, and thus lead to unexpected results for your users. Use a request parameter as detailed above instead, as the request is created specific to each process. In your config/autoload/middleware-pipeline.global.php , you'd register the dependency, and inject the middleware into the pipeline following the routing middleware: return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ LocalizationMiddleware::class =&gt; LocalizationMiddleware::class, /* ... */ ], /* ... */ ], 'middleware_pipeline' =&gt; [ /* ... */ [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Helper\\UrlHelperMiddleware::class, LocalizationMiddleware::class, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], /* ... */ ], ];","title":"Setting a locale based on a routing parameter"},{"location":"v1/cookbook/setting-locale-depending-routing-parameter/#how-can-i-set-up-the-locale-depending-on-a-routing-parameter","text":"Localized web applications often set the locale (and therefor the language) based on a routing parameter, the session, or a specialized sub-domain. In this recipe we will concentrate on using a routing parameter.","title":"How can I set up the locale depending on a routing parameter?"},{"location":"v1/cookbook/setting-locale-depending-routing-parameter/#setting-up-the-route","text":"If you want to set the locale depending on a routing parameter, you first have to add a locale parameter to each route that requires localization. In this example we use the locale parameter, which should consist of two lowercase alphabetical characters: return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ Mezzio\\Router\\RouterInterface::class =&gt; Mezzio\\Router\\LaminasRouter::class, ], 'factories' =&gt; [ Application\\Action\\HomePageAction::class =&gt; Application\\Action\\HomePageFactory::class, Application\\Action\\ContactPageAction::class =&gt; Application\\Action\\ContactPageFactory::class, ], ], 'routes' =&gt; [ [ 'name' =&gt; 'home', 'path' =&gt; '/:locale', 'middleware' =&gt; Application\\Action\\HomePageAction::class, 'allowed_methods' =&gt; ['GET'], 'options' =&gt; [ 'constraints' =&gt; [ 'locale' =&gt; '[a-z]{2,3}([-_][a-zA-Z]{2}|)', ], ], ], [ 'name' =&gt; 'contact', 'path' =&gt; '/:locale/contact', 'middleware' =&gt; Application\\Action\\ContactPageAction::class, 'allowed_methods' =&gt; ['GET'], 'options' =&gt; [ 'constraints' =&gt; [ 'locale' =&gt; '[a-z]{2,3}([-_][a-zA-Z]{2}|)', ], ], ], ], ];","title":"Setting up the route"},{"location":"v1/cookbook/setting-locale-depending-routing-parameter/#create-a-route-result-middleware-class-for-localization","text":"To make sure that you can set up the locale after the routing has been processed, you need to implement localization middleware that acts on the route result, and registered in the pipeline immediately following the routing middleware. Such a LocalizationMiddleware class could look similar to this: &lt;?php namespace Application\\I18n; use Locale; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; class LocalizationMiddleware { const LOCALIZATION_ATTRIBUTE = 'locale'; public function __invoke(ServerRequestInterface $request, ResponseInterface $response, callable $next = null) { // Get locale from route, fallback to the user's browser preference $locale = $request-&gt;getAttribute( 'locale', Locale::acceptFromHttp( isset($request-&gt;getServerParams()['HTTP_ACCEPT_LANGUAGE']) ? $request-&gt;getServerParams()['HTTP_ACCEPT_LANGUAGE'] : 'en_US' ) ); // Store the locale as a request attribute return $next($request-&gt;withAttribute(self::LOCALIZATION_ATTRIBUTE, $locale), $response); } }","title":"Create a route result middleware class for localization"},{"location":"v1/cookbook/setting-locale-without-routing-parameter/","text":"How can I set up the locale without routing parameters? Localized web applications often set the locale (and therefor the language) based on a routing parameter, the session, or a specialized sub-domain. In this recipe we will concentrate on introspecting the URI path via middleware, which allows you to have a global mechanism for detecting the locale without requiring any changes to existing routes. Distinguishing between routes that require localization If your application has a mixture of routes that require localization, and those that do not, the solution in this recipe may lead to multiple URIs that resolve to the identical action, which may be undesirable. In such cases, you may want to prefix the specific routes that require localization with a required routing parameter; this approach is described in the \"Setting a locale based on a routing parameter\" recipe . Set up a middleware to extract the locale from the URI First, we need to set up middleware that extracts the locale param directly from the request URI's path. If it doesn't find one, it sets a default. If it does find one, it uses the value to set up the locale. It also: amends the request with a truncated path (removing the locale segment). adds the locale segment as the base path of the UrlHelper . namespace Application\\I18n; use Locale; use Mezzio\\Helper\\UrlHelper; class SetLocaleMiddleware { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } public function __invoke($request, $response, callable $next) { $uri = $request-&gt;getUri(); $path = $uri-&gt;getPath(); if (! preg_match('#^/(?P&lt;locale&gt;[a-z]{2,3}([-_][a-zA-Z]{2}|))/#', $path, $matches)) { Locale::setDefault('de_DE'); return $next($request, $response); } $locale = $matches['locale']; Locale::setDefault(Locale::canonicalize($locale)); $this-&gt;helper-&gt;setBasePath($locale); return $next( $request-&gt;withUri( $uri-&gt;withPath(substr($path, 3)) ), $response ); } } Then you will need a factory for the SetLocaleMiddleware to inject the UrlHelper instance. namespace Application\\I18n; use Interop\\Container\\ContainerInterface; use Mezzio\\Helper\\UrlHelper; class SetLocaleMiddlewareFactory { public function __invoke(ContainerInterface $container) { return new SetLocaleMiddleware( $container-&gt;get(UrlHelper::class) ); } } Afterwards, you need to configure the SetLocaleMiddleware in your /config/autoload/middleware-pipeline.global.php file so that it is executed on every request. return [ 'dependencies' =&gt; [ /* ... */ 'factories' =&gt; [ Application\\I18n\\SetLocaleMiddleware::class =&gt; Application\\I18n\\SetLocaleMiddlewareFactory::class, /* ... */ ], ], 'middleware_pipeline' =&gt; [ [ 'middleware' =&gt; [ Application\\I18n\\SetLocaleMiddleware::class, /* ... */ ], 'priority' =&gt; 1000, ], /* ... */ 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Mezzio\\Helper\\UrlHelperMiddleware::class, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], /* ... */ ], ]; Url generation in the view Since the UrlHelper has the locale set as a base path, you don't need to worry about generating URLs within your view. Just use the helper to generate a URL and it will do the rest. &lt;?php echo $this-&gt;url('your-route') ?&gt; Helpers differ between template renderers The above example is specific to laminas-view; syntax will differ for Twig and Plates. Redirecting within your middleware If you want to add the locale parameter when creating URIs within your action middleware, you just need to inject the UrlHelper into your middleware and use it for URL generation: namespace Application\\Action; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Laminas\\Diactoros\\Response\\RedirectResponse; use Mezzio\\Helper\\UrlHelper; class RedirectAction { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } /** * @param ServerRequestInterface $request * @param ResponseInterface $response * @param callable|null $next * * @return RedirectResponse */ public function __invoke( ServerRequestInterface $request, ResponseInterface $response, callable $next = null ) { $routeParams = [ /* ... */ ]; return new RedirectResponse( $this-&gt;helper-&gt;generate('your-route', $routeParams) ); } } Injecting the UrlHelper into your middleware will also require that the middleware have a factory that manages the injection. As an example, the following would work for the above middleware: namespace Application\\Action; use Interop\\Container\\ContainerInterface; use Mezzio\\Helper\\UrlHelper; class RedirectActionFactory { public function __invoke(ContainerInterface $container) { return new RedirectAction( $container-&gt;get(UrlHelper::class) ); } }","title":"Setting a locale without a routing parameter"},{"location":"v1/cookbook/setting-locale-without-routing-parameter/#how-can-i-set-up-the-locale-without-routing-parameters","text":"Localized web applications often set the locale (and therefor the language) based on a routing parameter, the session, or a specialized sub-domain. In this recipe we will concentrate on introspecting the URI path via middleware, which allows you to have a global mechanism for detecting the locale without requiring any changes to existing routes.","title":"How can I set up the locale without routing parameters?"},{"location":"v1/cookbook/setting-locale-without-routing-parameter/#set-up-a-middleware-to-extract-the-locale-from-the-uri","text":"First, we need to set up middleware that extracts the locale param directly from the request URI's path. If it doesn't find one, it sets a default. If it does find one, it uses the value to set up the locale. It also: amends the request with a truncated path (removing the locale segment). adds the locale segment as the base path of the UrlHelper . namespace Application\\I18n; use Locale; use Mezzio\\Helper\\UrlHelper; class SetLocaleMiddleware { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } public function __invoke($request, $response, callable $next) { $uri = $request-&gt;getUri(); $path = $uri-&gt;getPath(); if (! preg_match('#^/(?P&lt;locale&gt;[a-z]{2,3}([-_][a-zA-Z]{2}|))/#', $path, $matches)) { Locale::setDefault('de_DE'); return $next($request, $response); } $locale = $matches['locale']; Locale::setDefault(Locale::canonicalize($locale)); $this-&gt;helper-&gt;setBasePath($locale); return $next( $request-&gt;withUri( $uri-&gt;withPath(substr($path, 3)) ), $response ); } } Then you will need a factory for the SetLocaleMiddleware to inject the UrlHelper instance. namespace Application\\I18n; use Interop\\Container\\ContainerInterface; use Mezzio\\Helper\\UrlHelper; class SetLocaleMiddlewareFactory { public function __invoke(ContainerInterface $container) { return new SetLocaleMiddleware( $container-&gt;get(UrlHelper::class) ); } } Afterwards, you need to configure the SetLocaleMiddleware in your /config/autoload/middleware-pipeline.global.php file so that it is executed on every request. return [ 'dependencies' =&gt; [ /* ... */ 'factories' =&gt; [ Application\\I18n\\SetLocaleMiddleware::class =&gt; Application\\I18n\\SetLocaleMiddlewareFactory::class, /* ... */ ], ], 'middleware_pipeline' =&gt; [ [ 'middleware' =&gt; [ Application\\I18n\\SetLocaleMiddleware::class, /* ... */ ], 'priority' =&gt; 1000, ], /* ... */ 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Mezzio\\Helper\\UrlHelperMiddleware::class, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], /* ... */ ], ];","title":"Set up a middleware to extract the locale from the URI"},{"location":"v1/cookbook/setting-locale-without-routing-parameter/#url-generation-in-the-view","text":"Since the UrlHelper has the locale set as a base path, you don't need to worry about generating URLs within your view. Just use the helper to generate a URL and it will do the rest. &lt;?php echo $this-&gt;url('your-route') ?&gt;","title":"Url generation in the view"},{"location":"v1/cookbook/setting-locale-without-routing-parameter/#redirecting-within-your-middleware","text":"If you want to add the locale parameter when creating URIs within your action middleware, you just need to inject the UrlHelper into your middleware and use it for URL generation: namespace Application\\Action; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Laminas\\Diactoros\\Response\\RedirectResponse; use Mezzio\\Helper\\UrlHelper; class RedirectAction { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } /** * @param ServerRequestInterface $request * @param ResponseInterface $response * @param callable|null $next * * @return RedirectResponse */ public function __invoke( ServerRequestInterface $request, ResponseInterface $response, callable $next = null ) { $routeParams = [ /* ... */ ]; return new RedirectResponse( $this-&gt;helper-&gt;generate('your-route', $routeParams) ); } } Injecting the UrlHelper into your middleware will also require that the middleware have a factory that manages the injection. As an example, the following would work for the above middleware: namespace Application\\Action; use Interop\\Container\\ContainerInterface; use Mezzio\\Helper\\UrlHelper; class RedirectActionFactory { public function __invoke(ContainerInterface $container) { return new RedirectAction( $container-&gt;get(UrlHelper::class) ); } }","title":"Redirecting within your middleware"},{"location":"v1/cookbook/using-a-base-path/","text":"How can I tell my application about a base path? In some environments, your application may be running in a subdirectory of your web root. For example: var/ |- www/ | |- wordpress/ | |- mezzio/ | | |- public/ | | | |- index.php where /var/www is the web root, and your Mezzio application is in the mezzio/ subdirectory. How can you make your application work correctly in this environment? .htaccess in the application root If you are using Apache, your first step is to add an .htaccess file to your application root, with directives for rewriting to the public/ directory: RewriteEngine On RewriteRule (.*) ./public/$1 Using other web servers If you are using a web-server other than Apache, and know how to do a similar rewrite, we'd love to know! Please submit ideas/instructions to our issue tracker ! Use middleware to rewrite the path The above step ensures that clients can hit the website. Now we need to ensure that the application can route to middleware! To do this, we will add pipeline middleware to intercept the request, and rewrite the URL accordingly. At the time of writing, we have two suggestions: los/basepath provides the basic mechanics of rewriting the URL, and has a stable release. mtymek/blast-base-url provides the URL rewriting mechanics, as well as utilities for generating URIs that retain the base path, but does not have a stable release yet. los/basepath To use los/basepath , install it via Composer, copy the configuration files to your application, and then edit the configuration. To install and copy the configuration: $ composer require los/basepath $ cp vendor/los/basepath/config/los-basepath.global.php.dist config/autoload/los-basepath.global.php We recommend copying the global configuration to a local configuration file as well; this allows you to have the production settings in your global configuration, and development settings in a local configuration (which is excluded from git by default): $ cp config/autoload/los-basepath.global.php config/autoload/los-basepath.local.php Then edit one or both, to change the los_basepath settings: return [ 'los_basepath' =&gt; '&lt;base path here&gt;', /* ... */ ]; The base path should be the portion of the web root leading up to the index.php of your application. In the above example, this would be /mezzio . mtymek/blast-base-url To use mtymek/blast-base-url , install it via Composer, and register some configuration. To install it: $ composer require mtymek/blast-base-url To configure it, update the file config/autoload/middleware-pipeline.global.php , with the following contents: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ Blast\\BaseUrl\\BaseUrlMiddleware::class =&gt; Blast\\BaseUrl\\BaseUrlMiddlewareFactory::class, /* ... */ ], /* ... */ ], 'middleware_pipeline' =&gt; [ [ 'middleware' =&gt; [ Blast\\BaseUrl\\BaseUrlMiddleware::class ], 'priority' =&gt; 1000 ], /* ... */ 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Mezzio\\Helper\\UrlHelperMiddleware::class, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], /* ... */ ], ]; At this point, the middleware will take care of the rewriting for you. No configuration is necessary, as it does auto-detection of the base path based on the request URI and the operating system path to the application. The primary advantage of mtymek/blast-base-url is in its additional features: it injects Mezzio\\Helper\\UrlHelper with the base path, allowing you to create relative route-based URLs. it provides a new helper, Blast\\BaseUrl\\BasePathHelper , which allows you to create URLs relative to the base path; this is particularly useful for assets. To enable these features, we'll add some configuration to config/autoload/dependencies.global.php file: return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ Blast\\BaseUrl\\BasePathHelper::class =&gt; Blast\\BaseUrl\\BasePathHelper::class, /* ... */ ], ], ]; Finally, if you're using laminas-view, you can register a new \"basePath\" helper in your config/autoload/templates.global.php : return [ /* ... */ 'view_helpers' =&gt; [ 'factories' =&gt; [ 'basePath' =&gt; Blast\\BaseUrl\\BasePathViewHelperFactory::class, /* ... */ ], /* ... */ ], ]; Usage of the BasePath helper is as follows: // where $basePathHelper is an instance of Blast\\BaseUrl\\BasePathHelper // as pulled from your container: echo $basePathHelper('/icons/favicon.ico'); // or, from laminas-view's PhpRenderer: echo $this-&gt;basePath('/icons/favicon.ico');","title":"Using Mezzio from a subdirectory"},{"location":"v1/cookbook/using-a-base-path/#how-can-i-tell-my-application-about-a-base-path","text":"In some environments, your application may be running in a subdirectory of your web root. For example: var/ |- www/ | |- wordpress/ | |- mezzio/ | | |- public/ | | | |- index.php where /var/www is the web root, and your Mezzio application is in the mezzio/ subdirectory. How can you make your application work correctly in this environment?","title":"How can I tell my application about a base path?"},{"location":"v1/cookbook/using-a-base-path/#htaccess-in-the-application-root","text":"If you are using Apache, your first step is to add an .htaccess file to your application root, with directives for rewriting to the public/ directory: RewriteEngine On RewriteRule (.*) ./public/$1","title":".htaccess in the application root"},{"location":"v1/cookbook/using-a-base-path/#use-middleware-to-rewrite-the-path","text":"The above step ensures that clients can hit the website. Now we need to ensure that the application can route to middleware! To do this, we will add pipeline middleware to intercept the request, and rewrite the URL accordingly. At the time of writing, we have two suggestions: los/basepath provides the basic mechanics of rewriting the URL, and has a stable release. mtymek/blast-base-url provides the URL rewriting mechanics, as well as utilities for generating URIs that retain the base path, but does not have a stable release yet.","title":"Use middleware to rewrite the path"},{"location":"v1/cookbook/using-custom-view-helpers/","text":"How do you register custom view helpers when using laminas-view? If you've selected laminas-view as your preferred template renderer, you may want to define and use custom view helpers. How can you use them? Assuming you've used the Mezzio skeleton to start your application, you will already have a factory defined for Laminas\\View\\HelperPluginManager , and it will be injected into the PhpRenderer instance used. Since the HelperPluginManager is available, we can configure it. Open the file config/autoload/templates.global.php . In that file, you'll see three top-level keys: return [ 'dependencies' =&gt; [ /* ... */ ], 'templates' =&gt; [ /* ... */ ], 'view_helpers' =&gt; [ /* ... */ ], ]; The last is the one you want. In this, you can define service mappings, including aliases, invokables, factories, and abstract factories to define how helpers are named and created. See the laminas-view custom helpers documentation for information on how to populate this configuration.","title":"Registering custom view helpers when using laminas-view"},{"location":"v1/cookbook/using-custom-view-helpers/#how-do-you-register-custom-view-helpers-when-using-laminas-view","text":"If you've selected laminas-view as your preferred template renderer, you may want to define and use custom view helpers. How can you use them? Assuming you've used the Mezzio skeleton to start your application, you will already have a factory defined for Laminas\\View\\HelperPluginManager , and it will be injected into the PhpRenderer instance used. Since the HelperPluginManager is available, we can configure it. Open the file config/autoload/templates.global.php . In that file, you'll see three top-level keys: return [ 'dependencies' =&gt; [ /* ... */ ], 'templates' =&gt; [ /* ... */ ], 'view_helpers' =&gt; [ /* ... */ ], ]; The last is the one you want. In this, you can define service mappings, including aliases, invokables, factories, and abstract factories to define how helpers are named and created. See the laminas-view custom helpers documentation for information on how to populate this configuration.","title":"How do you register custom view helpers when using laminas-view?"},{"location":"v1/cookbook/using-laminas-form-view-helpers/","text":"How can I use laminas-form view helpers? If you've selected laminas-view as your preferred template renderer, you'll likely want to use the various view helpers available in other components, such as: laminas-form laminas-i18n laminas-navigation By default, only the view helpers directly available in laminas-view are available; how can you add the others? To add the laminas-form view helpers create a file config/autoload/laminas-form.global.php with the contents: &lt;?php use Laminas\\Form\\ConfigProvider; $provider = new ConfigProvider(); return $provider(); and that will essentially do everything needed. If you installed Mezzio via the skeleton, the service Laminas\\View\\HelperPluginManager is registered for you, and represents the helper plugin manager injected into the PhpRenderer instance. As such, you only need to configure this. The question is: where? You have three options: Replace the HelperPluginManager factory with your own; or Add a delegator factory to or extend the HelperPluginManager service to inject the additional helper configuration; or Add pipeline middleware that composes the HelperPluginManager and configures it. Replacing the HelperPluginManager factory The laminas-view integration provides Mezzio\\LaminasView\\HelperPluginManagerFactory , and the Mezzio skeleton registers it be default. The simplest solution for adding other helpers is to replace it with your own. In your own factory, you will also configure the plugin manager with the configuration from the laminas-form component (or whichever other components you wish to use). namespace Your\\Application; use Interop\\Container\\ContainerInterface; use Laminas\\ServiceManager\\Config; use Laminas\\View\\HelperPluginManager; class HelperPluginManagerFactory { public function __invoke(ContainerInterface $container) { $manager = new HelperPluginManager($container); $config = $container-&gt;has('config') ? $container-&gt;get('config') : []; $config = isset($config['view_helpers']) ? $config['view_helpers'] : []; (new Config($config))-&gt;configureServiceManager($manager); return $manager; } } In your config/autoload/templates.global.php file, change the line that reads: Laminas\\View\\HelperPluginManager::class =&gt; Mezzio\\LaminasView\\HelperPluginManagerFactory::class, to instead read as: Laminas\\View\\HelperPluginManager::class =&gt; Your\\Application\\HelperPluginManagerFactory::class, This approach will work for any of the various containers supported. Delegator factories/service extension Delegator factories and service extension operate on the same principle: they intercept after the original factory was called, and then operate on the generated instance, either modifying or replacing it. We'll demonstrate this for laminas-servicemanager and Pimple; at the time of writing, we're unaware of a mechanism for doing so in Aura.Di. laminas-servicemanager You'll first need to create a delegator factory: namespace Your\\Application; use Interop\\Container\\ContainerInterface; use Laminas\\ServiceManager\\Config; use Laminas\\ServiceManager\\DelegatorFactoryInterface; use Laminas\\ServiceManager\\ServiceLocatorInterface; class FormHelpersDelegatorFactory { /** * laminas-servicemanager v3 support */ public function __invoke( ContainerInterface $container, $name, callable $callback, array $options = null ) { $helpers = $callback(); $config = $container-&gt;has('config') ? $container-&gt;get('config') : []; $config = new Config($config['view_helpers']); $config-&gt;configureServiceManager($helpers); return $helpers; } /** * laminas-servicemanager v2 support */ public function createDelegatorWithName( ServiceLocatorInterface $container, $name, $requestedName, $callback ) { return $this($container, $name, $callback); } } The above creates an instance of Laminas\\ServiceManager\\Config , uses it to configure the already created Laminas\\View\\HelperPluginManager instance, and then returns the plugin manager instance. From here, you'll add a delegators configuration key in your config/autoload/templates.global.php file: return [ 'dependencies' =&gt; [ 'delegators' =&gt; [ Laminas\\View\\HelperPluginManager::class =&gt; [ Your\\Application\\FormHelpersDelegatorFactory::class, ], ], /* ... */ ], 'templates' =&gt; [ /* ... */ ], 'view_helpers' =&gt; [ /* ... */ ], ]; Note: delegator factories are keyed by the service they modify, and the value is an array of delegator factories, to allow multiple such factories to be in use. Pimple For Pimple, we don't currently support configuration of service extensions, so you'll need to edit the main container configuration file, config/container.php . Place the following anywhere after the factories and invokables are defined: // The following assumes you've added the following import statements to // the start of the file: // use Laminas\\ServiceManager\\Config as ServiceConfig; // use Laminas\\View\\HelperPluginManager; $container[HelperPluginManager::class] = $container-&gt;extend( HelperPluginManager::class, function ($helpers, $container) { $config = isset($container['config']) ? $container['config'] : []; $config = new ServiceConfig($config['view_helpers']); $config-&gt;configureServiceManager($helpers); return $helpers; } ); Pipeline middleware Another option is to use pipeline middleware. This approach will require that the middleware execute on every request, which introduces (very slight) performance overhead. However, it's a portable method that works regardless of the container implementation you choose. First, define the middleware: namespace Your\\Application use Laminas\\Form\\View\\HelperConfig as FormHelperConfig; use Laminas\\View\\HelperPluginManager; class FormHelpersMiddleware { private $helpers; public function __construct(HelperPluginManager $helpers) { $this-&gt;helpers = $helpers; } public function __invoke($request, $response, callable $next) { $config = new FormHelperConfig(); $config-&gt;configureServiceManager($this-&gt;helpers); return $next($request, $response); } } You'll also need a factory for the middleware, to ensure it receives the HelperPluginManager : namespace Your\\Application use Laminas\\View\\HelperPluginManager; class FormHelpersMiddlewareFactory { public function __invoke($container) { return new FormHelpersMiddleware( $container-&gt;get(HelperPluginManager::class) ); } } Now, register these in the file config/autoload/middleware-pipeline.global.php : return [ 'dependencies' =&gt; [ 'factories' =&gt; [ Your\\Application\\FormHelpersMiddleware::class =&gt; Your\\Application\\FormHelpersMiddlewareFactory::class /* ... */ ], /* ... */ ], 'middleware_pipeline' =&gt; [ ['middleware' =&gt; Your\\Application\\FormHelpersMiddleware::class, 'priority' =&gt; 1000], /* ... */ 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Mezzio\\Helper\\UrlHelperMiddleware::class, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], /* ... */ ], ]; At that point, you're all set! Registering more helpers What if you need to register helpers from multiple components? You can do so using the same technique above. Better yet, do them all at once! If you chose to use delegator factories/service extension, do all helper configuration registrations for all components in the same factory. If you chose to use middleware, do all helper configuration registrations for all components in the same middleware.","title":"Using laminas-form view helpers"},{"location":"v1/cookbook/using-laminas-form-view-helpers/#how-can-i-use-laminas-form-view-helpers","text":"If you've selected laminas-view as your preferred template renderer, you'll likely want to use the various view helpers available in other components, such as: laminas-form laminas-i18n laminas-navigation By default, only the view helpers directly available in laminas-view are available; how can you add the others? To add the laminas-form view helpers create a file config/autoload/laminas-form.global.php with the contents: &lt;?php use Laminas\\Form\\ConfigProvider; $provider = new ConfigProvider(); return $provider(); and that will essentially do everything needed. If you installed Mezzio via the skeleton, the service Laminas\\View\\HelperPluginManager is registered for you, and represents the helper plugin manager injected into the PhpRenderer instance. As such, you only need to configure this. The question is: where? You have three options: Replace the HelperPluginManager factory with your own; or Add a delegator factory to or extend the HelperPluginManager service to inject the additional helper configuration; or Add pipeline middleware that composes the HelperPluginManager and configures it.","title":"How can I use laminas-form view helpers?"},{"location":"v1/cookbook/using-laminas-form-view-helpers/#replacing-the-helperpluginmanager-factory","text":"The laminas-view integration provides Mezzio\\LaminasView\\HelperPluginManagerFactory , and the Mezzio skeleton registers it be default. The simplest solution for adding other helpers is to replace it with your own. In your own factory, you will also configure the plugin manager with the configuration from the laminas-form component (or whichever other components you wish to use). namespace Your\\Application; use Interop\\Container\\ContainerInterface; use Laminas\\ServiceManager\\Config; use Laminas\\View\\HelperPluginManager; class HelperPluginManagerFactory { public function __invoke(ContainerInterface $container) { $manager = new HelperPluginManager($container); $config = $container-&gt;has('config') ? $container-&gt;get('config') : []; $config = isset($config['view_helpers']) ? $config['view_helpers'] : []; (new Config($config))-&gt;configureServiceManager($manager); return $manager; } } In your config/autoload/templates.global.php file, change the line that reads: Laminas\\View\\HelperPluginManager::class =&gt; Mezzio\\LaminasView\\HelperPluginManagerFactory::class, to instead read as: Laminas\\View\\HelperPluginManager::class =&gt; Your\\Application\\HelperPluginManagerFactory::class, This approach will work for any of the various containers supported.","title":"Replacing the HelperPluginManager factory"},{"location":"v1/cookbook/using-laminas-form-view-helpers/#delegator-factoriesservice-extension","text":"Delegator factories and service extension operate on the same principle: they intercept after the original factory was called, and then operate on the generated instance, either modifying or replacing it. We'll demonstrate this for laminas-servicemanager and Pimple; at the time of writing, we're unaware of a mechanism for doing so in Aura.Di.","title":"Delegator factories/service extension"},{"location":"v1/cookbook/using-laminas-form-view-helpers/#pipeline-middleware","text":"Another option is to use pipeline middleware. This approach will require that the middleware execute on every request, which introduces (very slight) performance overhead. However, it's a portable method that works regardless of the container implementation you choose. First, define the middleware: namespace Your\\Application use Laminas\\Form\\View\\HelperConfig as FormHelperConfig; use Laminas\\View\\HelperPluginManager; class FormHelpersMiddleware { private $helpers; public function __construct(HelperPluginManager $helpers) { $this-&gt;helpers = $helpers; } public function __invoke($request, $response, callable $next) { $config = new FormHelperConfig(); $config-&gt;configureServiceManager($this-&gt;helpers); return $next($request, $response); } } You'll also need a factory for the middleware, to ensure it receives the HelperPluginManager : namespace Your\\Application use Laminas\\View\\HelperPluginManager; class FormHelpersMiddlewareFactory { public function __invoke($container) { return new FormHelpersMiddleware( $container-&gt;get(HelperPluginManager::class) ); } } Now, register these in the file config/autoload/middleware-pipeline.global.php : return [ 'dependencies' =&gt; [ 'factories' =&gt; [ Your\\Application\\FormHelpersMiddleware::class =&gt; Your\\Application\\FormHelpersMiddlewareFactory::class /* ... */ ], /* ... */ ], 'middleware_pipeline' =&gt; [ ['middleware' =&gt; Your\\Application\\FormHelpersMiddleware::class, 'priority' =&gt; 1000], /* ... */ 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Mezzio\\Helper\\UrlHelperMiddleware::class, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], /* ... */ ], ]; At that point, you're all set!","title":"Pipeline middleware"},{"location":"v1/cookbook/using-laminas-form-view-helpers/#registering-more-helpers","text":"What if you need to register helpers from multiple components? You can do so using the same technique above. Better yet, do them all at once! If you chose to use delegator factories/service extension, do all helper configuration registrations for all components in the same factory. If you chose to use middleware, do all helper configuration registrations for all components in the same middleware.","title":"Registering more helpers"},{"location":"v1/cookbook/using-routed-middleware-class-as-controller/","text":"Handling multiple routes in a single class Typically, in Mezzio, we would define one middleware class per route. For a standard CRUD-style application, however, this leads to multiple related classes: AlbumPageIndex AlbumPageEdit AlbumPageAdd If you are familiar with frameworks that provide controllers capable of handling multiple \"actions\", such as those found in Laminas 1 and 2, Symfony, CodeIgniter, CakePHP, and other popular frameworks, you may want to apply a similar pattern when using Mezzio. In other words, what if we want to use only one middleware class to facilitate all three of the above? In the following example, we'll use an action routing parameter which our middleware class will use in order to determine which internal method to invoke. Consider the following route configuration: return [ /* ... */ 'routes' =&gt; [ /* ... */ [ 'name' =&gt; 'album', 'path' =&gt; '/album[/{action:add|edit}[/{id}]]', 'middleware' =&gt; Album\\Action\\AlbumPage::class, 'allowed_methods' =&gt; ['GET'], ], /* ... */ ], ]; The above defines a route that will match any of the following: /album /album/add /album/edit/3 The action attribute can thus be one of add or edit , and we can optionally also receive an id attribute (in the latter example, it would be 3 ). Routing definitions may vary Depending on the router you chose when starting your project, your routing definition may differ. The above example uses the default FastRoute implementation. We might then implement Album\\Action\\AlbumPage as follows: namespace Album\\Action; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Laminas\\Diactoros\\Response\\HtmlResponse; use Mezzio\\Template\\TemplateRendererInterface; class AlbumPage { private $template; public function __construct(TemplateRendererInterface $template) { $this-&gt;template = $template; } public function __invoke( ServerRequestInterface $request, ResponseInterface $response, callable $next = null ) { switch ($request-&gt;getAttribute('action', 'index')) { case 'index': return $this-&gt;indexAction($request, $response, $next); case 'add': return $this-&gt;addAction($request, $response, $next); case 'edit': return $this-&gt;editAction($request, $response, $next); default: // Invalid; thus, a 404! return $response-&gt;withStatus(404); } } public function indexAction( ServerRequestInterface $request, ResponseInterface $response, callable $next = null ) { return new HtmlResponse($this-&gt;template-&gt;render('album::album-page')); } public function addAction( ServerRequestInterface $request, ResponseInterface $response, callable $next = null ) { return new HtmlResponse($this-&gt;template-&gt;render('album::album-page-add')); } public function editAction( ServerRequestInterface $request, ResponseInterface $response, callable $next = null ) { $id = $request-&gt;getAttribute('id', false); if (! $id) { throw new \\InvalidArgumentException('id parameter must be provided'); } return new HtmlResponse( $this-&gt;template-&gt;render('album::album-page-edit', ['id' =&gt; $id]) ); } } This allows us to have the same dependencies for a set of related actions, and, if desired, even have common internal methods each can utilize. This approach is reasonable, but requires that I create a similar __invoke() implementation every time I want to accomplish a similar workflow. Let's create a generic implementation, via an AbstractPage class: namespace App\\Action; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; abstract class AbstractPage { public function __invoke( ServerRequestInterface $request, ResponseInterface $response, callable $next = null ) { $action = $request-&gt;getAttribute('action', 'index') . 'Action'; if (! method_exists($this, $action)) { return $response-&gt;withStatus(404); } return $this-&gt;$action($request, $response, $next); } } The above abstract class pulls the action attribute on invocation, and concatenates it with the word Action . It then uses this value to determine if a corresponding method exists in the current class, and, if so, calls it with the arguments it received; otherwise, it returns a 404 response. Invoking the error stack Instead of returning a 404 response, you could also invoke $next() with an error: return $next($request, $response, new NotFoundError()); This will then invoke the first error handler middleware capable of handling the error. Our original AlbumPage implementation could then be modified to extend AbstractPage : namespace Album\\Action; use App\\Action\\AbstractPage; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Laminas\\Diactoros\\Response\\HtmlResponse; use Mezzio\\Template\\TemplateRendererInterface; class AlbumPage extends AbstractPage { private $template; public function __construct(TemplateRendererInterface $template) { $this-&gt;template = $template; } public function indexAction( /* ... */ ) { /* ... */ } public function addAction( /* ... */ ) { /* ... */ } public function editAction( /* ... */ ) { /* ... */ } } Or use a trait As an alternative to an abstract class, you could define the __invoke() logic in a trait, which you then compose into your middleware: namespace App\\Action; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; trait ActionBasedInvocation { public function __invoke( ServerRequestInterface $request, ResponseInterface $response, callable $next = null ) { $action = $request-&gt;getAttribute('action', 'index') . 'Action'; if (! method_exists($this, $action)) { return $response-&gt;withStatus(404); } return $this-&gt;$action($request, $response, $next); } } You would then compose it into a class as follows: namespace Album\\Action; use App\\Action\\ActionBasedInvocation; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Laminas\\Diactoros\\Response\\HtmlResponse; use Mezzio\\Template\\TemplateRendererInterface; class AlbumPage { use ActionBasedInvocation; private $template; public function __construct(TemplateRendererInterface $template) { $this-&gt;template = $template; } public function indexAction( /* ... */ ) { /* ... */ } public function addAction( /* ... */ ) { /* ... */ } public function editAction( /* ... */ ) { /* ... */ } }","title":"Handling multiple routes in a single class"},{"location":"v1/cookbook/using-routed-middleware-class-as-controller/#handling-multiple-routes-in-a-single-class","text":"Typically, in Mezzio, we would define one middleware class per route. For a standard CRUD-style application, however, this leads to multiple related classes: AlbumPageIndex AlbumPageEdit AlbumPageAdd If you are familiar with frameworks that provide controllers capable of handling multiple \"actions\", such as those found in Laminas 1 and 2, Symfony, CodeIgniter, CakePHP, and other popular frameworks, you may want to apply a similar pattern when using Mezzio. In other words, what if we want to use only one middleware class to facilitate all three of the above? In the following example, we'll use an action routing parameter which our middleware class will use in order to determine which internal method to invoke. Consider the following route configuration: return [ /* ... */ 'routes' =&gt; [ /* ... */ [ 'name' =&gt; 'album', 'path' =&gt; '/album[/{action:add|edit}[/{id}]]', 'middleware' =&gt; Album\\Action\\AlbumPage::class, 'allowed_methods' =&gt; ['GET'], ], /* ... */ ], ]; The above defines a route that will match any of the following: /album /album/add /album/edit/3 The action attribute can thus be one of add or edit , and we can optionally also receive an id attribute (in the latter example, it would be 3 ).","title":"Handling multiple routes in a single class"},{"location":"v1/features/application/","text":"Applications In mezzio, you define a Mezzio\\Application instance and execute it. The Application instance is itself middleware that composes: a router , for dynamically routing requests to middleware. a dependency injection container , for retrieving middleware to dispatch. a final handler , for handling error conditions raised by the application. an emitter , for emitting the response when application execution is complete. You can define the Application instance in several ways: Direct instantiation, which requires providing several dependencies. The AppFactory , which will use some common defaults, but allows injecting alternate container and/or router implementations. Via a dependency injection container; we provide a factory for setting up all aspects of the instance via configuration and other defined services. Regardless of how you set up the instance, there are several methods you will likely interact with at some point or another. Instantiation As noted at the start of this document, we provide several ways to create an Application instance. Constructor If you wish to manually instantiate the Application instance, it has the following constructor: /** * @param Mezzio\\Router\\RouterInterface $router * @param null|Interop\\Container\\ContainerInterface $container IoC container from which to pull services, if any. * @param null|callable $finalHandler Final handler to use when $out is not * provided on invocation. * @param null|Laminas\\Diactoros\\Response\\EmitterInterface $emitter Emitter to use when `run()` is * invoked. */ public function __construct( Mezzio\\Router\\RouterInterface $router, Interop\\Container\\ContainerInterface $container = null, callable $finalHandler = null, Laminas\\Diactoros\\Response\\EmitterInterface $emitter = null ); If no container is provided at instantiation, then all routed and piped middleware must be provided as callables. AppFactory Mezzio\\AppFactory provides a convenience layer for creating an Application instance; it makes the assumption that you will use defaults in most situations, and likely only change which container and/or router you wish to use. It has the following signature: AppFactory::create( Interop\\Container\\ContainerInterface $container = null, Mezzio\\Router\\RouterInterface $router = null ); When no container or router are provided, it defaults to: laminas-servicemanager for the container. FastRoute for the router. Container factory We also provide a factory that can be consumed by a container-interop dependency injection container; see the container factories documentation for details. Adding routable middleware We discuss routing vs piping elsewhere ; routing is the act of dynamically matching an incoming request against criteria, and it is one of the primary features of mezzio. Regardless of which router implementation you use, you can use the following methods to provide routable middleware: route() route() has the following signature: public function route( $pathOrRoute, $middleware = null, array $methods = null, $name = null ) : Mezzio\\Router\\Route where: $pathOrRoute may be either a string path to match, or a Mezzio\\Router\\Route instance. $middleware must be present if $pathOrRoute is a string path, and must be: a callable; a service name that resolves to valid middleware in the container; a fully qualified class name of a constructor-less class; an array of any of the above; these will be composed in order into a Laminas\\Stratigility\\MiddlewarePipe instance. $methods must be an array of HTTP methods valid for the given path and middleware. If null, it assumes any method is valid. $name is the optional name for the route, and is used when generating a URI from known routes. See the section on route naming for details. This method is typically only used if you want a single middleware to handle multiple HTTP request methods. get(), post(), put(), patch(), delete(), any() Each of the methods get() , post() , put() , patch() , delete() , and any() proxies to route() and has the signature: function ( $pathOrRoute, $middleware = null, $name = null ) : Mezzio\\Router\\Route Essentially, each calls route() and specifies an array consisting solely of the corresponding HTTP method for the $methods argument. Piping Because mezzio builds on laminas-stratigility , and, more specifically, its MiddlewarePipe definition, you can also pipe (queue) middleware to the application. This is useful for adding middleware that should execute on each request, defining error handlers, and/or segregating applications by subpath. The signature of pipe() is: public function pipe($pathOrMiddleware, $middleware = null) where: $pathOrMiddleware is either a string URI path (for path segregation), a callable middleware, or the service name for a middleware to fetch from the composed container. $middleware is required if $pathOrMiddleware is a string URI path. It can be one of: a callable; a service name that resolves to valid middleware in the container; a fully qualified class name of a constructor-less class; an array of any of the above; these will be composed in order into a Laminas\\Stratigility\\MiddlewarePipe instance. Unlike Laminas\\Stratigility\\MiddlewarePipe , Application::pipe() allows fetching middleware by service name . This facility allows lazy-loading of middleware only when it is invoked. Internally, it wraps the call to fetch and dispatch the middleware inside a closure. Additionally, we define a new method, pipeErrorHandler() , with the following signature: public function pipeErrorHandler($pathOrMiddleware, $middleware = null) It acts just like pipe() except when the middleware specified is a service name; in that particular case, when it wraps the middleware in a closure, it uses the error handler signature: function ($error, ServerRequestInterface $request, ResponseInterface $response, callable $next); Read the section on piping vs routing for more information. Registering routing and dispatch middleware Routing is accomplished via a dedicated middleware method, Application::routeMiddleware() ; similarly, dispatching of routed middleware has a corresponding instance middleware method, Application::dispatchMiddleware() . Each can be piped/registered with other middleware platforms if desired. These methods MUST be piped to the application so that the application will route and dispatch routed middleware. This is done using the following methods: $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); See the section on piping to see how you can register non-routed middleware and create layered middleware applications. Retrieving dependencies As noted in the intro, the Application class has several dependencies. Some of these may allow further configuration, or may be useful on their own, and have methods for retrieving them. They include: getContainer() : returns the composed container-interop instance (used to retrieve routed middleware). getEmitter() : returns the composed emitter , typically a Mezzio\\Emitter\\EmitterStack instance. getFinalHandler(ResponseInterface $response = null) : retrieves the final handler instance. This is middleware with the signature function ($request, $response, $error = null) , and it is invoked when the middleware pipeline queue is depleted and no response has been returned. Executing the application: run() When the application is completely setup, you can execute it with the run() method. The method may be called with no arguments, but has the following signature: public function run( ServerRequestInterface $request = null, ResponseInterface $response = null );","title":"Applications"},{"location":"v1/features/application/#applications","text":"In mezzio, you define a Mezzio\\Application instance and execute it. The Application instance is itself middleware that composes: a router , for dynamically routing requests to middleware. a dependency injection container , for retrieving middleware to dispatch. a final handler , for handling error conditions raised by the application. an emitter , for emitting the response when application execution is complete. You can define the Application instance in several ways: Direct instantiation, which requires providing several dependencies. The AppFactory , which will use some common defaults, but allows injecting alternate container and/or router implementations. Via a dependency injection container; we provide a factory for setting up all aspects of the instance via configuration and other defined services. Regardless of how you set up the instance, there are several methods you will likely interact with at some point or another.","title":"Applications"},{"location":"v1/features/application/#instantiation","text":"As noted at the start of this document, we provide several ways to create an Application instance.","title":"Instantiation"},{"location":"v1/features/application/#adding-routable-middleware","text":"We discuss routing vs piping elsewhere ; routing is the act of dynamically matching an incoming request against criteria, and it is one of the primary features of mezzio. Regardless of which router implementation you use, you can use the following methods to provide routable middleware:","title":"Adding routable middleware"},{"location":"v1/features/application/#retrieving-dependencies","text":"As noted in the intro, the Application class has several dependencies. Some of these may allow further configuration, or may be useful on their own, and have methods for retrieving them. They include: getContainer() : returns the composed container-interop instance (used to retrieve routed middleware). getEmitter() : returns the composed emitter , typically a Mezzio\\Emitter\\EmitterStack instance. getFinalHandler(ResponseInterface $response = null) : retrieves the final handler instance. This is middleware with the signature function ($request, $response, $error = null) , and it is invoked when the middleware pipeline queue is depleted and no response has been returned.","title":"Retrieving dependencies"},{"location":"v1/features/application/#executing-the-application-run","text":"When the application is completely setup, you can execute it with the run() method. The method may be called with no arguments, but has the following signature: public function run( ServerRequestInterface $request = null, ResponseInterface $response = null );","title":"Executing the application: run()"},{"location":"v1/features/emitters/","text":"Emitters To simplify the usage of Mezzio, we added the run() method, which handles the incoming request, and emits a response. The latter aspect, emitting the response, is the responsibility of an emitter . An emitter accepts a response instance, and then does something with it, usually sending the response back to a browser. Diactoros defines an EmitterInterface , and — as of the time we write this — a single emitter implementation, Laminas\\Diactoros\\Response\\SapiEmitter , which sends headers and output using PHP's standard SAPI mechanisms (the header() method and the output buffer). We recognize that there are times when you may want to use alternate emitter implementations; for example, if you use React , the SAPI emitter will likely not work for you. To facilitate alternate emitters, we offer two facilities: First, Application composes an emitter, and you can specify an alternate emitter during instantiation, or via the Laminas\\Diactoros\\Response\\EmitterInterface service when using the container factory. Second, we provide Mezzio\\Emitter\\EmitterStack , which allows you to compose multiple emitter strategies; the first to return a value other than boolean false will cause execution of the stack to short-circuit. Application composes an EmitterStack by default, with an SapiEmitter composed at the bottom of the stack. EmitterStack The EmitterStack is an SplStack extension that implements EmitterInterface . You can add emitters to the stack by pushing them on: $stack-&gt;push($emitterInstance); As a stack, execution is in LIFO (last in, first out) order; the first emitter on the stack will be evaluated last.","title":"Emitters"},{"location":"v1/features/emitters/#emitters","text":"To simplify the usage of Mezzio, we added the run() method, which handles the incoming request, and emits a response. The latter aspect, emitting the response, is the responsibility of an emitter . An emitter accepts a response instance, and then does something with it, usually sending the response back to a browser. Diactoros defines an EmitterInterface , and — as of the time we write this — a single emitter implementation, Laminas\\Diactoros\\Response\\SapiEmitter , which sends headers and output using PHP's standard SAPI mechanisms (the header() method and the output buffer). We recognize that there are times when you may want to use alternate emitter implementations; for example, if you use React , the SAPI emitter will likely not work for you. To facilitate alternate emitters, we offer two facilities: First, Application composes an emitter, and you can specify an alternate emitter during instantiation, or via the Laminas\\Diactoros\\Response\\EmitterInterface service when using the container factory. Second, we provide Mezzio\\Emitter\\EmitterStack , which allows you to compose multiple emitter strategies; the first to return a value other than boolean false will cause execution of the stack to short-circuit. Application composes an EmitterStack by default, with an SapiEmitter composed at the bottom of the stack.","title":"Emitters"},{"location":"v1/features/emitters/#emitterstack","text":"The EmitterStack is an SplStack extension that implements EmitterInterface . You can add emitters to the stack by pushing them on: $stack-&gt;push($emitterInstance); As a stack, execution is in LIFO (last in, first out) order; the first emitter on the stack will be evaluated last.","title":"EmitterStack"},{"location":"v1/features/error-handling/","text":"Error Handling Mezzio provides error handling out of the box, via laminas-stratigility's FinalHandler implementation . This pseudo-middleware is executed in the following conditions: If the middleware stack is exhausted, and no middleware has returned a response. If an error has been passed via $next() , but not handled by any error middleware. The FinalHandler essentially tries to recover gracefully. In the case that no error was passed, it does the following: If the response passed to it differs from the response provided at initialization, it will return the response directly; the assumption is that some middleware along the way called $next() with a new response. If the response instances are identical, it checks to see if the body size has changed; if it has, the assumption is that a middleware at some point has written to the response body. At this point, it assumes no middleware was able to handle the request, and creates a 404 response, indicating \"Not Found.\" In the event that an error was passed, it does the following: If $error is not an exception, it will use the response status if it already indicates an error (ie., &gt;= 400 status), or will use a 500 status, and return the response directly with the reason phrase. If $error is an exception, it will use the exception status if it already indicates an error (ie., &gt;= 400 status), or will use a 500 status, and return the response directly with the reason phrase. If the FinalHandler was initialized with an option indicating that it is in development mode, it writes the exception stack trace to the response body. This workflow stays the same throughout mezzio. But sometimes, it's just not enough. Templated Errors You'll typically want to provide error messages in your site template. To do so, we provide Mezzio\\TemplatedErrorHandler . This class is similar to the FinalHandler , but accepts, optionally, a Mezzio\\Template\\TemplateRendererInterface instance, and template names to use for 404 and general error conditions. This makes it a good choice for use in production. First, of course, you'll need to select a templating system and ensure you have the appropriate dependencies installed; see the templating documentation for information on what we support and how to install supported systems. Once you have selected your templating system, you can set up the templated error handler. use Mezzio\\Application; use Mezzio\\Plates\\PlatesRenderer; use Mezzio\\TemplatedErrorHandler; $plates = new PlatesRenderer(); $plates-&gt;addPath(__DIR__ . '/templates/error', 'error'); $finalHandler = new TemplatedErrorHandler($plates, 'error::404', 'error::500'); $app = new Application($router, $container, $finalHandler); The above will use the templates error::404 and error::500 for 404 and general errors, respectively, rendering them using our Plates template adapter. You can also use the TemplatedErrorHandler as a substitute for the FinalHandler , without using templated capabilities, by omitting the TemplateRendererInterface instance when instantiating it. In this case, the response message bodies will be empty, though the response status will reflect the error. See the section titled \"Container Factories and Configuration\", below, for techniques on configuring the TemplatedErrorHandler as your final handler within a container-based application. Whoops whoops is a library for providing a more usable UI around exceptions and PHP errors. We provide integration with this library through Laminas\\Express\\WhoopsErrorHandler . This error handler derives from the TemplatedErrorHandler , and uses its features for 404 status and non-exception errors. For exceptions, however, it will return the whoops output. As such, it is a good choice for use in development. To use it, you must first install whoops: $ composer require filp/whoops Then you will need to provide the error handler a whoops runtime instance, as well as a Whoops\\Handler\\PrettyPageHandler instance. You can also optionally provide a TemplateRendererInterface instance and template names, just as you would for a TemplatedErrorHandler . use Mezzio\\Application; use Mezzio\\Plates\\PlatesRenderer; use Mezzio\\WhoopsErrorHandler; use Whoops\\Handler\\PrettyPageHandler; use Whoops\\Run as Whoops; $handler = new PrettyPageHandler(); $whoops = new Whoops; $whoops-&gt;writeToOutput(false); $whoops-&gt;allowQuit(false); $whoops-&gt;pushHandler($handler); $plates = new PlatesRenderer(); $plates-&gt;addPath(__DIR__ . '/templates/error', 'error'); $finalHandler = new WhoopsErrorHandler( $whoops, $handler, $plates, 'error::404', 'error::500' ); $app = new Application($router, $container, $finalHandler); // Register Whoops just before running the application, as otherwise it can // swallow bootstrap errors. $whoops-&gt;register(); $app-&gt;run(); The calls to writeToOutput(false) , allowQuit(false) , and register() must be made to guarantee whoops will interoperate well with mezzio. You can add more handlers if desired. Internally, when an exception is discovered, mezzio adds some data to the whoops output, primarily around the request information (URI, HTTP request method, route match attributes, etc.). See the next section for techniques on configuring the WhoopsErrorHandler as your final handler within a container-based application. Container Factories and Configuration The above may feel like a bit much when creating your application. As such, we provide several factories that work with container-interop -compatible container implementations to simplify setup. In each case, you should register the selected error handler's factory as the service Mezzio\\FinalHandler . For the TemplatedErrorHandler , use Mezzio\\Container\\TemplatedErrorHandlerFactory . For the WhoopsErrorHandler , use Mezzio\\Container\\WhoopsErrorHandlerFactory .","title":"Error Handling"},{"location":"v1/features/error-handling/#error-handling","text":"Mezzio provides error handling out of the box, via laminas-stratigility's FinalHandler implementation . This pseudo-middleware is executed in the following conditions: If the middleware stack is exhausted, and no middleware has returned a response. If an error has been passed via $next() , but not handled by any error middleware. The FinalHandler essentially tries to recover gracefully. In the case that no error was passed, it does the following: If the response passed to it differs from the response provided at initialization, it will return the response directly; the assumption is that some middleware along the way called $next() with a new response. If the response instances are identical, it checks to see if the body size has changed; if it has, the assumption is that a middleware at some point has written to the response body. At this point, it assumes no middleware was able to handle the request, and creates a 404 response, indicating \"Not Found.\" In the event that an error was passed, it does the following: If $error is not an exception, it will use the response status if it already indicates an error (ie., &gt;= 400 status), or will use a 500 status, and return the response directly with the reason phrase. If $error is an exception, it will use the exception status if it already indicates an error (ie., &gt;= 400 status), or will use a 500 status, and return the response directly with the reason phrase. If the FinalHandler was initialized with an option indicating that it is in development mode, it writes the exception stack trace to the response body. This workflow stays the same throughout mezzio. But sometimes, it's just not enough.","title":"Error Handling"},{"location":"v1/features/error-handling/#templated-errors","text":"You'll typically want to provide error messages in your site template. To do so, we provide Mezzio\\TemplatedErrorHandler . This class is similar to the FinalHandler , but accepts, optionally, a Mezzio\\Template\\TemplateRendererInterface instance, and template names to use for 404 and general error conditions. This makes it a good choice for use in production. First, of course, you'll need to select a templating system and ensure you have the appropriate dependencies installed; see the templating documentation for information on what we support and how to install supported systems. Once you have selected your templating system, you can set up the templated error handler. use Mezzio\\Application; use Mezzio\\Plates\\PlatesRenderer; use Mezzio\\TemplatedErrorHandler; $plates = new PlatesRenderer(); $plates-&gt;addPath(__DIR__ . '/templates/error', 'error'); $finalHandler = new TemplatedErrorHandler($plates, 'error::404', 'error::500'); $app = new Application($router, $container, $finalHandler); The above will use the templates error::404 and error::500 for 404 and general errors, respectively, rendering them using our Plates template adapter. You can also use the TemplatedErrorHandler as a substitute for the FinalHandler , without using templated capabilities, by omitting the TemplateRendererInterface instance when instantiating it. In this case, the response message bodies will be empty, though the response status will reflect the error. See the section titled \"Container Factories and Configuration\", below, for techniques on configuring the TemplatedErrorHandler as your final handler within a container-based application.","title":"Templated Errors"},{"location":"v1/features/error-handling/#whoops","text":"whoops is a library for providing a more usable UI around exceptions and PHP errors. We provide integration with this library through Laminas\\Express\\WhoopsErrorHandler . This error handler derives from the TemplatedErrorHandler , and uses its features for 404 status and non-exception errors. For exceptions, however, it will return the whoops output. As such, it is a good choice for use in development. To use it, you must first install whoops: $ composer require filp/whoops Then you will need to provide the error handler a whoops runtime instance, as well as a Whoops\\Handler\\PrettyPageHandler instance. You can also optionally provide a TemplateRendererInterface instance and template names, just as you would for a TemplatedErrorHandler . use Mezzio\\Application; use Mezzio\\Plates\\PlatesRenderer; use Mezzio\\WhoopsErrorHandler; use Whoops\\Handler\\PrettyPageHandler; use Whoops\\Run as Whoops; $handler = new PrettyPageHandler(); $whoops = new Whoops; $whoops-&gt;writeToOutput(false); $whoops-&gt;allowQuit(false); $whoops-&gt;pushHandler($handler); $plates = new PlatesRenderer(); $plates-&gt;addPath(__DIR__ . '/templates/error', 'error'); $finalHandler = new WhoopsErrorHandler( $whoops, $handler, $plates, 'error::404', 'error::500' ); $app = new Application($router, $container, $finalHandler); // Register Whoops just before running the application, as otherwise it can // swallow bootstrap errors. $whoops-&gt;register(); $app-&gt;run(); The calls to writeToOutput(false) , allowQuit(false) , and register() must be made to guarantee whoops will interoperate well with mezzio. You can add more handlers if desired. Internally, when an exception is discovered, mezzio adds some data to the whoops output, primarily around the request information (URI, HTTP request method, route match attributes, etc.). See the next section for techniques on configuring the WhoopsErrorHandler as your final handler within a container-based application.","title":"Whoops"},{"location":"v1/features/error-handling/#container-factories-and-configuration","text":"The above may feel like a bit much when creating your application. As such, we provide several factories that work with container-interop -compatible container implementations to simplify setup. In each case, you should register the selected error handler's factory as the service Mezzio\\FinalHandler . For the TemplatedErrorHandler , use Mezzio\\Container\\TemplatedErrorHandlerFactory . For the WhoopsErrorHandler , use Mezzio\\Container\\WhoopsErrorHandlerFactory .","title":"Container Factories and Configuration"},{"location":"v1/features/container/aura-di/","text":"Using Aura.Di Aura.Di provides a serializable dependency injection container with the following features: constructor and setter injection. inheritance of constructor parameter and setter method values from parent classes. inheritance of setter method values from interfaces and traits. lazy-loaded instances, services, includes/requires, and values. instance factories. optional auto-resolution of typehinted constructor parameter values. Installing Aura.Di Aura.Di only implements container-interop as of version 3 (in beta at the time of writing). $ composer require \"aura/di:3.0.*@beta\" Configuration Aura.Di can help you to organize your code better with ContainerConfig classes and two step configuration . In this example, we'll put that in config/services.php : &lt;?php use Aura\\Di\\ContainerBuilder; $containerBuilder = new ContainerBuilder(); // Use the builder to create and configure a container using an array of // ContainerConfig classes. Make sure the classes can be autoloaded! return $containerBuilder-&gt;newConfiguredInstance([ 'Application\\Config\\Common', ]); The bare minimum ContainerConfig code needed to make mezzio work is: &lt;?php // In src/Config/Common.php: namespace Application\\Config; use Aura\\Di\\Container; use Aura\\Di\\ContainerConfig; use Aura\\Router\\Generator; use Aura\\Router\\RouteCollection; use Aura\\Router\\RouteFactory; use Aura\\Router\\Router; use Laminas\\Escaper\\Escaper; use Mezzio\\Application; use Mezzio\\Container as MezzioContainer; use Mezzio\\Plates\\PlatesRenderer; use Mezzio\\Router\\AuraRouter; use Mezzio\\Router\\Route; use Mezzio\\Router\\RouterInterface; use Mezzio\\Template\\TemplateRendererInterface; class Common extends ContainerConfig { public function define(Container $di) { $di-&gt;params[RouteCollection::class] = array( 'route_factory' =&gt; $di-&gt;lazyNew(RouteFactory::class), ); $di-&gt;params[Router::class] = array( 'routes' =&gt; $di-&gt;lazyNew(RouteCollection::class), 'generator' =&gt; $di-&gt;lazyNew(Generator::class), ); $di-&gt;params[AuraRouter::class]['router'] = $di-&gt;lazyNew(Router::class); $di-&gt;set(RouterInterface::class, $di-&gt;lazyNew(AuraRouter::class)); $di-&gt;set(MezzioContainer\\ApplicationFactory::class, $di-&gt;lazyNew(MezzioContainer\\ApplicationFactory::class)); $di-&gt;set(Application::class, $di-&gt;lazyGetCall(MezzioContainer\\ApplicationFactory::class, '__invoke', $di)); // Templating // In most cases, you can instantiate the template renderer you want to use // without using a factory: $di-&gt;set(TemplateRendererInterface::class, $di-&gt;lazyNew(PlatesRenderer::class)); // These next two can be added in any environment; they won't be used unless // you add the WhoopsErrorHandler as the FinalHandler implementation: $di-&gt;set(MezzioContainer\\WhoopsFactory::class, $di-&gt;lazyNew(MezzioContainer\\WhoopsFactory::class)); $di-&gt;set('Mezzio\\Whoops', $di-&gt;lazyGetCall(MezzioContainer\\WhoopsFactory::class, '__invoke', $di)); $di-&gt;set(MezzioContainer\\WhoopsPageHandlerFactory::class, $di-&gt;lazyNew(MezzioContainer\\WhoopsPageHandlerFactory::class)); $di-&gt;set('Mezzio\\WhoopsPageHandler', $di-&gt;lazyGetCall(MezzioContainer\\WhoopsPageHandlerFactory::class, '__invoke', $di)); // Error Handling // If in development: $di-&gt;set(MezzioContainer\\WhoopsErrorHandlerFactory::class, $di-&gt;lazyNew(MezzioContainer\\WhoopsErrorHandlerFactory::class)); $di-&gt;set('Mezzio\\FinalHandler', $di-&gt;lazyGetCall(MezzioContainer\\WhoopsErrorHandlerFactory::class, '__invoke', $di)); // If in production: // $di-&gt;set('Mezzio\\FinalHandler', $di-&gt;lazyGetCall(MezzioContainer\\TemplatedErrorHandlerFactory::class, '__invoke', $di)); } public function modify(Container $di) { /* $router = $di-&gt;get(RouterInterface::class); $router-&gt;addRoute(new Route('/hello/{name}', function ($request, $response, $next) { $escaper = new Escaper(); $name = $request-&gt;getAttribute('name', 'World'); $response-&gt;getBody()-&gt;write('Hello ' . $escaper-&gt;escapeHtml($name)); return $response; }, Route::HTTP_METHOD_ANY, 'hello')); */ } } Your bootstrap (typically public/index.php ) will then look like this: chdir(dirname(__DIR__)); require 'vendor/autoload.php'; $container = require 'config/services.php'; $app = $container-&gt;get('Mezzio\\Application'); $app-&gt;run();","title":"Using Aura.Di"},{"location":"v1/features/container/aura-di/#using-auradi","text":"Aura.Di provides a serializable dependency injection container with the following features: constructor and setter injection. inheritance of constructor parameter and setter method values from parent classes. inheritance of setter method values from interfaces and traits. lazy-loaded instances, services, includes/requires, and values. instance factories. optional auto-resolution of typehinted constructor parameter values.","title":"Using Aura.Di"},{"location":"v1/features/container/aura-di/#installing-auradi","text":"Aura.Di only implements container-interop as of version 3 (in beta at the time of writing). $ composer require \"aura/di:3.0.*@beta\"","title":"Installing Aura.Di"},{"location":"v1/features/container/aura-di/#configuration","text":"Aura.Di can help you to organize your code better with ContainerConfig classes and two step configuration . In this example, we'll put that in config/services.php : &lt;?php use Aura\\Di\\ContainerBuilder; $containerBuilder = new ContainerBuilder(); // Use the builder to create and configure a container using an array of // ContainerConfig classes. Make sure the classes can be autoloaded! return $containerBuilder-&gt;newConfiguredInstance([ 'Application\\Config\\Common', ]); The bare minimum ContainerConfig code needed to make mezzio work is: &lt;?php // In src/Config/Common.php: namespace Application\\Config; use Aura\\Di\\Container; use Aura\\Di\\ContainerConfig; use Aura\\Router\\Generator; use Aura\\Router\\RouteCollection; use Aura\\Router\\RouteFactory; use Aura\\Router\\Router; use Laminas\\Escaper\\Escaper; use Mezzio\\Application; use Mezzio\\Container as MezzioContainer; use Mezzio\\Plates\\PlatesRenderer; use Mezzio\\Router\\AuraRouter; use Mezzio\\Router\\Route; use Mezzio\\Router\\RouterInterface; use Mezzio\\Template\\TemplateRendererInterface; class Common extends ContainerConfig { public function define(Container $di) { $di-&gt;params[RouteCollection::class] = array( 'route_factory' =&gt; $di-&gt;lazyNew(RouteFactory::class), ); $di-&gt;params[Router::class] = array( 'routes' =&gt; $di-&gt;lazyNew(RouteCollection::class), 'generator' =&gt; $di-&gt;lazyNew(Generator::class), ); $di-&gt;params[AuraRouter::class]['router'] = $di-&gt;lazyNew(Router::class); $di-&gt;set(RouterInterface::class, $di-&gt;lazyNew(AuraRouter::class)); $di-&gt;set(MezzioContainer\\ApplicationFactory::class, $di-&gt;lazyNew(MezzioContainer\\ApplicationFactory::class)); $di-&gt;set(Application::class, $di-&gt;lazyGetCall(MezzioContainer\\ApplicationFactory::class, '__invoke', $di)); // Templating // In most cases, you can instantiate the template renderer you want to use // without using a factory: $di-&gt;set(TemplateRendererInterface::class, $di-&gt;lazyNew(PlatesRenderer::class)); // These next two can be added in any environment; they won't be used unless // you add the WhoopsErrorHandler as the FinalHandler implementation: $di-&gt;set(MezzioContainer\\WhoopsFactory::class, $di-&gt;lazyNew(MezzioContainer\\WhoopsFactory::class)); $di-&gt;set('Mezzio\\Whoops', $di-&gt;lazyGetCall(MezzioContainer\\WhoopsFactory::class, '__invoke', $di)); $di-&gt;set(MezzioContainer\\WhoopsPageHandlerFactory::class, $di-&gt;lazyNew(MezzioContainer\\WhoopsPageHandlerFactory::class)); $di-&gt;set('Mezzio\\WhoopsPageHandler', $di-&gt;lazyGetCall(MezzioContainer\\WhoopsPageHandlerFactory::class, '__invoke', $di)); // Error Handling // If in development: $di-&gt;set(MezzioContainer\\WhoopsErrorHandlerFactory::class, $di-&gt;lazyNew(MezzioContainer\\WhoopsErrorHandlerFactory::class)); $di-&gt;set('Mezzio\\FinalHandler', $di-&gt;lazyGetCall(MezzioContainer\\WhoopsErrorHandlerFactory::class, '__invoke', $di)); // If in production: // $di-&gt;set('Mezzio\\FinalHandler', $di-&gt;lazyGetCall(MezzioContainer\\TemplatedErrorHandlerFactory::class, '__invoke', $di)); } public function modify(Container $di) { /* $router = $di-&gt;get(RouterInterface::class); $router-&gt;addRoute(new Route('/hello/{name}', function ($request, $response, $next) { $escaper = new Escaper(); $name = $request-&gt;getAttribute('name', 'World'); $response-&gt;getBody()-&gt;write('Hello ' . $escaper-&gt;escapeHtml($name)); return $response; }, Route::HTTP_METHOD_ANY, 'hello')); */ } } Your bootstrap (typically public/index.php ) will then look like this: chdir(dirname(__DIR__)); require 'vendor/autoload.php'; $container = require 'config/services.php'; $app = $container-&gt;get('Mezzio\\Application'); $app-&gt;run();","title":"Configuration"},{"location":"v1/features/container/factories/","text":"Provided Factories Mezzio provides several factories compatible with container-interop to facilitate setting up common dependencies. The following is a list of provided containers, what they will create, the suggested service name, and any additional dependencies they may require. All factories, unless noted otherwise, are in the Mezzio\\Container namespace, and define an __invoke() method that accepts an Interop\\Container\\ContainerInterface instance as the sole argument. ApplicationFactory Provides : Mezzio\\Application Suggested Name : Mezzio\\Application Requires : no additional services are required. Optional : Mezzio\\Router\\RouterInterface . When provided, the service will be used to construct the Application instance; otherwise, an FastRoute router implementation will be used. Mezzio\\FinalHandler . This is a meta-service, as the only concrete type required is a callable that can be used as a final middleware in the case that the stack is exhausted before execution ends. By default, an instance of Laminas\\Stratigility\\FinalHandler will be used. Laminas\\Diactoros\\Response\\EmitterInterface . If none is provided, an instance of Mezzio\\Emitter\\EmitterStack composing a Laminas\\Diactoros\\Response\\SapiEmitter instance will be used. config , an array or ArrayAccess instance. This will be used to seed the application instance with pre/post pipeline middleware and/or routed middleware (see more below). Additionally, the container instance itself is injected into the Application instance. When the config service is present, the factory can utilize several keys in order to seed the Application instance: middleware_pipeline can be used to seed the middleware pipeline: 'middleware_pipeline' =&gt; [ // An array of middleware to register. [ /* ... */ ], Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, [ /* ... */ ], ], Each item of the array, other than the entries for routing and dispatch middleware, must be an array itself, with the following structure: [ // required: 'middleware' =&gt; 'Name of middleware service, or a callable', // optional: 'path' =&gt; '/path/to/match', 'error' =&gt; true, 'priority' =&gt; 1, // Integer ], The middleware key itself is the middleware to execute, and must be a callable or the name of another defined service. If the path key is present, that key will be used to segregate the middleware to a specific matched path (in other words, it will not execute if the path is not matched). If the error key is present and boolean true , then the middleware will be registered as error middleware. (This is necessary due to the fact that the factory defines a callable wrapper around middleware to enable lazy-loading of middleware.) The priority defaults to 1, and follows the semantics of SplPriorityQueue : higher integer values indicate higher priority (will execute earlier), while lower/negative integer values indicate lower priority (will execute last). Default priority is 1; use granular priority values to specify the order in which middleware should be piped to the application. You can specify keys for each middleware specification. These will be ignored by the factory, but can be useful when merging several configurations into one for the application. routes is used to define routed middleware. The value must be an array, consisting of arrays defining each middleware: 'routes' =&gt; [ [ 'path' =&gt; '/path/to/match', 'middleware' =&gt; 'Middleware Service Name or Callable', 'allowed_methods' =&gt; [ 'GET', 'POST', 'PATCH' ], 'options' =&gt; [ 'stuff' =&gt; 'to', 'pass' =&gt; 'to', 'the' =&gt; 'underlying router', ], ], // etc. ], Each route requires : - `path`: the path to match. Format will be based on the router you choose for your project. - `middleware`: a callable or a service name for the middleware to execute when the route matches. Optionally, the route definition may provide: - `allowed_methods`: an array of allowed HTTP methods. If not provided, the application assumes any method is allowed. - `name`: if not provided, the path will be used as the route name (and, if specific HTTP methods are allowed, a list of those). - `options`: a key/value set of additional options to pass to the underlying router implementation for the given route. (Typical use cases include passing constraints or default values.) TemplatedErrorHandlerFactory Provides : Mezzio\\TemplatedErrorHandler Suggested Name : Mezzio\\FinalHandler Requires : no additional services are required. Optional : Mezzio\\Template\\TemplateRendererInterface . If not provided, the error handler will not use templated responses. config , an array or ArrayAccess instance. This will be used to seed the TemplatedErrorHandler instance with template names to use for errors (see more below). When the config service is present, the factory can utilize the mezzio top-level key, with the error_handler second-level key, to seed the Templated instance: 'mezzio' =&gt; [ 'error_handler' =&gt; [ 'template_404' =&gt; 'name of 404 template', 'template_error' =&gt; 'name of error template', ], ], WhoopsErrorHandlerFactory Provides : Mezzio\\TemplatedErrorHandler Suggested Name : Mezzio\\FinalHandler Requires : Mezzio\\Whoops , which should provide a Whoops\\Run instance. Mezzio\\WhoopsPageHandler , which should provide a Whoops\\Handler\\PrettyPageHandler instance. Optional : Mezzio\\Template\\TemplateRendererInterface . If not provided, the error handler will not use templated responses. config , an array or ArrayAccess instance. This will be used to seed the instance with template names to use for errors (see more below). This factory uses config in the same way as the TemplatedErrorHandlerFactory . WhoopsFactory Provides : Whoops\\Run Suggested Name : Mezzio\\Whoops Requires : Mezzio\\WhoopsPageHandler Optional : config , an array or ArrayAccess instance. This will be used to seed additional page handlers, specifically the JsonResponseHandler (see more below). This factory creates and configures a Whoops\\Run instance so that it will work properly with Mezzio\\Application ; this includes disabling immediate write-to-output, disabling immediate quit, etc. The PrettyPageHandler returned for the Mezzio\\WhoopsPageHandler service will be injected. It consumes the following config structure: 'whoops' =&gt; [ 'json_exceptions' =&gt; [ 'display' =&gt; true, 'show_trace' =&gt; true, 'ajax_only' =&gt; true, ], ], If no whoops top-level key is present in the configuration, a default instance with no JsonResponseHandler composed will be created. WhoopsPageHandlerFactory Provides : Whoops\\Handler\\PrettyPageHandler Suggested Name : Mezzio\\WhoopsPageHandler Optional : config , an array or ArrayAccess instance. This will be used to further configure the PrettyPageHandler instance, specifically with editor configuration (for linking files such that they open in the configured editor). It consumes the following config structure: 'whoops' =&gt; [ 'editor' =&gt; 'editor name, editor service name, or callable', ], The editor value must be a known editor name (see the Whoops documentation for pre-configured editor types), a callable, or a service name to use. PlatesRendererFactory Provides : Mezzio\\Plates\\PlatesRenderer FactoryName : Mezzio\\Plates\\PlatesRendererFactory Suggested Name : Mezzio\\Template\\TemplateRendererInterface Requires : no additional services are required. Optional : config , an array or ArrayAccess instance. This will be used to further configure the Plates instance, specifically with the filename extension to use, and paths to inject. It consumes the following config structure: 'templates' =&gt; [ 'extension' =&gt; 'file extension used by templates; defaults to html', 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ] One note: Due to a limitation in the Plates engine, you can only map one path per namespace when using Plates. TwigRendererFactory Provides : Mezzio\\Twig\\TwigRenderer FactoryName : Mezzio\\Twig\\TwigRendererFactory Suggested Name : Mezzio\\Template\\TemplateRendererInterface Requires : no additional services are required. Optional : Mezzio\\Router\\RouterInterface ; if found, it will be used to seed a Mezzio\\Twig\\TwigExtension instance for purposes of rendering application URLs. config , an array or ArrayAccess instance. This will be used to further configure the Twig instance, specifically with the filename extension, paths to assets (and default asset version to use), and template paths to inject. It consumes the following config structure: 'debug' =&gt; boolean, 'templates' =&gt; [ 'cache_dir' =&gt; 'path to cached templates', 'assets_url' =&gt; 'base URL for assets', 'assets_version' =&gt; 'base version for assets', 'extension' =&gt; 'file extension used by templates; defaults to html.twig', 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ] When debug is true, it disables caching, enables debug mode, enables strict variables, and enables auto reloading. The assets_* values are used to seed the TwigExtension instance (assuming the router was found). LaminasViewRendererFactory Provides : Mezzio\\LaminasView\\LaminasViewRenderer FactoryName : Mezzio\\LaminasView\\LaminasViewRendererFactory Suggested Name : Mezzio\\Template\\TemplateRendererInterface Requires : no additional services are required. Mezzio\\Router\\RouterInterface , in order to inject the custom url helper implementation. Optional : config , an array or ArrayAccess instance. This will be used to further configure the LaminasView instance, specifically with the layout template name, entries for a TemplateMapResolver , and template paths to inject. Laminas\\View\\HelperPluginManager ; if present, will be used to inject the PhpRenderer instance. It consumes the following config structure: 'templates' =&gt; [ 'layout' =&gt; 'name of layout view to use, if any', 'map' =&gt; [ // template =&gt; filename pairs ], 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ] When creating the PhpRenderer instance, it will inject it with a Laminas\\View\\HelperPluginManager instance (either pulled from the container, or instantiated directly). It injects the helper plugin manager with custom url and serverurl helpers, Mezzio\\LaminasView\\UrlHelper and Mezzio\\LaminasView\\ServerUrlHelper , respectively.","title":"Container Factories"},{"location":"v1/features/container/factories/#provided-factories","text":"Mezzio provides several factories compatible with container-interop to facilitate setting up common dependencies. The following is a list of provided containers, what they will create, the suggested service name, and any additional dependencies they may require. All factories, unless noted otherwise, are in the Mezzio\\Container namespace, and define an __invoke() method that accepts an Interop\\Container\\ContainerInterface instance as the sole argument.","title":"Provided Factories"},{"location":"v1/features/container/factories/#applicationfactory","text":"Provides : Mezzio\\Application Suggested Name : Mezzio\\Application Requires : no additional services are required. Optional : Mezzio\\Router\\RouterInterface . When provided, the service will be used to construct the Application instance; otherwise, an FastRoute router implementation will be used. Mezzio\\FinalHandler . This is a meta-service, as the only concrete type required is a callable that can be used as a final middleware in the case that the stack is exhausted before execution ends. By default, an instance of Laminas\\Stratigility\\FinalHandler will be used. Laminas\\Diactoros\\Response\\EmitterInterface . If none is provided, an instance of Mezzio\\Emitter\\EmitterStack composing a Laminas\\Diactoros\\Response\\SapiEmitter instance will be used. config , an array or ArrayAccess instance. This will be used to seed the application instance with pre/post pipeline middleware and/or routed middleware (see more below). Additionally, the container instance itself is injected into the Application instance. When the config service is present, the factory can utilize several keys in order to seed the Application instance: middleware_pipeline can be used to seed the middleware pipeline: 'middleware_pipeline' =&gt; [ // An array of middleware to register. [ /* ... */ ], Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, [ /* ... */ ], ], Each item of the array, other than the entries for routing and dispatch middleware, must be an array itself, with the following structure: [ // required: 'middleware' =&gt; 'Name of middleware service, or a callable', // optional: 'path' =&gt; '/path/to/match', 'error' =&gt; true, 'priority' =&gt; 1, // Integer ], The middleware key itself is the middleware to execute, and must be a callable or the name of another defined service. If the path key is present, that key will be used to segregate the middleware to a specific matched path (in other words, it will not execute if the path is not matched). If the error key is present and boolean true , then the middleware will be registered as error middleware. (This is necessary due to the fact that the factory defines a callable wrapper around middleware to enable lazy-loading of middleware.) The priority defaults to 1, and follows the semantics of SplPriorityQueue : higher integer values indicate higher priority (will execute earlier), while lower/negative integer values indicate lower priority (will execute last). Default priority is 1; use granular priority values to specify the order in which middleware should be piped to the application. You can specify keys for each middleware specification. These will be ignored by the factory, but can be useful when merging several configurations into one for the application. routes is used to define routed middleware. The value must be an array, consisting of arrays defining each middleware: 'routes' =&gt; [ [ 'path' =&gt; '/path/to/match', 'middleware' =&gt; 'Middleware Service Name or Callable', 'allowed_methods' =&gt; [ 'GET', 'POST', 'PATCH' ], 'options' =&gt; [ 'stuff' =&gt; 'to', 'pass' =&gt; 'to', 'the' =&gt; 'underlying router', ], ], // etc. ], Each route requires : - `path`: the path to match. Format will be based on the router you choose for your project. - `middleware`: a callable or a service name for the middleware to execute when the route matches. Optionally, the route definition may provide: - `allowed_methods`: an array of allowed HTTP methods. If not provided, the application assumes any method is allowed. - `name`: if not provided, the path will be used as the route name (and, if specific HTTP methods are allowed, a list of those). - `options`: a key/value set of additional options to pass to the underlying router implementation for the given route. (Typical use cases include passing constraints or default values.)","title":"ApplicationFactory"},{"location":"v1/features/container/factories/#templatederrorhandlerfactory","text":"Provides : Mezzio\\TemplatedErrorHandler Suggested Name : Mezzio\\FinalHandler Requires : no additional services are required. Optional : Mezzio\\Template\\TemplateRendererInterface . If not provided, the error handler will not use templated responses. config , an array or ArrayAccess instance. This will be used to seed the TemplatedErrorHandler instance with template names to use for errors (see more below). When the config service is present, the factory can utilize the mezzio top-level key, with the error_handler second-level key, to seed the Templated instance: 'mezzio' =&gt; [ 'error_handler' =&gt; [ 'template_404' =&gt; 'name of 404 template', 'template_error' =&gt; 'name of error template', ], ],","title":"TemplatedErrorHandlerFactory"},{"location":"v1/features/container/factories/#whoopserrorhandlerfactory","text":"Provides : Mezzio\\TemplatedErrorHandler Suggested Name : Mezzio\\FinalHandler Requires : Mezzio\\Whoops , which should provide a Whoops\\Run instance. Mezzio\\WhoopsPageHandler , which should provide a Whoops\\Handler\\PrettyPageHandler instance. Optional : Mezzio\\Template\\TemplateRendererInterface . If not provided, the error handler will not use templated responses. config , an array or ArrayAccess instance. This will be used to seed the instance with template names to use for errors (see more below). This factory uses config in the same way as the TemplatedErrorHandlerFactory .","title":"WhoopsErrorHandlerFactory"},{"location":"v1/features/container/factories/#whoopsfactory","text":"Provides : Whoops\\Run Suggested Name : Mezzio\\Whoops Requires : Mezzio\\WhoopsPageHandler Optional : config , an array or ArrayAccess instance. This will be used to seed additional page handlers, specifically the JsonResponseHandler (see more below). This factory creates and configures a Whoops\\Run instance so that it will work properly with Mezzio\\Application ; this includes disabling immediate write-to-output, disabling immediate quit, etc. The PrettyPageHandler returned for the Mezzio\\WhoopsPageHandler service will be injected. It consumes the following config structure: 'whoops' =&gt; [ 'json_exceptions' =&gt; [ 'display' =&gt; true, 'show_trace' =&gt; true, 'ajax_only' =&gt; true, ], ], If no whoops top-level key is present in the configuration, a default instance with no JsonResponseHandler composed will be created.","title":"WhoopsFactory"},{"location":"v1/features/container/factories/#whoopspagehandlerfactory","text":"Provides : Whoops\\Handler\\PrettyPageHandler Suggested Name : Mezzio\\WhoopsPageHandler Optional : config , an array or ArrayAccess instance. This will be used to further configure the PrettyPageHandler instance, specifically with editor configuration (for linking files such that they open in the configured editor). It consumes the following config structure: 'whoops' =&gt; [ 'editor' =&gt; 'editor name, editor service name, or callable', ], The editor value must be a known editor name (see the Whoops documentation for pre-configured editor types), a callable, or a service name to use.","title":"WhoopsPageHandlerFactory"},{"location":"v1/features/container/factories/#platesrendererfactory","text":"Provides : Mezzio\\Plates\\PlatesRenderer FactoryName : Mezzio\\Plates\\PlatesRendererFactory Suggested Name : Mezzio\\Template\\TemplateRendererInterface Requires : no additional services are required. Optional : config , an array or ArrayAccess instance. This will be used to further configure the Plates instance, specifically with the filename extension to use, and paths to inject. It consumes the following config structure: 'templates' =&gt; [ 'extension' =&gt; 'file extension used by templates; defaults to html', 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ] One note: Due to a limitation in the Plates engine, you can only map one path per namespace when using Plates.","title":"PlatesRendererFactory"},{"location":"v1/features/container/factories/#twigrendererfactory","text":"Provides : Mezzio\\Twig\\TwigRenderer FactoryName : Mezzio\\Twig\\TwigRendererFactory Suggested Name : Mezzio\\Template\\TemplateRendererInterface Requires : no additional services are required. Optional : Mezzio\\Router\\RouterInterface ; if found, it will be used to seed a Mezzio\\Twig\\TwigExtension instance for purposes of rendering application URLs. config , an array or ArrayAccess instance. This will be used to further configure the Twig instance, specifically with the filename extension, paths to assets (and default asset version to use), and template paths to inject. It consumes the following config structure: 'debug' =&gt; boolean, 'templates' =&gt; [ 'cache_dir' =&gt; 'path to cached templates', 'assets_url' =&gt; 'base URL for assets', 'assets_version' =&gt; 'base version for assets', 'extension' =&gt; 'file extension used by templates; defaults to html.twig', 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ] When debug is true, it disables caching, enables debug mode, enables strict variables, and enables auto reloading. The assets_* values are used to seed the TwigExtension instance (assuming the router was found).","title":"TwigRendererFactory"},{"location":"v1/features/container/factories/#laminasviewrendererfactory","text":"Provides : Mezzio\\LaminasView\\LaminasViewRenderer FactoryName : Mezzio\\LaminasView\\LaminasViewRendererFactory Suggested Name : Mezzio\\Template\\TemplateRendererInterface Requires : no additional services are required. Mezzio\\Router\\RouterInterface , in order to inject the custom url helper implementation. Optional : config , an array or ArrayAccess instance. This will be used to further configure the LaminasView instance, specifically with the layout template name, entries for a TemplateMapResolver , and template paths to inject. Laminas\\View\\HelperPluginManager ; if present, will be used to inject the PhpRenderer instance. It consumes the following config structure: 'templates' =&gt; [ 'layout' =&gt; 'name of layout view to use, if any', 'map' =&gt; [ // template =&gt; filename pairs ], 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ] When creating the PhpRenderer instance, it will inject it with a Laminas\\View\\HelperPluginManager instance (either pulled from the container, or instantiated directly). It injects the helper plugin manager with custom url and serverurl helpers, Mezzio\\LaminasView\\UrlHelper and Mezzio\\LaminasView\\ServerUrlHelper , respectively.","title":"LaminasViewRendererFactory"},{"location":"v1/features/container/intro/","text":"Containers Mezzio promotes and advocates the usage of Dependency Injection / Inversion of Control (also referred to as DI — or DIC — and IoC, respectively) containers when writing your applications. These should be used for the following: Defining application dependencies: routers, template engines, error handlers, even the Application instance itself. Defining middleware and related dependencies. The Application instance itself stores a container, from which it fetches middleware when ready to dispatch it; this encourages the idea of defining middleware-specific dependencies, and factories for ensuring they are injected. To facilitate this and allow you as a developer to choose the container you prefer, mezzio typehints against container-interop , and throughout this manual, we attempt to show using a variety of containers in examples. At this time, we document support for the following specific containers: laminas-servicemanager pimple-interop aura.di Service Names We recommend using fully-qualified class names whenever possible as service names, with one exception: in cases where a service provides an implementation of an interface used for typehints, use the interface name. Following these practices encourages the following: Consumers have a reasonable idea of what the service should return. Using interface names as service names promotes re-use and substitution. In a few cases, we define \"meta\" names. These are cases where there is no clear typehint to follow (e.g., most middleware only uses callable as a typehint, or where we want to imply specific configuration is necessary (e.g., Whoops requires specific configuration to work correctly with Mezzio, and thus we do not want a generic service name for it). We try to keep these to a minimum, however.","title":"Introduction"},{"location":"v1/features/container/intro/#containers","text":"Mezzio promotes and advocates the usage of Dependency Injection / Inversion of Control (also referred to as DI — or DIC — and IoC, respectively) containers when writing your applications. These should be used for the following: Defining application dependencies: routers, template engines, error handlers, even the Application instance itself. Defining middleware and related dependencies. The Application instance itself stores a container, from which it fetches middleware when ready to dispatch it; this encourages the idea of defining middleware-specific dependencies, and factories for ensuring they are injected. To facilitate this and allow you as a developer to choose the container you prefer, mezzio typehints against container-interop , and throughout this manual, we attempt to show using a variety of containers in examples. At this time, we document support for the following specific containers: laminas-servicemanager pimple-interop aura.di","title":"Containers"},{"location":"v1/features/container/laminas-servicemanager/","text":"Using laminas-servicemanager laminas-servicemanager is a code-driven dependency injection container provided as a standalone component by Laminas. It features: lazy-loading of invokable (constructor-less) classes. ability to define factories for specific classes. ability to define generalized factories for classes with identical construction patterns (aka abstract factories ). ability to create lazy-loading proxies. ability to intercept before or after instantiation to alter the construction workflow (aka delegator factories ). interface injection (via initializers ). laminas-servicemanager may either be created and populated programmatically, or via configuration. Configuration uses the following structure: [ 'services' =&gt; [ 'service name' =&gt; $serviceInstance, ], 'invokables' =&gt; [ 'service name' =&gt; 'class to instantiate', ], 'factories' =&gt; [ 'service name' =&gt; 'callable, Laminas\\ServiceManager\\FactoryInterface instance, or name of factory class returning the service', ], 'abstract_factories' =&gt; [ 'class name of Laminas\\ServiceManager\\AbstractFactoryInterface implementation', ], 'delegators' =&gt; [ 'service name' =&gt; [ 'class name of Laminas\\ServiceManager\\DelegatorFactoryInterface implementation', ], ], 'lazy_services' =&gt; [ 'class_map' =&gt; [ 'service name' =&gt; 'Class\\Name\\Of\\Service', ], ], 'initializers' =&gt; [ 'callable, Laminas\\ServiceManager\\InitializerInterface implementation, or name of initializer class', ], ] Read more about laminas-servicemanager in its documentation . Installing laminas-servicemanager To use laminas-servicemanager with mezzio, you can install it via composer: $ composer require laminas/laminas-servicemanager Configuring laminas-servicemanager You can configure laminas-servicemanager either programmatically or via configuration. We'll show you both methods. Programmatically To use laminas-servicemanager programatically, you'll need to create a Laminas\\ServiceManager\\ServiceManager instance, and then start populating it. For this example, we'll assume your application configuration (used by several factories to configure instances) is in config/config.php , and that that file returns an array. We'll create a config/services.php file that creates and returns a Laminas\\ServiceManager\\ServiceManager instance as follows: use Laminas\\ServiceManager\\ServiceManager; $container = new ServiceManager(); // Application and configuration $container-&gt;setService('config', include 'config/config.php'); $container-&gt;setFactory( 'Mezzio\\Application', 'Mezzio\\Container\\ApplicationFactory' ); // Routing // In most cases, you can instantiate the router you want to use without using a // factory: $container-&gt;setInvokableClass( 'Mezzio\\Router\\RouterInterface', 'Mezzio\\Router\\AuraRouter' ); // Templating // In most cases, you can instantiate the template renderer you want to use // without using a factory: $container-&gt;setInvokableClass( 'Mezzio\\Template\\TemplateRendererInterface', 'Mezzio\\Plates\\PlatesRenderer' ); // These next two can be added in any environment; they won't be used unless // you add the WhoopsErrorHandler as the FinalHandler implementation: $container-&gt;setFactory( 'Mezzio\\Whoops', 'Mezzio\\Container\\WhoopsFactory' ); $container-&gt;setFactory( 'Mezzio\\WhoopsPageHandler', 'Mezzio\\Container\\WhoopsPageHandlerFactory' ); // Error Handling // If in development: $container-&gt;setFactory( 'Mezzio\\FinalHandler', 'Mezzio\\Container\\WhoopsErrorHandlerFactory' ); // If in production: $container-&gt;setFactory( 'Mezzio\\FinalHandler', 'Mezzio\\Container\\TemplatedErrorHandlerFactory' ); return $container; Your bootstrap (typically public/index.php ) will then look like this: chdir(dirname(__DIR__)); require 'vendor/autoload.php'; $container = require 'config/services.php'; $app = $container-&gt;get('Mezzio\\Application'); $app-&gt;run(); Configuration-Driven Container Alternately, you can use a configuration file to define the container. As before, we'll define our configuration in config/config.php , and our config/services.php file will still return our service manager instance; we'll define the service configuration in config/dependencies.php : return [ 'services' =&gt; [ 'config' =&gt; include __DIR__ . '/config.php', ], 'invokables' =&gt; [ 'Mezzio\\Router\\RouterInterface' =&gt; 'Mezzio\\Router\\AuraRouter', 'Mezzio\\Template\\TemplateRendererInterface' =&gt; 'Mezzio\\Plates\\PlatesRenderer' ], 'factories' =&gt; [ 'Mezzio\\Application' =&gt; 'Mezzio\\Container\\ApplicationFactory', 'Mezzio\\Whoops' =&gt; 'Mezzio\\Container\\WhoopsFactory', 'Mezzio\\WhoopsPageHandler' =&gt; 'Mezzio\\Container\\WhoopsPageHandlerFactory', ], ]; config/services.php becomes: use Laminas\\ServiceManager\\Config; use Laminas\\ServiceManager\\ServiceManager; return new ServiceManager(new Config(include 'config/dependencies.php')); There is one problem, however: which final handler should you configure? You have two choices on how to approach this: Selectively inject the factory in the bootstrap. Define the final handler service in an environment specific file and use file globbing to merge files. In the first case, you would change the config/services.php example to look like this: use Laminas\\ServiceManager\\Config; use Laminas\\ServiceManager\\ServiceManager; $container = new ServiceManager(new Config(include 'config/services.php')); switch ($variableOrConstantIndicatingEnvironment) { case 'development': $container-&gt;setFactory( 'Mezzio\\FinalHandler', 'Mezzio\\Container\\WhoopsErrorHandlerFactory' ); break; case 'production': default: $container-&gt;setFactory( 'Mezzio\\FinalHandler', 'Mezzio\\Container\\TemplatedErrorHandlerFactory' ); } return $container; In the second case, you will need to install laminas-config: $ composer require laminas/laminas-config Then, create the directory config/autoload/ , and create two files, dependencies.global.php and dependencies.local.php . In your .gitignore , add an entry for config/autoload/*local.php to ensure \"local\" (environment-specific) files are excluded from the repository. config/dependencies.php will look like this: use Laminas\\Config\\Factory as ConfigFactory; return ConfigFactory::fromFiles( glob('config/autoload/dependencies.{global,local}.php', GLOB_BRACE) ); config/autoload/dependencies.global.php will look like this: return [ 'services' =&gt; [ 'config' =&gt; include __DIR__ . '/config.php', ], 'invokables' =&gt; [ 'Mezzio\\Router\\RouterInterface' =&gt; 'Mezzio\\Router\\AuraRouter', 'Mezzio\\Template\\TemplateRendererInterface' =&gt; 'Mezzio\\Plates\\PlatesRenderer' ], 'factories' =&gt; [ 'Mezzio\\Application' =&gt; 'Mezzio\\Container\\ApplicationFactory', 'Mezzio\\FinalHandler' =&gt; 'Mezzio\\Container\\TemplatedErrorHandlerFactory', ], ]; config/autoload/dependencies.local.php on your development machine can look like this: return [ 'factories' =&gt; [ 'Mezzio\\FinalHandler' =&gt; 'Mezzio\\Container\\WhoopsErrorHandlerFactory', 'Mezzio\\Whoops' =&gt; 'Mezzio\\Container\\WhoopsFactory', 'Mezzio\\WhoopsPageHandler' =&gt; 'Mezzio\\Container\\WhoopsPageHandlerFactory', ], ]; Using the above approach allows you to keep the bootstrap file minimal and agnostic of environment. (Note: you can take a similar approach with the application configuration.)","title":"Using laminas-servicemanager"},{"location":"v1/features/container/laminas-servicemanager/#using-laminas-servicemanager","text":"laminas-servicemanager is a code-driven dependency injection container provided as a standalone component by Laminas. It features: lazy-loading of invokable (constructor-less) classes. ability to define factories for specific classes. ability to define generalized factories for classes with identical construction patterns (aka abstract factories ). ability to create lazy-loading proxies. ability to intercept before or after instantiation to alter the construction workflow (aka delegator factories ). interface injection (via initializers ). laminas-servicemanager may either be created and populated programmatically, or via configuration. Configuration uses the following structure: [ 'services' =&gt; [ 'service name' =&gt; $serviceInstance, ], 'invokables' =&gt; [ 'service name' =&gt; 'class to instantiate', ], 'factories' =&gt; [ 'service name' =&gt; 'callable, Laminas\\ServiceManager\\FactoryInterface instance, or name of factory class returning the service', ], 'abstract_factories' =&gt; [ 'class name of Laminas\\ServiceManager\\AbstractFactoryInterface implementation', ], 'delegators' =&gt; [ 'service name' =&gt; [ 'class name of Laminas\\ServiceManager\\DelegatorFactoryInterface implementation', ], ], 'lazy_services' =&gt; [ 'class_map' =&gt; [ 'service name' =&gt; 'Class\\Name\\Of\\Service', ], ], 'initializers' =&gt; [ 'callable, Laminas\\ServiceManager\\InitializerInterface implementation, or name of initializer class', ], ] Read more about laminas-servicemanager in its documentation .","title":"Using laminas-servicemanager"},{"location":"v1/features/container/laminas-servicemanager/#installing-laminas-servicemanager","text":"To use laminas-servicemanager with mezzio, you can install it via composer: $ composer require laminas/laminas-servicemanager","title":"Installing laminas-servicemanager"},{"location":"v1/features/container/laminas-servicemanager/#configuring-laminas-servicemanager","text":"You can configure laminas-servicemanager either programmatically or via configuration. We'll show you both methods.","title":"Configuring laminas-servicemanager"},{"location":"v1/features/container/pimple/","text":"Using Pimple Pimple is a widely used code-driven dependency injection container provided as a standalone component by SensioLabs. It features: combined parameter and service storage. ability to define factories for specific classes. lazy-loading via factories. Pimple only supports programmatic creation at this time. Installing Pimple Pimple does not currently (as of v3) implement container-interop ; as such, you need to install the xtreamwayz/pimple-container-interop project, which provides a container-interop wrapper around Pimple v3: $ composer require xtreamwayz/pimple-container-interop Configuring Pimple To configure Pimple, instantiate it, and then add the factories desired. We recommend doing this in a dedicated script that returns the Pimple instance; in this example, we'll have that in config/services.php . use Xtreamwayz\\Pimple\\Container as Pimple; use Mezzio\\Container; use Mezzio\\Plates\\PlatesRenderer; use Mezzio\\Router; use Mezzio\\Template\\TemplateRendererInterface; $container = new Pimple(); // Application and configuration $container['config'] = include 'config/config.php'; $container['Mezzio\\Application'] = new Container\\ApplicationFactory; // Routing // In most cases, you can instantiate the router you want to use without using a // factory: $container['Mezzio\\Router\\RouterInterface'] = function ($container) { return new Router\\Aura(); }; // Templating // In most cases, you can instantiate the template renderer you want to use // without using a factory: $container[TemplateRendererInterface::class] = function ($container) { return new PlatesRenderer(); }; // These next two can be added in any environment; they won't be used unless // you add the WhoopsErrorHandler as the FinalHandler implementation: $container['Mezzio\\Whoops'] = new Container\\WhoopsFactory(); $container['Mezzio\\WhoopsPageHandler'] = new Container\\WhoopsPageHandlerFactory(); // Error Handling // If in development: $container['Mezzio\\FinalHandler'] = new Container\\WhoopsErrorHandlerFactory(); // If in production: $container['Mezzio\\FinalHandler'] = new Container\\TemplatedErrorHandlerFactory(); return $container; Your bootstrap (typically public/index.php ) will then look like this: chdir(dirname(__DIR__)); $container = require 'config/services.php'; $app = $container-&gt;get('Mezzio\\Application'); $app-&gt;run(); Environments In the example above, we provide two alternate definitions for the service Mezzio\\FinalHandler , one for development and one for production. You will need to add logic to your file to determine which definition to provide; this could be accomplished via an environment variable.","title":"Using Pimple"},{"location":"v1/features/container/pimple/#using-pimple","text":"Pimple is a widely used code-driven dependency injection container provided as a standalone component by SensioLabs. It features: combined parameter and service storage. ability to define factories for specific classes. lazy-loading via factories. Pimple only supports programmatic creation at this time.","title":"Using Pimple"},{"location":"v1/features/container/pimple/#installing-pimple","text":"Pimple does not currently (as of v3) implement container-interop ; as such, you need to install the xtreamwayz/pimple-container-interop project, which provides a container-interop wrapper around Pimple v3: $ composer require xtreamwayz/pimple-container-interop","title":"Installing Pimple"},{"location":"v1/features/container/pimple/#configuring-pimple","text":"To configure Pimple, instantiate it, and then add the factories desired. We recommend doing this in a dedicated script that returns the Pimple instance; in this example, we'll have that in config/services.php . use Xtreamwayz\\Pimple\\Container as Pimple; use Mezzio\\Container; use Mezzio\\Plates\\PlatesRenderer; use Mezzio\\Router; use Mezzio\\Template\\TemplateRendererInterface; $container = new Pimple(); // Application and configuration $container['config'] = include 'config/config.php'; $container['Mezzio\\Application'] = new Container\\ApplicationFactory; // Routing // In most cases, you can instantiate the router you want to use without using a // factory: $container['Mezzio\\Router\\RouterInterface'] = function ($container) { return new Router\\Aura(); }; // Templating // In most cases, you can instantiate the template renderer you want to use // without using a factory: $container[TemplateRendererInterface::class] = function ($container) { return new PlatesRenderer(); }; // These next two can be added in any environment; they won't be used unless // you add the WhoopsErrorHandler as the FinalHandler implementation: $container['Mezzio\\Whoops'] = new Container\\WhoopsFactory(); $container['Mezzio\\WhoopsPageHandler'] = new Container\\WhoopsPageHandlerFactory(); // Error Handling // If in development: $container['Mezzio\\FinalHandler'] = new Container\\WhoopsErrorHandlerFactory(); // If in production: $container['Mezzio\\FinalHandler'] = new Container\\TemplatedErrorHandlerFactory(); return $container; Your bootstrap (typically public/index.php ) will then look like this: chdir(dirname(__DIR__)); $container = require 'config/services.php'; $app = $container-&gt;get('Mezzio\\Application'); $app-&gt;run();","title":"Configuring Pimple"},{"location":"v1/features/helpers/body-parse/","text":"Body Parsing Middleware Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware provides generic PSR-7 middleware for parsing the request body into parameters, and returning a new request instance that composes them. The subcomponent provides a strategy pattern around matching the request Content-Type , and then parsing it, giving you a flexible approach that can grow with your accepted content types. By default, this middleware will detect the following content types: application/x-www-form-urlencoded (standard web-based forms, without file uploads) application/json , application/*+json (JSON payloads) Registering the middleware You can register it manually: use Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware; $app-&gt;pipe(BodyParamsMiddleware::class); // register other middleware // register routing middleware $app-&gt;run(); or as pipeline middleware: // config/autoload/middleware-pipeline.global.php use Mezzio\\Helper; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; Helper\\BodyParams\\BodyParamsMiddleware::class, /* ... */ ], 'factories' =&gt; [ /* ... */ ], ], 'middleware_pipeline' =&gt; [ [ 'middleware' =&gt; Helper\\BodyParams\\BodyParamsMiddleware::class, 'priority' =&gt; 100], /* ... */ 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Helper\\UrlHelperMiddleware::class, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], /* ... */ ], ]; Another option is to incorporate it in route-specific middleware queues: // config/autoload/routes.global.php use Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; Helper\\BodyParams\\BodyParamsMiddleware::class, /* ... */ ], 'factories' =&gt; [ /* ... */ ], ], 'routes' =&gt; [ [ 'name' =&gt; 'contact:process', 'path' =&gt; '/contact/process', 'middleware' =&gt; [ BodyParamsMiddleware::class, Contact\\Process::class, ], 'allowed_methods' =&gt; ['POST'], ], ], ]; This latter approach has a slight advantage: the middleware will only execute for routes that require the processing. While the middleware has some checks to ensure it only triggers for HTTP methods that accept bodies, those checks are still overhead that you might want to avoid; the above strategy of using the middleware only with specific routes can accomplish that. Strategies If you want to intercept and parse other payload types, you can add strategies to the middleware. Strategies implement Mezzio\\Helper\\BodyParams\\StrategyInterface : namespace Mezzio\\Helper\\BodyParams; use Psr\\Http\\Message\\ServerRequestInterface; interface StrategyInterface { /** * Match the content type to the strategy criteria. * * @param string $contentType * @return bool Whether or not the strategy matches. */ public function match($contentType); /** * Parse the body content and return a new response. * * @param ServerRequestInterface $request * @return ServerRequestInterface */ public function parse(ServerRequestInterface $request); } You then register them with the middleware using the addStrategy() method: $bodyParams-&gt;addStrategy(new MyCustomBodyParamsStrategy()); To automate the registration, we recommend writing a factory for the BodyParamsMiddleware , and replacing the invokables registration with a registration in the factories section of the middleware-pipeline.config.php file: use Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware; class MyCustomBodyParamsStrategyFactory { public function __invoke($container) { $bodyParams = new BodyParamsMiddleware(); $bodyParams-&gt;addStrategy(new MyCustomBodyParamsStrategy()); return $bodyParams; } } // In config/autoload/middleware-pipeline.config.php: use Mezzio\\Helper; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ // Remove this line: Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; Helper\\BodyParams\\BodyParamsMiddleware::class, /* ... */ ], 'factories' =&gt; [ // Add this line: Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; MyCustomBodyParamsStrategyFactory::class, /* ... */ ], ], ]; Removing the default strategies By default, BodyParamsMiddleware composes the following strategies: Mezzio\\Helper\\BodyParams\\FormUrlEncodedStrategy Mezzio\\Helper\\BodyParams\\JsonStrategy These provide the most basic approaches to parsing the request body. They operate in the order they do to ensure the most common content type — application/x-www-form-urlencoded — matches first, as the middleware delegates parsing to the first match. If you do not want to use these default strategies, you can clear them from the middleware using clearStrategies() : $bodyParamsMiddleware-&gt;clearStrategies(); Note: if you do this, all strategies will be removed! As such, we recommend doing this only immediately before registering any custom strategies you might be using.","title":"Body Parsing Middleware"},{"location":"v1/features/helpers/body-parse/#body-parsing-middleware","text":"Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware provides generic PSR-7 middleware for parsing the request body into parameters, and returning a new request instance that composes them. The subcomponent provides a strategy pattern around matching the request Content-Type , and then parsing it, giving you a flexible approach that can grow with your accepted content types. By default, this middleware will detect the following content types: application/x-www-form-urlencoded (standard web-based forms, without file uploads) application/json , application/*+json (JSON payloads)","title":"Body Parsing Middleware"},{"location":"v1/features/helpers/body-parse/#registering-the-middleware","text":"You can register it manually: use Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware; $app-&gt;pipe(BodyParamsMiddleware::class); // register other middleware // register routing middleware $app-&gt;run(); or as pipeline middleware: // config/autoload/middleware-pipeline.global.php use Mezzio\\Helper; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; Helper\\BodyParams\\BodyParamsMiddleware::class, /* ... */ ], 'factories' =&gt; [ /* ... */ ], ], 'middleware_pipeline' =&gt; [ [ 'middleware' =&gt; Helper\\BodyParams\\BodyParamsMiddleware::class, 'priority' =&gt; 100], /* ... */ 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Helper\\UrlHelperMiddleware::class, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], /* ... */ ], ]; Another option is to incorporate it in route-specific middleware queues: // config/autoload/routes.global.php use Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; Helper\\BodyParams\\BodyParamsMiddleware::class, /* ... */ ], 'factories' =&gt; [ /* ... */ ], ], 'routes' =&gt; [ [ 'name' =&gt; 'contact:process', 'path' =&gt; '/contact/process', 'middleware' =&gt; [ BodyParamsMiddleware::class, Contact\\Process::class, ], 'allowed_methods' =&gt; ['POST'], ], ], ]; This latter approach has a slight advantage: the middleware will only execute for routes that require the processing. While the middleware has some checks to ensure it only triggers for HTTP methods that accept bodies, those checks are still overhead that you might want to avoid; the above strategy of using the middleware only with specific routes can accomplish that.","title":"Registering the middleware"},{"location":"v1/features/helpers/body-parse/#strategies","text":"If you want to intercept and parse other payload types, you can add strategies to the middleware. Strategies implement Mezzio\\Helper\\BodyParams\\StrategyInterface : namespace Mezzio\\Helper\\BodyParams; use Psr\\Http\\Message\\ServerRequestInterface; interface StrategyInterface { /** * Match the content type to the strategy criteria. * * @param string $contentType * @return bool Whether or not the strategy matches. */ public function match($contentType); /** * Parse the body content and return a new response. * * @param ServerRequestInterface $request * @return ServerRequestInterface */ public function parse(ServerRequestInterface $request); } You then register them with the middleware using the addStrategy() method: $bodyParams-&gt;addStrategy(new MyCustomBodyParamsStrategy()); To automate the registration, we recommend writing a factory for the BodyParamsMiddleware , and replacing the invokables registration with a registration in the factories section of the middleware-pipeline.config.php file: use Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware; class MyCustomBodyParamsStrategyFactory { public function __invoke($container) { $bodyParams = new BodyParamsMiddleware(); $bodyParams-&gt;addStrategy(new MyCustomBodyParamsStrategy()); return $bodyParams; } } // In config/autoload/middleware-pipeline.config.php: use Mezzio\\Helper; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ // Remove this line: Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; Helper\\BodyParams\\BodyParamsMiddleware::class, /* ... */ ], 'factories' =&gt; [ // Add this line: Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; MyCustomBodyParamsStrategyFactory::class, /* ... */ ], ], ];","title":"Strategies"},{"location":"v1/features/helpers/body-parse/#removing-the-default-strategies","text":"By default, BodyParamsMiddleware composes the following strategies: Mezzio\\Helper\\BodyParams\\FormUrlEncodedStrategy Mezzio\\Helper\\BodyParams\\JsonStrategy These provide the most basic approaches to parsing the request body. They operate in the order they do to ensure the most common content type — application/x-www-form-urlencoded — matches first, as the middleware delegates parsing to the first match. If you do not want to use these default strategies, you can clear them from the middleware using clearStrategies() : $bodyParamsMiddleware-&gt;clearStrategies(); Note: if you do this, all strategies will be removed! As such, we recommend doing this only immediately before registering any custom strategies you might be using.","title":"Removing the default strategies"},{"location":"v1/features/helpers/intro/","text":"Helpers Some tasks and features will be common to many if not all applications. For those, Mezzio provides helpers . These are typically utility classes that may integrate features or simply provide standalone benefits. Currently, these include: UrlHelper ServerUrlHelper Installation If you started your project using the Mezzio skeleton package, the helpers are already installed. If not, you can install them as follows: $ composer require mezzio/mezzio-helpers","title":"Introduction"},{"location":"v1/features/helpers/intro/#helpers","text":"Some tasks and features will be common to many if not all applications. For those, Mezzio provides helpers . These are typically utility classes that may integrate features or simply provide standalone benefits. Currently, these include: UrlHelper ServerUrlHelper","title":"Helpers"},{"location":"v1/features/helpers/intro/#installation","text":"If you started your project using the Mezzio skeleton package, the helpers are already installed. If not, you can install them as follows: $ composer require mezzio/mezzio-helpers","title":"Installation"},{"location":"v1/features/helpers/server-url-helper/","text":"ServerUrlHelper Mezzio\\Helper\\ServerUrlHelper provides the ability to generate a full URI by passing only the path to the helper; it will then use that path with the current Psr\\Http\\Message\\UriInterface instance provided to it in order to generate a fully qualified URI. Usage When you have an instance, use either its generate() method, or call the instance as an invokable: // Using the generate() method: $url = $helper-&gt;generate('/foo'); // is equivalent to invocation: $url = $helper('/foo'); The helper is particularly useful when used in conjunction with the UrlHelper , as you can then create fully qualified URIs for use with headers, API hypermedia links, etc.: $url = $serverUrl($url('resource', ['id' =&gt; 'sha1'])); The signature for the ServerUrlHelper generate() and __invoke() methods is: function ($path = null) : string Where: $path , when provided, can be a string path to use to generate a URI. Creating an instance In order to use the helper, you will need to inject it with the current UriInterface from the request instance. To automate this, we provide Mezzio\\Helper\\ServerUrlMiddleware , which composes a ServerUrl instance, and, when invoked, injects it with the URI instance. As such, you will need to: Register the ServerUrlHelper as a service in your container. Register the ServerUrlMiddleware as a service in your container. Register the ServerUrlMiddleware as pipeline middleware, anytime before the routing middleware. The following examples demonstrate registering the services. use Mezzio\\Helper\\ServerUrlHelper; use Mezzio\\Helper\\ServerUrlMiddleware; use Mezzio\\Helper\\ServerUrlMiddlewareFactory; // laminas-servicemanager: $services-&gt;setInvokableClass(ServerUrlHelper::class, ServerUrlHelper::class); $services-&gt;setFactory(ServerUrlMiddleware::class, ServerUrlMiddlewareFactory::class); // Pimple: $pimple[ServerUrlHelper::class] = function ($container) { return new ServerUrlHelper(); }; $pimple[ServerUrlMiddleware::class] = function ($container) { $factory = new ServerUrlMiddlewareFactory(); return $factory($container); }; // Aura.Di: $container-&gt;set(ServerUrlHelper::class, $container-&gt;lazyNew(ServerUrlHelper::class)); $container-&gt;set(ServerUrlMiddlewareFactory::class, $container-&gt;lazyNew(ServerUrlMiddlewareFactory::class)); $container-&gt;set( ServerUrlMiddleware::class, $container-&gt;lazyGetCall(ServerUrlMiddlewareFactory::class, '__invoke', $container) ); To register the ServerUrlMiddleware as pipeline middleware anytime before the routing middleware: use Mezzio\\Helper\\ServerUrlMiddleware; // Programmatically: $app-&gt;pipe(ServerUrlMiddleware::class); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); // Or use configuration: // [ // 'middleware_pipeline' =&gt; [ // ['middleware' =&gt; ServerUrlMiddleware::class, 'priority' =&gt; PHP_INT_MAX], // /* ... */ // ], // ] The following dependency configuration will work for all three when using the Mezzio skeleton: return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ ServerUrlHelper::class =&gt; ServerUrlHelper::class, ], 'factories' =&gt; [ ServerUrlMiddleware::class =&gt; ServerUrlMiddlewareFactory::class, ], ], 'middleware_pipeline' =&gt; [ ['middleware' =&gt; ServerUrlMiddleware::class, 'priority' =&gt; PHP_INT_MAX], /* ... */ ], ]; Skeleton configures helpers If you started your project using the Mezzio skeleton package, the ServerUrlHelper and ServerUrlMiddleware factories are already registered for you, as is the ServerUrlMiddleware pipeline middleware. Using the helper in middleware Compose the helper in your middleware (or elsewhere), and then use it to generate URI paths: use Mezzio\\Helper\\ServerUrlHelper; class FooMiddleware { private $helper; public function __construct(ServerUrlHelper $helper) { $this-&gt;helper = $helper; } public function __invoke($request, $response, callable $next) { $response = $response-&gt;withHeader( 'Link', $this-&gt;helper-&gt;generate() . '; rel=\"self\"' ); return $next($request, $response); } }","title":"ServerUrlHelper"},{"location":"v1/features/helpers/server-url-helper/#serverurlhelper","text":"Mezzio\\Helper\\ServerUrlHelper provides the ability to generate a full URI by passing only the path to the helper; it will then use that path with the current Psr\\Http\\Message\\UriInterface instance provided to it in order to generate a fully qualified URI.","title":"ServerUrlHelper"},{"location":"v1/features/helpers/server-url-helper/#usage","text":"When you have an instance, use either its generate() method, or call the instance as an invokable: // Using the generate() method: $url = $helper-&gt;generate('/foo'); // is equivalent to invocation: $url = $helper('/foo'); The helper is particularly useful when used in conjunction with the UrlHelper , as you can then create fully qualified URIs for use with headers, API hypermedia links, etc.: $url = $serverUrl($url('resource', ['id' =&gt; 'sha1'])); The signature for the ServerUrlHelper generate() and __invoke() methods is: function ($path = null) : string Where: $path , when provided, can be a string path to use to generate a URI.","title":"Usage"},{"location":"v1/features/helpers/server-url-helper/#creating-an-instance","text":"In order to use the helper, you will need to inject it with the current UriInterface from the request instance. To automate this, we provide Mezzio\\Helper\\ServerUrlMiddleware , which composes a ServerUrl instance, and, when invoked, injects it with the URI instance. As such, you will need to: Register the ServerUrlHelper as a service in your container. Register the ServerUrlMiddleware as a service in your container. Register the ServerUrlMiddleware as pipeline middleware, anytime before the routing middleware. The following examples demonstrate registering the services. use Mezzio\\Helper\\ServerUrlHelper; use Mezzio\\Helper\\ServerUrlMiddleware; use Mezzio\\Helper\\ServerUrlMiddlewareFactory; // laminas-servicemanager: $services-&gt;setInvokableClass(ServerUrlHelper::class, ServerUrlHelper::class); $services-&gt;setFactory(ServerUrlMiddleware::class, ServerUrlMiddlewareFactory::class); // Pimple: $pimple[ServerUrlHelper::class] = function ($container) { return new ServerUrlHelper(); }; $pimple[ServerUrlMiddleware::class] = function ($container) { $factory = new ServerUrlMiddlewareFactory(); return $factory($container); }; // Aura.Di: $container-&gt;set(ServerUrlHelper::class, $container-&gt;lazyNew(ServerUrlHelper::class)); $container-&gt;set(ServerUrlMiddlewareFactory::class, $container-&gt;lazyNew(ServerUrlMiddlewareFactory::class)); $container-&gt;set( ServerUrlMiddleware::class, $container-&gt;lazyGetCall(ServerUrlMiddlewareFactory::class, '__invoke', $container) ); To register the ServerUrlMiddleware as pipeline middleware anytime before the routing middleware: use Mezzio\\Helper\\ServerUrlMiddleware; // Programmatically: $app-&gt;pipe(ServerUrlMiddleware::class); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); // Or use configuration: // [ // 'middleware_pipeline' =&gt; [ // ['middleware' =&gt; ServerUrlMiddleware::class, 'priority' =&gt; PHP_INT_MAX], // /* ... */ // ], // ] The following dependency configuration will work for all three when using the Mezzio skeleton: return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ ServerUrlHelper::class =&gt; ServerUrlHelper::class, ], 'factories' =&gt; [ ServerUrlMiddleware::class =&gt; ServerUrlMiddlewareFactory::class, ], ], 'middleware_pipeline' =&gt; [ ['middleware' =&gt; ServerUrlMiddleware::class, 'priority' =&gt; PHP_INT_MAX], /* ... */ ], ];","title":"Creating an instance"},{"location":"v1/features/helpers/server-url-helper/#using-the-helper-in-middleware","text":"Compose the helper in your middleware (or elsewhere), and then use it to generate URI paths: use Mezzio\\Helper\\ServerUrlHelper; class FooMiddleware { private $helper; public function __construct(ServerUrlHelper $helper) { $this-&gt;helper = $helper; } public function __invoke($request, $response, callable $next) { $response = $response-&gt;withHeader( 'Link', $this-&gt;helper-&gt;generate() . '; rel=\"self\"' ); return $next($request, $response); } }","title":"Using the helper in middleware"},{"location":"v1/features/helpers/url-helper/","text":"UrlHelper Mezzio\\Helper\\UrlHelper provides the ability to generate a URI path based on a given route defined in the Mezzio\\Router\\RouterInterface . If injected with a route result, and the route being used was also the one matched during routing, you can provide a subset of routing parameters, and any not provided will be pulled from those matched. Usage When you have an instance, use either its generate() method, or call the instance as an invokable: // Using the generate() method: $url = $helper-&gt;generate('resource', ['id' =&gt; 'sha1']); // is equivalent to invocation: $url = $helper('resource', ['id' =&gt; 'sha1']); The signature for both is: function ($routeName, array $params = []) : string Where: $routeName is the name of a route defined in the composed router. You may omit this argument if you want to generate the path for the currently matched request. $params is an array of substitutions to use for the provided route, with the following behavior: If a RouteResult is composed in the helper, and the $routeName matches it, the provided $params will be merged with any matched parameters, with those provided taking precedence. If a RouteResult is not composed, or if the composed result does not match the provided $routeName , then only the $params provided will be used for substitutions. If no $params are provided, and the $routeName matches the currently matched route, then any matched parameters found will be used. parameters found will be used. If no $params are provided, and the $routeName does not match the currently matched route, or if no route result is present, then no substitutions will be made. Each method will raise an exception if: No $routeName is provided, and no RouteResult is composed. No $routeName is provided, a RouteResult is composed, but that result represents a matching failure. The given $routeName is not defined in the router. Creating an instance In order to use the helper, you will need to instantiate it with the current RouterInterface . The factory Mezzio\\Helper\\UrlHelperFactory has been provided for this purpose, and can be used trivially with most dependency injection containers implementing container-interop. Additionally, it is most useful when injected with the current results of routing, which requires registering middleware with the application that can inject the route result. The following steps should be followed to register and configure the helper: Register the UrlHelper as a service in your container, using the provided factory. Register the UrlHelperMiddleware as a service in your container, using the provided factory. Register the UrlHelperMiddleware as pipeline middleware, immediately following the routing middleware. Registering the helper service The following examples demonstrate programmatic registration of the UrlHelper service in your selected dependency injection container. use Mezzio\\Helper\\UrlHelper; use Mezzio\\Helper\\UrlHelperFactory; // laminas-servicemanager: $services-&gt;setFactory(UrlHelper::class, UrlHelperFactory::class); // Pimple: $pimple[UrlHelper::class] = function ($container) { $factory = new UrlHelperFactory(); return $factory($container); }; // Aura.Di: $container-&gt;set(UrlHelperFactory::class, $container-&gt;lazyNew(UrlHelperFactory::class)); $container-&gt;set( UrlHelper::class, $container-&gt;lazyGetCall(UrlHelperFactory::class, '__invoke', $container) ); The following dependency configuration will work for all three when using the Mezzio skeleton: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ UrlHelper::class =&gt; UrlHelperFactory::class, ], ], ]; UrlHelperFactory requires RouterInterface The factory requires that a service named Mezzio\\Router\\RouterInterface is present, and will raise an exception if the service is not found. Registering the pipeline middleware To register the UrlHelperMiddleware as pipeline middleware following the routing middleware: use Mezzio\\Helper\\UrlHelperMiddleware; // Programmatically: $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(UrlHelperMiddleware::class); $app-&gt;pipeDispatchMiddleware(); // Or use configuration: // [ // 'middleware_pipeline' =&gt; [ // /* ... */ // Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, // ['middleware' =&gt; UrlHelperMiddleware::class], // Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, // /* ... */ // ], // ] // // Alternately, create a nested middleware pipeline for the routing, UrlHelper, // and dispatch middleware: // [ // 'middleware_pipeline' =&gt; [ // /* ... */ // 'routing' =&gt; [ // 'middleware' =&gt; [ // Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, // UrlHelperMiddleware::class // Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, // ], // 'priority' =&gt; 1, // ], // /* ... */ // ], // ] The following dependency configuration will work for all three when using the Mezzio skeleton: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ UrlHelper::class =&gt; UrlHelperFactory::class, UrlHelperMiddleware::class =&gt; UrlHelperMiddlewareFactory::class, ], ], 'middleware_pipeline' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, ['middleware' =&gt; UrlHelperMiddleware::class], Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], ]; // OR: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ UrlHelper::class =&gt; UrlHelperFactory::class, UrlHelperMiddleware::class =&gt; UrlHelperMiddlewareFactory::class, ], ], 'middleware_pipeline' =&gt; [ 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, UrlHelperMiddleware::class, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], ], ]; Skeleton configures helpers If you started your project using the Mezzio skeleton package, the UrlHelper and UrlHelperMiddleware factories are already registered for you, as is the UrlHelperMiddleware pipeline middleware. Using the helper in middleware Compose the helper in your middleware (or elsewhere), and then use it to generate URI paths: use Mezzio\\Helper\\UrlHelper; class FooMiddleware { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } public function __invoke($request, $response, callable $next) { $response = $response-&gt;withHeader( 'Link', $this-&gt;helper-&gt;generate('resource', ['id' =&gt; 'sha1']) ); return $next($request, $response); } } Base Path support If your application is running under a subdirectory, or if you are running pipeline middleware that is intercepting on a subpath, the paths generated by the router may not reflect the base path , and thus be invalid. To accommodate this, the UrlHelper supports injection of the base path; when present, it will be prepended to the path generated by the router. As an example, perhaps you have middleware running to intercept a language prefix in the URL; this middleware could then inject the UrlHelper with the detected language, before stripping it off the request URI instance to pass on to the router: use Locale; use Mezzio\\Helper\\UrlHelper; class LocaleMiddleware { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } public function __invoke($request, $response, $next) { $uri = $request-&gt;getUri(); $path = $uri-&gt;getPath(); if (! preg_match('#^/(?P&lt;locale&gt;[a-z]{2,3}([-_][a-zA-Z]{2}|))/#', $path, $matches)) { return $next($request, $response); } $locale = $matches['locale']; Locale::setDefault(Locale::canonicalize($locale)); $this-&gt;helper-&gt;setBasePath($locale); return $next( $request-&gt;withUri( $uri-&gt;withPath(substr($path, (strlen($locale) + 1))) ), $response ); } } (Note: if the base path injected is not prefixed with / , the helper will add the slash.) Paths generated by the UriHelper from this point forward will have the detected language prefix.","title":"UrlHelper"},{"location":"v1/features/helpers/url-helper/#urlhelper","text":"Mezzio\\Helper\\UrlHelper provides the ability to generate a URI path based on a given route defined in the Mezzio\\Router\\RouterInterface . If injected with a route result, and the route being used was also the one matched during routing, you can provide a subset of routing parameters, and any not provided will be pulled from those matched.","title":"UrlHelper"},{"location":"v1/features/helpers/url-helper/#usage","text":"When you have an instance, use either its generate() method, or call the instance as an invokable: // Using the generate() method: $url = $helper-&gt;generate('resource', ['id' =&gt; 'sha1']); // is equivalent to invocation: $url = $helper('resource', ['id' =&gt; 'sha1']); The signature for both is: function ($routeName, array $params = []) : string Where: $routeName is the name of a route defined in the composed router. You may omit this argument if you want to generate the path for the currently matched request. $params is an array of substitutions to use for the provided route, with the following behavior: If a RouteResult is composed in the helper, and the $routeName matches it, the provided $params will be merged with any matched parameters, with those provided taking precedence. If a RouteResult is not composed, or if the composed result does not match the provided $routeName , then only the $params provided will be used for substitutions. If no $params are provided, and the $routeName matches the currently matched route, then any matched parameters found will be used. parameters found will be used. If no $params are provided, and the $routeName does not match the currently matched route, or if no route result is present, then no substitutions will be made. Each method will raise an exception if: No $routeName is provided, and no RouteResult is composed. No $routeName is provided, a RouteResult is composed, but that result represents a matching failure. The given $routeName is not defined in the router.","title":"Usage"},{"location":"v1/features/helpers/url-helper/#creating-an-instance","text":"In order to use the helper, you will need to instantiate it with the current RouterInterface . The factory Mezzio\\Helper\\UrlHelperFactory has been provided for this purpose, and can be used trivially with most dependency injection containers implementing container-interop. Additionally, it is most useful when injected with the current results of routing, which requires registering middleware with the application that can inject the route result. The following steps should be followed to register and configure the helper: Register the UrlHelper as a service in your container, using the provided factory. Register the UrlHelperMiddleware as a service in your container, using the provided factory. Register the UrlHelperMiddleware as pipeline middleware, immediately following the routing middleware.","title":"Creating an instance"},{"location":"v1/features/helpers/url-helper/#using-the-helper-in-middleware","text":"Compose the helper in your middleware (or elsewhere), and then use it to generate URI paths: use Mezzio\\Helper\\UrlHelper; class FooMiddleware { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } public function __invoke($request, $response, callable $next) { $response = $response-&gt;withHeader( 'Link', $this-&gt;helper-&gt;generate('resource', ['id' =&gt; 'sha1']) ); return $next($request, $response); } }","title":"Using the helper in middleware"},{"location":"v1/features/helpers/url-helper/#base-path-support","text":"If your application is running under a subdirectory, or if you are running pipeline middleware that is intercepting on a subpath, the paths generated by the router may not reflect the base path , and thus be invalid. To accommodate this, the UrlHelper supports injection of the base path; when present, it will be prepended to the path generated by the router. As an example, perhaps you have middleware running to intercept a language prefix in the URL; this middleware could then inject the UrlHelper with the detected language, before stripping it off the request URI instance to pass on to the router: use Locale; use Mezzio\\Helper\\UrlHelper; class LocaleMiddleware { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } public function __invoke($request, $response, $next) { $uri = $request-&gt;getUri(); $path = $uri-&gt;getPath(); if (! preg_match('#^/(?P&lt;locale&gt;[a-z]{2,3}([-_][a-zA-Z]{2}|))/#', $path, $matches)) { return $next($request, $response); } $locale = $matches['locale']; Locale::setDefault(Locale::canonicalize($locale)); $this-&gt;helper-&gt;setBasePath($locale); return $next( $request-&gt;withUri( $uri-&gt;withPath(substr($path, (strlen($locale) + 1))) ), $response ); } } (Note: if the base path injected is not prefixed with / , the helper will add the slash.) Paths generated by the UriHelper from this point forward will have the detected language prefix.","title":"Base Path support"},{"location":"v1/features/router/aura/","text":"Using Aura.Router Aura.Router provides a plethora of methods for further configuring the router instance. One of the more useful configuration is to provide default specifications: A regular expression that applies the same for a given routing match: // Parameters named \"id\" will only match digits by default: $router-&gt;addTokens([ 'id' =&gt; '\\d+', ]); A default parameter and/or its default value to always provide: // mediatype defaults to \"application/xhtml+xml\" and will be available in all // requests: $router-&gt;addValues([ 'mediatype' =&gt; 'application/xhtml+xml', ]); Only match if secure (i.e., under HTTPS): $router-&gt;setSecure(true); In order to specify these, you need access to the underlying Aura.Router instance, however, and the RouterInterface does not provide an accessor! The answer, then, is to use dependency injection. This can be done in two ways: programmatically, or via a factory to use in conjunction with your container instance. Installing Aura.Router To use Aura.Router, you will first need to install the Aura.Router integration: $ composer require mezzio/mezzio-aurarouter Quick Start At its simplest, you can instantiate a Mezzio\\Router\\AuraRouter instance with no arguments; it will create the underlying Aura.Router objects required and compose them for you: use Mezzio\\Router\\AuraRouter; $router = new AuraRouter(); Programmatic Creation If you need greater control over the Aura.Router setup and configuration, you can create the instances necessary and inject them into Mezzio\\Router\\AuraRouter during instantiation. &lt;?php use Aura\\Router\\RouterFactory; use Mezzio\\AppFactory; use Mezzio\\Router\\AuraRouter as AuraBridge; $auraRouter = (new RouterFactory())-&gt;newInstance(); $auraRouter-&gt;setSecure(true); $auraRouter-&gt;addValues([ 'mediatype' =&gt; 'application/xhtml+xml', ]); $router = new AuraBridge($auraRouter); // First argument is the container to use, if not using the default; // second is the router. $app = AppFactory::create(null, $router); Piping the route middleware As a reminder, you will need to ensure that middleware is piped in the order in which it needs to be executed; please see the section on \"Controlling middleware execution order\" in the piping documentation . This is particularly salient when defining routes before injecting the router in the application instance! Factory-Driven Creation We recommend using an Inversion of Control container for your applications; as such, in this section we will demonstrate two strategies for creating your Aura.Router implementation. Basic Router If you don't need to provide any setup or configuration, you can simply instantiate and return an instance of Mezzio\\Router\\AuraRouter for the service name Mezzio\\Router\\RouterInterface . A factory would look like this: // in src/Application/Container/RouterFactory.php namespace Application\\Container; use Interop\\Container\\ContainerInterface; use Mezzio\\Router\\AuraRouter; class RouterFactory { /** * @param ContainerInterface $container * @return AuraRouter */ public function __invoke(ContainerInterface $container) { return new AuraRouter(); } } You would register this with laminas-servicemanager using: $container-&gt;setFactory( 'Mezzio\\Router\\RouterInterface', 'Application\\Container\\RouterFactory' ); And in Pimple: $pimple['Mezzio\\Router\\RouterInterface'] = new Application\\Container\\RouterFactory(); For laminas-servicemanager, you can omit the factory entirely, and register the class as an invokable: $container-&gt;setInvokableClass( 'Mezzio\\Router\\RouterInterface', 'Mezzio\\Router\\AuraRouter' ); Advanced Configuration If you want to provide custom setup or configuration, you can do so. In this example, we will be defining two factories: A factory to register as and generate an Aura\\Router\\Router instance. A factory registered as Mezzio\\Router\\RouterInterface , which creates and returns a Mezzio\\Router\\AuraRouter instance composing the Aura\\Router\\Router instance. Sound difficult? It's not; we've essentially done it above already! // in src/Application/Container/AuraRouterFactory.php: namespace Application\\Container; use Aura\\Router\\RouterFactory; use Interop\\Container\\ContainerInterface; class AuraRouterFactory { /** * @param ContainerInterface $container * @return \\Aura\\Router\\Router */ public function __invoke(ContainerInterface $container) { $router = (new RouterFactory())-&gt;newInstance(); $router-&gt;setSecure(true); $router-&gt;addValues([ 'mediatype' =&gt; 'application/xhtml+xml', ]); return $router; } } // in src/Application/Container/RouterFactory.php namespace Application\\Container; use Interop\\Container\\ContainerInterface; use Mezzio\\Router\\AuraRouter as AuraBridge; class RouterFactory { /** * @param ContainerInterface $container * @return AuraBridge */ public function __invoke(ContainerInterface $container) { return new AuraBridge($container-&gt;get('Aura\\Router\\Router')); } } From here, you will need to register your factories with your IoC container. If you are using laminas-servicemanager, this will look like: // Programmatically: use Laminas\\ServiceManager\\ServiceManager; $container = new ServiceManager(); $container-&gt;addFactory( 'Aura\\Router\\Router', 'Application\\Container\\AuraRouterFactory' ); $container-&gt;addFactory( 'Mezzio\\Router\\RouterInterface', 'Application\\Container\\RouterFactory' ); // Alternately, via configuration: return [ 'factories' =&gt; [ 'Aura\\Router\\Router' =&gt; 'Application\\Container\\AuraRouterFactory', 'Mezzio\\Router\\RouterInterface' =&gt; 'Application\\Container\\RouterFactory', ], ]; For Pimple, configuration looks like: use Application\\Container\\AuraRouterFactory; use Application\\Container\\RouterFactory; use Interop\\Container\\Pimple\\PimpleInterop as Pimple; $container = new Pimple(); $container['Aura\\Router\\Router'] = new AuraRouterFactory(); $container['Mezzio\\Router\\RouterInterface'] = new RouterFactory();","title":"Using Aura"},{"location":"v1/features/router/aura/#using-aurarouter","text":"Aura.Router provides a plethora of methods for further configuring the router instance. One of the more useful configuration is to provide default specifications: A regular expression that applies the same for a given routing match: // Parameters named \"id\" will only match digits by default: $router-&gt;addTokens([ 'id' =&gt; '\\d+', ]); A default parameter and/or its default value to always provide: // mediatype defaults to \"application/xhtml+xml\" and will be available in all // requests: $router-&gt;addValues([ 'mediatype' =&gt; 'application/xhtml+xml', ]); Only match if secure (i.e., under HTTPS): $router-&gt;setSecure(true); In order to specify these, you need access to the underlying Aura.Router instance, however, and the RouterInterface does not provide an accessor! The answer, then, is to use dependency injection. This can be done in two ways: programmatically, or via a factory to use in conjunction with your container instance.","title":"Using Aura.Router"},{"location":"v1/features/router/aura/#installing-aurarouter","text":"To use Aura.Router, you will first need to install the Aura.Router integration: $ composer require mezzio/mezzio-aurarouter","title":"Installing Aura.Router"},{"location":"v1/features/router/aura/#quick-start","text":"At its simplest, you can instantiate a Mezzio\\Router\\AuraRouter instance with no arguments; it will create the underlying Aura.Router objects required and compose them for you: use Mezzio\\Router\\AuraRouter; $router = new AuraRouter();","title":"Quick Start"},{"location":"v1/features/router/aura/#programmatic-creation","text":"If you need greater control over the Aura.Router setup and configuration, you can create the instances necessary and inject them into Mezzio\\Router\\AuraRouter during instantiation. &lt;?php use Aura\\Router\\RouterFactory; use Mezzio\\AppFactory; use Mezzio\\Router\\AuraRouter as AuraBridge; $auraRouter = (new RouterFactory())-&gt;newInstance(); $auraRouter-&gt;setSecure(true); $auraRouter-&gt;addValues([ 'mediatype' =&gt; 'application/xhtml+xml', ]); $router = new AuraBridge($auraRouter); // First argument is the container to use, if not using the default; // second is the router. $app = AppFactory::create(null, $router);","title":"Programmatic Creation"},{"location":"v1/features/router/aura/#factory-driven-creation","text":"We recommend using an Inversion of Control container for your applications; as such, in this section we will demonstrate two strategies for creating your Aura.Router implementation.","title":"Factory-Driven Creation"},{"location":"v1/features/router/fast-route/","text":"Using FastRoute FastRoute provides a number of different combinations for how to both parse routes and match incoming requests against them. Internally, we use the standard route parser ( FastRoute\\RouterParser\\Std ) to parse routes, a RouteCollector to collect them, and the \"Group Count Based\" dispatcher to match incoming requests against routes. If you wish to use a different combination — e.g., to use the Group Position Based route matcher — you will need to create your own instances and inject them into the Mezzio\\Router\\FastRouteRouter class, at instantiation. The FastRouteRouter bridge class accepts two arguments at instantiation: A FastRoute\\RouteCollector instance A callable that will return a FastRoute\\Dispatcher\\RegexBasedAbstract instance. Injection can be done either programmatically or via a factory to use in conjunction with your container instance. Installing FastRoute To use FastRoute, you will first need to install the FastRoute integration: $ composer require mezzio/mezzio-fastroute Quick Start At its simplest, you can instantiate a Mezzio\\Router\\FastRouteRouter instance with no arguments; it will create the underlying FastRoute objects required and compose them for you: use Mezzio\\Router\\FastRouteRouter; $router = new FastRouteRouter(); Programmatic Creation If you need greater control over the FastRoute setup and configuration, you can create the instances necessary and inject them into Mezzio\\Router\\FastRouteRouter during instantiation. To do so, you will need to set up your RouteCollector instance and/or optionally callable to return your RegexBasedAbstract instance manually, inject them in your Mezzio\\Router\\FastRouteRouter instance, and inject use that when creating your Application instance. &lt;?php use FastRoute; use FastRoute\\Dispatcher\\GroupPosBased as FastRouteDispatcher; use FastRoute\\RouteCollector; use FastRoute\\RouteGenerator; use FastRoute\\RouteParser\\Std as RouteParser; use Mezzio\\AppFactory; use Mezzio\\Router\\FastRouteRouter as FastRouteBridge; $fastRoute = new RouteCollector( new RouteParser(), new RouteGenerator() ); $getDispatcher = function ($data) { return new FastRouteDispatcher($data); }; $router = new FastRouteBridge($fastRoute, $getDispatcher); // First argument is the container to use, if not using the default; // second is the router. $app = AppFactory::create(null, $router); Piping the route middleware As a reminder, you will need to ensure that middleware is piped in the order in which it needs to be executed; please see the section on \"Controlling middleware execution order\" in the piping documentation . This is particularly salient when defining routes before injecting the router in the application instance! Factory-Driven Creation We recommend using an Inversion of Control container for your applications; as such, in this section we will demonstrate two strategies for creating your FastRoute implementation. Basic Router If you don't need to provide any setup or configuration, you can simply instantiate and return an instance of Mezzio\\Router\\FastRouteRouter for the service name Mezzio\\Router\\RouterInterface . A factory would look like this: // in src/Application/Container/RouterFactory.php namespace Application\\Container; use Interop\\Container\\ContainerInterface; use Mezzio\\Router\\FastRouteRouter; class RouterFactory { /** * @param ContainerInterface $container * @return FastRouteRouter */ public function __invoke(ContainerInterface $container) { return new FastRouteRouter(); } } You would register this with laminas-servicemanager using: $container-&gt;setFactory( 'Mezzio\\Router\\RouterInterface', 'Application\\Container\\RouterFactory' ); And in Pimple: $pimple['Mezzio\\Router\\RouterInterface'] = new Application\\Container\\RouterFactory(); For laminas-servicemanager, you can omit the factory entirely, and register the class as an invokable: $container-&gt;setInvokableClass( 'Mezzio\\Router\\RouterInterface', 'Mezzio\\Router\\FastRouteRouter' ); Advanced Configuration If you want to provide custom setup or configuration, you can do so. In this example, we will be defining three factories: A factory to register as and generate a FastRoute\\RouteCollector instance. A factory to register as FastRoute\\DispatcherFactory and return a callable factory that returns a RegexBasedAbstract instance. A factory registered as Mezzio\\Router\\RouterInterface , which creates and returns a Mezzio\\Router\\FastRouteRouter instance composing the two services. Sound difficult? It's not; we've essentially done it above already! &lt;?php // in src/Application/Container/FastRouteCollectorFactory.php: namespace Application\\Container; use FastRoute\\RouteCollector; use FastRoute\\RouteGenerator; use FastRoute\\RouteParser\\Std as RouteParser; use Interop\\Container\\ContainerInterface; class FastRouteCollectorFactory { /** * @param ContainerInterface $container * @return RouteCollector */ public function __invoke(ContainerInterface $container) { return new RouteCollector( new RouteParser(), new RouteGenerator() ); } } // in src/Application/Container/FastRouteDispatcherFactory: namespace Application\\Container; use FastRoute\\Dispatcher\\GroupPosBased as FastRouteDispatcher; use Interop\\Container\\ContainerInterface; class FastRouteDispatcherFactory { /** * @param ContainerInterface $container * @return callable */ public function __invoke(ContainerInterface $container) { return function ($data) { return new FastRouteDispatcher($data); }; } } // in src/Application/Container/RouterFactory.php namespace Application\\Container; use Interop\\Container\\ContainerInterface; use Mezzio\\Router\\FastRouteRouter as FastRouteBridge; class RouterFactory { /** * @param ContainerInterface $container * @return FastRouteBridge */ public function __invoke(ContainerInterface $container) { return new FastRouteBridge( $container-&gt;get('FastRoute\\RouteCollector'), $container-&gt;get('FastRoute\\DispatcherFactory'), ); } } From here, you will need to register your factories with your IoC container. If you are using laminas-servicemanager, this will look like: // Programmatically: use Laminas\\ServiceManager\\ServiceManager; $container = new ServiceManager(); $container-&gt;addFactory( 'FastRoute\\RouteCollector', 'Application\\Container\\FastRouteCollectorFactory' ); $container-&gt;addFactory( 'FastRoute\\DispatcherFactory', 'Application\\Container\\FastRouteDispatcherFactory' ); $container-&gt;addFactory( 'Mezzio\\Router\\RouterInterface', 'Application\\Container\\RouterFactory' ); // Alternately, via configuration: return [ 'factories' =&gt; [ 'FastRoute\\RouteCollector' =&gt; 'Application\\Container\\FastRouteCollectorFactory', 'FastRoute\\DispatcherFactory' =&gt; 'Application\\Container\\FastRouteDispatcherFactory', 'Mezzio\\Router\\RouterInterface' =&gt; 'Application\\Container\\RouterFactory', ], ]; For Pimple, configuration looks like: use Application\\Container\\FastRouteCollectorFactory; use Application\\Container\\FastRouteDispatcherFactory; use Application\\Container\\RouterFactory; use Interop\\Container\\Pimple\\PimpleInterop as Pimple; $container = new Pimple(); $container['FastRoute\\RouteCollector'] = new FastRouteCollectorFactory(); $container['FastRoute\\RouteDispatcher'] = new FastRouteDispatcherFactory(); $container['Mezzio\\Router\\RouterInterface'] = new RouterFactory(); FastRoute caching support Since mezzio-fastroute 1.3.0. Starting from version 1.3.0, mezzio-fastroute comes with support for FastRoute native dispatch data caching. Enabling this feature requires changes to your configuration. Typically, router configuration occurs in config/autoload/routes.global.php ; as such, we will reference that file when indicating configuration changes. The changes required are: You will need to delegate creation of the router instance to a new factory. You will need to add a new configuration entry, $config['router']['fastroute'] . The options in this entry will be used by the factory to build the router instance in order to toggle caching support and to specify a custom cache file. As an example: // File config/autoload/routes.global.php return [ 'dependencies' =&gt; [ //.. 'invokables' =&gt; [ /* ... */ // Comment out or remove the following line: // Mezzio\\Router\\RouterInterface::class =&gt; Mezzio\\Router\\FastRouteRouter::class, /* ... */ ], 'factories' =&gt; [ /* ... */ // Add this line; the specified factory now creates the router instance: Mezzio\\Router\\RouterInterface::class =&gt; Mezzio\\Router\\FastRouteRouterFactory::class, /* ... */ ], ], // Add the following to enable caching support: 'router' =&gt; [ 'fastroute' =&gt; [ // Enable caching support: 'cache_enabled' =&gt; true, // Optional (but recommended) cache file path: 'cache_file' =&gt; 'data/cache/fastroute.php.cache', ], ], 'routes' =&gt; [ /* ... */ ], ]; The FastRoute-specific caching options are as follows: cache_enabled (bool) is used to toggle caching support. It's advisable to enable caching in a production environment and leave it disabled for the development environment. Commenting or omitting this option is equivalent to having it set to false . We recommend enabling it in config/autoload/routes.global.php , and, in development, disabling it within config/autoload/routes.local.php or config/autoload/local.php . cache_file (string) is an optional parameter that represents the path of the dispatch data cache file. It can be provided as an absolute file path or as a path relative to the mezzio working directory. It defaults to data/cache/fastroute.php.cache , where data/cache/ is the cache directory defined within the mezzio skeleton application. An explicit absolute file path is recommended since the php include construct will skip searching the include_path and the current directory. If you choose a custom path, make sure that the directory exists and is writable by the owner of the PHP process. As with any other mezzio cached configuration, you will need to purge this file in order to enable any newly added route when FastRoute caching is enabled.","title":"Using FastRoute"},{"location":"v1/features/router/fast-route/#using-fastroute","text":"FastRoute provides a number of different combinations for how to both parse routes and match incoming requests against them. Internally, we use the standard route parser ( FastRoute\\RouterParser\\Std ) to parse routes, a RouteCollector to collect them, and the \"Group Count Based\" dispatcher to match incoming requests against routes. If you wish to use a different combination — e.g., to use the Group Position Based route matcher — you will need to create your own instances and inject them into the Mezzio\\Router\\FastRouteRouter class, at instantiation. The FastRouteRouter bridge class accepts two arguments at instantiation: A FastRoute\\RouteCollector instance A callable that will return a FastRoute\\Dispatcher\\RegexBasedAbstract instance. Injection can be done either programmatically or via a factory to use in conjunction with your container instance.","title":"Using FastRoute"},{"location":"v1/features/router/fast-route/#installing-fastroute","text":"To use FastRoute, you will first need to install the FastRoute integration: $ composer require mezzio/mezzio-fastroute","title":"Installing FastRoute"},{"location":"v1/features/router/fast-route/#quick-start","text":"At its simplest, you can instantiate a Mezzio\\Router\\FastRouteRouter instance with no arguments; it will create the underlying FastRoute objects required and compose them for you: use Mezzio\\Router\\FastRouteRouter; $router = new FastRouteRouter();","title":"Quick Start"},{"location":"v1/features/router/fast-route/#programmatic-creation","text":"If you need greater control over the FastRoute setup and configuration, you can create the instances necessary and inject them into Mezzio\\Router\\FastRouteRouter during instantiation. To do so, you will need to set up your RouteCollector instance and/or optionally callable to return your RegexBasedAbstract instance manually, inject them in your Mezzio\\Router\\FastRouteRouter instance, and inject use that when creating your Application instance. &lt;?php use FastRoute; use FastRoute\\Dispatcher\\GroupPosBased as FastRouteDispatcher; use FastRoute\\RouteCollector; use FastRoute\\RouteGenerator; use FastRoute\\RouteParser\\Std as RouteParser; use Mezzio\\AppFactory; use Mezzio\\Router\\FastRouteRouter as FastRouteBridge; $fastRoute = new RouteCollector( new RouteParser(), new RouteGenerator() ); $getDispatcher = function ($data) { return new FastRouteDispatcher($data); }; $router = new FastRouteBridge($fastRoute, $getDispatcher); // First argument is the container to use, if not using the default; // second is the router. $app = AppFactory::create(null, $router);","title":"Programmatic Creation"},{"location":"v1/features/router/fast-route/#factory-driven-creation","text":"We recommend using an Inversion of Control container for your applications; as such, in this section we will demonstrate two strategies for creating your FastRoute implementation.","title":"Factory-Driven Creation"},{"location":"v1/features/router/interface/","text":"Routing Interface Mezzio defines Mezzio\\Router\\RouterInterface , which can be injected into and consumed by Mezzio\\Application in order to provide dynamic routing capabilities to middleware. The interface serves as an abstraction to allow routers with varying capabilities to be used with an application. The interface is defined as follows: namespace Mezzio\\Router; use Psr\\Http\\Message\\ServerRequestInterface as Request; interface RouterInterface { /** * Add a route. * * This method adds a route against which the underlying implementation may * match. Implementations MUST aggregate route instances, but MUST NOT use * the details to inject the underlying router until `match()` and/or * `generateUri()` is called. This is required to allow consumers to * modify route instances before matching (e.g., to provide route options, * inject a name, etc.). * * The method MUST raise Exception\\RuntimeException if called after either `match()` * or `generateUri()` have already been called, to ensure integrity of the * router between invocations of either of those methods. * * @param Route $route * @throws Exception\\RuntimeException when called after match() or * generateUri() have been called. */ public function addRoute(Route $route); /** * Match a request against the known routes. * * Implementations will aggregate required information from the provided * request instance, and pass them to the underlying router implementation; * when done, they will then marshal a `RouteResult` instance indicating * the results of the matching operation and return it to the caller. * * @param Request $request * @return RouteResult */ public function match(Request $request); /** * Generate a URI from the named route. * * Takes the named route and any substitutions, and attempts to generate a * URI from it. * * @see https://github.com/auraphp/Aura.Router#generating-a-route-path * @see https://docs.laminas.dev/laminas.mvc.routing.html * @param string $name * @param array $substitutions * @return string * @throws Exception\\RuntimeException if unable to generate the given URI. */ public function generateUri($name, array $substitutions = []); } Developers may create and use their own implementations. We recommend registering your implementation as the service Mezzio\\Router\\RouterInterface in your container to ensure other factories provided by mezzio will receive your custom service. Implementors should also read the following sections detailing the Route and RouteResult classes, to ensure that their implementations interoperate correctly. Routes Routes are defined via Mezzio\\Router\\Route , and aggregate the following information: Path to match. Middleware to use when the route is matched. This may be a callable or a service name resolving to middleware. HTTP methods allowed for the route; if none are provided, all are assumed. Optionally, a name by which to reference the route. The Route class has the following signature: namespace Mezzio\\Router; class Route { const HTTP_METHOD_ANY = 0xff; const HTTP_METHOD_SEPARATOR = ':'; /** * @param string $path Path to match. * @param string|callable $middleware Middleware to use when this route is matched. * @param int|array Allowed HTTP methods; defaults to HTTP_METHOD_ANY. * @param string|null $name the route name * @throws Exception\\InvalidArgumentException for invalid path type. * @throws Exception\\InvalidArgumentException for invalid middleware type. * @throws Exception\\InvalidArgumentException for any invalid HTTP method names. */ public function __construct($path, $middleware, $methods = self::HTTP_METHOD_ANY, $name = null); /** * @return string */ public function getPath(); /** * Set the route name. * * @param string $name */ public function setName($name); /** * @return string */ public function getName(); /** * @return string|callable */ public function getMiddleware(); /** * @return int|string[] Returns HTTP_METHOD_ANY or array of allowed methods. */ public function getAllowedMethods(); /** * Indicate whether the specified method is allowed by the route. * * @param string $method HTTP method to test. * @return bool */ public function allowsMethod($method); /** * @param array $options */ public function setOptions(array $options); /** * @return array */ public function getOptions(); } Typically, developers will use Mezzio\\Application::route() (or one of the HTTP-specific routing methods) to create routes, and will not need to interact with Route instances. However, that method can also accept Route instances, allowing more flexibility in defining and configuring them. Matching and RouteResults Internally, Mezzio\\Application calls on RouterInterface::match() , passing it the current request instance. This allows implementations to pull what they may need from the request in order to perform their routing logic; for example, they may need the request method, the URI path, the value of the HTTPS server variable, etc. Implementations are expected to return a Mezzio\\Router\\RouteResult instance, which the routing middleware then uses to determine if routing succeeded. In the event of success, it will pull any matched parameters from the result and inject them as request attributes, and then pull the matched middleware and execute it. In the case of failure, it will determine if the failure was due to inability to match, or usage of a disallowed HTTP method; in the former case, it proceeds to the next middleware in the stack, and in the latter, returns a 405 response. The RouteResult signature is as follows: namespace Mezzio\\Router; class RouteResult { /** * Create an instance representing a route success. * * @param string $name Name of matched route. * @param callable|string $middleware Middleware associated with the * matched route. * @param array $params Parameters associated with the matched route. * @return static */ public static function fromRouteMatch($name, $middleware, array $params); /** * Create an instance representing a route failure. * * @param null|int|array $methods HTTP methods allowed for the current URI, if any * @return static */ public static function fromRouteFailure($methods = null); /** * Does the result represent successful routing? * * @return bool */ public function isSuccess(); /** * Retrieve the matched route name, if possible. * * If this result represents a failure, return false; otherwise, return the * matched route name. * * @return string */ public function getMatchedRouteName(); /** * Retrieve the matched middleware, if possible. * * @return false|callable|string Returns false if the result represents a * failure; otherwise, a callable or a string service name. */ public function getMatchedMiddleware(); /** * Returns the matched params. * * Guaranteed to return an array, even if it is simply empty. * * @return array */ public function getMatchedParams(); /** * Is this a routing failure result? * * @return bool */ public function isFailure(); /** * Does the result represent failure to route due to HTTP method? * * @return bool */ public function isMethodFailure(); /** * Retrieve the allowed methods for the route failure. * * @return string[] HTTP methods allowed */ public function getAllowedMethods(); } Typically, only those implementing routers will interact with this class.","title":"Routing Interface"},{"location":"v1/features/router/interface/#routing-interface","text":"Mezzio defines Mezzio\\Router\\RouterInterface , which can be injected into and consumed by Mezzio\\Application in order to provide dynamic routing capabilities to middleware. The interface serves as an abstraction to allow routers with varying capabilities to be used with an application. The interface is defined as follows: namespace Mezzio\\Router; use Psr\\Http\\Message\\ServerRequestInterface as Request; interface RouterInterface { /** * Add a route. * * This method adds a route against which the underlying implementation may * match. Implementations MUST aggregate route instances, but MUST NOT use * the details to inject the underlying router until `match()` and/or * `generateUri()` is called. This is required to allow consumers to * modify route instances before matching (e.g., to provide route options, * inject a name, etc.). * * The method MUST raise Exception\\RuntimeException if called after either `match()` * or `generateUri()` have already been called, to ensure integrity of the * router between invocations of either of those methods. * * @param Route $route * @throws Exception\\RuntimeException when called after match() or * generateUri() have been called. */ public function addRoute(Route $route); /** * Match a request against the known routes. * * Implementations will aggregate required information from the provided * request instance, and pass them to the underlying router implementation; * when done, they will then marshal a `RouteResult` instance indicating * the results of the matching operation and return it to the caller. * * @param Request $request * @return RouteResult */ public function match(Request $request); /** * Generate a URI from the named route. * * Takes the named route and any substitutions, and attempts to generate a * URI from it. * * @see https://github.com/auraphp/Aura.Router#generating-a-route-path * @see https://docs.laminas.dev/laminas.mvc.routing.html * @param string $name * @param array $substitutions * @return string * @throws Exception\\RuntimeException if unable to generate the given URI. */ public function generateUri($name, array $substitutions = []); } Developers may create and use their own implementations. We recommend registering your implementation as the service Mezzio\\Router\\RouterInterface in your container to ensure other factories provided by mezzio will receive your custom service. Implementors should also read the following sections detailing the Route and RouteResult classes, to ensure that their implementations interoperate correctly.","title":"Routing Interface"},{"location":"v1/features/router/interface/#routes","text":"Routes are defined via Mezzio\\Router\\Route , and aggregate the following information: Path to match. Middleware to use when the route is matched. This may be a callable or a service name resolving to middleware. HTTP methods allowed for the route; if none are provided, all are assumed. Optionally, a name by which to reference the route. The Route class has the following signature: namespace Mezzio\\Router; class Route { const HTTP_METHOD_ANY = 0xff; const HTTP_METHOD_SEPARATOR = ':'; /** * @param string $path Path to match. * @param string|callable $middleware Middleware to use when this route is matched. * @param int|array Allowed HTTP methods; defaults to HTTP_METHOD_ANY. * @param string|null $name the route name * @throws Exception\\InvalidArgumentException for invalid path type. * @throws Exception\\InvalidArgumentException for invalid middleware type. * @throws Exception\\InvalidArgumentException for any invalid HTTP method names. */ public function __construct($path, $middleware, $methods = self::HTTP_METHOD_ANY, $name = null); /** * @return string */ public function getPath(); /** * Set the route name. * * @param string $name */ public function setName($name); /** * @return string */ public function getName(); /** * @return string|callable */ public function getMiddleware(); /** * @return int|string[] Returns HTTP_METHOD_ANY or array of allowed methods. */ public function getAllowedMethods(); /** * Indicate whether the specified method is allowed by the route. * * @param string $method HTTP method to test. * @return bool */ public function allowsMethod($method); /** * @param array $options */ public function setOptions(array $options); /** * @return array */ public function getOptions(); } Typically, developers will use Mezzio\\Application::route() (or one of the HTTP-specific routing methods) to create routes, and will not need to interact with Route instances. However, that method can also accept Route instances, allowing more flexibility in defining and configuring them.","title":"Routes"},{"location":"v1/features/router/interface/#matching-and-routeresults","text":"Internally, Mezzio\\Application calls on RouterInterface::match() , passing it the current request instance. This allows implementations to pull what they may need from the request in order to perform their routing logic; for example, they may need the request method, the URI path, the value of the HTTPS server variable, etc. Implementations are expected to return a Mezzio\\Router\\RouteResult instance, which the routing middleware then uses to determine if routing succeeded. In the event of success, it will pull any matched parameters from the result and inject them as request attributes, and then pull the matched middleware and execute it. In the case of failure, it will determine if the failure was due to inability to match, or usage of a disallowed HTTP method; in the former case, it proceeds to the next middleware in the stack, and in the latter, returns a 405 response. The RouteResult signature is as follows: namespace Mezzio\\Router; class RouteResult { /** * Create an instance representing a route success. * * @param string $name Name of matched route. * @param callable|string $middleware Middleware associated with the * matched route. * @param array $params Parameters associated with the matched route. * @return static */ public static function fromRouteMatch($name, $middleware, array $params); /** * Create an instance representing a route failure. * * @param null|int|array $methods HTTP methods allowed for the current URI, if any * @return static */ public static function fromRouteFailure($methods = null); /** * Does the result represent successful routing? * * @return bool */ public function isSuccess(); /** * Retrieve the matched route name, if possible. * * If this result represents a failure, return false; otherwise, return the * matched route name. * * @return string */ public function getMatchedRouteName(); /** * Retrieve the matched middleware, if possible. * * @return false|callable|string Returns false if the result represents a * failure; otherwise, a callable or a string service name. */ public function getMatchedMiddleware(); /** * Returns the matched params. * * Guaranteed to return an array, even if it is simply empty. * * @return array */ public function getMatchedParams(); /** * Is this a routing failure result? * * @return bool */ public function isFailure(); /** * Does the result represent failure to route due to HTTP method? * * @return bool */ public function isMethodFailure(); /** * Retrieve the allowed methods for the route failure. * * @return string[] HTTP methods allowed */ public function getAllowedMethods(); } Typically, only those implementing routers will interact with this class.","title":"Matching and RouteResults"},{"location":"v1/features/router/intro/","text":"Routing One fundamental feature of mezzio is that it provides mechanisms for implementing dynamic routing, a feature required in most modern web applications. As an example, you may want to allow matching both a resource, as well as individual items of that resource: /books might return a collection of books /books/mezzio might return the individual book identified by \"mezzio\". Mezzio does not provide routing on its own; you must choose a routing adapter that implements Mezzio\\Router\\RouterInterface and provide it to the Application instance. This allows you to choose the router with the capabilities that best match your own needs, while still providing a common abstraction for defining and aggregating routes and their related middleware. Retrieving matched parameters Routing enables the ability to match dynamic path segments (or other criteria). Typically, you will want access to the values matched. The routing middleware injects any matched parameters as returned by the underlying router into the request as attributes . In the example above, let's assume the route was defined as /books/:id , where id is the name of the dynamic segment. This means that in the middleware invoked for this route, you can fetch the id attribute to discover what was matched: $id = $request-&gt;getAttribute('id'); Retrieving the matched route When routing is successful, the routing middleware injects a Mezzio\\Router\\RouteResult instance as a request attribute, using that class name as the attribute name. The RouteResult instance provides you access to the following: The matched route name, via $result-&gt;getMatchedRouteName() . The matched middleware, via $result-&gt;getMatchedMiddleware() . Matched parameters, via $result-&gt;getMatchedParams() (as noted above, these are also each injected as discrete request attributes). Allowed HTTP methods, via $result-&gt;getAllowedMethods() . As an example, you could use middleware similar to the following to return a 403 response if routing was successful, but no Authorization header is present: use Laminas\\Diactoros\\Response\\EmptyResponse; use Mezzio\\Router\\RouteResult; function ($request, $response, $next) use ($routesRequiringAuthorization, $validator) { if (! ($result = $request-&gt;getAttribute(RouteResult::class, false))) { // No route matched; delegate to next middleware return $next($request, $response); } if (! in_array($result-&gt;getMatchedRouteName(), $routesRequiringAuthorization, true)) { // Not a route requiring authorization return $next($request, $response); } $header = $request-&gt;getHeaderLine('Authorization'); if (! $validator($header)) { return new EmptyResponse(403); } return $next($request, $response); } Note that the first step is to determine if we have a RouteResult ; if we do not have one, we should either delegate to the next middleware, or return some sort of response (generally a 404). In the case of Mezzio, a later middleware will generate the 404 response for us, so we can safely delegate. URI generation Because routers have knowledge of the various paths they can match, they are also typically used within applications to generate URIs to other application resources. Mezzio provides this capability in the RouterInterface , either delegating to the underlying router implementations or providing a compatible implementation of its own. At it's most basic level, you call the generateUri() method with a route name and any substitutions you want to make: $uri = $router-&gt;generateUri('book', ['id' =&gt; 'mezzio']); Supported implementations Mezzio currently ships with adapters for the following routers: Aura.Router FastRoute laminas-mvc Router","title":"Introduction"},{"location":"v1/features/router/intro/#routing","text":"One fundamental feature of mezzio is that it provides mechanisms for implementing dynamic routing, a feature required in most modern web applications. As an example, you may want to allow matching both a resource, as well as individual items of that resource: /books might return a collection of books /books/mezzio might return the individual book identified by \"mezzio\". Mezzio does not provide routing on its own; you must choose a routing adapter that implements Mezzio\\Router\\RouterInterface and provide it to the Application instance. This allows you to choose the router with the capabilities that best match your own needs, while still providing a common abstraction for defining and aggregating routes and their related middleware.","title":"Routing"},{"location":"v1/features/router/intro/#retrieving-matched-parameters","text":"Routing enables the ability to match dynamic path segments (or other criteria). Typically, you will want access to the values matched. The routing middleware injects any matched parameters as returned by the underlying router into the request as attributes . In the example above, let's assume the route was defined as /books/:id , where id is the name of the dynamic segment. This means that in the middleware invoked for this route, you can fetch the id attribute to discover what was matched: $id = $request-&gt;getAttribute('id');","title":"Retrieving matched parameters"},{"location":"v1/features/router/intro/#retrieving-the-matched-route","text":"When routing is successful, the routing middleware injects a Mezzio\\Router\\RouteResult instance as a request attribute, using that class name as the attribute name. The RouteResult instance provides you access to the following: The matched route name, via $result-&gt;getMatchedRouteName() . The matched middleware, via $result-&gt;getMatchedMiddleware() . Matched parameters, via $result-&gt;getMatchedParams() (as noted above, these are also each injected as discrete request attributes). Allowed HTTP methods, via $result-&gt;getAllowedMethods() . As an example, you could use middleware similar to the following to return a 403 response if routing was successful, but no Authorization header is present: use Laminas\\Diactoros\\Response\\EmptyResponse; use Mezzio\\Router\\RouteResult; function ($request, $response, $next) use ($routesRequiringAuthorization, $validator) { if (! ($result = $request-&gt;getAttribute(RouteResult::class, false))) { // No route matched; delegate to next middleware return $next($request, $response); } if (! in_array($result-&gt;getMatchedRouteName(), $routesRequiringAuthorization, true)) { // Not a route requiring authorization return $next($request, $response); } $header = $request-&gt;getHeaderLine('Authorization'); if (! $validator($header)) { return new EmptyResponse(403); } return $next($request, $response); } Note that the first step is to determine if we have a RouteResult ; if we do not have one, we should either delegate to the next middleware, or return some sort of response (generally a 404). In the case of Mezzio, a later middleware will generate the 404 response for us, so we can safely delegate.","title":"Retrieving the matched route"},{"location":"v1/features/router/intro/#uri-generation","text":"Because routers have knowledge of the various paths they can match, they are also typically used within applications to generate URIs to other application resources. Mezzio provides this capability in the RouterInterface , either delegating to the underlying router implementations or providing a compatible implementation of its own. At it's most basic level, you call the generateUri() method with a route name and any substitutions you want to make: $uri = $router-&gt;generateUri('book', ['id' =&gt; 'mezzio']);","title":"URI generation"},{"location":"v1/features/router/intro/#supported-implementations","text":"Mezzio currently ships with adapters for the following routers: Aura.Router FastRoute laminas-mvc Router","title":"Supported implementations"},{"location":"v1/features/router/laminas-router/","text":"Using the Laminas Router laminas-mvc provides a router implementation; for HTTP applications, the default used in Laminas applications is Laminas\\Mvc\\Router\\Http\\TreeRouteStack , which can compose a number of different routes of differing types in order to perform routing. The Laminas bridge we provide, Mezzio\\Router\\LaminasRouter , uses the TreeRouteStack , and injects Segment routes to it; these are in turn injected with Method routes, and a special \"method not allowed\" route at negative priority to enable us to distinguish between failure to match the path and failure to match the HTTP method. If you instantiate it with no arguments, it will create an empty TreeRouteStack . Thus, the simplest way to start with this router is: use Mezzio\\AppFactory; use Mezzio\\Router\\LaminasRouter; $app = AppFactory::create(null, new LaminasRouter()); The TreeRouteStack offers some unique features: Route \"prototypes\". These are essentially like child routes that must also match in order for a given route to match. These are useful for implementing functionality such as ensuring the request comes in over HTTPS, or over a specific subdomain. Base URL functionality. If a base URL is injected, comparisons will be relative to that URL. This is mostly unnecessary with Stratigility-based middleware, but could solve some edge cases. To specify these, you need access to the underlying TreeRouteStack instance, however, and the RouterInterface does not provide an accessor! The answer, then, is to use dependency injection. This can be done in two ways: programmatically, or via a factory to use in conjunction with your container instance. Installing the Laminas Router To use the Laminas router, you will need to install the laminas-mvc router integration: $ composer require mezzio/mezzio-laminasrouter Quick Start At its simplest, you can instantiate a Mezzio\\Router\\LaminasRouter instance with no arguments; it will create the underlying laminas-mvc routing objects required and compose them for you: use Mezzio\\Router\\LaminasRouter; $router = new LaminasRouter(); Programmatic Creation If you need greater control over the laminas-mvc router setup and configuration, you can create the instances necessary and inject them into Mezzio\\Router\\LaminasRouter during instantiation. use Laminas\\Mvc\\Router\\Http\\TreeRouteStack; use Mezzio\\AppFactory; use Mezzio\\Router\\LaminasRouter; $laminasRouter = new TreeRouteStack(); $laminasRouter-&gt;addPrototypes(/* ... */); $laminasRouter-&gt;setBaseUrl(/* ... */); $router = new LaminasRouter($laminasRouter); // First argument is the container to use, if not using the default; // second is the router. $app = AppFactory::create(null, $router); Piping the route middleware As a reminder, you will need to ensure that middleware is piped in the order in which it needs to be executed; please see the section on \"Controlling middleware execution order\" in the piping documentation . This is particularly salient when defining routes before injecting the router in the application instance! Factory-Driven Creation We recommend using an Inversion of Control container for your applications; as such, in this section we will demonstrate two strategies for creating your laminas-mvc router implementation. Basic Router If you don't need to provide any setup or configuration, you can simply instantiate and return an instance of Mezzio\\Router\\LaminasRouter for the service name Mezzio\\Router\\RouterInterface . A factory would look like this: // in src/Application/Container/RouterFactory.php namespace Application\\Container; use Interop\\Container\\ContainerInterface; use Mezzio\\Router\\LaminasRouter; class RouterFactory { /** * @param ContainerInterface $container * @return LaminasRouter */ public function __invoke(ContainerInterface $container) { return new LaminasRouter(); } } You would register this with laminas-servicemanager using: $container-&gt;setFactory( 'Mezzio\\Router\\RouterInterface', 'Application\\Container\\RouterFactory' ); And in Pimple: $pimple['Mezzio\\Router\\RouterInterface'] = new Application\\Container\\RouterFactory(); For laminas-servicemanager, you can omit the factory entirely, and register the class as an invokable: $container-&gt;setInvokableClass( 'Mezzio\\Router\\RouterInterface', 'Mezzio\\Router\\LaminasRouter' ); Advanced Configuration If you want to provide custom setup or configuration, you can do so. In this example, we will be defining two factories: A factory to register as and generate an Laminas\\Mvc\\Router\\Http\\TreeRouteStack instance. A factory registered as Mezzio\\Router\\RouterInterface , which creates and returns a Mezzio\\Router\\LaminasRouter instance composing the Laminas\\Mvc\\Router\\Http\\TreeRouteStack instance. Sound difficult? It's not; we've essentially done it above already! // in src/Application/Container/TreeRouteStackFactory.php: namespace Application\\Container; use Interop\\Container\\ContainerInterface; use Laminas\\Http\\Mvc\\Router\\TreeRouteStack; class TreeRouteStackFactory { /** * @param ContainerInterface $container * @return TreeRouteStack */ public function __invoke(ContainerInterface $container) { $router = new TreeRouteStack(); $router-&gt;addPrototypes(/* ... */); $router-&gt;setBaseUrl(/* ... */); return $router; } } // in src/Application/Container/RouterFactory.php namespace Application\\Container; use Interop\\Container\\ContainerInterface; use Mezzio\\Router\\LaminasRouter; class RouterFactory { /** * @param ContainerInterface $container * @return LaminasRouter */ public function __invoke(ContainerInterface $container) { return new LaminasRouter($container-&gt;get('Laminas\\Mvc\\Router\\Http\\TreeRouteStack')); } } From here, you will need to register your factories with your IoC container. If you are using laminas-servicemanager, this will look like: // Programmatically: use Laminas\\ServiceManager\\ServiceManager; $container = new ServiceManager(); $container-&gt;addFactory( 'Laminas\\Mvc\\Router\\Http\\TreeRouteStack', 'Application\\Container\\TreeRouteStackFactory' ); $container-&gt;addFactory( 'Mezzio\\Router\\RouterInterface', 'Application\\Container\\RouterFactory' ); // Alternately, via configuration: return [ 'factories' =&gt; [ 'Laminas\\Mvc\\Router\\Http\\TreeRouteStack' =&gt; 'Application\\Container\\TreeRouteStackFactory', 'Mezzio\\Router\\RouterInterface' =&gt; 'Application\\Container\\RouterFactory', ], ]; For Pimple, configuration looks like: use Application\\Container\\TreeRouteStackFactory; use Application\\Container\\LaminasRouterFactory; use Interop\\Container\\Pimple\\PimpleInterop; $container = new PimpleInterop(); $container['Laminas\\Mvc\\Router\\Http\\TreeRouteStackFactory'] = new TreeRouteStackFactory(); $container['Mezzio\\Router\\RouterInterface'] = new RouterFactory();","title":"Using the Laminas Router"},{"location":"v1/features/router/laminas-router/#using-the-laminas-router","text":"laminas-mvc provides a router implementation; for HTTP applications, the default used in Laminas applications is Laminas\\Mvc\\Router\\Http\\TreeRouteStack , which can compose a number of different routes of differing types in order to perform routing. The Laminas bridge we provide, Mezzio\\Router\\LaminasRouter , uses the TreeRouteStack , and injects Segment routes to it; these are in turn injected with Method routes, and a special \"method not allowed\" route at negative priority to enable us to distinguish between failure to match the path and failure to match the HTTP method. If you instantiate it with no arguments, it will create an empty TreeRouteStack . Thus, the simplest way to start with this router is: use Mezzio\\AppFactory; use Mezzio\\Router\\LaminasRouter; $app = AppFactory::create(null, new LaminasRouter()); The TreeRouteStack offers some unique features: Route \"prototypes\". These are essentially like child routes that must also match in order for a given route to match. These are useful for implementing functionality such as ensuring the request comes in over HTTPS, or over a specific subdomain. Base URL functionality. If a base URL is injected, comparisons will be relative to that URL. This is mostly unnecessary with Stratigility-based middleware, but could solve some edge cases. To specify these, you need access to the underlying TreeRouteStack instance, however, and the RouterInterface does not provide an accessor! The answer, then, is to use dependency injection. This can be done in two ways: programmatically, or via a factory to use in conjunction with your container instance.","title":"Using the Laminas Router"},{"location":"v1/features/router/laminas-router/#installing-the-laminas-router","text":"To use the Laminas router, you will need to install the laminas-mvc router integration: $ composer require mezzio/mezzio-laminasrouter","title":"Installing the Laminas Router"},{"location":"v1/features/router/laminas-router/#quick-start","text":"At its simplest, you can instantiate a Mezzio\\Router\\LaminasRouter instance with no arguments; it will create the underlying laminas-mvc routing objects required and compose them for you: use Mezzio\\Router\\LaminasRouter; $router = new LaminasRouter();","title":"Quick Start"},{"location":"v1/features/router/laminas-router/#programmatic-creation","text":"If you need greater control over the laminas-mvc router setup and configuration, you can create the instances necessary and inject them into Mezzio\\Router\\LaminasRouter during instantiation. use Laminas\\Mvc\\Router\\Http\\TreeRouteStack; use Mezzio\\AppFactory; use Mezzio\\Router\\LaminasRouter; $laminasRouter = new TreeRouteStack(); $laminasRouter-&gt;addPrototypes(/* ... */); $laminasRouter-&gt;setBaseUrl(/* ... */); $router = new LaminasRouter($laminasRouter); // First argument is the container to use, if not using the default; // second is the router. $app = AppFactory::create(null, $router);","title":"Programmatic Creation"},{"location":"v1/features/router/laminas-router/#factory-driven-creation","text":"We recommend using an Inversion of Control container for your applications; as such, in this section we will demonstrate two strategies for creating your laminas-mvc router implementation.","title":"Factory-Driven Creation"},{"location":"v1/features/router/piping/","text":"Routing vs Piping Mezzio provides two mechanisms for adding middleware to your application: piping, which is a foundation feature of the underlying laminas-stratigility implementation. routing, which is an additional feature provided by mezzio. Piping laminas-stratigility provides a mechanism termed piping for composing middleware in an application. When you pipe middleware to the application, it is added to a queue, and dequeued in order until a middleware returns a response instance. If none ever returns a response instance, execution is delegated to a \"final handler\", which determines whether or not to return an error, and, if so, what kind of error to return. Stratigility also allows you to segregate piped middleware to specific paths. As an example: $app-&gt;pipe('/api', $apiMiddleware); will execute $apiMiddleware only if the path matches /api ; otherwise, it will skip over that middleware. This path segregation, however, is limited: it will only match literal paths. This is done purposefully, to provide excellent baseline performance, and to prevent feature creep in the library. Mezzio uses and exposes piping to users, with one addition: middleware may be specified by service name, and mezzio will lazy-load the service only when the middleware is invoked . In order to accomplish the lazy-loading, mezzio wraps the calls to fetch the middleware from the container and to dispatch that middleware inside a closure. This poses a problem for error handling middleware, however, as laminas-stratigility identifies error handling middleware by its arity (number of function arguments); as such, mezzio defines an additional method for piping service-driven error handling middleware, pipeErrorHandler() . The method has the same signature as pipe() : // Without a path: $app-&gt;pipeErrorHandler('error handler service name'); // Specific to a path: $app-&gt;pipeErrorHandler('/api', 'error handler service name'); This method will return a closure using the error middleware signature. Routing Routing is the process of discovering values from the incoming request based on defined criteria. That criteria might look like: /book/:id (Laminas) /book/{id} (Aura.Router) /book/{id:\\d+} (FastRoute) In each of the above, if the router determines that the request matches the criteria, it will indicate: the route that matched the id parameter was matched, and the value matched Most routers allow you to define arbitrarily complex rules, and many even allow you to define: default values for unmatched parameters criteria for evaluating a match (such as a regular expression) additional criteria to meet (such as SSL usage, allowed query string variables, etc.) As such, routing is more powerful than the literal path matching used when piping, but it is also more costly (though routers such as FastRoute largely make such performance issues moot). When to Pipe In Mezzio, we recommend that you pipe middleware in the following circumstances: It should (potentially) run on every execution. Examples for such usage include: Logging requests Performing content negotiation Handling cookies Error handling. Typically these should be piped after any normal middleware. Application segregation. You can write re-usable middleware, potentially even based off of Mezzio, that contains its own routing logic, and compose it such that it only executes if it matches a sub-path. When to Route Use routing when: Your middleware is reacting to a given path. You want to use dynamic routing. You want to restrict usage of middleware to specific HTTP methods. You want to be able to generate URIs to your middleware. The above cover most use cases; in other words, most middleware should be added to the application as routed middleware . Controlling middleware execution order As noted in the earlier section on piping, piped middleware is queued , meaning it has a FIFO (\"first in, first out\") execution order. Additionally, mezzio's routing capabilities are themselves implemented as piped middleware. As such, if you programmatically configure the router and add routes without using Application::route() , you may run into issues with the order in which piped middleware (middleware added to the application via the pipe() method) is executed. To ensure that everything executes in the correct order, you can call Application::pipeRouteMiddleware() at any time to pipe it to the application. As an example, after you have created your application instance: $app-&gt;pipe($middlewareToExecuteFirst); $app-&gt;pipeRouteMiddleware(); $app-&gt;pipe($errorMiddleware); If you fail to add any routes via Application::route() or to call Application::pipeRouteMiddleware() , the routing middleware will be called when executing the application. This means that it will be last in the middleware pipeline, which means that if you registered any error middleware, it can never be invoked. To sum: Pipe middleware to execute on every request before routing any middleware and/or before calling Application::pipeRouteMiddleware() . Pipe error handling middleware after defining routes and/or after calling Application::pipeRouteMiddleware() . If you use the provided Mezzio\\Container\\ApplicationFactory for retrieving your Application instance, you can do this by defining pre- and post-pipeline middleware, and the factory will ensure everything is registered correctly.","title":"Routing vs Piping"},{"location":"v1/features/router/piping/#routing-vs-piping","text":"Mezzio provides two mechanisms for adding middleware to your application: piping, which is a foundation feature of the underlying laminas-stratigility implementation. routing, which is an additional feature provided by mezzio.","title":"Routing vs Piping"},{"location":"v1/features/router/piping/#piping","text":"laminas-stratigility provides a mechanism termed piping for composing middleware in an application. When you pipe middleware to the application, it is added to a queue, and dequeued in order until a middleware returns a response instance. If none ever returns a response instance, execution is delegated to a \"final handler\", which determines whether or not to return an error, and, if so, what kind of error to return. Stratigility also allows you to segregate piped middleware to specific paths. As an example: $app-&gt;pipe('/api', $apiMiddleware); will execute $apiMiddleware only if the path matches /api ; otherwise, it will skip over that middleware. This path segregation, however, is limited: it will only match literal paths. This is done purposefully, to provide excellent baseline performance, and to prevent feature creep in the library. Mezzio uses and exposes piping to users, with one addition: middleware may be specified by service name, and mezzio will lazy-load the service only when the middleware is invoked . In order to accomplish the lazy-loading, mezzio wraps the calls to fetch the middleware from the container and to dispatch that middleware inside a closure. This poses a problem for error handling middleware, however, as laminas-stratigility identifies error handling middleware by its arity (number of function arguments); as such, mezzio defines an additional method for piping service-driven error handling middleware, pipeErrorHandler() . The method has the same signature as pipe() : // Without a path: $app-&gt;pipeErrorHandler('error handler service name'); // Specific to a path: $app-&gt;pipeErrorHandler('/api', 'error handler service name'); This method will return a closure using the error middleware signature.","title":"Piping"},{"location":"v1/features/router/piping/#routing","text":"Routing is the process of discovering values from the incoming request based on defined criteria. That criteria might look like: /book/:id (Laminas) /book/{id} (Aura.Router) /book/{id:\\d+} (FastRoute) In each of the above, if the router determines that the request matches the criteria, it will indicate: the route that matched the id parameter was matched, and the value matched Most routers allow you to define arbitrarily complex rules, and many even allow you to define: default values for unmatched parameters criteria for evaluating a match (such as a regular expression) additional criteria to meet (such as SSL usage, allowed query string variables, etc.) As such, routing is more powerful than the literal path matching used when piping, but it is also more costly (though routers such as FastRoute largely make such performance issues moot).","title":"Routing"},{"location":"v1/features/router/piping/#when-to-pipe","text":"In Mezzio, we recommend that you pipe middleware in the following circumstances: It should (potentially) run on every execution. Examples for such usage include: Logging requests Performing content negotiation Handling cookies Error handling. Typically these should be piped after any normal middleware. Application segregation. You can write re-usable middleware, potentially even based off of Mezzio, that contains its own routing logic, and compose it such that it only executes if it matches a sub-path.","title":"When to Pipe"},{"location":"v1/features/router/piping/#when-to-route","text":"Use routing when: Your middleware is reacting to a given path. You want to use dynamic routing. You want to restrict usage of middleware to specific HTTP methods. You want to be able to generate URIs to your middleware. The above cover most use cases; in other words, most middleware should be added to the application as routed middleware .","title":"When to Route"},{"location":"v1/features/router/piping/#controlling-middleware-execution-order","text":"As noted in the earlier section on piping, piped middleware is queued , meaning it has a FIFO (\"first in, first out\") execution order. Additionally, mezzio's routing capabilities are themselves implemented as piped middleware. As such, if you programmatically configure the router and add routes without using Application::route() , you may run into issues with the order in which piped middleware (middleware added to the application via the pipe() method) is executed. To ensure that everything executes in the correct order, you can call Application::pipeRouteMiddleware() at any time to pipe it to the application. As an example, after you have created your application instance: $app-&gt;pipe($middlewareToExecuteFirst); $app-&gt;pipeRouteMiddleware(); $app-&gt;pipe($errorMiddleware); If you fail to add any routes via Application::route() or to call Application::pipeRouteMiddleware() , the routing middleware will be called when executing the application. This means that it will be last in the middleware pipeline, which means that if you registered any error middleware, it can never be invoked. To sum: Pipe middleware to execute on every request before routing any middleware and/or before calling Application::pipeRouteMiddleware() . Pipe error handling middleware after defining routes and/or after calling Application::pipeRouteMiddleware() . If you use the provided Mezzio\\Container\\ApplicationFactory for retrieving your Application instance, you can do this by defining pre- and post-pipeline middleware, and the factory will ensure everything is registered correctly.","title":"Controlling middleware execution order"},{"location":"v1/features/router/uri-generation/","text":"URI Generation One aspect of the Mezzio\\Router\\RouterInterface is that it provides a generateUri() method. This method accepts a route name, and optionally an associative array of substitutions to use in the generated URI (e.g., if the URI has any named placeholders). Naming routes By default, routes use a combination of the path and HTTP methods supported as the name: If you call route() with no HTTP methods, the name is the literal path with no changes. $app-&gt;route('/foo', $middleware); // \"foo\" If you call get() , post() , put() , patch() , or delete() , the name will be the literal path, followed by a caret ( ^ ), followed by the uppercase HTTP method name: $app-&gt;get('/foo', $middleware); // \"foo^GET\" Alternately, these methods return a Route instance, and you can set the name on it: $app-&gt;get('/foo', $middleware)-&gt;setName('foo'); // \"foo\" If you call route() and specify a list of HTTP methods accepted, the name will be the literal path, followed by a caret ( ^ ), followed by a colon ( : )-separated list of the uppercase HTTP method names, in the order in which they were added. $app-&gt;route('/foo', $middleware, ['GET', 'POST']); // \"foo^GET:POST\" Like the HTTP-specific methods, route() also returns a Route instance, and you can set the name on it: $route = $app-&gt;route('/foo', $middleware, ['GET', 'POST']); // \"foo^GET:POST\" $route-&gt;setName('foo'); // \"foo\" Clearly, this can become difficult to remember. As such, Mezzio offers the ability to specify a custom string for the route name as an additional, optional argument to any of the above: $app-&gt;route('/foo', $middleware, 'foo'); // 'foo' $app-&gt;get('/foo/:id', $middleware, 'foo-item'); // 'foo-item' $app-&gt;route('/foo', $middleware, ['GET', 'POST'], 'foo-collection'); // 'foo-collection' As noted above, these methods also return Route instances, allowing you to set the name after-the-fact; this is particularly useful with the route() method, where you may want to omit the HTTP methods if any HTTP method is allowed: $app-&gt;route('/foo', $middleware)-&gt;setName('foo'); // 'foo' We recommend that if you plan on generating URIs for given routes, you provide a custom name. Generating URIs Once you know the name of a URI you wish to generate, you can do so from the router instance: $uri = $router-&gt;generateUri('foo-item', ['id' =&gt; 'bar']); // \"/foo/bar\" You can omit the second argument if no substitutions are necessary. Compose the router For this to work, you'll need to compose the router instance in any class that requires the URI generation facility. Inject the Mezzio\\Router\\RouterInterface service in these situations.","title":"URI Generation"},{"location":"v1/features/router/uri-generation/#uri-generation","text":"One aspect of the Mezzio\\Router\\RouterInterface is that it provides a generateUri() method. This method accepts a route name, and optionally an associative array of substitutions to use in the generated URI (e.g., if the URI has any named placeholders).","title":"URI Generation"},{"location":"v1/features/router/uri-generation/#naming-routes","text":"By default, routes use a combination of the path and HTTP methods supported as the name: If you call route() with no HTTP methods, the name is the literal path with no changes. $app-&gt;route('/foo', $middleware); // \"foo\" If you call get() , post() , put() , patch() , or delete() , the name will be the literal path, followed by a caret ( ^ ), followed by the uppercase HTTP method name: $app-&gt;get('/foo', $middleware); // \"foo^GET\" Alternately, these methods return a Route instance, and you can set the name on it: $app-&gt;get('/foo', $middleware)-&gt;setName('foo'); // \"foo\" If you call route() and specify a list of HTTP methods accepted, the name will be the literal path, followed by a caret ( ^ ), followed by a colon ( : )-separated list of the uppercase HTTP method names, in the order in which they were added. $app-&gt;route('/foo', $middleware, ['GET', 'POST']); // \"foo^GET:POST\" Like the HTTP-specific methods, route() also returns a Route instance, and you can set the name on it: $route = $app-&gt;route('/foo', $middleware, ['GET', 'POST']); // \"foo^GET:POST\" $route-&gt;setName('foo'); // \"foo\" Clearly, this can become difficult to remember. As such, Mezzio offers the ability to specify a custom string for the route name as an additional, optional argument to any of the above: $app-&gt;route('/foo', $middleware, 'foo'); // 'foo' $app-&gt;get('/foo/:id', $middleware, 'foo-item'); // 'foo-item' $app-&gt;route('/foo', $middleware, ['GET', 'POST'], 'foo-collection'); // 'foo-collection' As noted above, these methods also return Route instances, allowing you to set the name after-the-fact; this is particularly useful with the route() method, where you may want to omit the HTTP methods if any HTTP method is allowed: $app-&gt;route('/foo', $middleware)-&gt;setName('foo'); // 'foo' We recommend that if you plan on generating URIs for given routes, you provide a custom name.","title":"Naming routes"},{"location":"v1/features/router/uri-generation/#generating-uris","text":"Once you know the name of a URI you wish to generate, you can do so from the router instance: $uri = $router-&gt;generateUri('foo-item', ['id' =&gt; 'bar']); // \"/foo/bar\" You can omit the second argument if no substitutions are necessary.","title":"Generating URIs"},{"location":"v1/features/template/interface/","text":"The Template Renderer Interface Mezzio defines Mezzio\\Template\\TemplateRendererInterface , which can be injected into middleware in order to create templated response bodies. The interface is defined as follows: namespace Mezzio\\Template; interface TemplateRendererInterface { /** * Render a template, optionally with parameters. * * Implementations MUST support the `namespace::template` naming convention, * and allow omitting the filename extension. * * @param string $name * @param array|object $params * @return string */ public function render($name, $params = []); /** * Add a template path to the engine. * * Adds a template path, with optional namespace the templates in that path * provide. * * @param string $path * @param string $namespace */ public function addPath($path, $namespace = null); /** * Retrieve configured paths from the engine. * * @return TemplatePath[] */ public function getPaths(); /** * Add a default parameter to use with a template. * * Use this method to provide a default parameter to use when a template is * rendered. The parameter may be overridden by providing it when calling * `render()`, or by calling this method again with a null value. * * The parameter will be specific to the template name provided. To make * the parameter available to any template, pass the TEMPLATE_ALL constant * for the template name. * * If the default parameter existed previously, subsequent invocations with * the same template name and parameter name will overwrite. * * @param string $templateName Name of template to which the param applies; * use TEMPLATE_ALL to apply to all templates. * @param string $param Param name. * @param mixed $value */ public function addDefaultParam($templateName, $param, $value); } Namespaces Unfortunately, namespace syntax varies between different template engine implementations. As an example: Plates uses the syntax namespace::template . Twig uses the syntax @namespace/template . laminas-view does not natively support namespaces, though custom resolvers can provide the functionality. To make different engines compatible, we require implementations to support the syntax namespace::template (where namespace:: is optional) when rendering. Additionally, we require that engines allow omitting the filename suffix. When using a TemplateRendererInterface implementation, feel free to use namespaced templates, and to omit the filename suffix; this will make your code portable and allow it to use alternate template engines. Paths Most template engines and implementations will require that you specify one or more paths to templates; these are then used when resolving a template name to the actual template. You may use the addPath() method to do so: $renderer-&gt;addPath('templates'); Template engines adapted for mezzio are also required to allow namespacing templates; when adding a path, you specify the template namespace that it fulfills, and the engine will only return a template from that path if the namespace provided matches the namespace for the path. // Resolves to a path registered with the namespace \"error\"; // this example is specific to the Plates engine. $content = $renderer-&gt;render('error::404'); You can provide a namespace when registering a path via an optional second argument: // Registers the \"error\" namespace to the path \"templates/error/\" $renderer-&gt;addPath('templates/error/', 'error'); Rendering To render a template, call the render() method. This method requires the name of a template as the first argument: $content = $renderer-&gt;render('foo'); You can specify a namespaced template using the syntax namespace::template ; the template segment of the template name may use additional directory separators when necessary. One key reason to use templates is to dynamically provide data to inject in the template. You may do so by passing either an associative array or an object as the second argument to render() : $content = $renderer-&gt;render('message', [ 'greeting' =&gt; 'Hello', 'recipient' =&gt; 'World', ]); It is up to the underlying template engine to determine how to perform the injections. Default params The TemplateRendererInterface defines the method addDefaultParam() . This method can be used to specify default parameters to use when rendering a template. The signature is: public function addDefaultParam($templateName, $param, $value) If you want a parameter to be used for every template, you can specify the constant TemplateRendererInterface::TEMPLATE_ALL for the $templateName parameter. When rendering, parameters are considered in the following order, with later items having precedence over earlier ones: Default parameters specified for all templates. Default parameters specified for the template specified at rendering. Parameters specified when rendering. As an example, if we did the following: $renderer-&gt;addDefaultParam($renderer::TEMPLATE_ALL, 'foo', 'bar'); $renderer-&gt;addDefaultParam($renderer::TEMPLATE_ALL, 'bar', 'baz'); $renderer-&gt;addDefaultParam($renderer::TEMPLATE_ALL, 'baz', 'bat'); $renderer-&gt;addDefaultParam('example', 'foo', 'template default foo'); $renderer-&gt;addDefaultParam('example', 'bar', 'template default bar'); $content = $renderer-&gt;render('example', [ 'foo' =&gt; 'override', ]); Then we can expect the following substitutions will occur when rendering: References to the \"foo\" variable will contain \"override\". References to the \"bar\" variable will contain \"template default bar\". References to the \"baz\" variable will contain \"bat\". Support for default params The support for default params will often be renderer-specific. The reason is because the render() signature does not specify a type for $params , in order to allow passing alternative arguments such as view models. In such cases, the implementation will indicate its behavior when default parameters are specified, but a given $params argument does not support it. At the time of writing, each of the Plates, Twig, and laminas-view implementations support the feature.","title":"Template Renderer Interface"},{"location":"v1/features/template/interface/#the-template-renderer-interface","text":"Mezzio defines Mezzio\\Template\\TemplateRendererInterface , which can be injected into middleware in order to create templated response bodies. The interface is defined as follows: namespace Mezzio\\Template; interface TemplateRendererInterface { /** * Render a template, optionally with parameters. * * Implementations MUST support the `namespace::template` naming convention, * and allow omitting the filename extension. * * @param string $name * @param array|object $params * @return string */ public function render($name, $params = []); /** * Add a template path to the engine. * * Adds a template path, with optional namespace the templates in that path * provide. * * @param string $path * @param string $namespace */ public function addPath($path, $namespace = null); /** * Retrieve configured paths from the engine. * * @return TemplatePath[] */ public function getPaths(); /** * Add a default parameter to use with a template. * * Use this method to provide a default parameter to use when a template is * rendered. The parameter may be overridden by providing it when calling * `render()`, or by calling this method again with a null value. * * The parameter will be specific to the template name provided. To make * the parameter available to any template, pass the TEMPLATE_ALL constant * for the template name. * * If the default parameter existed previously, subsequent invocations with * the same template name and parameter name will overwrite. * * @param string $templateName Name of template to which the param applies; * use TEMPLATE_ALL to apply to all templates. * @param string $param Param name. * @param mixed $value */ public function addDefaultParam($templateName, $param, $value); }","title":"The Template Renderer Interface"},{"location":"v1/features/template/interface/#paths","text":"Most template engines and implementations will require that you specify one or more paths to templates; these are then used when resolving a template name to the actual template. You may use the addPath() method to do so: $renderer-&gt;addPath('templates'); Template engines adapted for mezzio are also required to allow namespacing templates; when adding a path, you specify the template namespace that it fulfills, and the engine will only return a template from that path if the namespace provided matches the namespace for the path. // Resolves to a path registered with the namespace \"error\"; // this example is specific to the Plates engine. $content = $renderer-&gt;render('error::404'); You can provide a namespace when registering a path via an optional second argument: // Registers the \"error\" namespace to the path \"templates/error/\" $renderer-&gt;addPath('templates/error/', 'error');","title":"Paths"},{"location":"v1/features/template/interface/#rendering","text":"To render a template, call the render() method. This method requires the name of a template as the first argument: $content = $renderer-&gt;render('foo'); You can specify a namespaced template using the syntax namespace::template ; the template segment of the template name may use additional directory separators when necessary. One key reason to use templates is to dynamically provide data to inject in the template. You may do so by passing either an associative array or an object as the second argument to render() : $content = $renderer-&gt;render('message', [ 'greeting' =&gt; 'Hello', 'recipient' =&gt; 'World', ]); It is up to the underlying template engine to determine how to perform the injections.","title":"Rendering"},{"location":"v1/features/template/intro/","text":"Templating By default, no middleware in Mezzio is templated. We do not even provide a default templating engine, as the choice of templating engine is often very specific to the project and/or organization. We do, however, provide abstraction for templating via the interface Mezzio\\Template\\TemplateRendererInterface , which allows you to write middleware that is engine-agnostic. For Mezzio, this means: All adapters MUST support template namespacing. Namespaces MUST be referenced using the notation namespace::template when rendering. Adapters MUST allow rendering templates that omit the extension; they will, of course, resolve to whatever default extension they require (or as configured). Adapters SHOULD allow passing an extension in the template name, but how that is handled is left up to the adapter. Adapters SHOULD abstract layout capabilities. Many templating systems provide this out of the box, or similar, compatible features such as template inheritance. This should be transparent to end-users; they should be able to simply render a template and assume it has the full content to return. In this documentation, we'll detail the features of this interface, the various implementations we provide, and how you can configure, inject, and consume templating in your middleware. We currently support: Plates Twig laminas-view Each has an associated container factory; details are found in the factories documentation .","title":"Introduction"},{"location":"v1/features/template/intro/#templating","text":"By default, no middleware in Mezzio is templated. We do not even provide a default templating engine, as the choice of templating engine is often very specific to the project and/or organization. We do, however, provide abstraction for templating via the interface Mezzio\\Template\\TemplateRendererInterface , which allows you to write middleware that is engine-agnostic. For Mezzio, this means: All adapters MUST support template namespacing. Namespaces MUST be referenced using the notation namespace::template when rendering. Adapters MUST allow rendering templates that omit the extension; they will, of course, resolve to whatever default extension they require (or as configured). Adapters SHOULD allow passing an extension in the template name, but how that is handled is left up to the adapter. Adapters SHOULD abstract layout capabilities. Many templating systems provide this out of the box, or similar, compatible features such as template inheritance. This should be transparent to end-users; they should be able to simply render a template and assume it has the full content to return. In this documentation, we'll detail the features of this interface, the various implementations we provide, and how you can configure, inject, and consume templating in your middleware. We currently support: Plates Twig laminas-view Each has an associated container factory; details are found in the factories documentation .","title":"Templating"},{"location":"v1/features/template/laminas-view/","text":"Using laminas-view laminas-view provides a native PHP template system via its PhpRenderer , and is maintained by Laminas. It provides: Layout facilities. Helpers for escaping, and the ability to provide custom helper extensions. We provide a TemplateRendererInterface wrapper for laminas-view's PhpRenderer via Mezzio\\LaminasView\\LaminasViewRenderer . Installing laminas-view To use the laminas-view wrapper, you must first install the laminas-view integration: $ composer require mezzio/mezzio-laminasviewrenderer Using the wrapper If instantiated without arguments, Mezzio\\LaminasView\\LaminasViewRenderer will create an instance of the PhpRenderer , which it will then proxy to. use Mezzio\\LaminasView\\LaminasViewRenderer; $renderer = new LaminasViewRenderer(); Alternately, you can instantiate and configure the engine yourself, and pass it to the Mezzio\\LaminasView\\LaminasViewRenderer constructor: use Laminas\\View\\Renderer\\PhpRenderer; use Laminas\\View\\Resolver; use Mezzio\\LaminasView\\LaminasViewRenderer; // Create the engine instance: $renderer = new PhpRenderer(); // Configure it: $resolver = new Resolver\\AggregateResolver(); $resolver-&gt;attach( new Resolver\\TemplateMapResolver(include 'config/templates.php'), 100 ); $resolver-&gt;attach( (new Resolver\\TemplatePathStack()) -&gt;setPaths(include 'config/template_paths.php') ); $renderer-&gt;setResolver($resolver); // Inject: $renderer = new LaminasViewRenderer($renderer); Namespaced path resolving Mezzio defines a custom laminas-view resolver, Mezzio\\LaminasView\\NamespacedPathStackResolver . This resolver provides the ability to segregate paths by namespace, and later resolve a template according to the namespace, using the namespace::template notation required of TemplateRendererInterface implementations. The LaminasView adapter ensures that: An AggregateResolver is registered with the renderer. If the registered resolver is not an AggregateResolver , it creates one and adds the original resolver to it. A NamespacedPathStackResolver is registered with the AggregateResolver , at a low priority (0), ensuring attempts to resolve hit it later. With resolvers such as the TemplateMapResolver , you can also resolve namespaced templates, mapping them directly to the template on the filesystem that matches; adding such a resolver can be a nice performance boost! Layouts Unlike the other supported template engines, laminas-view does not support layouts out-of-the-box. Mezzio abstracts this fact away, providing two facilities for doing so: You may pass a layout template name or Laminas\\View\\Model\\ModelInterface instance representing the layout as the second argument to the constructor. You may pass a \"layout\" parameter during rendering, with a value of either a layout template name or a Laminas\\View\\Model\\ModelInterface instance representing the layout. Passing a layout this way will override any layout provided to the constructor. In each case, the laminas-view implementation will do a depth-first, recursive render in order to provide content within the selected layout. Layout name passed to constructor use Mezzio\\LaminasView\\LaminasViewRenderer; // Create the engine instance with a layout name: $renderer = new LaminasViewRenderer(null, 'layout::layout'); Layout view model passed to constructor use Laminas\\View\\Model\\ViewModel; use Mezzio\\LaminasView\\LaminasViewRenderer; // Create the layout view model: $layout = new ViewModel([ 'encoding' =&gt; 'utf-8', 'cssPath' =&gt; '/css/prod/', ]); $layout-&gt;setTemplate('layout::layout'); // Create the engine instance with the layout: $renderer = new LaminasViewRenderer(null, $layout); Provide a layout name when rendering $content = $renderer-&gt;render('blog/entry', [ 'layout' =&gt; 'layout::blog', 'entry' =&gt; $entry, ]); Provide a layout view model when rendering use Laminas\\View\\Model\\ViewModel; // Create the layout view model: $layout = new ViewModel([ 'encoding' =&gt; 'utf-8', 'cssPath' =&gt; '/css/blog/', ]); $layout-&gt;setTemplate('layout::layout'); $content = $renderer-&gt;render('blog/entry', [ 'layout' =&gt; $layout, 'entry' =&gt; $entry, ]); Helpers Mezzio provides overrides of specific view helpers in order to better integrate with PSR-7. These include: Mezzio\\LaminasView\\UrlHelper . This helper consumes the application's Mezzio\\Router\\RouterInterface instance in order to generate URIs. It's signature is: url($routeName, array $substitutions = []) Mezzio\\LaminasView\\ServerUrlHelper . This helper consumes the URI from the application's request in order to provide fully qualified URIs. It's signature is: serverUrl($path = null) . To use this particular helper, you will need to inject it with the request URI somewhere within your application: $serverUrlHelper-&gt;setUri($request-&gt;getUri()); We recommend doing this within a pre-pipeline middleware. Recommendations We recommend the following practices when using the laminas-view adapter: If using a layout, create a factory to return the layout view model as a service; this allows you to inject it into middleware and add variables to it. While we support passing the layout as a rendering parameter, be aware that if you change engines, this may not be supported.","title":"Using laminas-view"},{"location":"v1/features/template/laminas-view/#using-laminas-view","text":"laminas-view provides a native PHP template system via its PhpRenderer , and is maintained by Laminas. It provides: Layout facilities. Helpers for escaping, and the ability to provide custom helper extensions. We provide a TemplateRendererInterface wrapper for laminas-view's PhpRenderer via Mezzio\\LaminasView\\LaminasViewRenderer .","title":"Using laminas-view"},{"location":"v1/features/template/laminas-view/#installing-laminas-view","text":"To use the laminas-view wrapper, you must first install the laminas-view integration: $ composer require mezzio/mezzio-laminasviewrenderer","title":"Installing laminas-view"},{"location":"v1/features/template/laminas-view/#using-the-wrapper","text":"If instantiated without arguments, Mezzio\\LaminasView\\LaminasViewRenderer will create an instance of the PhpRenderer , which it will then proxy to. use Mezzio\\LaminasView\\LaminasViewRenderer; $renderer = new LaminasViewRenderer(); Alternately, you can instantiate and configure the engine yourself, and pass it to the Mezzio\\LaminasView\\LaminasViewRenderer constructor: use Laminas\\View\\Renderer\\PhpRenderer; use Laminas\\View\\Resolver; use Mezzio\\LaminasView\\LaminasViewRenderer; // Create the engine instance: $renderer = new PhpRenderer(); // Configure it: $resolver = new Resolver\\AggregateResolver(); $resolver-&gt;attach( new Resolver\\TemplateMapResolver(include 'config/templates.php'), 100 ); $resolver-&gt;attach( (new Resolver\\TemplatePathStack()) -&gt;setPaths(include 'config/template_paths.php') ); $renderer-&gt;setResolver($resolver); // Inject: $renderer = new LaminasViewRenderer($renderer);","title":"Using the wrapper"},{"location":"v1/features/template/laminas-view/#layouts","text":"Unlike the other supported template engines, laminas-view does not support layouts out-of-the-box. Mezzio abstracts this fact away, providing two facilities for doing so: You may pass a layout template name or Laminas\\View\\Model\\ModelInterface instance representing the layout as the second argument to the constructor. You may pass a \"layout\" parameter during rendering, with a value of either a layout template name or a Laminas\\View\\Model\\ModelInterface instance representing the layout. Passing a layout this way will override any layout provided to the constructor. In each case, the laminas-view implementation will do a depth-first, recursive render in order to provide content within the selected layout.","title":"Layouts"},{"location":"v1/features/template/laminas-view/#helpers","text":"Mezzio provides overrides of specific view helpers in order to better integrate with PSR-7. These include: Mezzio\\LaminasView\\UrlHelper . This helper consumes the application's Mezzio\\Router\\RouterInterface instance in order to generate URIs. It's signature is: url($routeName, array $substitutions = []) Mezzio\\LaminasView\\ServerUrlHelper . This helper consumes the URI from the application's request in order to provide fully qualified URIs. It's signature is: serverUrl($path = null) . To use this particular helper, you will need to inject it with the request URI somewhere within your application: $serverUrlHelper-&gt;setUri($request-&gt;getUri()); We recommend doing this within a pre-pipeline middleware.","title":"Helpers"},{"location":"v1/features/template/laminas-view/#recommendations","text":"We recommend the following practices when using the laminas-view adapter: If using a layout, create a factory to return the layout view model as a service; this allows you to inject it into middleware and add variables to it. While we support passing the layout as a rendering parameter, be aware that if you change engines, this may not be supported.","title":"Recommendations"},{"location":"v1/features/template/middleware/","text":"Templated Middleware The primary use case for templating is within middleware, to provide templated responses. To do this, you will: Inject an instance of Mezzio\\Template\\TemplateRendererInterface into your middleware. Potentially add paths to the templating instance. Render a template. Add the results of rendering to your response. Injecting a TemplateRendererInterface We encourage the use of dependency injection. As such, we recommend writing your middleware to accept the TemplateRendererInterface via either the constructor or a setter. As an example: namespace Acme\\Blog; use Mezzio\\Template\\TemplateRendererInterface; class EntryMiddleware { private $templateRenderer; public function __construct(TemplateRendererInterface $renderer) { $this-&gt;templateRenderer = $renderer; } public function __invoke($request, $response, $next) { // ... } } This will necessitate having a factory for your middleware: namespace Acme\\Blog\\Container; use Acme\\Blog\\EntryMiddleware; use Interop\\Container\\ContainerInterface; class EntryMiddlewareFactory { public function __invoke(ContainerInterface $container) { return new EntryMiddleware( $container-&gt;get('Mezzio\\Template\\TemplateRendererInterface') ); } } And, of course, you'll need to tell your container to use the factory; see the container documentation for more information on how you might accomplish that. Consuming templates Now that we have the templating engine injected into our middleware, we can consume it. Most often, we will want to render a template, optionally with substitutions to pass to it. This will typically look like the following: &lt;?php namespace Acme\\Blog; use Laminas\\Diactoros\\Response\\HtmlResponse; use Mezzio\\Template\\TemplateRendererInterface; class EntryMiddleware { private $templateRenderer; public function __construct(TemplateRendererInterface $renderer) { $this-&gt;templateRenderer = $renderer; } public function __invoke($request, $response, $next) { // do some work... return new HtmlResponse( $this-&gt;templateRenderer-&gt;render('blog::entry', [ 'entry' =&gt; $entry, ]) ); } } Alternately, you can write to the composed response: $response-&gt;getBody()-&gt;write($this-&gt;templateRenderer-&gt;render('blog::entry', [ 'entry' =&gt; $entry, ])); return $response;","title":"Templated Middleware"},{"location":"v1/features/template/middleware/#templated-middleware","text":"The primary use case for templating is within middleware, to provide templated responses. To do this, you will: Inject an instance of Mezzio\\Template\\TemplateRendererInterface into your middleware. Potentially add paths to the templating instance. Render a template. Add the results of rendering to your response.","title":"Templated Middleware"},{"location":"v1/features/template/middleware/#injecting-a-templaterendererinterface","text":"We encourage the use of dependency injection. As such, we recommend writing your middleware to accept the TemplateRendererInterface via either the constructor or a setter. As an example: namespace Acme\\Blog; use Mezzio\\Template\\TemplateRendererInterface; class EntryMiddleware { private $templateRenderer; public function __construct(TemplateRendererInterface $renderer) { $this-&gt;templateRenderer = $renderer; } public function __invoke($request, $response, $next) { // ... } } This will necessitate having a factory for your middleware: namespace Acme\\Blog\\Container; use Acme\\Blog\\EntryMiddleware; use Interop\\Container\\ContainerInterface; class EntryMiddlewareFactory { public function __invoke(ContainerInterface $container) { return new EntryMiddleware( $container-&gt;get('Mezzio\\Template\\TemplateRendererInterface') ); } } And, of course, you'll need to tell your container to use the factory; see the container documentation for more information on how you might accomplish that.","title":"Injecting a TemplateRendererInterface"},{"location":"v1/features/template/middleware/#consuming-templates","text":"Now that we have the templating engine injected into our middleware, we can consume it. Most often, we will want to render a template, optionally with substitutions to pass to it. This will typically look like the following: &lt;?php namespace Acme\\Blog; use Laminas\\Diactoros\\Response\\HtmlResponse; use Mezzio\\Template\\TemplateRendererInterface; class EntryMiddleware { private $templateRenderer; public function __construct(TemplateRendererInterface $renderer) { $this-&gt;templateRenderer = $renderer; } public function __invoke($request, $response, $next) { // do some work... return new HtmlResponse( $this-&gt;templateRenderer-&gt;render('blog::entry', [ 'entry' =&gt; $entry, ]) ); } } Alternately, you can write to the composed response: $response-&gt;getBody()-&gt;write($this-&gt;templateRenderer-&gt;render('blog::entry', [ 'entry' =&gt; $entry, ])); return $response;","title":"Consuming templates"},{"location":"v1/features/template/plates/","text":"Using Plates Plates is a native PHP template system maintained by The League of Extraordinary Packages . it provides: Layout facilities. Template inheritance. Helpers for escaping, and the ability to provide custom helper extensions. We provide a TemplateRendererInterface wrapper for Plates via Mezzio\\Plates\\PlatesRenderer . Installing Plates To use the Plates wrapper, you must install the Plates integration: $ composer require mezzio/mezzio-platesrenderer Using the wrapper If instantiated without arguments, Mezzio\\Plates\\PlatesRenderer will create an instance of the Plates engine, which it will then proxy to. use Mezzio\\Plates\\PlatesRenderer; $renderer = new PlatesRenderer(); Alternately, you can instantiate and configure the engine yourself, and pass it to the Mezzio\\Plates\\PlatesRenderer constructor: use League\\Plates\\Engine as PlatesEngine; use Mezzio\\Plates\\PlatesRenderer; // Create the engine instance: $plates = new PlatesEngine(); // Configure it: $plates-&gt;addFolder('error', 'templates/error/'); $plates-&gt;loadExtension(new CustomExtension()); // Inject: $renderer = new PlatesRenderer($plates);","title":"Using Plates"},{"location":"v1/features/template/plates/#using-plates","text":"Plates is a native PHP template system maintained by The League of Extraordinary Packages . it provides: Layout facilities. Template inheritance. Helpers for escaping, and the ability to provide custom helper extensions. We provide a TemplateRendererInterface wrapper for Plates via Mezzio\\Plates\\PlatesRenderer .","title":"Using Plates"},{"location":"v1/features/template/plates/#installing-plates","text":"To use the Plates wrapper, you must install the Plates integration: $ composer require mezzio/mezzio-platesrenderer","title":"Installing Plates"},{"location":"v1/features/template/plates/#using-the-wrapper","text":"If instantiated without arguments, Mezzio\\Plates\\PlatesRenderer will create an instance of the Plates engine, which it will then proxy to. use Mezzio\\Plates\\PlatesRenderer; $renderer = new PlatesRenderer(); Alternately, you can instantiate and configure the engine yourself, and pass it to the Mezzio\\Plates\\PlatesRenderer constructor: use League\\Plates\\Engine as PlatesEngine; use Mezzio\\Plates\\PlatesRenderer; // Create the engine instance: $plates = new PlatesEngine(); // Configure it: $plates-&gt;addFolder('error', 'templates/error/'); $plates-&gt;loadExtension(new CustomExtension()); // Inject: $renderer = new PlatesRenderer($plates);","title":"Using the wrapper"},{"location":"v1/features/template/twig/","text":"Using Twig Twig is a template language and engine provided as a standalone component by SensioLabs. It provides: Layout facilities. Template inheritance. Helpers for escaping, and the ability to provide custom helper extensions. We provide a TemplateRendererInterface wrapper for Twig via Mezzio\\Twig\\TwigRenderer . Installing Twig To use the Twig wrapper, you must first install the Twig integration: $ composer require mezzio/mezzio-twigrenderer Using the wrapper If instantiated without arguments, Mezzio\\Twig\\TwigRenderer will create an instance of the Twig engine, which it will then proxy to. use Mezzio\\Twig\\TwigRenderer; $renderer = new TwigRenderer(); Alternately, you can instantiate and configure the engine yourself, and pass it to the Mezzio\\Twig\\TwigRenderer constructor: use Mezzio\\Twig\\TwigRenderer; use Twig_Environment; use Twig_Loader_Array; // Create the engine instance: $loader = new Twig_Loader_Array(include 'config/templates.php'); $twig = new Twig_Environment($loader); // Configure it: $twig-&gt;addExtension(new CustomExtension()); $twig-&gt;loadExtension(new CustomExtension(); // Inject: $renderer = new TwigRenderer($twig); Included extensions and functions The included Twig extension adds support for url generation. The extension is automatically activated if the UrlHelper and ServerUrlHelper are registered with the container. The following template functions are exposed: path : Render the relative path for a given route and parameters. If there is no route, it returns the current path. {{ path('article_show', {'id': '3'}) }} Generates: /article/3 url : Render the absolute url for a given route and parameters. If there is no route, it returns the current url. {{ url('article_show', {'slug': 'article.slug'}) }} Generates: http://example.com/article/article.slug absolute_url : Render the absolute url from a given path. If the path is empty, it returns the current url. {{ absolute_url('path/to/something') }} Generates: http://example.com/path/to/something asset Render an (optionally versioned) asset url. {{ asset('path/to/asset/name.ext', version=3) }} Generates: path/to/asset/name.ext?v=3 To get the absolute url for an asset: {{ absolute_url(asset('path/to/asset/name.ext', version=3)) }} Generates: http://example.com/path/to/asset/name.ext?v=3 Configuration The following details configuration specific to Twig, as consumed by the TwigRendererFactory : return [ 'templates' =&gt; [ 'extension' =&gt; 'file extension used by templates; defaults to html.twig', 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ], 'twig' =&gt; [ 'cache_dir' =&gt; 'path to cached templates', 'assets_url' =&gt; 'base URL for assets', 'assets_version' =&gt; 'base version for assets', 'extensions' =&gt; [ // extension service names or instances ], 'globals' =&gt; [ // Global variables passed to twig templates 'ga_tracking' =&gt; 'UA-XXXXX-X' ], ], ];","title":"Using Twig"},{"location":"v1/features/template/twig/#using-twig","text":"Twig is a template language and engine provided as a standalone component by SensioLabs. It provides: Layout facilities. Template inheritance. Helpers for escaping, and the ability to provide custom helper extensions. We provide a TemplateRendererInterface wrapper for Twig via Mezzio\\Twig\\TwigRenderer .","title":"Using Twig"},{"location":"v1/features/template/twig/#installing-twig","text":"To use the Twig wrapper, you must first install the Twig integration: $ composer require mezzio/mezzio-twigrenderer","title":"Installing Twig"},{"location":"v1/features/template/twig/#using-the-wrapper","text":"If instantiated without arguments, Mezzio\\Twig\\TwigRenderer will create an instance of the Twig engine, which it will then proxy to. use Mezzio\\Twig\\TwigRenderer; $renderer = new TwigRenderer(); Alternately, you can instantiate and configure the engine yourself, and pass it to the Mezzio\\Twig\\TwigRenderer constructor: use Mezzio\\Twig\\TwigRenderer; use Twig_Environment; use Twig_Loader_Array; // Create the engine instance: $loader = new Twig_Loader_Array(include 'config/templates.php'); $twig = new Twig_Environment($loader); // Configure it: $twig-&gt;addExtension(new CustomExtension()); $twig-&gt;loadExtension(new CustomExtension(); // Inject: $renderer = new TwigRenderer($twig);","title":"Using the wrapper"},{"location":"v1/features/template/twig/#included-extensions-and-functions","text":"The included Twig extension adds support for url generation. The extension is automatically activated if the UrlHelper and ServerUrlHelper are registered with the container. The following template functions are exposed: path : Render the relative path for a given route and parameters. If there is no route, it returns the current path. {{ path('article_show', {'id': '3'}) }} Generates: /article/3 url : Render the absolute url for a given route and parameters. If there is no route, it returns the current url. {{ url('article_show', {'slug': 'article.slug'}) }} Generates: http://example.com/article/article.slug absolute_url : Render the absolute url from a given path. If the path is empty, it returns the current url. {{ absolute_url('path/to/something') }} Generates: http://example.com/path/to/something asset Render an (optionally versioned) asset url. {{ asset('path/to/asset/name.ext', version=3) }} Generates: path/to/asset/name.ext?v=3 To get the absolute url for an asset: {{ absolute_url(asset('path/to/asset/name.ext', version=3)) }} Generates: http://example.com/path/to/asset/name.ext?v=3","title":"Included extensions and functions"},{"location":"v1/features/template/twig/#configuration","text":"The following details configuration specific to Twig, as consumed by the TwigRendererFactory : return [ 'templates' =&gt; [ 'extension' =&gt; 'file extension used by templates; defaults to html.twig', 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ], 'twig' =&gt; [ 'cache_dir' =&gt; 'path to cached templates', 'assets_url' =&gt; 'base URL for assets', 'assets_version' =&gt; 'base version for assets', 'extensions' =&gt; [ // extension service names or instances ], 'globals' =&gt; [ // Global variables passed to twig templates 'ga_tracking' =&gt; 'UA-XXXXX-X' ], ], ];","title":"Configuration"},{"location":"v1/getting-started/features/","text":"Overview Mezzio allows you to write PSR-7 middleware applications for the web. PSR-7 is a standard defining HTTP message interfaces; these are the incoming request and outgoing response for your application. By using PSR-7, we ensure that your applications will work in other PSR-7 contexts. Middleware is any code sitting between a request and a response; it typically analyzes the request to aggregate incoming data, delegates it to another layer to process, and then creates and returns a response. Middleware can and should be relegated only to those tasks, and should be relatively easy to write and maintain. Middleware is also designed for composability; you should be able to nest middleware and re-use middleware. With Mezzio, you can build PSR-7-based middleware applications: APIs Websites Single Page Applications and more. Features Mezzio builds on laminas-stratigility to provide a robust convenience layer on which to build applications. The features it provides include: Routing Stratigility provides limited, literal matching only. Mezzio allows you to utilize dynamic routing capabilities from a variety of routers, providing much more fine-grained matching capabilities. The routing layer also allows restricting matched routes to specific HTTP methods, and will return \"405 Not Allowed\" responses with an \"Allow\" HTTP header containing allowed HTTP methods for invalid requests. Routing is abstracted in Mezzio, allowing the developer to choose the routing library that best fits the project needs. By default, we provide wrappers for Aura.Router, FastRoute, and the laminas-mvc router. container-interop Mezzio encourages the use of Dependency Injection, and defines its Application class to compose a container-interop ContainerInterface instance. The container is used to lazy-load middleware, whether it is piped (Stratigility interface) or routed (Mezzio). Templating While Mezzio does not assume templating is being used, it provides a templating abstraction. Developers can write middleware that typehints on this abstraction, and assume that the underlying adapter will provide layout support and namespaced template support. Error Handling Applications should handle errors gracefully, but also handle them differently in development versus production. Mezzio provides both basic error handling via Stratigility's own FinalHandler implementation, as well as more advanced error handling via two specialized error handlers: a templated error handler for production, and a Whoops-based error handler for development. Flow Overview Below is a diagram detailing the workflow used by Mezzio. The Application acts as an \"onion\"; in the diagram above, the top is the outermost layer of the onion, while the bottom is the innermost. The Application dispatches each middleware. Each middleware accepts a request , a response , and the next middleware to dispatch. Internally, it's actually receiving the middleware stack itself, which knows which middleware to invoke next. Any given middleware can return a response , at which point execution winds its way back out the onion. Additionally, any given middleware can indicate an error occurred, at which point it can call on the next error handling middleware . These act like regular middleware, but accept an additional error argument to act on. Pipelines The terminology \"pipeline\" is often used to describe the onion. One way of looking at the \"onion\" is as a queue , which is first-in-first-out (FIFO) in operation. This means that the first middleware on the queue is executed first, and this invokes the next, and so on (and hence the \"next\" terminology). When looked at from this perspective: In most cases, the entire queue will not be traversed. The innermost layer of the onion represents the last item in the queue. Responses are returned through the pipeline, in reverse order of traversal. The Application allows arbitrary middleware to be injected, with each being executed in the order in which they are attached; returning a response from middleware prevents any middleware attached later from executing. You can attach middleware manually, in which case the pipeline is executed in the order of attachment, or use configuration. When you use configuration, you will specify a priority integer to dictate the order in which middleware should be attached. Middleware specifying high integer prioritiess are attached (and thus executed) earlier, while those specifying lower and/or negative integers are attached later. The default priority is 1. Mezzio provides a default implementation of \"routing\" and \"dispatch\" middleware, which you either attach to the middleware pipeline manually, or via configuration. Routing within Mezzio consists of decomposing the request to match it to middleware that can handle that given request. This typically consists of a combination of matching the requested URI path along with allowed HTTP methods: map a GET request to the path /api/ping to the PingMiddleware map a POST request to the path /contact/process to the HandleContactMiddleware etc. Dispatching is simply the act of calling the middleware mapped by routing. The two events are modeled as separate middleware to allow you to act on the results of routing before attempting to dispatch the mapped middleware; this can be useful for implementing route-based authentication or validation. The majority of your application will consist of routing rules that map to routed middleware. Middleware piped to the application earlier than routing should be middleware that you wish to execute for every request. These might include: bootstrapping parsing of request body parameters addition of debugging tools embedded Mezzio applications that you want to match at a given literal path etc. Such middleware may decide that a request is invalid, and return a response; doing so means no further middleware will be executed! This is an important feature of middleware architectures, as it allows you to define application-specific workflows optimized for performance, security, etc. Middleware piped to the application after the routing and dispatch middleware will execute in one of two conditions: routing failed routed middleware called on the next middleware instead of returning a response. As such, the largest use case for such middleware is for error handling. One possibility is for providing custom 404 handling , or handling application-specific error conditions (such as authentication or authorization failures). Another possibility is to provide post-processing on the response before returning it. However, this is typically better handled via middleware piped early, by capturing the response before returning it: function ($request, $response, $next) { $response = $next($request, $response); return $response-&gt;withHeader('X-Clacks-Overhead', 'GNU Terry Pratchett'); } The main points to remember are: The application is a queue, and operates in FIFO order. Each middleware can choose whether to return a response, which will cause the queue to unwind, or to traverse to the next middleware. Most of the time, you will be defining routed middleware , and the routing rules that map to them. You get to control the workflow of your application by deciding the order in which middleware is queued.","title":"Overview and Features"},{"location":"v1/getting-started/features/#overview","text":"Mezzio allows you to write PSR-7 middleware applications for the web. PSR-7 is a standard defining HTTP message interfaces; these are the incoming request and outgoing response for your application. By using PSR-7, we ensure that your applications will work in other PSR-7 contexts. Middleware is any code sitting between a request and a response; it typically analyzes the request to aggregate incoming data, delegates it to another layer to process, and then creates and returns a response. Middleware can and should be relegated only to those tasks, and should be relatively easy to write and maintain. Middleware is also designed for composability; you should be able to nest middleware and re-use middleware. With Mezzio, you can build PSR-7-based middleware applications: APIs Websites Single Page Applications and more.","title":"Overview"},{"location":"v1/getting-started/features/#features","text":"Mezzio builds on laminas-stratigility to provide a robust convenience layer on which to build applications. The features it provides include: Routing Stratigility provides limited, literal matching only. Mezzio allows you to utilize dynamic routing capabilities from a variety of routers, providing much more fine-grained matching capabilities. The routing layer also allows restricting matched routes to specific HTTP methods, and will return \"405 Not Allowed\" responses with an \"Allow\" HTTP header containing allowed HTTP methods for invalid requests. Routing is abstracted in Mezzio, allowing the developer to choose the routing library that best fits the project needs. By default, we provide wrappers for Aura.Router, FastRoute, and the laminas-mvc router. container-interop Mezzio encourages the use of Dependency Injection, and defines its Application class to compose a container-interop ContainerInterface instance. The container is used to lazy-load middleware, whether it is piped (Stratigility interface) or routed (Mezzio). Templating While Mezzio does not assume templating is being used, it provides a templating abstraction. Developers can write middleware that typehints on this abstraction, and assume that the underlying adapter will provide layout support and namespaced template support. Error Handling Applications should handle errors gracefully, but also handle them differently in development versus production. Mezzio provides both basic error handling via Stratigility's own FinalHandler implementation, as well as more advanced error handling via two specialized error handlers: a templated error handler for production, and a Whoops-based error handler for development.","title":"Features"},{"location":"v1/getting-started/features/#flow-overview","text":"Below is a diagram detailing the workflow used by Mezzio. The Application acts as an \"onion\"; in the diagram above, the top is the outermost layer of the onion, while the bottom is the innermost. The Application dispatches each middleware. Each middleware accepts a request , a response , and the next middleware to dispatch. Internally, it's actually receiving the middleware stack itself, which knows which middleware to invoke next. Any given middleware can return a response , at which point execution winds its way back out the onion. Additionally, any given middleware can indicate an error occurred, at which point it can call on the next error handling middleware . These act like regular middleware, but accept an additional error argument to act on.","title":"Flow Overview"},{"location":"v1/getting-started/skeleton/","text":"Quick Start: Using the Skeleton + Installer The easiest way to get started with Mezzio is to use the skeleton application and installer . The skeleton provides a generic structure for creating your applications, and prompts you to choose a router, dependency injection container, template renderer, and error handler from the outset. 1. Create a new project First, we'll create a new project, using Composer's create-project command: $ composer create-project mezzio/mezzio-skeleton mezzio This will prompt you to choose: A router. We recommend using the default, FastRoute. A dependency injection container. We recommend using the default, Laminas ServiceManager. A template renderer. You can ignore this when creating an API project, but if you will be creating any HTML pages, we recommend installing one. We prefer Plates. An error handler. Whoops is a very nice option for development, as it gives you extensive, browseable information for exceptions and errors raised. 2. Start a web server The Skeleton + Installer creates a full application structure that's ready-to-go when complete. You can test it out using built-in web server . From the project root directory, execute the following: $ composer serve This starts up a web server on localhost port 8080; browse to http://localhost:8080/ to see if your application responds correctly! Next Steps The skeleton makes the assumption that you will be writing your middleware as classes, and using configuration to map routes to middleware. It also provides a default structure for templates, if you choose to use them. Let's see how you can create first vanilla middleware, and then templated middleware. Creating middleware The easiest way to create middleware is to create a class that defines an __invoke() method accepting a request, response, and callable \"next\" argument (for invoking the \"next\" middleware in the queue). The skeleton defines an App namespace for you, and suggests placing middleware under the namespace App\\Action . Let's create a \"Hello\" action. Place the following in src/App/Action/HelloAction.php : &lt;?php namespace App\\Action; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; class HelloAction { public function __invoke(ServerRequestInterface $request, ResponseInterface $response, callable $next) { $query = $request-&gt;getQueryParams(); $target = isset($query['target']) ? $query['target'] : 'World'; $target = htmlspecialchars($target, ENT_HTML5, 'UTF-8'); $response-&gt;getBody()-&gt;write(sprintf( '&lt;h1&gt;Hello, %s!&lt;/h1&gt;', $target )); return $response-&gt;withHeader('Content-Type', 'text/html'); } } The above looks for a query string parameter \"target\", and uses its value to provide a message, which is then returned in an HTML response. Now we need to inform the application of this middleware, and indicate what path will invoke it. Open the file config/autoload/routes.global.php . Inside that file, you should have a structure similar to the following: return [ 'dependencies' =&gt; [ /* ... */ ], 'routes' =&gt; [ /* ... */ ], ]; We're going to add an entry under routes : return [ /* ... */ 'routes' =&gt; [ /* ... */ [ 'name' =&gt; 'hello', 'path' =&gt; '/hello', 'middleware' =&gt; App\\Action\\HelloAction::class, 'allowed_methods' =&gt; ['GET'], ], ], ]; Once you've added the above entry, give it a try by going to each of the following URIs: http://localhost:8080/hello http://localhost:8080/hello?target=ME You should see the message change as you go between the two URIs! Using templates You likely don't want to hardcode HTML into your middleware; so, let's use templates. This particular exercise assumes you chose to use the Plates integration. Templates are installed under the templates/ subdirectory. By default, we also register the template namespace app to correspond with the templates/app subdirectory. Create the file templates/app/hello-world.phtml with the following contents: &lt;?php $this-&gt;layout('layout::default', ['title' =&gt; 'Greetings']) ?&gt; &lt;h2&gt;Hello, &lt;?= $this-&gt;e($target) ?&gt;&lt;/h2&gt; Now that we have a template, we need to: Inject a renderer into our action class. Use the renderer to render the contents. Replace your src/App/Action/HelloAction.php file with the following contents: &lt;?php namespace App\\Action; use Laminas\\Diactoros\\Response\\HtmlResponse; use Mezzio\\Template\\TemplateRendererInterface; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; class HelloAction { private $renderer; public function __construct(TemplateRendererInterface $renderer) { $this-&gt;renderer = $renderer; } public function __invoke(ServerRequestInterface $request, ResponseInterface $response, callable $next) { $query = $request-&gt;getQueryParams(); $target = isset($query['target']) ? $query['target'] : 'World'; return new HtmlResponse( $this-&gt;renderer-&gt;render('app::hello-world', ['target' =&gt; $target]) ); } } The above modifies the class to accept a renderer to the constructor, and then calls on it to render a template. A few things to note: We no longer need to escape our target; the template takes care of that for us. We're using a specific response type here, from Diactoros , which is the default PSR-7 implementation Mezzio uses. This response type simplifies our response creation. How does the template renderer get into the action, however? The answer is dependency injection. For the next part of the example, we'll be creating and wiring a factory for creating the HelloAction instance; the example assumes you used the default selection for a dependency injection container, Laminas ServiceManager. Let's create a factory. Create the file src/App/Action/HelloActionFactory.php with the following contents: &lt;?php namespace App\\Action; use Interop\\Container\\ContainerInterface; use Mezzio\\Template\\TemplateRendererInterface; class HelloActionFactory { public function __invoke(ContainerInterface $container) { return new HelloAction( $container-&gt;get(TemplateRendererInterface::class) ); } } With that in place, we'll now update our configuration. Open the file config/autoload/routes.global.php ; it should have a structure similar to the following: return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ /* ... */ ], ], 'routes' =&gt; [ /* ... */ ], ]; We're going to tell our application that we have a factory for our HelloAction class: return [ 'dependencies' =&gt; [ /* ... */ 'factories' =&gt; [ /* ... */ App\\Action\\HelloAction::class =&gt; App\\Action\\HelloActionFactory::class, ], ], 'routes' =&gt; [ /* ... */ ], ]; Save that file, and now re-visit the URIs: http://localhost:8080/hello http://localhost:8080/hello?target=ME Your page should now have the same layout as the landing page of the skeleton application! Congratulations Congratulations! You've now created your application, and started writing middleware! It's time to start learning about the rest of the features of Mezzio: Containers Routing Templating Error Handling","title":"Quick Start: Skeleton Installer"},{"location":"v1/getting-started/skeleton/#quick-start-using-the-skeleton-installer","text":"The easiest way to get started with Mezzio is to use the skeleton application and installer . The skeleton provides a generic structure for creating your applications, and prompts you to choose a router, dependency injection container, template renderer, and error handler from the outset.","title":"Quick Start: Using the Skeleton + Installer"},{"location":"v1/getting-started/skeleton/#1-create-a-new-project","text":"First, we'll create a new project, using Composer's create-project command: $ composer create-project mezzio/mezzio-skeleton mezzio This will prompt you to choose: A router. We recommend using the default, FastRoute. A dependency injection container. We recommend using the default, Laminas ServiceManager. A template renderer. You can ignore this when creating an API project, but if you will be creating any HTML pages, we recommend installing one. We prefer Plates. An error handler. Whoops is a very nice option for development, as it gives you extensive, browseable information for exceptions and errors raised.","title":"1. Create a new project"},{"location":"v1/getting-started/skeleton/#2-start-a-web-server","text":"The Skeleton + Installer creates a full application structure that's ready-to-go when complete. You can test it out using built-in web server . From the project root directory, execute the following: $ composer serve This starts up a web server on localhost port 8080; browse to http://localhost:8080/ to see if your application responds correctly!","title":"2. Start a web server"},{"location":"v1/getting-started/skeleton/#next-steps","text":"The skeleton makes the assumption that you will be writing your middleware as classes, and using configuration to map routes to middleware. It also provides a default structure for templates, if you choose to use them. Let's see how you can create first vanilla middleware, and then templated middleware.","title":"Next Steps"},{"location":"v1/getting-started/skeleton/#congratulations","text":"Congratulations! You've now created your application, and started writing middleware! It's time to start learning about the rest of the features of Mezzio: Containers Routing Templating Error Handling","title":"Congratulations"},{"location":"v1/getting-started/standalone/","text":"Quick Start: Standalone Usage Mezzio allows you to get started at your own pace. You can start with the simplest example, detailed below, or move on to a more structured, configuration-driven approach as detailed in the use case examples . 1. Create a new project directory First, let's create a new project directory and enter it: $ mkdir mezzio $ cd mezzio 2. Install Mezzio If you haven't already, install Composer . Once you have, we can install Mezzio, along with a router and a container: $ composer require mezzio/mezzio mezzio/mezzio-fastroute laminas/laminas-servicemanager Routers Mezzio needs a routing implementation in order to create routed middleware. We suggest FastRoute in the quick start, but you can also currently choose from Aura.Router and laminas-router. Containers We highly recommend using dependency injection containers with Mezzio; they allow you to define dependencies for your middleware, as well as to lazy load your middleware only when it needs to be executed. We suggest laminas-servicemanager in the quick start, but you can also use any container supporting container-interop . 3. Create a web root directory You'll need a directory from which to serve your application, and for security reasons, it's a good idea to keep it separate from your source code. We'll create a public/ directory for this: $ mkdir public 4. Create your bootstrap script Next, we'll create a bootstrap script. Such scripts typically set up the environment, set up the application, and invoke it. This needs to be in our web root, and we want it to intercept any incoming request; as such, we'll use public/index.php : &lt;?php use Mezzio\\AppFactory; chdir(dirname(__DIR__)); require 'vendor/autoload.php'; $app = AppFactory::create(); $app-&gt;get('/', function ($request, $response, $next) { $response-&gt;getBody()-&gt;write('Hello, world!'); return $response; }); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); $app-&gt;run(); Rewriting URLs Many web servers will not rewrite URLs to the bootstrap script by default. If you use Apache, for instance, you'll need to set up rewrite rules to ensure your bootstrap is invoked for unknown URLs. We'll cover that in a later chapter. Routing and dispatching Note the lines from the above: $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); Mezzio's Application class provides two separate middlewares, one for routing, and one for dispatching middleware matched by routing. This allows you to slip in validations between the two activities if desired. They are not automatically piped to the application, however, to allow exactly that situation, which means they must be piped manually. 5. Start a web server Since we're just testing out the basic functionality of our application, we'll use PHP's built-in web server . From the project root directory, execute the following: $ php -S 0.0.0.0:8080 -t public/ This starts up a web server on localhost port 8080; browse to http://localhost:8080/ to see if your application responds correctly! Tip: Serve via Composer To simplify starting up a local web server, try adding the following to your composer.json : \"scripts\": { \"serve\": \"php -S 0.0.0.0:8080 -t public/\" } Once you've added that, you can fire up the web server using: $ composer serve Next steps At this point, you have a working mezzio application, that responds to a single route. From here, you may want to read up on: Applications Containers Routing Templating Error Handling Additionally, we have more use case examples .","title":"Quick Start: Standalone"},{"location":"v1/getting-started/standalone/#quick-start-standalone-usage","text":"Mezzio allows you to get started at your own pace. You can start with the simplest example, detailed below, or move on to a more structured, configuration-driven approach as detailed in the use case examples .","title":"Quick Start: Standalone Usage"},{"location":"v1/getting-started/standalone/#1-create-a-new-project-directory","text":"First, let's create a new project directory and enter it: $ mkdir mezzio $ cd mezzio","title":"1. Create a new project directory"},{"location":"v1/getting-started/standalone/#2-install-mezzio","text":"If you haven't already, install Composer . Once you have, we can install Mezzio, along with a router and a container: $ composer require mezzio/mezzio mezzio/mezzio-fastroute laminas/laminas-servicemanager","title":"2. Install Mezzio"},{"location":"v1/getting-started/standalone/#3-create-a-web-root-directory","text":"You'll need a directory from which to serve your application, and for security reasons, it's a good idea to keep it separate from your source code. We'll create a public/ directory for this: $ mkdir public","title":"3. Create a web root directory"},{"location":"v1/getting-started/standalone/#4-create-your-bootstrap-script","text":"Next, we'll create a bootstrap script. Such scripts typically set up the environment, set up the application, and invoke it. This needs to be in our web root, and we want it to intercept any incoming request; as such, we'll use public/index.php : &lt;?php use Mezzio\\AppFactory; chdir(dirname(__DIR__)); require 'vendor/autoload.php'; $app = AppFactory::create(); $app-&gt;get('/', function ($request, $response, $next) { $response-&gt;getBody()-&gt;write('Hello, world!'); return $response; }); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); $app-&gt;run();","title":"4. Create your bootstrap script"},{"location":"v1/getting-started/standalone/#5-start-a-web-server","text":"Since we're just testing out the basic functionality of our application, we'll use PHP's built-in web server . From the project root directory, execute the following: $ php -S 0.0.0.0:8080 -t public/ This starts up a web server on localhost port 8080; browse to http://localhost:8080/ to see if your application responds correctly!","title":"5. Start a web server"},{"location":"v1/getting-started/standalone/#next-steps","text":"At this point, you have a working mezzio application, that responds to a single route. From here, you may want to read up on: Applications Containers Routing Templating Error Handling Additionally, we have more use case examples .","title":"Next steps"},{"location":"v1/reference/mezzio-projects/","text":"Projects powered by mezzio mezzio can be used for anything. Here are some projects, tutorials and the related source code. Have a look around and see how others have used mezzio. Sample Code &amp; Tutorials Expressive Tutorial (WIP) - source AstroSplash - source php-ddd-cargo-sample - source Personal Sites mwop.net - source alejandrocelaya.com - source zimuel.it - source","title":"Mezzio Projects"},{"location":"v1/reference/mezzio-projects/#projects-powered-by-mezzio","text":"mezzio can be used for anything. Here are some projects, tutorials and the related source code. Have a look around and see how others have used mezzio.","title":"Projects powered by mezzio"},{"location":"v1/reference/mezzio-projects/#sample-code-tutorials","text":"Expressive Tutorial (WIP) - source AstroSplash - source php-ddd-cargo-sample - source","title":"Sample Code &amp; Tutorials"},{"location":"v1/reference/mezzio-projects/#personal-sites","text":"mwop.net - source alejandrocelaya.com - source zimuel.it - source","title":"Personal Sites"},{"location":"v1/reference/usage-examples/","text":"Usage Examples Below are several usage examples, covering a variety of ways of creating and managing an application. In all examples, the assumption is the following directory structure: . ├── config ├── data ├── composer.json ├── public │ └── index.php ├── src └── vendor We assume also that: You have installed mezzio per the installation instructions . public/ will be the document root of your application. Your own classes are under src/ with the top-level namespace Application , and you have configured autoloading in your composer.json for those classes. Using the built-in web server You can use the built-in web server to run the examples. Run: $ php -S 0.0.0.0:8080 -t public from the application root to start up a web server running on port 8080, and then browse to http://localhost:8080/. If you used the Mezzio installer, the following is equivalent: $ composer serve Setting up autoloading for the Application namespace In your composer.json file, place the following: \"autoload\": { \"psr-4\": { \"Application\\\\\": \"src/\" } }, Once done, run: $ composer dump-autoload Routing As noted in the Application documentation , routing is abstracted and can be accomplished by calling any of the following methods: route($path, $middleware, array $methods = null, $name = null) to route to a path and match any HTTP method, multiple HTTP methods, or custom HTTP methods. get($path, $middleware, $name = null) to route to a path that will only respond to the GET HTTP method. post($path, $middleware, $name = null) to route to a path that will only respond to the POST HTTP method. put($path, $middleware, $name = null) to route to a path that will only respond to the PUT HTTP method. patch($path, $middleware, $name = null) to route to a path that will only respond to the PATCH HTTP method. delete($path, $middleware, $name = null) to route to a path that will only respond to the DELETE HTTP method. All methods return a Mezzio\\Router\\Route method, which allows you to specify additional options to associate with the route (e.g., for specifying criteria, default values to match, etc.). As examples: // GET // This demonstrates passing a callable middleware (assuming $helloWorld is // callable). $app-&gt;get('/', $helloWorld); // POST // This example specifies the middleware as a service name instead of as a // callable. $app-&gt;post('/trackback', 'TrackBack'); // PUT // This example shows operating on the returned route. In this case, it's adding // regex tokens to restrict what values for {id} will match. (The tokens feature // is specific to Aura.Router.) $app-&gt;put('/post/{id}', 'ReplacePost') -&gt;setOptions([ 'tokens' =&gt; [ 'id' =&gt; '\\d+' ], ]); // PATCH // This example builds on the one above. Mezzio allows you to specify // the same path for a route matching on a different HTTP method, and // corresponding to different middleware. $app-&gt;patch('/post/{id}', 'UpdatePost') -&gt;setOptions([ 'tokens' =&gt; [ 'id' =&gt; '\\d+' ], ]); // DELETE $app-&gt;delete('/post/{id}', 'DeletePost') -&gt;setOptions([ 'tokens' =&gt; [ 'id' =&gt; '\\d+' ], ]); // Matching ALL HTTP methods // If the underlying router supports matching any HTTP method, the following // will do so. Note: FastRoute *requires* you to specify the HTTP methods // allowed explicitly, and does not support wildcard routes. As such, the // following example maps to the combination of HEAD, OPTIONS, GET, POST, PATCH, // PUT, TRACE, and DELETE. // Just like the previous examples, it returns a Route instance that you can // further manipulate. $app-&gt;route('/post/{id}', 'HandlePost') -&gt;setOptions([ 'tokens' =&gt; [ 'id' =&gt; '\\d+' ], ]); // Matching multiple HTTP methods // You can pass an array of HTTP methods as a third argument to route(); in such // cases, routing will match if any of the specified HTTP methods are provided. $app-&gt;route('/post', 'HandlePostCollection', ['GET', 'POST']); // Matching NO HTTP methods // Pass an empty array to the HTTP methods. HEAD and OPTIONS will still be // honored. (In FastRoute, GET is also honored.) $app-&gt;route('/post', 'WillThisHandlePost', []); Finally, if desired, you can create a Mezzio\\Router\\Route instance manually and pass it to route() as the sole argument: $route = new Route('/post', 'HandlePost', ['GET', 'POST']); $route-&gt;setOptions($options); $app-&gt;route($route); Hello World using a Container Mezzio works with container-interop , though it's an optional feature. By default, if you use the AppFactory , it will use laminas-servicemanager . In the following example, we'll populate the container with our middleware, and the application will pull it from there when matched. Edit your public/index.php to read as follows: use Laminas\\Diactoros\\Response\\JsonResponse; use Laminas\\ServiceManager\\ServiceManager; use Mezzio\\AppFactory; require __DIR__ . '/../vendor/autoload.php'; $container = new ServiceManager(); $container-&gt;setFactory('HelloWorld', function ($container) { return function ($req, $res, $next) { $res-&gt;getBody()-&gt;write('Hello, world!'); return $res; }; }); $container-&gt;setFactory('Ping', function ($container) { return function ($req, $res, $next) { return new JsonResponse(['ack' =&gt; time()]); }; }); $app = AppFactory::create($container); $app-&gt;get('/', 'HelloWorld'); $app-&gt;get('/ping', 'Ping'); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); $app-&gt;run(); In the example above, we pass our container to AppFactory . We could have also done this instead: $app = AppFactory::create(); $container = $app-&gt;getContainer(); and then added our service definitions. We recommend passing the container to the factory instead; if we ever change which container we use by default, your code might not work! The following two lines are the ones of interest: $app-&gt;get('/', 'HelloWorld'); $app-&gt;get('/ping', 'Ping'); These map the two paths to service names instead of callables. When routing matches a path, it does the following: If the middleware provided when defining the route is callable, it uses it directly. If the middleware is a valid service name in the container, it pulls it from the container. This is what happens in this example. Finally, if no container is available, or the service name is not found in the container, it checks to see if it's a valid class name; if so, it instantiates and returns the class instance. If you fire up your web server, you'll find that the / and /ping paths continue to work. One other approach you could take would be to define the application itself in the container, and then pull it from there: $container-&gt;setFactory('Mezzio\\Application', function ($container) { $app = AppFactory::create($container); $app-&gt;get('/', 'HelloWorld'); $app-&gt;get('/ping', 'Ping'); return $app; }); $app = $container-&gt;get('Mezzio\\Application'); $app-&gt;run(); This is a nice way to encapsulate the application creation. You could then potentially move all service configuration to another file! (We already document an ApplicationFactory for exactly this scenario. ) Hello World using a Configuration-Driven Container In the above example, we configured our middleware as services, and then passed our service container to the application. At the end, we hinted that you could potentially define the application itself as a service. Mezzio already provides a service factory for the application instance to provide fine-grained control over your application. In this example, we'll leverage it, defining our routes via configuration. First, we're going to leverage laminas-config to merge configuration files. This is important, as it allows us to define local, environment-specific configuration in files that we then can exclude from our repository. This practice ensures that things like credentials are not accidentally published in a public repository, and also provides a mechanism for slip-streaming in configuration based on our environment (you might use different settings in development than in production, after all!). First, install laminas-config and laminas-stdlib: $ composer require laminas/laminas-config laminas/laminas-stdlib Now we can start creating our configuration files and container factories. In config/config.php , place the following: &lt;?php use Laminas\\Stdlib\\ArrayUtils; use Laminas\\Stdlib\\Glob; $config = []; // Load configuration from autoload path foreach (Glob::glob('config/autoload/{{,*.}global,{,*.}local}.php', Glob::GLOB_BRACE) as $file) { $config = ArrayUtils::merge($config, include $file); } // Return an ArrayObject so we can inject the config as a service in Aura.Di // and still use array checks like ``is_array``. return new ArrayObject($config, ArrayObject::ARRAY_AS_PROPS); In config/container.php , place the following: &lt;?php use Laminas\\ServiceManager\\Config; use Laminas\\ServiceManager\\ServiceManager; // Load configuration $config = require __DIR__.'/config.php'; // Build container $container = new ServiceManager(); (new Config($config['dependencies']))-&gt;configureServiceManager($container); // Inject config $container-&gt;setService('config', $config); return $container; In config/autoload/dependencies.global.php , place the following: &lt;?php use Laminas\\ServiceManager\\Factory\\InvokableFactory; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ \\Application\\HelloWorldAction::class =&gt; InvokableFactory::class, \\Application\\PingAction::class =&gt; InvokableFactory::class, ], 'factories' =&gt; [ \\Mezzio\\Application::class =&gt; \\Mezzio\\Container\\ApplicationFactory::class, ], ], ]; In config/autoload/routes.global.php , place the following: &lt;?php return [ 'routes' =&gt; [ [ 'path' =&gt; '/', 'middleware' =&gt; \\Application\\HelloWorldAction::class, 'allowed_methods' =&gt; [ 'GET' ], ], [ 'path' =&gt; '/ping', 'middleware' =&gt; \\Application\\PingAction::class, 'allowed_methods' =&gt; [ 'GET' ], ], ], ]; In src/Application/HelloWorld.php , place the following: &lt;?php namespace Application; class HelloWorld { public function __invoke($req, $res, $next) { $res-&gt;getBody()-&gt;write('Hello, world!'); return $res; } } In src/Application/Ping.php , place the following: &lt;?php namespace Application; use Laminas\\Diactoros\\Response\\JsonResponse; class Ping { public function __invoke($req, $res, $next) { return new JsonResponse(['ack' =&gt; time()]); } } After that’s done run: $ composer dump-autoload Finally, in public/index.php , place the following: &lt;?php // Change to the project root, to simplify resolving paths chdir(dirname(__DIR__)); // Setup autoloading require 'vendor/autoload.php'; $container = include 'config/services.php'; $app = $container-&gt;get(Mezzio\\Application::class); $app-&gt;run(); Notice that our index file now doesn't have any code related to setting up the application any longer! All it does is set up autoloading, retrieve our service container, pull the application from it, and run it. Our choices for container, router, etc. are all abstracted, and if we change our mind later, this code will continue to work. Firing up the web server, you'll see the same responses as the previous examples. Hybrid Container and Programmatic Creation The above example may look a little daunting at first. By making everything configuration-driven, you sometimes lose a sense for how the code all fits together. Fortunately, you can mix the two. Building on the example above, we'll add a new route and middleware. Between pulling the application from the container and calling $app-&gt;run() , add the following in your public/index.php : $app-&gt;post('/post', function ($req, $res, $next) { $res-&gt;getBody()-&gt;write('IN POST!'); return $res; }); Note that we're using post() here; that means you'll have to use cURL, HTTPie, Postman, or some other tool to test making a POST request to the path: $ curl -X POST http://localhost:8080/post You should see IN POST! for the response! Using this approach, you can build re-usable applications that are container-driven, and add one-off routes and middleware as needed. Using the container to register middleware If you use a container to fetch your application instance, you have an additional option for specifying middleware for the pipeline: configuration: &lt;?php return [ 'routes' =&gt; [ [ 'path' =&gt; '/path/to/match', 'middleware' =&gt; 'Middleware Service Name or Callable', 'allowed_methods' =&gt; [ 'GET', 'POST', 'PATCH' ], 'options' =&gt; [ 'stuff' =&gt; 'to', 'pass' =&gt; 'to', 'the' =&gt; 'underlying router', ], ], // etc. ], 'middleware_pipeline' =&gt; [ // See specification below ], ]; The key to note is middleware_pipeline , which is an array of middlewares to register in the pipeline; each will each be pipe() 'd to the Application in the order specified. Each middleware specified must be in the following form: [ // required: 'middleware' =&gt; 'Name of middleware service, or a callable', // optional: 'path' =&gt; '/path/to/match', 'error' =&gt; true, 'priority' =&gt; 1, // Integer ] Priority should be an integer, and follows the semantics of SplPriorityQueue : higher numbers indicate higher priority (top of the queue; executed earliest), while lower numbers indicated lower priority (bottom of the queue, executed last); negative values are low priority . Items of the same priority are executed in the order in which they are attached. The default priority is 1, and this priority is used by the routing and dispatch middleware. To indicate that middleware should execute before these, use a priority higher than 1. For error middleware, use a priority less than 1. The above specification can be used for all middleware, with one exception: registration of the routing and/or dispatch middleware that Mezzio provides. In these cases, use the following constants, which will be caught by the factory and expanded: Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE for the routing middleware; this should always come before the dispatch middleware. Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE for the dispatch middleware. As an example: return [ 'middleware_pipeline' =&gt; [ [ /* ... */ ], Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, [ /* ... */ ], ], ]; Place routing middleware correctly If you are defining routes and defining other middleware for the pipeline, you must add the routing middleware. When you do so, make sure you put it at the appropriate location in the pipeline. Typically, you will place any middleware you want to execute on all requests prior to the routing middleware. This includes utilities for bootstrapping the application (such as injection of the ServerUrlHelper ), utilities for injecting common response headers (such as CORS support), etc. Make sure these middleware specifications include the priority key, and that the value of this key is greater than 1. Place error middleware after the routing middleware. This is middleware that should only execute if routing fails or routed middleware cannot complete the response. These specifications should also include the priority key, and the value of that key for such middleware should be less than 1 or negative. Use priority to shape the specific workflow you want for your middleware. Middleware items may be any callable, Laminas\\Stratigility\\MiddlewareInterface implementation, or a service name that resolves to one of the two. Additionally, you can specify an array of such values; these will be composed in a single Laminas\\Stratigility\\MiddlewarePipe instance, allowing layering of middleware. In fact, you can specify the various ApplicationFactory::*_MIDDLEWARE constants in such arrays as well: return [ 'middleware_pipeline' =&gt; [ [ /* ... */ ], 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, /* ... middleware that introspects routing results ... */ Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], [ /* ... */ ], ], ]; Pipeline keys are ignored Keys in a middleware_pipeline specification are ignored. However, they can be useful when merging several configurations; if multiple configuration files specify the same key, then those entries will be merged. Be aware, however, that the middleware entry for each, since it is an indexed array, will merge arrays by appending; in other words, order will not be guaranteed within that array after merging. If order is critical, define a middleware spec with priority keys. The path, if specified, can only be a literal path to match, and is typically used for segregating middleware applications or applying rules to subsets of an application that match a common path root. error indicates whether or not the middleware represents error middleware; this is done to ensure that lazy-loading of error middleware works as expected. Lazy-loaded Middleware One feature of the middleware_pipeline is that any middleware service pulled from the container is actually wrapped in a closure: function ($request, $response, $next = null) use ($container, $middleware) { $invokable = $container-&gt;get($middleware); if (! is_callable($invokable)) { throw new Exception\\InvalidMiddlewareException(sprintf( 'Lazy-loaded middleware \"%s\" is not invokable', $middleware )); } return $invokable($request, $response, $next); }; If the error flag is specified and is truthy, the closure looks like this instead, to ensure the middleware is treated by Stratigility as error middleware: function ($error, $request, $response, $next) use ($container, $middleware) { $invokable = $container-&gt;get($middleware); if (! is_callable($invokable)) { throw new Exception\\InvalidMiddlewareException(sprintf( 'Lazy-loaded middleware \"%s\" is not invokable', $middleware )); } return $invokable($error, $request, $response, $next); }; This implements lazy-loading for middleware pipeline services, delaying retrieval from the container until the middleware is actually invoked. This also means that if the service specified is not valid middleware, you will not find out until the application attempts to invoke it. Segregating your application to a subpath One benefit of a middleware-based application is the ability to compose middleware and segregate them by paths. Mezzio\\Application is itself middleware, allowing you to do exactly that if desired. In the following example, we'll assume that $api and $blog are Mezzio\\Application instances, and compose them into a Laminas\\Stratigility\\MiddlewarePipe . use Laminas\\Diactoros\\Server; use Laminas\\Diactoros\\ServerRequestFactory; use Laminas\\Stratigility\\MiddlewarePipe; require __DIR__ . '/../vendor/autoload.php'; $app = new MiddlewarePipe(); $app-&gt;pipe('/blog', $blog); $app-&gt;pipe('/api', $api); $server = Server::createServerFromRequest( $app, ServerRequestFactory::fromGlobals() ); $server-&gt;listen(); You could also compose them in an Application instance, and utilize run() : $app = AppFactory::create(); $app-&gt;pipe('/blog', $blog); $app-&gt;pipe('/api', $api); $app-&gt;run(); This approach allows you to develop discrete applications and compose them together to create a website.","title":"Examples"},{"location":"v1/reference/usage-examples/#usage-examples","text":"Below are several usage examples, covering a variety of ways of creating and managing an application. In all examples, the assumption is the following directory structure: . ├── config ├── data ├── composer.json ├── public │ └── index.php ├── src └── vendor We assume also that: You have installed mezzio per the installation instructions . public/ will be the document root of your application. Your own classes are under src/ with the top-level namespace Application , and you have configured autoloading in your composer.json for those classes.","title":"Usage Examples"},{"location":"v1/reference/usage-examples/#hello-world-using-a-container","text":"Mezzio works with container-interop , though it's an optional feature. By default, if you use the AppFactory , it will use laminas-servicemanager . In the following example, we'll populate the container with our middleware, and the application will pull it from there when matched. Edit your public/index.php to read as follows: use Laminas\\Diactoros\\Response\\JsonResponse; use Laminas\\ServiceManager\\ServiceManager; use Mezzio\\AppFactory; require __DIR__ . '/../vendor/autoload.php'; $container = new ServiceManager(); $container-&gt;setFactory('HelloWorld', function ($container) { return function ($req, $res, $next) { $res-&gt;getBody()-&gt;write('Hello, world!'); return $res; }; }); $container-&gt;setFactory('Ping', function ($container) { return function ($req, $res, $next) { return new JsonResponse(['ack' =&gt; time()]); }; }); $app = AppFactory::create($container); $app-&gt;get('/', 'HelloWorld'); $app-&gt;get('/ping', 'Ping'); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); $app-&gt;run(); In the example above, we pass our container to AppFactory . We could have also done this instead: $app = AppFactory::create(); $container = $app-&gt;getContainer(); and then added our service definitions. We recommend passing the container to the factory instead; if we ever change which container we use by default, your code might not work! The following two lines are the ones of interest: $app-&gt;get('/', 'HelloWorld'); $app-&gt;get('/ping', 'Ping'); These map the two paths to service names instead of callables. When routing matches a path, it does the following: If the middleware provided when defining the route is callable, it uses it directly. If the middleware is a valid service name in the container, it pulls it from the container. This is what happens in this example. Finally, if no container is available, or the service name is not found in the container, it checks to see if it's a valid class name; if so, it instantiates and returns the class instance. If you fire up your web server, you'll find that the / and /ping paths continue to work. One other approach you could take would be to define the application itself in the container, and then pull it from there: $container-&gt;setFactory('Mezzio\\Application', function ($container) { $app = AppFactory::create($container); $app-&gt;get('/', 'HelloWorld'); $app-&gt;get('/ping', 'Ping'); return $app; }); $app = $container-&gt;get('Mezzio\\Application'); $app-&gt;run(); This is a nice way to encapsulate the application creation. You could then potentially move all service configuration to another file! (We already document an ApplicationFactory for exactly this scenario. )","title":"Hello World using a Container"},{"location":"v1/reference/usage-examples/#hello-world-using-a-configuration-driven-container","text":"In the above example, we configured our middleware as services, and then passed our service container to the application. At the end, we hinted that you could potentially define the application itself as a service. Mezzio already provides a service factory for the application instance to provide fine-grained control over your application. In this example, we'll leverage it, defining our routes via configuration. First, we're going to leverage laminas-config to merge configuration files. This is important, as it allows us to define local, environment-specific configuration in files that we then can exclude from our repository. This practice ensures that things like credentials are not accidentally published in a public repository, and also provides a mechanism for slip-streaming in configuration based on our environment (you might use different settings in development than in production, after all!). First, install laminas-config and laminas-stdlib: $ composer require laminas/laminas-config laminas/laminas-stdlib Now we can start creating our configuration files and container factories. In config/config.php , place the following: &lt;?php use Laminas\\Stdlib\\ArrayUtils; use Laminas\\Stdlib\\Glob; $config = []; // Load configuration from autoload path foreach (Glob::glob('config/autoload/{{,*.}global,{,*.}local}.php', Glob::GLOB_BRACE) as $file) { $config = ArrayUtils::merge($config, include $file); } // Return an ArrayObject so we can inject the config as a service in Aura.Di // and still use array checks like ``is_array``. return new ArrayObject($config, ArrayObject::ARRAY_AS_PROPS); In config/container.php , place the following: &lt;?php use Laminas\\ServiceManager\\Config; use Laminas\\ServiceManager\\ServiceManager; // Load configuration $config = require __DIR__.'/config.php'; // Build container $container = new ServiceManager(); (new Config($config['dependencies']))-&gt;configureServiceManager($container); // Inject config $container-&gt;setService('config', $config); return $container; In config/autoload/dependencies.global.php , place the following: &lt;?php use Laminas\\ServiceManager\\Factory\\InvokableFactory; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ \\Application\\HelloWorldAction::class =&gt; InvokableFactory::class, \\Application\\PingAction::class =&gt; InvokableFactory::class, ], 'factories' =&gt; [ \\Mezzio\\Application::class =&gt; \\Mezzio\\Container\\ApplicationFactory::class, ], ], ]; In config/autoload/routes.global.php , place the following: &lt;?php return [ 'routes' =&gt; [ [ 'path' =&gt; '/', 'middleware' =&gt; \\Application\\HelloWorldAction::class, 'allowed_methods' =&gt; [ 'GET' ], ], [ 'path' =&gt; '/ping', 'middleware' =&gt; \\Application\\PingAction::class, 'allowed_methods' =&gt; [ 'GET' ], ], ], ]; In src/Application/HelloWorld.php , place the following: &lt;?php namespace Application; class HelloWorld { public function __invoke($req, $res, $next) { $res-&gt;getBody()-&gt;write('Hello, world!'); return $res; } } In src/Application/Ping.php , place the following: &lt;?php namespace Application; use Laminas\\Diactoros\\Response\\JsonResponse; class Ping { public function __invoke($req, $res, $next) { return new JsonResponse(['ack' =&gt; time()]); } } After that’s done run: $ composer dump-autoload Finally, in public/index.php , place the following: &lt;?php // Change to the project root, to simplify resolving paths chdir(dirname(__DIR__)); // Setup autoloading require 'vendor/autoload.php'; $container = include 'config/services.php'; $app = $container-&gt;get(Mezzio\\Application::class); $app-&gt;run(); Notice that our index file now doesn't have any code related to setting up the application any longer! All it does is set up autoloading, retrieve our service container, pull the application from it, and run it. Our choices for container, router, etc. are all abstracted, and if we change our mind later, this code will continue to work. Firing up the web server, you'll see the same responses as the previous examples.","title":"Hello World using a Configuration-Driven Container"},{"location":"v1/reference/usage-examples/#hybrid-container-and-programmatic-creation","text":"The above example may look a little daunting at first. By making everything configuration-driven, you sometimes lose a sense for how the code all fits together. Fortunately, you can mix the two. Building on the example above, we'll add a new route and middleware. Between pulling the application from the container and calling $app-&gt;run() , add the following in your public/index.php : $app-&gt;post('/post', function ($req, $res, $next) { $res-&gt;getBody()-&gt;write('IN POST!'); return $res; }); Note that we're using post() here; that means you'll have to use cURL, HTTPie, Postman, or some other tool to test making a POST request to the path: $ curl -X POST http://localhost:8080/post You should see IN POST! for the response! Using this approach, you can build re-usable applications that are container-driven, and add one-off routes and middleware as needed.","title":"Hybrid Container and Programmatic Creation"},{"location":"v1/reference/usage-examples/#segregating-your-application-to-a-subpath","text":"One benefit of a middleware-based application is the ability to compose middleware and segregate them by paths. Mezzio\\Application is itself middleware, allowing you to do exactly that if desired. In the following example, we'll assume that $api and $blog are Mezzio\\Application instances, and compose them into a Laminas\\Stratigility\\MiddlewarePipe . use Laminas\\Diactoros\\Server; use Laminas\\Diactoros\\ServerRequestFactory; use Laminas\\Stratigility\\MiddlewarePipe; require __DIR__ . '/../vendor/autoload.php'; $app = new MiddlewarePipe(); $app-&gt;pipe('/blog', $blog); $app-&gt;pipe('/api', $api); $server = Server::createServerFromRequest( $app, ServerRequestFactory::fromGlobals() ); $server-&gt;listen(); You could also compose them in an Application instance, and utilize run() : $app = AppFactory::create(); $app-&gt;pipe('/blog', $blog); $app-&gt;pipe('/api', $api); $app-&gt;run(); This approach allows you to develop discrete applications and compose them together to create a website.","title":"Segregating your application to a subpath"},{"location":"v1/reference/migration/rc-to-v1/","text":"Migration from RC5 or earlier RC6 introduced changes to the following: The routing middleware was split into separate middleware, one for routing, and one for dispatching. Due to the above change, we decided to remove auto-registration of routing middleware. The above change also suggested an alternative to the middleware pipeline configuration that simplifies it. Route result observers are deprecated, and no longer triggered for routing failures. Middleware configuration specifications now accept a priority key to guarantee the order of items. If you have defined your middleware pipeline in multiple files that are then merged, you will need to define these keys to ensure order. Routing and Dispatch middleware Prior to RC6, the routing middleware: performed routing notified route result observers created a new request that composed the matched routing parameters as request attributes, and composed the route result instance itself as a request attribute. marshaled the middleware matched by routing dispatched the marshaled middleware To provide a better separation of concerns, we split the routing middleware into two distinct methods: routingMiddleware() and dispatchMiddleware() . routingMiddleware() performs the following duties: routing; and creating a new request that composes the matched routing parameters as request attributes, and composes the route result instance itself as a request attribute. dispatchMiddleware() performs the following duties: marshaling the middleware specified in the route result; and dispatching the marshaled middleware. One reason for this split is to allow injecting middleware to operate between routing and dispatch. As an example, you could have middleware that determines if a matched route requires an authenticated identity: public function __invoke($request, $response, $next) { $result = $request-&gt;getAttribute(RouteResult::class); if (! in_array($result-&gt;getMatchedRouteName(), $this-&gt;authRequired)) { return $next($request, $response); } if (! $this-&gt;authenticated) { return $next($request, $response-&gt;withStatus(401), 'authentication required'); } } The above could then be piped between the routing and dispatch middleware: $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(AuthenticationMiddleware::class); $app-&gt;pipeDispatchMiddleware(); Since the routing middleware has been split, we determined we could no longer automatically pipe the routing middleware; detection would require detecting both sets of middleware, and ensuring they are in the correct order. Additionally, since one goal of splitting the middleware is to allow substitutions for these responsibilities, auto-injection could in some cases be undesired. As a result, we now require you to inject each manually. Impact This change will require changes in your application. If you are using Mezzio programmatically (i.e., you are not using a container and the Mezzio\\Container\\ApplicationFactory ), you are now required to call Application::pipeRoutingMiddleware() . Additionally, a new method, Application::pipeDispatchMiddleware() exists for injecting the application with the dispatch middleware, this, too, must be called. This has a fortunate side effect: registering routed middleware no longer affects the middleware pipeline order. As such, you can register your pipeline first or last prior to running the application. The only stipulation is that unless you register the routing and dispatch middleware, your routed middleware will not be executed! As such, the following two lines must be added to your application prior to calling Application::run() : ```php $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); ``` If you are creating your Application instance using a container and the Mezzio\\Container\\ApplicationFactory , you will need to update your configuration to list the routing and dispatch middleware. The next section details the configuration changes necessary. ApplicationFactory configuration changes As noted in the document summary, the middleware pipeline configuration was changed starting in RC6. The changes are done in such a way as to honor configuration from RC5 and earlier, but using such configuration will now prompt you to update your application. RC5 and earlier defined the default middleware_pipeline configuration as follows: return [ 'middleware_pipeline' =&gt; [ // An array of middleware to register prior to registration of the // routing middleware 'pre_routing' =&gt; [ //[ // Required: // 'middleware' =&gt; 'Name or array of names of middleware services and/or callables', // Optional: // 'path' =&gt; '/path/to/match', // 'error' =&gt; true, //], [ 'middleware' =&gt; [ Helper\\ServerUrlMiddleware::class, Helper\\UrlHelperMiddleware::class, ], ], ], // An array of middleware to register after registration of the // routing middleware 'post_routing' =&gt; [ //[ // Required: // 'middleware' =&gt; 'Name of middleware service, or a callable', // Optional: // 'path' =&gt; '/path/to/match', // 'error' =&gt; true, //], ], ], ]; The following changes have been made: The concept of pre_routing and post_routing have been deprecated, and will be removed starting with the 1.1 version. A single middleware pipeline is now provided, though any individual specification can also specify an array of middleware . The routing and dispatch middleware must now be added to your configuration for them to be added to your application. Middleware specifications can now optionally provide a priority key, with 1 being the default. High integer priority indicates earlier execution, while low/negative integer priority indicates later execution. Items with the same priority are executed in the order they are registered. Priority is now how you can indicate the order in which middleware should execute. Impact While the configuration from RC5 and earlier will continue to work, it will raise deprecation notices. As such, you will need to update your configuration to follow the guidelines created with RC6. RC6 and later change the configuration to remove the pre_routing and post_routing keys. However, individual items within the array retain the same format as middleware inside those keys, with the addition of a new key, priority : [ // Required: 'middleware' =&gt; 'Name of middleware service, or a callable', // Optional: // 'path' =&gt; '/path/to/match', // 'error' =&gt; true, // 'priority' =&gt; 1, // integer ] The priority key is used to determine the order in which middleware is piped to the application. Higher integer values are piped earlier, while lower/negative integer values are piped later; middleware with the same priority are piped in the order in which they are discovered in the pipeline. The default priority used is 1. Additionally, the routing and dispatch middleware now become items in the array; they (or equivalent entries for your own implementations) must be present in your configuration if you want your routed middleware to dispatch! This change gives you full control over the flow of the pipeline. To specify the routing middleware, use the constant Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE in place of a middleware array; this has the value EXPRESSIVE_ROUTING_MIDDLEWARE , if you do not want to import the class. Similarly, for the dispatch middleware, use the constant Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE (value EXPRESSIVE_DISPATCH_MIDDLEWARE ) to specify the dispatch middleware. As such, the default configuration now becomes: return [ 'middleware_pipeline' =&gt; [ // An array of middleware to pipe to the application. // Each item is of the following structure: // [ // // Required: // 'middleware' =&gt; 'Name or array of names of middleware services and/or callables', // // Optional: // 'path' =&gt; '/path/to/match', // 'error' =&gt; true, // ], [ 'middleware' =&gt; [ Helper\\ServerUrlMiddleware::class, ], 'priority' =&gt; PHP_INT_MAX, ], // The following is an entry for: // - routing middleware // - middleware that reacts to the routing results // - dispatch middleware [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Helper\\UrlHelperMiddleware::class, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], // The following is an entry for the dispatch middleware: // Place error handling middleware after the routing and dispatch // middleware, with negative priority. // [ // 'middleware' =&gt; [ // ], // 'priority' =&gt; -1000, // ], ], ]; To update an existing application: Promote all pre_routing middleware up a level, and remove the pre_routing key. Provide a priority value greater than 1. We recommend having a single middleware specification with an array of middleware that represents the \"pre routing\" middleware. Add the entries for Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE and Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE immediately following any pre_routing middleware, and before any post_routing middleware; we recommend grouping it per the above example. Promote all post_routing middleware up a level, and remove the post_routing key. Provide a priority value less than 1 or negative. If you have middleware_pipeline specifications in multiple files , you will need to specify priority keys for all middleware in order to guarantee order after merging. We recommend having a single middleware specification with an array of middleware that represents the \"post routing\" middleware. As an example, consider the following application configuration: return [ 'middleware_pipeline' =&gt; [ 'pre_routing' =&gt; [ [ 'middleware' =&gt; [ Mezzio\\Helper\\ServerUrlMiddleware::class, Mezzio\\Helper\\UrlHelperMiddleware::class, ], ], [ 'middleware' =&gt; DebugToolbarMiddleware::class ], [ 'middleware' =&gt; ApiMiddleware::class, 'path' =&gt; '/api', ], ], 'post_routing' =&gt; [ ['middleware' =&gt; NotFoundMiddleware::class, 'error' =&gt; true], ], ], ]; This would be rewritten to the following to work with RC6 and later: return [ 'middleware_pipeline' =&gt; [ 'always' =&gt; [ 'middleware' =&gt; [ Mezzio\\Helper\\ServerUrlMiddleware::class, DebugToolbarMiddleware::class, ], 'priority' =&gt; PHP_INT_MAX, ], 'api' =&gt; [ 'middleware' =&gt; ApiMiddleware::class, 'path' =&gt; '/api', 'priority' =&gt; 100, ], 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Mezzio\\Helper\\UrlHelperMiddleware::class, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], 'error' =&gt; [ 'middleware' =&gt; [ NotFoundMiddleware::class, ], 'error' =&gt; true, 'priority' =&gt; -1000, ], ], ]; Note in the above example the various groupings. By grouping middleware by priority, you can simplify adding new middleware, particularly if you know it should execute before routing, or as error middleware, or between routing and dispatch. Keys are ignored The above example provides keys for each middleware specification. The factory will ignore these, but they can be useful for cases when you might want to specify configuration in multiple files, and merge specific entries together. Be aware, however, that the middleware key itself is an indexed array; items will be appended based on the order in which configuration files are merged. If order of these is important, create separate specifications with relevant priority values. Route result observer deprecation As of RC6, the following changes have occurred with regards to route result observers: They are deprecated for usage with Mezzio\\Application , and that class will not be a route result subject starting in 1.1. You will need to start migrating to alternative solutions. The functionality for notifying observers has been moved from the routing middleware into a dedicated Application::routeResultObserverMiddleware() method. This middleware must be piped separately to the middleware pipeline for it to trigger. Impact If you are using any route result observers, you will need to ensure your application notifies them, and you will want to migrate to alternative solutions to ensure your functionality continues to work. To ensure your observers are triggered, you will need to adapt your application, based on how you create your instance. If you are not using the ApplicationFactory , you will need to pipe the routeResultObserverMiddleware to your application, between the routing and dispatch middleware: $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeRouteResultObserverMiddleware(); $app-&gt;pipeDispatchMiddleware(); If you are using the ApplicationFactory , you may need to update your configuration to allow injecting the route result observer middleware. If you have not updated your configuration to remove the pre_routing and/or post_routing keys, the middleware will be registered for you. If you have, however, you will need to register it following the routing middleware: [ 'middleware_pipeline' =&gt; [ /* ... */ 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Mezzio\\Container\\ApplicationFactory::ROUTE_RESULT_OBSERVER_MIDDLEWARE, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], /* ... */ ], ] To make your observers forwards-compatible requires two changes: Rewriting your observer as middleware. Registering your observer as middleware following the routing middleware. If your observer looked like the following: use Mezzio\\Router\\RouteResult; use Mezzio\\Router\\RouteResultObserverInterface; class MyObserver implements RouteResultObserverInterface { private $logger; public function __construct(Logger $logger) { $this-&gt;logger = $logger; } public function update(RouteResult $result) { $this-&gt;logger-&gt;log($result); } } You could rewrite it as follows: use Mezzio\\Router\\RouteResult; class MyObserver { private $logger; public function __construct(Logger $logger) { $this-&gt;logger = $logger; } public function __invoke($request, $response, $next) { $result = $request-&gt;getAttribute(RouteResult::class, false); if (! $result) { return $next($request, $response); } $this-&gt;logger-&gt;log($result); return $next($request, $response); } } You would then register it following the routing middleware. If you are building your application programmatically, you would do this as follows: $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(MyObserver::class); $app-&gt;pipeDispatchMiddleware(); If you are using the ApplicationFactory , alter your configuration: [ 'middleware_pipeline' =&gt; [ /* ... */ 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, MyObserver::class, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], /* ... */ ], ] Timeline for migration The following features will be removed in version 1.1.0: Support for the pre_routing and post_routing configuration. Support for route result observers.","title":"From RC5 and Earlier"},{"location":"v1/reference/migration/rc-to-v1/#migration-from-rc5-or-earlier","text":"RC6 introduced changes to the following: The routing middleware was split into separate middleware, one for routing, and one for dispatching. Due to the above change, we decided to remove auto-registration of routing middleware. The above change also suggested an alternative to the middleware pipeline configuration that simplifies it. Route result observers are deprecated, and no longer triggered for routing failures. Middleware configuration specifications now accept a priority key to guarantee the order of items. If you have defined your middleware pipeline in multiple files that are then merged, you will need to define these keys to ensure order.","title":"Migration from RC5 or earlier"},{"location":"v1/reference/migration/rc-to-v1/#routing-and-dispatch-middleware","text":"Prior to RC6, the routing middleware: performed routing notified route result observers created a new request that composed the matched routing parameters as request attributes, and composed the route result instance itself as a request attribute. marshaled the middleware matched by routing dispatched the marshaled middleware To provide a better separation of concerns, we split the routing middleware into two distinct methods: routingMiddleware() and dispatchMiddleware() . routingMiddleware() performs the following duties: routing; and creating a new request that composes the matched routing parameters as request attributes, and composes the route result instance itself as a request attribute. dispatchMiddleware() performs the following duties: marshaling the middleware specified in the route result; and dispatching the marshaled middleware. One reason for this split is to allow injecting middleware to operate between routing and dispatch. As an example, you could have middleware that determines if a matched route requires an authenticated identity: public function __invoke($request, $response, $next) { $result = $request-&gt;getAttribute(RouteResult::class); if (! in_array($result-&gt;getMatchedRouteName(), $this-&gt;authRequired)) { return $next($request, $response); } if (! $this-&gt;authenticated) { return $next($request, $response-&gt;withStatus(401), 'authentication required'); } } The above could then be piped between the routing and dispatch middleware: $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(AuthenticationMiddleware::class); $app-&gt;pipeDispatchMiddleware(); Since the routing middleware has been split, we determined we could no longer automatically pipe the routing middleware; detection would require detecting both sets of middleware, and ensuring they are in the correct order. Additionally, since one goal of splitting the middleware is to allow substitutions for these responsibilities, auto-injection could in some cases be undesired. As a result, we now require you to inject each manually.","title":"Routing and Dispatch middleware"},{"location":"v1/reference/migration/rc-to-v1/#applicationfactory-configuration-changes","text":"As noted in the document summary, the middleware pipeline configuration was changed starting in RC6. The changes are done in such a way as to honor configuration from RC5 and earlier, but using such configuration will now prompt you to update your application. RC5 and earlier defined the default middleware_pipeline configuration as follows: return [ 'middleware_pipeline' =&gt; [ // An array of middleware to register prior to registration of the // routing middleware 'pre_routing' =&gt; [ //[ // Required: // 'middleware' =&gt; 'Name or array of names of middleware services and/or callables', // Optional: // 'path' =&gt; '/path/to/match', // 'error' =&gt; true, //], [ 'middleware' =&gt; [ Helper\\ServerUrlMiddleware::class, Helper\\UrlHelperMiddleware::class, ], ], ], // An array of middleware to register after registration of the // routing middleware 'post_routing' =&gt; [ //[ // Required: // 'middleware' =&gt; 'Name of middleware service, or a callable', // Optional: // 'path' =&gt; '/path/to/match', // 'error' =&gt; true, //], ], ], ]; The following changes have been made: The concept of pre_routing and post_routing have been deprecated, and will be removed starting with the 1.1 version. A single middleware pipeline is now provided, though any individual specification can also specify an array of middleware . The routing and dispatch middleware must now be added to your configuration for them to be added to your application. Middleware specifications can now optionally provide a priority key, with 1 being the default. High integer priority indicates earlier execution, while low/negative integer priority indicates later execution. Items with the same priority are executed in the order they are registered. Priority is now how you can indicate the order in which middleware should execute.","title":"ApplicationFactory configuration changes"},{"location":"v1/reference/migration/rc-to-v1/#route-result-observer-deprecation","text":"As of RC6, the following changes have occurred with regards to route result observers: They are deprecated for usage with Mezzio\\Application , and that class will not be a route result subject starting in 1.1. You will need to start migrating to alternative solutions. The functionality for notifying observers has been moved from the routing middleware into a dedicated Application::routeResultObserverMiddleware() method. This middleware must be piped separately to the middleware pipeline for it to trigger.","title":"Route result observer deprecation"},{"location":"v1/reference/migration/rc-to-v1/#timeline-for-migration","text":"The following features will be removed in version 1.1.0: Support for the pre_routing and post_routing configuration. Support for route result observers.","title":"Timeline for migration"},{"location":"v1/reference/migration/to-v1-1/","text":"Migration to Mezzio 1.1 Mezzio 1.1 should not result in any upgrade problems for users. However, starting in this version, we offer a few changes affecting the following that you should be aware of, and potentially update your application to adopt: Deprecations Original request and response messages Recommendation to use programmatic pipelines Error handling Deprecations The following classes and/or methods are deprecated with the 1.1.0 release, and will be removed for the 2.0 release: Mezzio\\Application::pipeErrorHandler() : Stratigility v1 error middleware are removed in the Stratigility v2 release, which Mezzio 2.0 will adopt. Mezzio\\Application::routeMiddleware() : routing middleware moves to a dedicated class starting in Mezzio 2.0. If you were referencing the method in order to pipe it as middleware, use pipeRoutingMiddleware() or pipe(ApplicationFactory::ROUTING_MIDDLEWARE) instead. Mezzio\\Application::dispatchMiddleware() : dispatch middleware moves to a dedicated class starting in Mezzio 2.0.If you were referencing the method in order to pipe it as middleware, use pipeDispatchMiddleware() or pipe(ApplicationFactory::DISPATCH_MIDDLEWARE) instead. Mezzio\\Application::getFinalHandler() : this method gets renamed to getDefaultDelegate() in Mezzio 2.0. We recommend retrieving the value from the application dependency injection container if you need it elsewhere. Mezzio\\Application::raiseThrowables() : this method becomes a no-op in Stratigility 2.0, on which Mezzio 2.0 is based; the behavior it enabled becomes the default behavior in that version. Mezzio\\Container\\Exception\\InvalidArgumentException : this exception type is thrown by ApplicationFactory ; in Mezzio 2.0, it throws Mezzio\\Exception\\InvalidArgumentException instead. Mezzio\\Container\\Exception\\NotFoundException : this exception type is not currently used anyway. Mezzio\\ErrorMiddlewarePipe : Stratigility v1 error middleware are removed in the Stratigility v2 release, which Mezzio 2.0 will adopt, making this specialized middleware pipe type irrelvant. Mezzio\\TemplatedErrorHandler and Mezzio\\WhoopsErrorHandler : The concept of \"final handlers\" will be removed in Mezzio 2.0, to be replaced with \"default delegates\" (implementations of Interop\\Http\\ServerMiddleware\\DelegateInterface that will be called if the middleware pipeline is exhausted, and which will be guaranteed to return a response). Mezzio 2.0 will provide tooling to upgrade your dependencies to make the transition seamless; end users will only be affected if they were extending these classes. If you were calling any of these directly, or extending or overriding them, you will need to update your code to work for version 2.0. We recommend not using these. Original messages Stratigility 1.3 deprecates its internal request and response decorators, Laminas\\Stratigility\\Http\\Request and Laminas\\Stratigility\\Http\\Response , respectively. The main utility of these instances was to provide access in inner middleware layers to the original request, original response, and original URI. As such access may still be desired, Stratigility 1.3 introduced Laminas\\Stratigility\\Middleware\\OriginalMessages . This middleware injects the following attributes into the request it passes to $next() : originalRequest is the request instance provided to the middleware. originalUri is the URI instance associated with that request. originalResponse is the response instance provided to the middleware. Laminas\\Stratigility\\FinalHandler was updated to use these when they're available starting with version 1.0.3. We recommend adding the OriginalMessages middleware as the outermost (first) middleware in your pipeline. Using configuration-driven middleware, that would look like this: // config/autoload/middleware-pipeline.global.php /* ... */ use Mezzio\\Helper; use Laminas\\Stratigility\\Middleware\\OriginalMessages; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ OriginalMessages::class =&gt; OriginalMessages::class, ], /* ... */ ], 'middleware_pipeline' =&gt; [ 'always' =&gt; [ 'middleware' =&gt; [ OriginalMessages::class, // &lt;----- Add this entry Helper\\ServerUrlMiddleware::class, /* ... */ ], 'priority' =&gt; 10000, ], /* ... */ ], ]; If you are programmatically creating your pipeline , use the following: $app-&gt;pipe(OriginalMessages::class); /* all other middleware */ Identifying and fixing getOriginal calls To help you identify and update calls in your own code to the getOriginal*() methods, we provide a tool via the mezzio/mezzio-tooling package, vendor/bin/mezzio-migrate-original-messages . First, install the tooling package; since the tooling it provides is only useful during development, install it as a development requirement: $ composer require --dev mezzio/mezzio-tooling Once installed, you can execute the tool using: $ ./vendor/bin/mezzio-migrate-original-messages Passing the arguments help , --help , or -h will provide usage information; in most cases, it will assume sane defaults in order to run its scans. The tool updates calls to getOriginalRequest() and getOriginalUri() to instead use the new request attributes that the OriginalMessages middleware injects: getOriginalRequest() becomes getAttribute('originalRequest', $request) getOriginalUri() becomes getAttribute('originalUri', $request-&gt;getUri()) In both cases, $request will be replaced with whatever variable name you used for the request instance. For getOriginalResponse() calls, which happen on the response instance, the tool will instead tell you what files had such calls, and detail how you can update those calls to use the originalResponse request attribute. Programmatic middleware pipelines With Mezzio 1.0, we recommended creating middleware pipelines and routing via configuration. Starting with 1.1, we recommend programmatic creation of pipelines and routing . Programmatic pipelines exercise the existing Mezzio API. Methods include: pipe() allows you to pipe middleware for the pipeline; this can optionally take a $path argument. (If one argument is present, it is assumed to be middleware; with two arguments, the first argument is the $path .) Paths are literal URI path segments. If the incoming request matches that segment, the middleware will execute; otherwise, it will not. These can be used to provide sub-applications with their own routing. pipeRoutingMiddleware() is used to pipe the internal routing middleware into the pipeline. pipeDispatchMiddleware() is used to pipe the internal dispatch middleware into the pipeline. pipeErrorMiddleware() is used to pipe the legacy Stratigility error middleware into the pipeline. We recommend NOT using this method, and instead adapting your application to use standard middleware for error handling . Otherwise, it acts just like pipe() . Starting in Mezzio 1.1, this method will emit a deprecation notice. As an example pipeline: $app-&gt;pipe(OriginalMessages::class); $app-&gt;pipe(Helper\\ServerUrlMiddleware::class); $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(Helper\\UrlHelperMiddleware::class); $app-&gt;pipeDispatchMiddleware(); $app-&gt;pipe(NotFoundHandler::class); Mezzio also provides methods for specifying routed middleware. These include: get($path, $middleware, $name = null) post($path, $middleware, $name = null) put($path, $middleware, $name = null) patch($path, $middleware, $name = null) delete($path, $middleware, $name = null) route($path, $middleware, array $methods = null, $name = null) Each returns a Mezzio\\Router\\Route instance; this is useful if you wish to provide additional options to your route: $app-&gt;get('/api/ping', Ping::class) -&gt;setOptions([ 'timestamp' =&gt; date(), ]); As an example, the default routes defined in the skeleton application can be written as follows: $app-&gt;get('/', \\App\\Action\\HomePageAction::class, 'home'); $app-&gt;get('/api/ping', \\App\\Action\\PingAction::class, 'api.ping'); We recommend rewriting your middleware pipeline and routing configuration into programmatic/declarative statements. Specifically: We recommend putting the pipeline declarations into config/pipeline.php . We recommend putting the routing declarations into config/routes.php . Once you've written these, you will then need to make the following changes to your application: First, enable the mezzio.programmatic_pipeline configuration flag. This can be done in any config/autoload/*.global.php file: return [ 'mezzio' =&gt; [ 'programmatic_pipeline' =&gt; true, ], ]; Once enabled, any middleware_pipeline or routes configuration will be ignored when creating the Application instance. Second, update your public/index.php to add the following lines immediately prior to calling $app-&gt;run(); : require 'config/pipeline.php'; require 'config/routes.php'; Once this has been done, the application will use your new programmatic pipelines instead of configuration. You can remove the middleware_pipeline and routes configuration after verifying your application continues to work. For programmatic pipelines to work properly, you will also need to provide error handling middleware, which is discussed in the next section. Error handling Prior to version 1.1, error handling was accomplished via two mechanisms: Stratigility \"error middleware\" (middleware with the signature function ($error, ServerRequestInterface $request, ResponseInterface $response, callable $next) ). This middleware would be invoked when calling $next() with a third argument indicating an error, and would be expected to handle it or delegate to the next error middleware. Internally, Stratigility would execute each middleware within a try/catch block; if an exception were caught, it would then delegate to the next error middleware using the caught exception as the $err argument. The \"Final Handler\". This is a handler invoked when the middleware pipeline is exhausted without returning a response, and has the signature function (ServerRequestInterface $request, ResponseInterface $response, $err = null) ; it is provided to the middleware pipeline when invoking the outermost middleware; in the case of Mezzio, it is composed in the Application instance, and passed to the application middleware when it executes run() . When invoked, it needs to decide if invocation is due to no middleware executing (HTTP 404 status), middleware calling $next() with an altered response (response is then returned), or due to invocation of error middleware (calling $next() with the third, error, argument) with no error middleware returning a response. Mezzio 1.1 updates the minimum supported Stratigility version to 1.3, which deprecates the concept of error middleware, and recommends a \"final handler\" that does no error handling, but instead returns a canned response (typically a 404). Additionally, it deprecates the practice of wrapping middleware execution in a try/catch block, and provides a flag for disabling that behavior entirely, raise_throwables . Starting in Mezzio 1.1, you can set the raise_throwables flag in your configuration: return [ 'mezzio' =&gt; [ 'raise_throwables' =&gt; true, ], ]; When enabled, the internal dispatcher will no longer catch exceptions. This both allows you to, and requires you to, write your own error handling middleware. This will require two things: Middleware with a try/catch block that operates as the outermost (or close to outermost) layer of your application, and which can provide error pages or details to your end users. Middleware at the innermost layer that is guaranteed to return a response; generally, reaching this means no middleware was able to route the request, and thus a 404 condition. The below sections detail approaches to each. Error handling middleware Error handling middleware generally will look something like this: function ( ServerRequestInterface $request, ResponseInterface $response, callable $next ) { try { $response = $next($request, $response); return $response; } catch (\\Throwable $exception) { // caught PHP 7 throwable } catch (\\Exception $exception) { // caught PHP 5 exception } // ... // do something with $exception and generate a response // ... return $response; } Stratigility 1.3 provides such an implementation via its Laminas\\Stratigility\\Middleware\\ErrorHandler . In addition to the try/catch block, it also sets up a PHP error handler that will catch any PHP error types in the current error_reporting mask; the error handler will raise exceptions of the type ErrorException with the PHP error details. Stratigility's ErrorHandler allows injection of an \"error response generator\", which allows you to alter how the error response is generated based on the current environment. Error response generators are callables with the signature: function ( Throwable|Exception $e, ServerRequestInterface $request, ResponseInterface $response ) : ResponseInterface We recommend using the Stratigility ErrorHandler and writing and attaching a custom error response generator. As a simple example, the following details a generator that will use a template to display an error page: namespace Acme; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Mezzio\\Template\\TemplateRendererInterface; class TemplatedErrorResponseGenerator { const TEMPLATE_DEFAULT = 'error::error'; private $renderer; private $template; public function __construct( TemplateRendererInterface $renderer, $template = TEMPLATE_DEFAULT ) { $this-&gt;renderer = $renderer; $this-&gt;template = $template; } public function __invoke( $e, ServerRequestInterface $request, ResponseInterface $response ) { $response-&gt;write($this-&gt;renderer-&gt;render($this-&gt;template, [ 'exception' =&gt; $e, 'request' =&gt; $request, ])); return $response; } } You might then create a factory for generating the ErrorHandler and attaching this response generator as follows: namespace Acme\\Container; use Acme\\TemplatedErrorResponseGenerator; use Interop\\Container\\ContainerInterface; use Laminas\\Diactoros\\Response; use Mezzio\\Template\\TemplateRendererInterface; use Laminas\\Stratigility\\Middleware\\ErrorHandler; class ErrorHandlerFactory { public function __invoke(ContainerInterface $container) { $generator = new TemplatedErrorResponseGenerator( $container-&gt;get(TemplateRendererInterface::class) ); return new ErrorHandler(new Response(), $generator); } } Once that is created you can tell your middleware configuration about it: // in config/autoload/middleware-pipeline.global.php use Acme\\Container\\ErrorHandlerFactory; use Laminas\\Stratigility\\Middleware\\ErrorHandler; return [ 'dependencies' =&gt; [ /* ... */ 'factories' =&gt; [ ErrorHandler::class =&gt; ErrorHandlerFactory::class, /* ... */ ], /* ... */ ], 'middleware_pipeline' =&gt; [ 'always' =&gt; [ 'middleware' =&gt; [ ErrorHandler::class, /* ... */ ], 'priority' =&gt; 10000, ], /* ... */ ], ]; Alternately, if using a programmatic pipeline, as detailed in the previous section, you can use the following: use Laminas\\Stratigility\\Middleware\\ErrorHandler; $app-&gt;pipe(ErrorHandler::class); // add all other middleware after it Not Found middleware At the innermost layer of your application, you need middleware guaranteed to return a response; typically, this indicates a failure to route the request, and, as such, an HTTP 404 response. Laminas\\Stratigility\\Middleware\\NotFoundHandler provides an implementation, but is written such that the response body remains empty. As such, you might write a custom, templated handler: namespace Acme; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Laminas\\Diactoros\\Response; use Mezzio\\Template\\TemplateRendererInterface; class TemplatedNotFoundHandler { const TEMPLATE_DEFAULT = 'error::404'; private $renderer; private $template; public function __construct( TemplateRendererInterface $renderer, $template = self::TEMPLATE_DEFAULT ) { $this-&gt;renderer = $renderer; $this-&gt;template = $template; } public function __invoke( ServerRequestInterface $request, ResponseInterface $response, callable $next ) { $response = new Response(); $response-&gt;write($this-&gt;renderer-&gt;render($this-&gt;template)); return $response-&gt;withStatus(404); } } Similar to the discussion of the ErrorHandler above, we'll create a factory for this: namespace Acme\\Container; use Acme\\TemplatedNotFoundHandler; use Interop\\Container\\ContainerInterface; use Mezzio\\Template\\TemplateRendererInterface; class TemplatedNotFoundHandlerFactory { public function __invoke(ContainerInterface $container) { return new TemplatedNotFoundHandler( $container-&gt;get(TemplateRendererInterface::class) ); } } We can then register it in our pipeline: // in config/autoload/middleware-pipeline.global.php use Acme\\Container\\NotFoundHandlerFactory; use Acme\\TemplatedNotFoundHandler; return [ 'dependencies' =&gt; [ /* ... */ 'factories' =&gt; [ TemplatedNotFoundHandler::class =&gt; TemplatedNotFoundHandlerFactory::class, /* ... */ ], /* ... */ ], 'middleware_pipeline' =&gt; [ /* ... */ // After 'routing', but before 'error'; // alternately as last item in 'routing' middleware list. 'not-found' =&gt; [ 'middleware' =&gt; TemplatedNotFoundHandler::class, 'priority' =&gt; 0, ], /* ... */ ], ]; If you are using programmatic pipelines, as described in the previous section: use Acme\\TemplatedNotFoundHandler; // all other pipeline directives, and then: $app-&gt;pipe(TemplatedNotFoundHandler::class); Detecting error middleware usage If you use the new error handling paradigm, we recommend that you also audit your application for legacy Stratigility error middleware, as well as invocation of error middleware. To do this, we provide a tool via the mezzio/mezzio-tooling package, vendor/bin/mezzio-scan-for-error-middleware . First, install the tooling as a development requirement: $ composer require --dev mezzio/mezzio-tooling The tool will scan the src/ directory by default, but allows you to scan other directories via the --dir flag. It will detect and report files with any of the following: Classes implementing Laminas\\Stratigility\\ErrorMiddlewareInterface . Invokable classes implementing the error middleware signature. Methods accepting $next that invoke it with an error argument. As an example running it: $ ./vendor/bin/mezzio-scan-for-error-middleware scan # or, with a directory argument: $ ./vendor/bin/mezzio-scan-for-error-middleware scan --dir ./lib You may also call the tool using its help command, or either of the --help or -h flags to get full usage information. Use this tool to identify potential problem areas in your application, and update your code to use the new error handling facilities as outlined above. Full example Putting all of the above together — original message memoizing , programmatic pipelines , and middleware-based error handling — might look like the following examples. First, we'll tell Mezzio to use programmatic pipelines, and to enable the new error handling (by telling it to \"raise throwables\", instead of catching them): // In config/autoload/mezzio.global.php: return [ /* ... */ 'mezzio' =&gt; [ 'programmatic_pipeline' =&gt; true, 'raise_throwables' =&gt; true, /* ... */ ], ]; Next, we'll update config/autoload/middleware-pipeline.global.php to list only dependencies: use Acme\\Container; use Acme\\TemplatedNotFoundHandler; use Laminas\\Stratigility\\Middleware\\ErrorHandler; use Laminas\\Stratigility\\Middleware\\OriginalMessages; use Mezzio\\Helper; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ OriginalMessages::class =&gt; OriginalMesssages::class, ], 'factories' =&gt; [ ErrorHandler::class =&gt; Container\\ErrorHandlerFactory::class, Helper\\ServerUrlMiddleware::class =&gt; Helper\\ServerUrlMiddlewareFactory::class, Helper\\UrlHelperMiddleware::class =&gt; Helper\\UrlHelperMiddlewareFactory::class, TemplatedNotFoundHandler::class =&gt; Container\\TemplatedNotFoundHandlerFactory::class, ], ], ]; We'll also update config/autoload/routes.global.php to only list dependencies; in the following example, we list only the middleware shipped by default with the skeleton application: use App\\Action; use Mezzio\\Router\\FastRouteRouter; use Mezzio\\Router\\RouterInterface; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ RouterInterface::class =&gt; FastRouteRouter::class, Action\\PingAction::class =&gt; Action\\PingAction::class, ], 'factories' =&gt; [ Action\\HomePageAction::class =&gt; Action\\HomePageFactory::class, ], ], ]; To create our pipeline, we will create the file config/pipeline.php : use Acme\\TemplatedNotFoundHandler; use Laminas\\Stratigility\\Middleware\\ErrorHandler; use Laminas\\Stratigility\\Middleware\\OriginalMessages; use Mezzio\\Container\\ApplicationFactory; use Mezzio\\Helper; $app-&gt;pipe(OriginalMessages::class); $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipe(Helper\\ServerUrlMiddleware::class); $app-&gt;pipe([ ApplicationFactory::ROUTING_MIDDLEWARE, Helper\\UrlHelperMiddleware::class, ApplicationFactory::DISPATCH_MIDDLEWARE, ]); $app-&gt;pipe(TemplatedNotFoundHandler::class); Note that you can use arrays of middleware just like you did in the configuration; this allows you to separate middleware into logical groups if desired! To provide our routed middleware, we will create the file config/pipeline.php : use App\\Action; $app-&gt;get('/', Action\\HomePageAction::class, 'home'); $app-&gt;get('/api/ping', Action\\PingAction::class, 'api.ping'); The above exercises the various routing methods of the Application class. Finally, we will need to update our public/index.php , to tell it to require our new pipeline and routing files; we'll do that between retrieving the application from the container, and running the application: $app = $container-&gt;get(\\Mezzio\\Application::class); require 'config/pipeline.php'; require 'config/routes.php'; $app-&gt;run(); With these changes in place, your application should continue to run as it did previously! Looking forward Mezzio 2.0 will ship error handling middleware and \"not found\" middleware, as well as tools to convert your application to a programmatic pipeline in such a way as to utilize these shipped implementations. In the meantime, however, you can adopt programmatic pipelines and the new error handling paradigm within the version 1 series using the configuration flags and guidelines listed above in order to make your application forwards-compatible.","title":"To Mezzio 1.1"},{"location":"v1/reference/migration/to-v1-1/#migration-to-mezzio-11","text":"Mezzio 1.1 should not result in any upgrade problems for users. However, starting in this version, we offer a few changes affecting the following that you should be aware of, and potentially update your application to adopt: Deprecations Original request and response messages Recommendation to use programmatic pipelines Error handling","title":"Migration to Mezzio 1.1"},{"location":"v1/reference/migration/to-v1-1/#deprecations","text":"The following classes and/or methods are deprecated with the 1.1.0 release, and will be removed for the 2.0 release: Mezzio\\Application::pipeErrorHandler() : Stratigility v1 error middleware are removed in the Stratigility v2 release, which Mezzio 2.0 will adopt. Mezzio\\Application::routeMiddleware() : routing middleware moves to a dedicated class starting in Mezzio 2.0. If you were referencing the method in order to pipe it as middleware, use pipeRoutingMiddleware() or pipe(ApplicationFactory::ROUTING_MIDDLEWARE) instead. Mezzio\\Application::dispatchMiddleware() : dispatch middleware moves to a dedicated class starting in Mezzio 2.0.If you were referencing the method in order to pipe it as middleware, use pipeDispatchMiddleware() or pipe(ApplicationFactory::DISPATCH_MIDDLEWARE) instead. Mezzio\\Application::getFinalHandler() : this method gets renamed to getDefaultDelegate() in Mezzio 2.0. We recommend retrieving the value from the application dependency injection container if you need it elsewhere. Mezzio\\Application::raiseThrowables() : this method becomes a no-op in Stratigility 2.0, on which Mezzio 2.0 is based; the behavior it enabled becomes the default behavior in that version. Mezzio\\Container\\Exception\\InvalidArgumentException : this exception type is thrown by ApplicationFactory ; in Mezzio 2.0, it throws Mezzio\\Exception\\InvalidArgumentException instead. Mezzio\\Container\\Exception\\NotFoundException : this exception type is not currently used anyway. Mezzio\\ErrorMiddlewarePipe : Stratigility v1 error middleware are removed in the Stratigility v2 release, which Mezzio 2.0 will adopt, making this specialized middleware pipe type irrelvant. Mezzio\\TemplatedErrorHandler and Mezzio\\WhoopsErrorHandler : The concept of \"final handlers\" will be removed in Mezzio 2.0, to be replaced with \"default delegates\" (implementations of Interop\\Http\\ServerMiddleware\\DelegateInterface that will be called if the middleware pipeline is exhausted, and which will be guaranteed to return a response). Mezzio 2.0 will provide tooling to upgrade your dependencies to make the transition seamless; end users will only be affected if they were extending these classes. If you were calling any of these directly, or extending or overriding them, you will need to update your code to work for version 2.0. We recommend not using these.","title":"Deprecations"},{"location":"v1/reference/migration/to-v1-1/#original-messages","text":"Stratigility 1.3 deprecates its internal request and response decorators, Laminas\\Stratigility\\Http\\Request and Laminas\\Stratigility\\Http\\Response , respectively. The main utility of these instances was to provide access in inner middleware layers to the original request, original response, and original URI. As such access may still be desired, Stratigility 1.3 introduced Laminas\\Stratigility\\Middleware\\OriginalMessages . This middleware injects the following attributes into the request it passes to $next() : originalRequest is the request instance provided to the middleware. originalUri is the URI instance associated with that request. originalResponse is the response instance provided to the middleware. Laminas\\Stratigility\\FinalHandler was updated to use these when they're available starting with version 1.0.3. We recommend adding the OriginalMessages middleware as the outermost (first) middleware in your pipeline. Using configuration-driven middleware, that would look like this: // config/autoload/middleware-pipeline.global.php /* ... */ use Mezzio\\Helper; use Laminas\\Stratigility\\Middleware\\OriginalMessages; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ OriginalMessages::class =&gt; OriginalMessages::class, ], /* ... */ ], 'middleware_pipeline' =&gt; [ 'always' =&gt; [ 'middleware' =&gt; [ OriginalMessages::class, // &lt;----- Add this entry Helper\\ServerUrlMiddleware::class, /* ... */ ], 'priority' =&gt; 10000, ], /* ... */ ], ]; If you are programmatically creating your pipeline , use the following: $app-&gt;pipe(OriginalMessages::class); /* all other middleware */","title":"Original messages"},{"location":"v1/reference/migration/to-v1-1/#programmatic-middleware-pipelines","text":"With Mezzio 1.0, we recommended creating middleware pipelines and routing via configuration. Starting with 1.1, we recommend programmatic creation of pipelines and routing . Programmatic pipelines exercise the existing Mezzio API. Methods include: pipe() allows you to pipe middleware for the pipeline; this can optionally take a $path argument. (If one argument is present, it is assumed to be middleware; with two arguments, the first argument is the $path .) Paths are literal URI path segments. If the incoming request matches that segment, the middleware will execute; otherwise, it will not. These can be used to provide sub-applications with their own routing. pipeRoutingMiddleware() is used to pipe the internal routing middleware into the pipeline. pipeDispatchMiddleware() is used to pipe the internal dispatch middleware into the pipeline. pipeErrorMiddleware() is used to pipe the legacy Stratigility error middleware into the pipeline. We recommend NOT using this method, and instead adapting your application to use standard middleware for error handling . Otherwise, it acts just like pipe() . Starting in Mezzio 1.1, this method will emit a deprecation notice. As an example pipeline: $app-&gt;pipe(OriginalMessages::class); $app-&gt;pipe(Helper\\ServerUrlMiddleware::class); $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(Helper\\UrlHelperMiddleware::class); $app-&gt;pipeDispatchMiddleware(); $app-&gt;pipe(NotFoundHandler::class); Mezzio also provides methods for specifying routed middleware. These include: get($path, $middleware, $name = null) post($path, $middleware, $name = null) put($path, $middleware, $name = null) patch($path, $middleware, $name = null) delete($path, $middleware, $name = null) route($path, $middleware, array $methods = null, $name = null) Each returns a Mezzio\\Router\\Route instance; this is useful if you wish to provide additional options to your route: $app-&gt;get('/api/ping', Ping::class) -&gt;setOptions([ 'timestamp' =&gt; date(), ]); As an example, the default routes defined in the skeleton application can be written as follows: $app-&gt;get('/', \\App\\Action\\HomePageAction::class, 'home'); $app-&gt;get('/api/ping', \\App\\Action\\PingAction::class, 'api.ping'); We recommend rewriting your middleware pipeline and routing configuration into programmatic/declarative statements. Specifically: We recommend putting the pipeline declarations into config/pipeline.php . We recommend putting the routing declarations into config/routes.php . Once you've written these, you will then need to make the following changes to your application: First, enable the mezzio.programmatic_pipeline configuration flag. This can be done in any config/autoload/*.global.php file: return [ 'mezzio' =&gt; [ 'programmatic_pipeline' =&gt; true, ], ]; Once enabled, any middleware_pipeline or routes configuration will be ignored when creating the Application instance. Second, update your public/index.php to add the following lines immediately prior to calling $app-&gt;run(); : require 'config/pipeline.php'; require 'config/routes.php'; Once this has been done, the application will use your new programmatic pipelines instead of configuration. You can remove the middleware_pipeline and routes configuration after verifying your application continues to work. For programmatic pipelines to work properly, you will also need to provide error handling middleware, which is discussed in the next section.","title":"Programmatic middleware pipelines"},{"location":"v1/reference/migration/to-v1-1/#error-handling","text":"Prior to version 1.1, error handling was accomplished via two mechanisms: Stratigility \"error middleware\" (middleware with the signature function ($error, ServerRequestInterface $request, ResponseInterface $response, callable $next) ). This middleware would be invoked when calling $next() with a third argument indicating an error, and would be expected to handle it or delegate to the next error middleware. Internally, Stratigility would execute each middleware within a try/catch block; if an exception were caught, it would then delegate to the next error middleware using the caught exception as the $err argument. The \"Final Handler\". This is a handler invoked when the middleware pipeline is exhausted without returning a response, and has the signature function (ServerRequestInterface $request, ResponseInterface $response, $err = null) ; it is provided to the middleware pipeline when invoking the outermost middleware; in the case of Mezzio, it is composed in the Application instance, and passed to the application middleware when it executes run() . When invoked, it needs to decide if invocation is due to no middleware executing (HTTP 404 status), middleware calling $next() with an altered response (response is then returned), or due to invocation of error middleware (calling $next() with the third, error, argument) with no error middleware returning a response. Mezzio 1.1 updates the minimum supported Stratigility version to 1.3, which deprecates the concept of error middleware, and recommends a \"final handler\" that does no error handling, but instead returns a canned response (typically a 404). Additionally, it deprecates the practice of wrapping middleware execution in a try/catch block, and provides a flag for disabling that behavior entirely, raise_throwables . Starting in Mezzio 1.1, you can set the raise_throwables flag in your configuration: return [ 'mezzio' =&gt; [ 'raise_throwables' =&gt; true, ], ]; When enabled, the internal dispatcher will no longer catch exceptions. This both allows you to, and requires you to, write your own error handling middleware. This will require two things: Middleware with a try/catch block that operates as the outermost (or close to outermost) layer of your application, and which can provide error pages or details to your end users. Middleware at the innermost layer that is guaranteed to return a response; generally, reaching this means no middleware was able to route the request, and thus a 404 condition. The below sections detail approaches to each.","title":"Error handling"},{"location":"v1/reference/migration/to-v1-1/#full-example","text":"Putting all of the above together — original message memoizing , programmatic pipelines , and middleware-based error handling — might look like the following examples. First, we'll tell Mezzio to use programmatic pipelines, and to enable the new error handling (by telling it to \"raise throwables\", instead of catching them): // In config/autoload/mezzio.global.php: return [ /* ... */ 'mezzio' =&gt; [ 'programmatic_pipeline' =&gt; true, 'raise_throwables' =&gt; true, /* ... */ ], ]; Next, we'll update config/autoload/middleware-pipeline.global.php to list only dependencies: use Acme\\Container; use Acme\\TemplatedNotFoundHandler; use Laminas\\Stratigility\\Middleware\\ErrorHandler; use Laminas\\Stratigility\\Middleware\\OriginalMessages; use Mezzio\\Helper; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ OriginalMessages::class =&gt; OriginalMesssages::class, ], 'factories' =&gt; [ ErrorHandler::class =&gt; Container\\ErrorHandlerFactory::class, Helper\\ServerUrlMiddleware::class =&gt; Helper\\ServerUrlMiddlewareFactory::class, Helper\\UrlHelperMiddleware::class =&gt; Helper\\UrlHelperMiddlewareFactory::class, TemplatedNotFoundHandler::class =&gt; Container\\TemplatedNotFoundHandlerFactory::class, ], ], ]; We'll also update config/autoload/routes.global.php to only list dependencies; in the following example, we list only the middleware shipped by default with the skeleton application: use App\\Action; use Mezzio\\Router\\FastRouteRouter; use Mezzio\\Router\\RouterInterface; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ RouterInterface::class =&gt; FastRouteRouter::class, Action\\PingAction::class =&gt; Action\\PingAction::class, ], 'factories' =&gt; [ Action\\HomePageAction::class =&gt; Action\\HomePageFactory::class, ], ], ]; To create our pipeline, we will create the file config/pipeline.php : use Acme\\TemplatedNotFoundHandler; use Laminas\\Stratigility\\Middleware\\ErrorHandler; use Laminas\\Stratigility\\Middleware\\OriginalMessages; use Mezzio\\Container\\ApplicationFactory; use Mezzio\\Helper; $app-&gt;pipe(OriginalMessages::class); $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipe(Helper\\ServerUrlMiddleware::class); $app-&gt;pipe([ ApplicationFactory::ROUTING_MIDDLEWARE, Helper\\UrlHelperMiddleware::class, ApplicationFactory::DISPATCH_MIDDLEWARE, ]); $app-&gt;pipe(TemplatedNotFoundHandler::class); Note that you can use arrays of middleware just like you did in the configuration; this allows you to separate middleware into logical groups if desired! To provide our routed middleware, we will create the file config/pipeline.php : use App\\Action; $app-&gt;get('/', Action\\HomePageAction::class, 'home'); $app-&gt;get('/api/ping', Action\\PingAction::class, 'api.ping'); The above exercises the various routing methods of the Application class. Finally, we will need to update our public/index.php , to tell it to require our new pipeline and routing files; we'll do that between retrieving the application from the container, and running the application: $app = $container-&gt;get(\\Mezzio\\Application::class); require 'config/pipeline.php'; require 'config/routes.php'; $app-&gt;run(); With these changes in place, your application should continue to run as it did previously!","title":"Full example"},{"location":"v1/reference/migration/to-v1-1/#looking-forward","text":"Mezzio 2.0 will ship error handling middleware and \"not found\" middleware, as well as tools to convert your application to a programmatic pipeline in such a way as to utilize these shipped implementations. In the meantime, however, you can adopt programmatic pipelines and the new error handling paradigm within the version 1 series using the configuration flags and guidelines listed above in order to make your application forwards-compatible.","title":"Looking forward"},{"location":"v2/","text":"Mezzio: PSR-7 Middleware in Minutes Mezzio builds on Stratigility to provide a minimalist PSR-7 middleware framework for PHP, with the following features: Routing. Choose your own router; we support: Aura.Router FastRoute laminas-router DI Containers, via PSR-11 Container . All middleware composed in Mezzio may be retrieved from the composed container. Optionally, templating. We support: Plates Twig Laminas's PhpRenderer Error handling. Create templated error pages, or use tools like whoops for debugging purposes. Nested middleware applications. Write an application, and compose it later in another, optionally under a separate subpath. Simplified installation . Our custom Composer -based installer prompts you for your initial stack choices, giving you exactly the base you want to start from. Essentially, Mezzio allows you to develop using the tools you prefer, and provides minimal structure and facilities to ease your development. Should I choose it over Laminas\\Mvc? That’s a good question. Here’s what we recommend. If you’re keen to get started, then keep reading and get started writing your first middleware application today!","title":"Mezzio: PSR-7 Middleware in Minutes"},{"location":"v2/#mezzio-psr-7-middleware-in-minutes","text":"Mezzio builds on Stratigility to provide a minimalist PSR-7 middleware framework for PHP, with the following features: Routing. Choose your own router; we support: Aura.Router FastRoute laminas-router DI Containers, via PSR-11 Container . All middleware composed in Mezzio may be retrieved from the composed container. Optionally, templating. We support: Plates Twig Laminas's PhpRenderer Error handling. Create templated error pages, or use tools like whoops for debugging purposes. Nested middleware applications. Write an application, and compose it later in another, optionally under a separate subpath. Simplified installation . Our custom Composer -based installer prompts you for your initial stack choices, giving you exactly the base you want to start from. Essentially, Mezzio allows you to develop using the tools you prefer, and provides minimal structure and facilities to ease your development. Should I choose it over Laminas\\Mvc? That’s a good question. Here’s what we recommend. If you’re keen to get started, then keep reading and get started writing your first middleware application today!","title":"Mezzio: PSR-7 Middleware in Minutes"},{"location":"v2/why-mezzio/","text":"Should You Choose mezzio Over laminas-mvc? We recommend that you choose Mezzio for any new project — if the choice is yours to make . Why Use laminas-mvc? laminas-mvc is a proven platform, with more than half a decade of development behind it. It is stable and battle-tested in production platforms. Because it is opinionated about project structure and architecture, fewer decisions need be made up front; developers know where new code goes, and how it will wire into the overall application. Additionally, a number of training courses exist, including offerings by Zend , allowing you or your team to fully learn the framework and take advantage of all its features. Finally, laminas-mvc has a lively module ecosystem , allowing you to add features and capabilities to your application without needing to develop them from scratch. We Recommend Mezzio laminas-mvc has many preconceptions about how things work, yet they're very broad and general. What’s more, it also has several pre-wired structures in place that may either aid you — or get in your way. As a result, you are required to know a lot of what those things are — if you want to use it optimally. And to acquire that depth of knowledge, you’re going to need to spend a lot of time digging deep into laminas-mvc’s internals before you begin to get the most out of it. To quote Laminas project lead, Matthew Weier O’Phinney : The problem is that laminas-mvc is anything but beginner-friendly at this point. You're required to deep dive into the event manager, service manager, and module system — right from the outset; And to do this you need more than a passing understanding of object-oriented programming and a range of design patterns. Mezzio (specifically applications based on the Mezzio Skeleton Installer ) on the other hand, comes with barely any of these assumptions and requirements. It provides a very minimalist structure. Essentially all you have to become familiar with are five core components. These are: A DI container. A router. An error handler for development. A template engine (if you’re not creating an API). PSR-7 messages and http-interop (future PSR-15) middleware. In many cases, these are provided for you by the skeleton, and do not require any additional knowledge on your part. Given that, you can quickly get up to speed with the framework and begin creating the application that you need. We believe that this approach — in contrast to the laminas-mvc approach — is more flexible and accommodating. What’s more, you can mix and match the types of applications that you create. Do you just need an API? Great; you can do that quite quickly. Do you want an HTML-based front-end? That’s available too. When building applications with Mezzio, you can make use of the various Laminas components, or any third-party components or middleware. You can pick and choose what you need, as and when you need it. You’re not bound by many, if any, constraints and design decisions. In Conclusion For what it’s worth, we’re not saying that laminas-mvc is a poor choice! What we are saying is: The learning curve, from getting started to building the first application, is significantly lower with Mezzio The ways in which you can create applications, whether through multiple pieces of middleware or by combining multiple Mezzio apps, into one larger one, is a much more efficient and fluid way to work Ultimately, the choice is always up to you, your team, and your project’s needs. We just want to ensure that you’ve got all the information you need, to make an informed decision.","title":"Why choose Mezzio?"},{"location":"v2/why-mezzio/#should-you-choose-mezzio-over-laminas-mvc","text":"We recommend that you choose Mezzio for any new project — if the choice is yours to make .","title":"Should You Choose mezzio Over laminas-mvc?"},{"location":"v2/why-mezzio/#why-use-laminas-mvc","text":"laminas-mvc is a proven platform, with more than half a decade of development behind it. It is stable and battle-tested in production platforms. Because it is opinionated about project structure and architecture, fewer decisions need be made up front; developers know where new code goes, and how it will wire into the overall application. Additionally, a number of training courses exist, including offerings by Zend , allowing you or your team to fully learn the framework and take advantage of all its features. Finally, laminas-mvc has a lively module ecosystem , allowing you to add features and capabilities to your application without needing to develop them from scratch.","title":"Why Use laminas-mvc?"},{"location":"v2/why-mezzio/#we-recommend-mezzio","text":"laminas-mvc has many preconceptions about how things work, yet they're very broad and general. What’s more, it also has several pre-wired structures in place that may either aid you — or get in your way. As a result, you are required to know a lot of what those things are — if you want to use it optimally. And to acquire that depth of knowledge, you’re going to need to spend a lot of time digging deep into laminas-mvc’s internals before you begin to get the most out of it. To quote Laminas project lead, Matthew Weier O’Phinney : The problem is that laminas-mvc is anything but beginner-friendly at this point. You're required to deep dive into the event manager, service manager, and module system — right from the outset; And to do this you need more than a passing understanding of object-oriented programming and a range of design patterns. Mezzio (specifically applications based on the Mezzio Skeleton Installer ) on the other hand, comes with barely any of these assumptions and requirements. It provides a very minimalist structure. Essentially all you have to become familiar with are five core components. These are: A DI container. A router. An error handler for development. A template engine (if you’re not creating an API). PSR-7 messages and http-interop (future PSR-15) middleware. In many cases, these are provided for you by the skeleton, and do not require any additional knowledge on your part. Given that, you can quickly get up to speed with the framework and begin creating the application that you need. We believe that this approach — in contrast to the laminas-mvc approach — is more flexible and accommodating. What’s more, you can mix and match the types of applications that you create. Do you just need an API? Great; you can do that quite quickly. Do you want an HTML-based front-end? That’s available too. When building applications with Mezzio, you can make use of the various Laminas components, or any third-party components or middleware. You can pick and choose what you need, as and when you need it. You’re not bound by many, if any, constraints and design decisions.","title":"We Recommend Mezzio"},{"location":"v2/why-mezzio/#in-conclusion","text":"For what it’s worth, we’re not saying that laminas-mvc is a poor choice! What we are saying is: The learning curve, from getting started to building the first application, is significantly lower with Mezzio The ways in which you can create applications, whether through multiple pieces of middleware or by combining multiple Mezzio apps, into one larger one, is a much more efficient and fluid way to work Ultimately, the choice is always up to you, your team, and your project’s needs. We just want to ensure that you’ve got all the information you need, to make an informed decision.","title":"In Conclusion"},{"location":"v2/cookbook/autowiring-routes-and-pipelines/","text":"How can I autowire routes and pipelines? Mezzio 2.0 switched to programmatic pipelines and routes, versus configuration-driven pipelines and routing as used in version 1. One drawback is that with configuration-driven approaches, users could provide configuration via a module ConfigProvider , and automatically expose new pipeline middleware or routes; with a programmatic approach, this is no longer possible. Or is it? Delegator Factories One possibility available to version 2 applications is to use delegator factories on the Mezzio\\Application instance in order to inject these items. A delegator factory is a factory that delegates creation of an instance to a callback, and then operates on that instance for the purpose of altering the instance or providing a replacement (e.g., a decorator or proxy). The delegate callback usually wraps a service factory, or, because delegator factories also return an instance, additional delegator factories. As such, you assign delegator factories , plural, to instances, allowing multiple delegator factories to intercept processing of the service initialization. For the purposes of this particular example, we will use delegator factories to both pipe middleware as well as route middleware. To demonstrate, we'll take the default pipeline and routing from the skeleton application, and provide it via a delegator factory instead. First, we'll create the class App\\Factory\\PipelineAndRoutesDelegator , with the following contents: &lt;?php namespace App\\Factory; use App\\Action; use Laminas\\Stratigility\\Middleware\\ErrorHandler; use Mezzio\\Application; use Mezzio\\Helper\\ServerUrlMiddleware; use Mezzio\\Helper\\UrlHelperMiddleware; use Mezzio\\Middleware\\ImplicitHeadMiddleware; use Mezzio\\Middleware\\ImplicitOptionsMiddleware; use Mezzio\\Middleware\\NotFoundHandler; use Psr\\Container\\ContainerInterface; class PipelineAndRoutesDelegator { /** * @param ContainerInterface $container * @param string $serviceName Name of the service being created. * @param callable $callback Creates and returns the service. * @return Application */ public function __invoke(ContainerInterface $container, $serviceName, callable $callback) { /** @var $app Application */ $app = $callback(); // Setup pipeline: $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipe(ServerUrlMiddleware::class); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(ImplicitHeadMiddleware::class); $app-&gt;pipe(ImplicitOptionsMiddleware::class); $app-&gt;pipe(UrlHelperMiddleware::class); $app-&gt;pipeDispatchMiddleware(); $app-&gt;pipe(NotFoundHandler::class); // Setup routes: $app-&gt;get('/', Action\\HomePageAction::class, 'home'); $app-&gt;get('/api/ping', Action\\PingAction::class, 'api.ping'); return $app; } } Where to put the factory You will place the factory class in one of the following locations: src/App/Factory/PipelineAndRoutesDelegator.php if using the default, flat, application structure. src/App/src/Factory/PipelineAndRoutesDelegator.php if using the recommended, modular, application structure. Once you've created this, edit the class App\\ConfigProvider ; in it, we'll update the getDependencies() method to add the delegator factory: public function getDependencies() { return [ /* . . . */ 'delegators' =&gt; [ \\Mezzio\\Application::class =&gt; [ Factory\\PipelineAndRoutesDelegator::class, ], ], ]; } Where is the ConfigProvider class? The ConfigProvider class is in one of the following locations: src/App/ConfigProvider.php if using the default, flat, application structure. src/App/src/ConfigProvider.php using the recommended, modular, application structure. Why is an array assigned? As noted above in the description of delegator factories, since each delegator factory returns an instance, you can nest multiple delegator factories in order to shape initialization of a service. As such, they are assigned as an array to the service. Once you've done this, you can remove: config/pipeline.php config/routes.php The following lines from public/index.php : // Import programmatic/declarative middleware pipeline and routing // configuration statements require 'config/pipeline.php'; require 'config/routes.php'; If you reload your application at this point, you should see that everything continues to work as expected! Caution: pipelines Using delegator factories is a nice way to keep your routing and pipeline configuration close to the modules in which they are defined. However, there is a caveat: you likely should not register pipeline middleware in a delegator factory other than within your root application module . The reason for this is simple: pipelines are linear, and specific to your application. If one module pipes in middleware, there's no guarantee it will be piped before or after your main pipeline, and no way to pipe the middleware at a position in the middle of the pipeline! As such: Use a config/pipeline.php file for your pipeline, OR Ensure you only define the pipeline in a single delegator factory on your Application instance. Caution: third-party, distributed modules If you are developing a module to distribute as a package via Composer , you should not autowire any delegator factories that inject pipeline middleware or routes in the Application . Why? As noted in the above section, pipelines should be created exactly once, at the application level. Registering pipeline middleware within a distributable package will very likely not have the intended consequences. If you ship with pipeline middleware, we suggest that you: Document the middleware, and where you anticipate it being used in the middleware pipeline. Document how to add the middleware service to dependency configuration, or provide the dependency configuration via your module's ConfigProvider . With regards to routes, there are other considerations: Routes defined by the package might conflict with the application, or with other packages used by the application. Routing definitions are typically highly specific to the router implementation in use. As an example, each of the currently supported router implementations has a different syntax for placeholders: /user/:id + \"constraints\" configuration to define constraints (laminas-router) /user/{id} + \"tokens\" configuration to define constraints (Aura.Router) /user/{id:\\d+} (FastRoute) Your application may have specific routing considerations or design. You could, of course, detect what router is in use, and provide routing for each known, supported router implementation within your delegator factory. We even recommend doing exactly that. However, we note that such an approach does not solve the other two points above. However, we still recommend shipping a delegator factory that would register your routes, since routes are often a part of module design; just do not autowire that delegator factory. This way, end-users who can use the defaults do not need to cut-and-paste routing definitions from your documentation into their own applications; they will instead opt-in to your delegator factory by wiring it into their own configuration. Synopsis We recommend using delegator factories for the purpose of autowiring routes, and, with caveats, pipeline middleware: The pipeline should be created exactly once, so calls to pipe() should occur in exactly one delegator factory. Distributable packages should create a delegator factory for routes only , but should not register the delegator factory by default. ApplicationConfigInjectionDelegator Since version 2.2 Mezzio\\Container\\ApplicationConfigInjectionDelegator allows you to define configuration that is then used to call pipe() or the various routing methods of Mezzio\\Application . This is particularly useful for injecting routes . The format of routes configuration is as follows: return [ 'routes' =&gt; [ [ 'path' =&gt; '/path/to/match', 'middleware' =&gt; 'Middleware Service Name', 'allowed_methods' =&gt; ['GET', 'POST', 'PATCH'], 'options' =&gt; [ 'stuff' =&gt; 'to', 'pass' =&gt; 'to', 'the' =&gt; 'underlying router', ], ], // etc. ], ]; All your various modules could provide route configuration, and you could then use a single delegator to add all of them at once.","title":"Autowiring routes and pipeline middleware"},{"location":"v2/cookbook/autowiring-routes-and-pipelines/#how-can-i-autowire-routes-and-pipelines","text":"Mezzio 2.0 switched to programmatic pipelines and routes, versus configuration-driven pipelines and routing as used in version 1. One drawback is that with configuration-driven approaches, users could provide configuration via a module ConfigProvider , and automatically expose new pipeline middleware or routes; with a programmatic approach, this is no longer possible. Or is it?","title":"How can I autowire routes and pipelines?"},{"location":"v2/cookbook/autowiring-routes-and-pipelines/#delegator-factories","text":"One possibility available to version 2 applications is to use delegator factories on the Mezzio\\Application instance in order to inject these items. A delegator factory is a factory that delegates creation of an instance to a callback, and then operates on that instance for the purpose of altering the instance or providing a replacement (e.g., a decorator or proxy). The delegate callback usually wraps a service factory, or, because delegator factories also return an instance, additional delegator factories. As such, you assign delegator factories , plural, to instances, allowing multiple delegator factories to intercept processing of the service initialization. For the purposes of this particular example, we will use delegator factories to both pipe middleware as well as route middleware. To demonstrate, we'll take the default pipeline and routing from the skeleton application, and provide it via a delegator factory instead. First, we'll create the class App\\Factory\\PipelineAndRoutesDelegator , with the following contents: &lt;?php namespace App\\Factory; use App\\Action; use Laminas\\Stratigility\\Middleware\\ErrorHandler; use Mezzio\\Application; use Mezzio\\Helper\\ServerUrlMiddleware; use Mezzio\\Helper\\UrlHelperMiddleware; use Mezzio\\Middleware\\ImplicitHeadMiddleware; use Mezzio\\Middleware\\ImplicitOptionsMiddleware; use Mezzio\\Middleware\\NotFoundHandler; use Psr\\Container\\ContainerInterface; class PipelineAndRoutesDelegator { /** * @param ContainerInterface $container * @param string $serviceName Name of the service being created. * @param callable $callback Creates and returns the service. * @return Application */ public function __invoke(ContainerInterface $container, $serviceName, callable $callback) { /** @var $app Application */ $app = $callback(); // Setup pipeline: $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipe(ServerUrlMiddleware::class); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(ImplicitHeadMiddleware::class); $app-&gt;pipe(ImplicitOptionsMiddleware::class); $app-&gt;pipe(UrlHelperMiddleware::class); $app-&gt;pipeDispatchMiddleware(); $app-&gt;pipe(NotFoundHandler::class); // Setup routes: $app-&gt;get('/', Action\\HomePageAction::class, 'home'); $app-&gt;get('/api/ping', Action\\PingAction::class, 'api.ping'); return $app; } }","title":"Delegator Factories"},{"location":"v2/cookbook/autowiring-routes-and-pipelines/#caution-pipelines","text":"Using delegator factories is a nice way to keep your routing and pipeline configuration close to the modules in which they are defined. However, there is a caveat: you likely should not register pipeline middleware in a delegator factory other than within your root application module . The reason for this is simple: pipelines are linear, and specific to your application. If one module pipes in middleware, there's no guarantee it will be piped before or after your main pipeline, and no way to pipe the middleware at a position in the middle of the pipeline! As such: Use a config/pipeline.php file for your pipeline, OR Ensure you only define the pipeline in a single delegator factory on your Application instance.","title":"Caution: pipelines"},{"location":"v2/cookbook/autowiring-routes-and-pipelines/#caution-third-party-distributed-modules","text":"If you are developing a module to distribute as a package via Composer , you should not autowire any delegator factories that inject pipeline middleware or routes in the Application . Why? As noted in the above section, pipelines should be created exactly once, at the application level. Registering pipeline middleware within a distributable package will very likely not have the intended consequences. If you ship with pipeline middleware, we suggest that you: Document the middleware, and where you anticipate it being used in the middleware pipeline. Document how to add the middleware service to dependency configuration, or provide the dependency configuration via your module's ConfigProvider . With regards to routes, there are other considerations: Routes defined by the package might conflict with the application, or with other packages used by the application. Routing definitions are typically highly specific to the router implementation in use. As an example, each of the currently supported router implementations has a different syntax for placeholders: /user/:id + \"constraints\" configuration to define constraints (laminas-router) /user/{id} + \"tokens\" configuration to define constraints (Aura.Router) /user/{id:\\d+} (FastRoute) Your application may have specific routing considerations or design. You could, of course, detect what router is in use, and provide routing for each known, supported router implementation within your delegator factory. We even recommend doing exactly that. However, we note that such an approach does not solve the other two points above. However, we still recommend shipping a delegator factory that would register your routes, since routes are often a part of module design; just do not autowire that delegator factory. This way, end-users who can use the defaults do not need to cut-and-paste routing definitions from your documentation into their own applications; they will instead opt-in to your delegator factory by wiring it into their own configuration.","title":"Caution: third-party, distributed modules"},{"location":"v2/cookbook/autowiring-routes-and-pipelines/#synopsis","text":"We recommend using delegator factories for the purpose of autowiring routes, and, with caveats, pipeline middleware: The pipeline should be created exactly once, so calls to pipe() should occur in exactly one delegator factory. Distributable packages should create a delegator factory for routes only , but should not register the delegator factory by default.","title":"Synopsis"},{"location":"v2/cookbook/autowiring-routes-and-pipelines/#applicationconfiginjectiondelegator","text":"Since version 2.2 Mezzio\\Container\\ApplicationConfigInjectionDelegator allows you to define configuration that is then used to call pipe() or the various routing methods of Mezzio\\Application . This is particularly useful for injecting routes . The format of routes configuration is as follows: return [ 'routes' =&gt; [ [ 'path' =&gt; '/path/to/match', 'middleware' =&gt; 'Middleware Service Name', 'allowed_methods' =&gt; ['GET', 'POST', 'PATCH'], 'options' =&gt; [ 'stuff' =&gt; 'to', 'pass' =&gt; 'to', 'the' =&gt; 'underlying router', ], ], // etc. ], ]; All your various modules could provide route configuration, and you could then use a single delegator to add all of them at once.","title":"ApplicationConfigInjectionDelegator"},{"location":"v2/cookbook/common-prefix-for-routes/","text":"How can I prepend a common path to all my routes? You may have multiple middleware in your project, each providing their own functionality: $middleware1 = new UserMiddleware(); $middleware2 = new ProjectMiddleware(); $app = AppFactory::create(); $app-&gt;pipe($middleware1); $app-&gt;pipe($middleware2); $app-&gt;run(); Let's assume the above represents an API. As your application progresses, you may have a mixture of different content, and now want to have the above segregated under the path /api . This is essentially the same problem as addressed in the \"Segregating your application to a subpath\" example. To accomplish it: Create a new application. Pipe the previous application to the new one, under the path /api . $middleware1 = new UserMiddleware(); $middleware2 = new ProjectMiddleware(); $api = AppFactory::create(); $api-&gt;pipe($middleware1); $api-&gt;pipe($middleware2); $app = AppFactory::create(); $app-&gt;pipe('/api', $api); $app-&gt;run(); The above works, because every Application instance is itself middleware, and, more specifically, an instance of Stratigility's MiddlewarePipe , which provides the ability to compose middleware.","title":"Prepending a common path to all routes"},{"location":"v2/cookbook/common-prefix-for-routes/#how-can-i-prepend-a-common-path-to-all-my-routes","text":"You may have multiple middleware in your project, each providing their own functionality: $middleware1 = new UserMiddleware(); $middleware2 = new ProjectMiddleware(); $app = AppFactory::create(); $app-&gt;pipe($middleware1); $app-&gt;pipe($middleware2); $app-&gt;run(); Let's assume the above represents an API. As your application progresses, you may have a mixture of different content, and now want to have the above segregated under the path /api . This is essentially the same problem as addressed in the \"Segregating your application to a subpath\" example. To accomplish it: Create a new application. Pipe the previous application to the new one, under the path /api . $middleware1 = new UserMiddleware(); $middleware2 = new ProjectMiddleware(); $api = AppFactory::create(); $api-&gt;pipe($middleware1); $api-&gt;pipe($middleware2); $app = AppFactory::create(); $app-&gt;pipe('/api', $api); $app-&gt;run(); The above works, because every Application instance is itself middleware, and, more specifically, an instance of Stratigility's MiddlewarePipe , which provides the ability to compose middleware.","title":"How can I prepend a common path to all my routes?"},{"location":"v2/cookbook/debug-toolbars/","text":"How can I get a debug toolbar for my Mezzio application? Many modern frameworks and applications provide debug toolbars: in-browser toolbars to provide profiling information of the request executed. These can provide invaluable details into application objects, database queries, and more. As an Mezzio user, how can you get similar functionality? Zend Server Z-Ray Zend Server ships with a tool called Z-Ray , which provides both a debug toolbar and debug console (for API debugging). Z-Ray is also currently available as a standalone technology preview , and can be added as an extension to an existing PHP installation. When using Zend Server or the standalone Z-Ray, you do not need to make any changes to your application whatsoever to benefit from it; you simply need to make sure Z-Ray is enabled and/or that you've set up a security token to selectively enable it on-demand. See the Z-Ray documentation for full usage details. bitExpert/prophiler-psr7-middleware Another option is bitExpert's prophiler-psr7-middleware . This package wraps fabfuel/prophiler , which provides a PHP-based profiling tool and toolbar; the bitExpert package wraps this in PSR-7 middleware to make consumption in those paradigms trivial. To add the toolbar middleware to your application, use composer: $ composer require bitExpert/prophiler-psr7-middleware From there, you will need to create a factory for the middleware, and add it to your middleware pipeline. Stephan Hochdörfer, author of the package, has written a post detailing these steps . Use locally One minor change we recommend over the directions Stephan provides is that you configure the factory and middleware in the config/autoload/middleware-pipeline.local.php file, vs the .global version. Doing so enables the middleware and toolbar only in the local environment — and not in production, where you likely do not want to expose such information! php-middleware/php-debug-bar php-middleware/php-debug-bar provides a PSR-7 middleware wrapper around maximebf/php-debugbar , a popular framework-agnostic debug bar for PHP projects. First, install the middleware in your application: $ composer require php-middleware/php-debug-bar This package supplies a config provider, which could be added to your config/config.php when using laminas-config-aggregator or mezzio-config-manager. However, because it should only be enabled in development, we recommend creating a \"local\" configuration file (e.g., config/autoload/php-debugbar.local.php ) when you need to enable it, with the following contents: &lt;?php use PhpMiddleware\\PhpDebugBar\\ConfigProvider; $provider = new ConfigProvider(); return $provider(); Use locally Remember to enable PhpMiddleware\\PhpDebugBar\\ConfigProvider only in your development environments!","title":"Enabling debug toolbars"},{"location":"v2/cookbook/debug-toolbars/#how-can-i-get-a-debug-toolbar-for-my-mezzio-application","text":"Many modern frameworks and applications provide debug toolbars: in-browser toolbars to provide profiling information of the request executed. These can provide invaluable details into application objects, database queries, and more. As an Mezzio user, how can you get similar functionality?","title":"How can I get a debug toolbar for my Mezzio application?"},{"location":"v2/cookbook/debug-toolbars/#zend-server-z-ray","text":"Zend Server ships with a tool called Z-Ray , which provides both a debug toolbar and debug console (for API debugging). Z-Ray is also currently available as a standalone technology preview , and can be added as an extension to an existing PHP installation. When using Zend Server or the standalone Z-Ray, you do not need to make any changes to your application whatsoever to benefit from it; you simply need to make sure Z-Ray is enabled and/or that you've set up a security token to selectively enable it on-demand. See the Z-Ray documentation for full usage details.","title":"Zend Server Z-Ray"},{"location":"v2/cookbook/debug-toolbars/#bitexpertprophiler-psr7-middleware","text":"Another option is bitExpert's prophiler-psr7-middleware . This package wraps fabfuel/prophiler , which provides a PHP-based profiling tool and toolbar; the bitExpert package wraps this in PSR-7 middleware to make consumption in those paradigms trivial. To add the toolbar middleware to your application, use composer: $ composer require bitExpert/prophiler-psr7-middleware From there, you will need to create a factory for the middleware, and add it to your middleware pipeline. Stephan Hochdörfer, author of the package, has written a post detailing these steps .","title":"bitExpert/prophiler-psr7-middleware"},{"location":"v2/cookbook/debug-toolbars/#php-middlewarephp-debug-bar","text":"php-middleware/php-debug-bar provides a PSR-7 middleware wrapper around maximebf/php-debugbar , a popular framework-agnostic debug bar for PHP projects. First, install the middleware in your application: $ composer require php-middleware/php-debug-bar This package supplies a config provider, which could be added to your config/config.php when using laminas-config-aggregator or mezzio-config-manager. However, because it should only be enabled in development, we recommend creating a \"local\" configuration file (e.g., config/autoload/php-debugbar.local.php ) when you need to enable it, with the following contents: &lt;?php use PhpMiddleware\\PhpDebugBar\\ConfigProvider; $provider = new ConfigProvider(); return $provider();","title":"php-middleware/php-debug-bar"},{"location":"v2/cookbook/flash-messengers/","text":"How Can I Implement Flash Messages? Flash messages are used to display one-time messages to a user. A typical use case is for setting and later displaying a successful submission via a Post/Redirect/Get (PRG) workflow, where the flash message would be set during the POST request, but displayed during the GET request. (PRG is used to prevent double-submission of forms.) As such, flash messages usually are session-based; the message is set in one request, and accessed and cleared in another. Mezzio does not provide native session facilities out-of-the-box, which means you will need: Session functionality. Flash message functionality, for handling message expiry from the session after first access. A number of flash message libraries already exist that can be integrated via middleware, and these typically either use PHP's ext/session functionality or have a dependency on a session library. Two such libraries are slim/flash and damess/mezzio-session-middleware. slim/flash Slim's Flash messages service provider can be used in Mezzio. It uses PHP's native session support. First, you'll need to add it to your application: $ composer require slim/flash Second, create middleware that will add the flash message provider to the request: &lt;?php namespace App; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Slim\\Flash\\Messages; class SlimFlashMiddleware implements MiddlewareInterface { public function process(ServerRequestInterface $request, DelegateInterface $delegate) { // Start the session whenever we use this! session_start(); return $delegate-&gt;process( $request-&gt;withAttribute('flash', new Messages()) ); } } Third, we will register the new middleware with our container as an invokable. Edit either the file config/autoload/dependencies.global.php or config/autoload/middleware-pipeline.global.php to add the following: return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ App\\SlimFlashMiddleware::class =&gt; App\\SlimFlashMiddleware::class, /* ... */ ], /* ... */ ], ]; Finally, let's register it with our middleware pipeline. For programmatic pipelines, pipe the middleware somewhere, generally before the routing middleware: $app-&gt;pipe(App\\SlimFlashMiddleware::class); Or as part of a routed middleware pipeline: $app-&gt;post('/form/handler', [ App\\SlimFlashMiddleware::class, FormHandlerMiddleware::class, ]); If using configuration-driven pipelines, edit config/autoload/middleware-pipeline.global.php to make the following additions: return [ 'middleware_pipeline' =&gt; [ 'always' =&gt; [ 'middleware' =&gt; [ 'App\\SlimFlashMiddleware', /* ... */ ], 'priority' =&gt; 10000, ], /* ... */ ], ]; Where to register the flash middleware Sessions can sometimes be expensive. As such, you may not want the flash middleware enabled for every request. If this is the case, add the flash middleware as part of a route-specific pipeline instead, as demonstrated in the programmatic pipelines above. From here, you can add and read messages by accessing the request's flash attribute. As an example, middleware generating messages might read as follows: use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Laminas\\Diactoros\\Response\\RedirectResponse; function($request, DelegateInterface $delegate) { $flash = $request-&gt;getAttribute('flash'); $flash-&gt;addMessage('message', 'Hello World!'); return new RedirectResponse('/other-middleware'); } And middleware consuming the message might read: use Interop\\Http\\ServerMiddleware\\DelegateInterface; function($request, DelegateInterface $delegate) { $flash = $request-&gt;getAttribute('flash'); $messages = $flash-&gt;getMessages(); // ... } From there, it's a matter of providing the flash messages to your template. damess/expressive-session-middleware and Aura.Session damess/mezzio-session-middleware provides middleware for initializing an Aura.Session instance; Aura.Session provides flash messaging capabilities as part of its featureset. Install it via Composer: $ composer require damess/mezzio-session-middleware In config/autoload/dependencies.global.php , add an entry for Aura.Session: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ Aura\\Session\\Session::class =&gt; DaMess\\Factory\\AuraSessionFactory::class, /* ... */ ], /* ... */ ], ]; In either config/autoload/dependencies.global.php or config/autoload/middleware-pipeline.global.php , add a factory entry for the damess/mezzio-session-middleware : return [ 'dependencies' =&gt; [ 'factories' =&gt; [ DaMess\\Http\\SessionMiddleware::class =&gt; DaMess\\Factory\\SessionMiddlewareFactory::class, /* ... */ ], /* ... */ ], ]; Finally, add it to your middleware pipeline. For programmatic pipelines: use DaMess\\Http\\SessionMiddleware; $app-&gt;pipe(SessionMiddleware::class); /* ... */ If using configuration-driven pipelines, edit config/autoload/middleware-pipeline.global.php and add an entry for the new middleware: return [ 'middleware_pipeline' =&gt; [ 'always' =&gt; [ 'middleware' =&gt; [ DaMess\\Http\\SessionMiddleware::class, /* ... */ ], 'priority' =&gt; 10000, ], /* ... */ ], ]; Where to register the session middleware Sessions can sometimes be expensive. As such, you may not want the session middleware enabled for every request. If this is the case, add the session middleware as part of a route-specific pipeline instead. Once enabled, the SessionMiddleware will inject the Aura.Session instance into the request as the session attribute; you can thus retrieve it within middleware using the following: $session = $request-&gt;getAttribute('session'); To create and consume flash messages, use Aura.Session's flash values . As an example, the middleware that is processing a POST request might set a flash message: use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Laminas\\Diactoros\\Response\\RedirectResponse; function($request, DelegateInterface $delegate) { $session = $request-&gt;getAttribute('session'); $session-&gt;getSegment(__NAMESPACE__) -&gt;setFlash('message', 'Hello World!'); return new RedirectResponse('/other-middleware'); } Another middleware, to which the original middleware redirects, might look like this: use Interop\\Http\\ServerMiddleware\\DelegateInterface; function($request, DelegateInterface $delegate) { $session = $request-&gt;getAttribute('session'); $message = $session-&gt;getSegment(__NAMESPACE__) -&gt;getFlash('message'); // ... } From there, it's a matter of providing the flash messages to your template.","title":"Flash Messengers"},{"location":"v2/cookbook/flash-messengers/#how-can-i-implement-flash-messages","text":"Flash messages are used to display one-time messages to a user. A typical use case is for setting and later displaying a successful submission via a Post/Redirect/Get (PRG) workflow, where the flash message would be set during the POST request, but displayed during the GET request. (PRG is used to prevent double-submission of forms.) As such, flash messages usually are session-based; the message is set in one request, and accessed and cleared in another. Mezzio does not provide native session facilities out-of-the-box, which means you will need: Session functionality. Flash message functionality, for handling message expiry from the session after first access. A number of flash message libraries already exist that can be integrated via middleware, and these typically either use PHP's ext/session functionality or have a dependency on a session library. Two such libraries are slim/flash and damess/mezzio-session-middleware.","title":"How Can I Implement Flash Messages?"},{"location":"v2/cookbook/flash-messengers/#slimflash","text":"Slim's Flash messages service provider can be used in Mezzio. It uses PHP's native session support. First, you'll need to add it to your application: $ composer require slim/flash Second, create middleware that will add the flash message provider to the request: &lt;?php namespace App; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Slim\\Flash\\Messages; class SlimFlashMiddleware implements MiddlewareInterface { public function process(ServerRequestInterface $request, DelegateInterface $delegate) { // Start the session whenever we use this! session_start(); return $delegate-&gt;process( $request-&gt;withAttribute('flash', new Messages()) ); } } Third, we will register the new middleware with our container as an invokable. Edit either the file config/autoload/dependencies.global.php or config/autoload/middleware-pipeline.global.php to add the following: return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ App\\SlimFlashMiddleware::class =&gt; App\\SlimFlashMiddleware::class, /* ... */ ], /* ... */ ], ]; Finally, let's register it with our middleware pipeline. For programmatic pipelines, pipe the middleware somewhere, generally before the routing middleware: $app-&gt;pipe(App\\SlimFlashMiddleware::class); Or as part of a routed middleware pipeline: $app-&gt;post('/form/handler', [ App\\SlimFlashMiddleware::class, FormHandlerMiddleware::class, ]); If using configuration-driven pipelines, edit config/autoload/middleware-pipeline.global.php to make the following additions: return [ 'middleware_pipeline' =&gt; [ 'always' =&gt; [ 'middleware' =&gt; [ 'App\\SlimFlashMiddleware', /* ... */ ], 'priority' =&gt; 10000, ], /* ... */ ], ];","title":"slim/flash"},{"location":"v2/cookbook/flash-messengers/#damessexpressive-session-middleware-and-aurasession","text":"damess/mezzio-session-middleware provides middleware for initializing an Aura.Session instance; Aura.Session provides flash messaging capabilities as part of its featureset. Install it via Composer: $ composer require damess/mezzio-session-middleware In config/autoload/dependencies.global.php , add an entry for Aura.Session: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ Aura\\Session\\Session::class =&gt; DaMess\\Factory\\AuraSessionFactory::class, /* ... */ ], /* ... */ ], ]; In either config/autoload/dependencies.global.php or config/autoload/middleware-pipeline.global.php , add a factory entry for the damess/mezzio-session-middleware : return [ 'dependencies' =&gt; [ 'factories' =&gt; [ DaMess\\Http\\SessionMiddleware::class =&gt; DaMess\\Factory\\SessionMiddlewareFactory::class, /* ... */ ], /* ... */ ], ]; Finally, add it to your middleware pipeline. For programmatic pipelines: use DaMess\\Http\\SessionMiddleware; $app-&gt;pipe(SessionMiddleware::class); /* ... */ If using configuration-driven pipelines, edit config/autoload/middleware-pipeline.global.php and add an entry for the new middleware: return [ 'middleware_pipeline' =&gt; [ 'always' =&gt; [ 'middleware' =&gt; [ DaMess\\Http\\SessionMiddleware::class, /* ... */ ], 'priority' =&gt; 10000, ], /* ... */ ], ];","title":"damess/expressive-session-middleware and Aura.Session"},{"location":"v2/cookbook/passing-data-between-middleware/","text":"Passing Data Between Middleware A frequently asked question is how to pass data between middleware. The answer is present in every middleware: via request object attributes. Middleware is always executed in the order in which it is piped to the application. This way you can ensure the request object in middleware receiving data contains an attribute containing data passed by outer middleware. In the following example, PassingDataMiddleware prepares data to pass as a request attribute to nested middleware. We use the fully qualified class name for the attribute name to ensure uniqueness, but you can name it anything you want. namespace App\\Middleware; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; class PassingDataMiddleware implements MiddlewareInterface { // ... public function process(ServerRequestInterface $request, DelegateInterface $delegate) { // Step 1: Do something first $data = [ 'foo' =&gt; 'bar', ]; // Step 2: Inject data into the request, call the next middleware and wait for the response $response = $delegate-&gt;process($request-&gt;withAttribute(self::class, $data)); // Step 3: Optionally, do something (with the response) before returning the response // Step 4: Return the response return $response; } } Later, ReceivingDataMiddleware grabs the data and processes it: namespace App\\Middleware; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; class ReceivingDataMiddleware implements MiddlewareInterface { // ... public function process(ServerRequestInterface $request, DelegateInterface $delegate) { // Step 1: Grab the data from the request and use it $data = $request-&gt;getAttribute(PassingDataMiddleware::class); // Step 2: Call the next middleware and wait for the response $response = $delegate-&gt;process($request); // Step 3: Optionally, do something (with the response) before returning the response // Step 4: Return the response return $response; } } Of course, you could also use the data in routed middleware, which is usually at the innermost layer of your application. The ExampleAction below takes that information and passes it to the template renderer to create an HtmlResponse : namespace App\\Action; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Laminas\\Diactoros\\Response\\HtmlResponse; class ExampleAction implements MiddlewareInterface { // ... public function process(ServerRequestInterface $request, DelegateInterface $delegate) { // Step 1: Grab the data from the request $data = $request-&gt;getAttribute(PassingDataMiddleware::class); $id = $request-&gt;getAttribute('id'); // Step 2: Do some more stuff // Step 3: Return a Response return new HtmlResponse( $this-&gt;templateRenderer-&gt;render('blog::entry', [ 'data' =&gt; $data, 'id' =&gt; $id, ]) ); } }","title":"Passing data between middleware"},{"location":"v2/cookbook/passing-data-between-middleware/#passing-data-between-middleware","text":"A frequently asked question is how to pass data between middleware. The answer is present in every middleware: via request object attributes. Middleware is always executed in the order in which it is piped to the application. This way you can ensure the request object in middleware receiving data contains an attribute containing data passed by outer middleware. In the following example, PassingDataMiddleware prepares data to pass as a request attribute to nested middleware. We use the fully qualified class name for the attribute name to ensure uniqueness, but you can name it anything you want. namespace App\\Middleware; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; class PassingDataMiddleware implements MiddlewareInterface { // ... public function process(ServerRequestInterface $request, DelegateInterface $delegate) { // Step 1: Do something first $data = [ 'foo' =&gt; 'bar', ]; // Step 2: Inject data into the request, call the next middleware and wait for the response $response = $delegate-&gt;process($request-&gt;withAttribute(self::class, $data)); // Step 3: Optionally, do something (with the response) before returning the response // Step 4: Return the response return $response; } } Later, ReceivingDataMiddleware grabs the data and processes it: namespace App\\Middleware; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; class ReceivingDataMiddleware implements MiddlewareInterface { // ... public function process(ServerRequestInterface $request, DelegateInterface $delegate) { // Step 1: Grab the data from the request and use it $data = $request-&gt;getAttribute(PassingDataMiddleware::class); // Step 2: Call the next middleware and wait for the response $response = $delegate-&gt;process($request); // Step 3: Optionally, do something (with the response) before returning the response // Step 4: Return the response return $response; } } Of course, you could also use the data in routed middleware, which is usually at the innermost layer of your application. The ExampleAction below takes that information and passes it to the template renderer to create an HtmlResponse : namespace App\\Action; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Laminas\\Diactoros\\Response\\HtmlResponse; class ExampleAction implements MiddlewareInterface { // ... public function process(ServerRequestInterface $request, DelegateInterface $delegate) { // Step 1: Grab the data from the request $data = $request-&gt;getAttribute(PassingDataMiddleware::class); $id = $request-&gt;getAttribute('id'); // Step 2: Do some more stuff // Step 3: Return a Response return new HtmlResponse( $this-&gt;templateRenderer-&gt;render('blog::entry', [ 'data' =&gt; $data, 'id' =&gt; $id, ]) ); } }","title":"Passing Data Between Middleware"},{"location":"v2/cookbook/route-specific-pipeline/","text":"How can I specify a route-specific middleware pipeline? Sometimes you may want to use a middleware pipeline only if a particular route is matched. As an example, for an API resource, you might want to: check for authentication credentials check for authorization for the selected action parse the incoming body validate the parsed body parameters before you actually execute the selected middleware. The above might each be encapsulated as discrete middleware, but should be executed within the routed middleware's context. You can accomplish this in one of two ways: Have your middleware service resolve to a MiddlewarePipe instance that composes the various middlewares. Specify an array of middlewares (either as actual instances, or as container service names); this effectively creates and returns a MiddlewarePipe . Resolving to a MiddlewarePipe You can do this programmatically within a container factory, assuming you are using a container that supports factories. use Laminas\\Stratigility\\MiddlewarePipe; use Psr\\Container\\ContainerInterface; class ApiResourcePipelineFactory { public function __invoke(ContainerInterface $container) { $pipeline = new MiddlewarePipe(); // These correspond to the bullet points above $pipeline-&gt;pipe($container-&gt;get('AuthenticationMiddleware')); $pipeline-&gt;pipe($container-&gt;get('AuthorizationMiddleware')); $pipeline-&gt;pipe($container-&gt;get('BodyParsingMiddleware')); $pipeline-&gt;pipe($container-&gt;get('ValidationMiddleware')); // This is the actual middleware you're routing to. $pipeline-&gt;pipe($container-&gt;get('ApiResource')); return $pipeline; } } This gives you full control over the creation of the pipeline. You would, however, need to ensure that you map the middleware to the pipeline factory when setting up your container configuration. One alternative when using laminas-servicemanager is to use a delegator factory . Delegator factories allow you to decorate the primary factory used to create the middleware in order to change the instance or return an alternate instance. In this case, we'd do the latter. The following is an example: use Laminas\\ServiceManager\\DelegatorFactoryInterface; use Laminas\\ServiceManager\\ServiceLocatorInterface; use Laminas\\Stratigility\\MiddlewarePipe; use Psr\\Container\\ContainerInterface; class ApiResourcePipelineDelegatorFactory implements DelegatorFactoryInterface { /** * laminas-servicemanager v3 support */ public function __invoke( ContainerInterface $container, $name, callable $callback, array $options = null ) { $pipeline = new MiddlewarePipe(); // These correspond to the bullet points above $pipeline-&gt;pipe($container-&gt;get('AuthenticationMiddleware')); $pipeline-&gt;pipe($container-&gt;get('AuthorizationMiddleware')); $pipeline-&gt;pipe($container-&gt;get('BodyParsingMiddleware')); $pipeline-&gt;pipe($container-&gt;get('ValidationMiddleware')); // This is the actual middleware you're routing to. $pipeline-&gt;pipe($callback()); return $pipeline; } /** * laminas-servicemanager v2 support */ public function createDelegatorWithName( ServiceLocatorInterface $container, $name, $requestedName, $callback ) { return $this($container, $name, $callback); } } When configuring the container, you'd do something like the following: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ 'AuthenticationMiddleware' =&gt; '...', 'AuthorizationMiddleware' =&gt; '...', 'BodyParsingMiddleware' =&gt; '...', 'ValidationMiddleware' =&gt; '...', 'ApiResourceMiddleware' =&gt; '...', ], 'delegators' =&gt; [ 'ApiResourceMiddleware' =&gt; [ 'ApiResourcePipelineDelegatorFactory', ], ], ], ]; This approach allows you to cleanly separate the factory for your middleware from the pipeline you want to compose it in, and allows you to re-use the pipeline creation across multiple middleware if desired. Middleware Arrays If you'd rather not create a factory for each such middleware, the other option is to use arrays of middlewares in your configuration or when routing manually. Via configuration looks like this: return [ 'routes' =&gt; [ [ 'name' =&gt; 'api-resource', 'path' =&gt; '/api/resource[/{id:[a-f0-9]{32}}]', 'allowed_methods' =&gt; ['GET', 'POST', 'PATCH', 'DELETE'], 'middleware' =&gt; [ 'AuthenticationMiddleware', 'AuthorizationMiddleware', 'BodyParsingMiddleware', 'ValidationMiddleware', 'ApiResourceMiddleware', ], ], ], ]; Manual routing looks like this: $app-&gt;route('/api/resource[/{id:[a-f0-9]{32}}]', [ 'AuthenticationMiddleware', 'AuthorizationMiddleware', 'BodyParsingMiddleware', 'ValidationMiddleware', 'ApiResourceMiddleware', ], ['GET', 'POST', 'PATCH', 'DELETE'], 'api-resource'); When either of these approaches are used, the individual middleware listed MUST be one of the following: an instance of Interop\\Http\\ServerMiddleware\\MiddlewareInterface ; a callable middleware (will be decorated as interop middleware); a service name of middleware available in the container; a fully qualified class name of a directly instantiable (no constructor arguments) middleware class. This approach is essentially equivalent to creating a factory that returns a middleware pipeline. What about pipeline middleware configuration? What if you want to do this with your pipeline middleware configuration? The answer is that the syntax is exactly the same! return [ 'middleware_pipeline' =&gt; [ 'api' =&gt; [ 'path' =&gt; '/api', 'middleware' =&gt; [ 'AuthenticationMiddleware', 'AuthorizationMiddleware', 'BodyParsingMiddleware', 'ValidationMiddleware', ], 'priority' =&gt; 100, ], ], ];","title":"Route-specific middleware pipelines"},{"location":"v2/cookbook/route-specific-pipeline/#how-can-i-specify-a-route-specific-middleware-pipeline","text":"Sometimes you may want to use a middleware pipeline only if a particular route is matched. As an example, for an API resource, you might want to: check for authentication credentials check for authorization for the selected action parse the incoming body validate the parsed body parameters before you actually execute the selected middleware. The above might each be encapsulated as discrete middleware, but should be executed within the routed middleware's context. You can accomplish this in one of two ways: Have your middleware service resolve to a MiddlewarePipe instance that composes the various middlewares. Specify an array of middlewares (either as actual instances, or as container service names); this effectively creates and returns a MiddlewarePipe .","title":"How can I specify a route-specific middleware pipeline?"},{"location":"v2/cookbook/route-specific-pipeline/#resolving-to-a-middlewarepipe","text":"You can do this programmatically within a container factory, assuming you are using a container that supports factories. use Laminas\\Stratigility\\MiddlewarePipe; use Psr\\Container\\ContainerInterface; class ApiResourcePipelineFactory { public function __invoke(ContainerInterface $container) { $pipeline = new MiddlewarePipe(); // These correspond to the bullet points above $pipeline-&gt;pipe($container-&gt;get('AuthenticationMiddleware')); $pipeline-&gt;pipe($container-&gt;get('AuthorizationMiddleware')); $pipeline-&gt;pipe($container-&gt;get('BodyParsingMiddleware')); $pipeline-&gt;pipe($container-&gt;get('ValidationMiddleware')); // This is the actual middleware you're routing to. $pipeline-&gt;pipe($container-&gt;get('ApiResource')); return $pipeline; } } This gives you full control over the creation of the pipeline. You would, however, need to ensure that you map the middleware to the pipeline factory when setting up your container configuration. One alternative when using laminas-servicemanager is to use a delegator factory . Delegator factories allow you to decorate the primary factory used to create the middleware in order to change the instance or return an alternate instance. In this case, we'd do the latter. The following is an example: use Laminas\\ServiceManager\\DelegatorFactoryInterface; use Laminas\\ServiceManager\\ServiceLocatorInterface; use Laminas\\Stratigility\\MiddlewarePipe; use Psr\\Container\\ContainerInterface; class ApiResourcePipelineDelegatorFactory implements DelegatorFactoryInterface { /** * laminas-servicemanager v3 support */ public function __invoke( ContainerInterface $container, $name, callable $callback, array $options = null ) { $pipeline = new MiddlewarePipe(); // These correspond to the bullet points above $pipeline-&gt;pipe($container-&gt;get('AuthenticationMiddleware')); $pipeline-&gt;pipe($container-&gt;get('AuthorizationMiddleware')); $pipeline-&gt;pipe($container-&gt;get('BodyParsingMiddleware')); $pipeline-&gt;pipe($container-&gt;get('ValidationMiddleware')); // This is the actual middleware you're routing to. $pipeline-&gt;pipe($callback()); return $pipeline; } /** * laminas-servicemanager v2 support */ public function createDelegatorWithName( ServiceLocatorInterface $container, $name, $requestedName, $callback ) { return $this($container, $name, $callback); } } When configuring the container, you'd do something like the following: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ 'AuthenticationMiddleware' =&gt; '...', 'AuthorizationMiddleware' =&gt; '...', 'BodyParsingMiddleware' =&gt; '...', 'ValidationMiddleware' =&gt; '...', 'ApiResourceMiddleware' =&gt; '...', ], 'delegators' =&gt; [ 'ApiResourceMiddleware' =&gt; [ 'ApiResourcePipelineDelegatorFactory', ], ], ], ]; This approach allows you to cleanly separate the factory for your middleware from the pipeline you want to compose it in, and allows you to re-use the pipeline creation across multiple middleware if desired.","title":"Resolving to a MiddlewarePipe"},{"location":"v2/cookbook/route-specific-pipeline/#middleware-arrays","text":"If you'd rather not create a factory for each such middleware, the other option is to use arrays of middlewares in your configuration or when routing manually. Via configuration looks like this: return [ 'routes' =&gt; [ [ 'name' =&gt; 'api-resource', 'path' =&gt; '/api/resource[/{id:[a-f0-9]{32}}]', 'allowed_methods' =&gt; ['GET', 'POST', 'PATCH', 'DELETE'], 'middleware' =&gt; [ 'AuthenticationMiddleware', 'AuthorizationMiddleware', 'BodyParsingMiddleware', 'ValidationMiddleware', 'ApiResourceMiddleware', ], ], ], ]; Manual routing looks like this: $app-&gt;route('/api/resource[/{id:[a-f0-9]{32}}]', [ 'AuthenticationMiddleware', 'AuthorizationMiddleware', 'BodyParsingMiddleware', 'ValidationMiddleware', 'ApiResourceMiddleware', ], ['GET', 'POST', 'PATCH', 'DELETE'], 'api-resource'); When either of these approaches are used, the individual middleware listed MUST be one of the following: an instance of Interop\\Http\\ServerMiddleware\\MiddlewareInterface ; a callable middleware (will be decorated as interop middleware); a service name of middleware available in the container; a fully qualified class name of a directly instantiable (no constructor arguments) middleware class. This approach is essentially equivalent to creating a factory that returns a middleware pipeline.","title":"Middleware Arrays"},{"location":"v2/cookbook/route-specific-pipeline/#what-about-pipeline-middleware-configuration","text":"What if you want to do this with your pipeline middleware configuration? The answer is that the syntax is exactly the same! return [ 'middleware_pipeline' =&gt; [ 'api' =&gt; [ 'path' =&gt; '/api', 'middleware' =&gt; [ 'AuthenticationMiddleware', 'AuthorizationMiddleware', 'BodyParsingMiddleware', 'ValidationMiddleware', ], 'priority' =&gt; 100, ], ], ];","title":"What about pipeline middleware configuration?"},{"location":"v2/cookbook/setting-locale-depending-routing-parameter/","text":"How can I set up the locale depending on a routing parameter? Localized web applications often set the locale (and therefor the language) based on a routing parameter, the session, or a specialized sub-domain. In this recipe we will concentrate on using a routing parameter. Routing parameters Using the approach in this chapter requires that you add a /:locale (or similar) segment to each and every route that can be localized, and, depending on the router used, may also require additional options for specifying constraints. If the majority of your routes are localized, this will become tedious quickly. In such a case, you may want to look at the related recipe on setting the locale without routing parameters . Setting up the route If you want to set the locale depending on a routing parameter, you first have to add a locale parameter to each route that requires localization. In the following examples, we use the locale parameter, which should consist of two lowercase alphabetical characters. Dependency configuration The examples assume the following middleware dependency configuration: use Application\\Action; return [ 'dependencies' =&gt; [ 'factories' =&gt; [ Action\\HomePageAction::class =&gt; Action\\HomePageFactory::class, Action\\ContactPageAction::class =&gt; Action\\ContactPageFactory::class, ], ], ]; Programmatic routes The following describes routing configuration for use when using a programmatic application. use Application\\Action\\ContactPageAction; use Application\\Action\\HomePageAction; $localeOptions = ['locale' =&gt; '[a-z]{2,3}([-_][a-zA-Z]{2}|)']; $app-&gt;get('/:locale', HomePageAction::class, 'home') -&gt;setOptions($localeOptions); $app-&gt;get('/:locale/contact', ContactPageAction::class, 'contact') -&gt;setOptions($localeOptions); Configuration-based routes The following describes routing configuration for use when using a configuration-driven application. return [ 'routes' =&gt; [ [ 'name' =&gt; 'home', 'path' =&gt; '/:locale', 'middleware' =&gt; Application\\Action\\HomePageAction::class, 'allowed_methods' =&gt; ['GET'], 'options' =&gt; [ 'constraints' =&gt; [ 'locale' =&gt; '[a-z]{2,3}([-_][a-zA-Z]{2}|)', ], ], ], [ 'name' =&gt; 'contact', 'path' =&gt; '/:locale/contact', 'middleware' =&gt; Application\\Action\\ContactPageAction::class, 'allowed_methods' =&gt; ['GET'], 'options' =&gt; [ 'constraints' =&gt; [ 'locale' =&gt; '[a-z]{2,3}([-_][a-zA-Z]{2}|)', ], ], ], ], ]; Note: Routing may differ based on router The routing examples in this recipe use syntax for the laminas-mvc router, and, as such, may not work in your application. For Aura.Router, the 'home' route as listed above would read: [ 'name' =&gt; 'home', 'path' =&gt; '/{locale}', 'middleware' =&gt; Application\\Action\\HomePageAction::class, 'allowed_methods' =&gt; ['GET'], 'options' =&gt; [ 'constraints' =&gt; [ 'tokens' =&gt; [ 'locale' =&gt; '[a-z]{2,3}([-_][a-zA-Z]{2}|)', ], ], ], ] For FastRoute: [ 'name' =&gt; 'home', 'path' =&gt; '/{locale:[a-z]{2,3}([-_][a-zA-Z]{2}|)}', 'middleware' =&gt; Application\\Action\\HomePageAction::class, 'allowed_methods' =&gt; ['GET'], ] As such, be aware as you read the examples that you might not be able to simply cut-and-paste them without modification. Create a route result middleware class for localization To make sure that you can set up the locale after the routing has been processed, you need to implement localization middleware that acts on the route result, and registered in the pipeline immediately following the routing middleware. Such a LocalizationMiddleware class could look similar to this: &lt;?php namespace Application\\I18n; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Locale; use Psr\\Http\\Message\\ServerRequestInterface; class LocalizationMiddleware implements MiddlewareInterface { const LOCALIZATION_ATTRIBUTE = 'locale'; public function process(ServerRequestInterface $request, DelegateInterface $delegate) { // Get locale from route, fallback to the user's browser preference $locale = $request-&gt;getAttribute( 'locale', Locale::acceptFromHttp( $request-&gt;getServerParams()['HTTP_ACCEPT_LANGUAGE'] ?? 'en_US' ) ); // Store the locale as a request attribute return $delegate-&gt;process($request-&gt;withAttribute(self::LOCALIZATION_ATTRIBUTE, $locale)); } } Locale::setDefault is unsafe Do not use Locale::setDefault($locale) to set a global static locale. PSR-7 apps may run in async processes, which could lead to another process overwriting the value, and thus lead to unexpected results for your users. Use a request parameter as detailed above instead, as the request is created specific to each process. Register this new middleware in either config/autoload/middleware-pipeline.global.php or config/autoload/dependencies.global.php : return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ LocalizationMiddleware::class =&gt; LocalizationMiddleware::class, /* ... */ ], /* ... */ ], ]; If using a programmatic pipeline, pipe it immediately after your routing middleware: use Application\\I18n\\LocalizationMiddleware; /* ... */ $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(LocalizationMiddleware::class); /* ... */ If using a configuration-driven application, register it within your config/autoload/middleware-pipeline.global.php file, injecting it into the pipeline following the routing middleware: return [ 'middleware_pipeline' =&gt; [ /* ... */ [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Helper\\UrlHelperMiddleware::class, LocalizationMiddleware::class, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], /* ... */ ], ];","title":"Setting a locale based on a routing parameter"},{"location":"v2/cookbook/setting-locale-depending-routing-parameter/#how-can-i-set-up-the-locale-depending-on-a-routing-parameter","text":"Localized web applications often set the locale (and therefor the language) based on a routing parameter, the session, or a specialized sub-domain. In this recipe we will concentrate on using a routing parameter.","title":"How can I set up the locale depending on a routing parameter?"},{"location":"v2/cookbook/setting-locale-depending-routing-parameter/#setting-up-the-route","text":"If you want to set the locale depending on a routing parameter, you first have to add a locale parameter to each route that requires localization. In the following examples, we use the locale parameter, which should consist of two lowercase alphabetical characters.","title":"Setting up the route"},{"location":"v2/cookbook/setting-locale-depending-routing-parameter/#create-a-route-result-middleware-class-for-localization","text":"To make sure that you can set up the locale after the routing has been processed, you need to implement localization middleware that acts on the route result, and registered in the pipeline immediately following the routing middleware. Such a LocalizationMiddleware class could look similar to this: &lt;?php namespace Application\\I18n; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Locale; use Psr\\Http\\Message\\ServerRequestInterface; class LocalizationMiddleware implements MiddlewareInterface { const LOCALIZATION_ATTRIBUTE = 'locale'; public function process(ServerRequestInterface $request, DelegateInterface $delegate) { // Get locale from route, fallback to the user's browser preference $locale = $request-&gt;getAttribute( 'locale', Locale::acceptFromHttp( $request-&gt;getServerParams()['HTTP_ACCEPT_LANGUAGE'] ?? 'en_US' ) ); // Store the locale as a request attribute return $delegate-&gt;process($request-&gt;withAttribute(self::LOCALIZATION_ATTRIBUTE, $locale)); } }","title":"Create a route result middleware class for localization"},{"location":"v2/cookbook/setting-locale-without-routing-parameter/","text":"How can I set up the locale without routing parameters? Localized web applications often set the locale (and therefore the language) based on a routing parameter, the session, or a specialized sub-domain. In this recipe we will concentrate on introspecting the URI path via middleware, which allows you to have a global mechanism for detecting the locale without requiring any changes to existing routes. Distinguishing between routes that require localization If your application has a mixture of routes that require localization, and those that do not, the solution in this recipe may lead to multiple URIs that resolve to the identical action, which may be undesirable. In such cases, you may want to prefix the specific routes that require localization with a required routing parameter; this approach is described in the \"Setting a locale based on a routing parameter\" recipe . Set up a middleware to extract the locale from the URI First, we need to set up middleware that extracts the locale param directly from the request URI's path. If it doesn't find one, it sets a default. If it does find one, it uses the value to set up the locale. It also: amends the request with a truncated path (removing the locale segment). adds the locale segment as the base path of the UrlHelper . &lt;?php namespace Application\\I18n; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Locale; use Mezzio\\Helper\\UrlHelper; use Psr\\Http\\Message\\ServerRequestInterface; class SetLocaleMiddleware implements MiddlewareInterface { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } public function process(ServerRequestInterface $request, DelegateInterface $delegate) { $uri = $request-&gt;getUri(); $path = $uri-&gt;getPath(); if (! preg_match('#^/(?P&lt;locale&gt;[a-z]{2,3}([-_][a-zA-Z]{2}|))/#', $path, $matches)) { Locale::setDefault('de_DE'); return $delegate-&gt;process($request); } $locale = $matches['locale']; Locale::setDefault(Locale::canonicalize($locale)); $this-&gt;helper-&gt;setBasePath($locale); return $delegate-&gt;process($request-&gt;withUri( $uri-&gt;withPath(substr($path, strlen($locale)+1)) )); } } Then you will need a factory for the SetLocaleMiddleware to inject the UrlHelper instance. &lt;?php namespace Application\\I18n; use Mezzio\\Helper\\UrlHelper; use Psr\\Container\\ContainerInterface; class SetLocaleMiddlewareFactory { public function __invoke(ContainerInterface $container) { return new SetLocaleMiddleware( $container-&gt;get(UrlHelper::class) ); } } Next, map the middleware to its factory in either /config/autoload/dependencies.global.php or /config/autoload/middleware-pipeline.global.php : use Application\\I18n\\SetLocaleMiddleware; use Application\\I18n\\SetLocaleMiddlewareFactory; return [ 'dependencies' =&gt; [ /* ... */ 'factories' =&gt; [ SetLocaleMiddleware::class =&gt; SetLocaleMiddlewareFactory::class, /* ... */ ], ], ]; Finally, you will need to configure your middleware pipeline to ensure this middleware is executed on every request. If using a programmatic pipeline: use Application\\I18n\\SetLocaleMiddleware; use Mezzio\\Helper\\UrlHelperMiddleware; /* ... */ $app-&gt;pipe(SetLocaleMiddleware::class); /* ... */ $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(UrlHelperMiddleware::class); $app-&gt;pipeDispatchMiddleware(); /* ... */ If using a configuration-driven application, update /config/autoload/middleware-pipeline.global.php to add the middleware: return [ 'middleware_pipeline' =&gt; [ [ 'middleware' =&gt; [ Application\\I18n\\SetLocaleMiddleware::class, /* ... */ ], 'priority' =&gt; 1000, ], /* ... */ 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Mezzio\\Helper\\UrlHelperMiddleware::class, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], /* ... */ ], ]; Url generation in the view Since the UrlHelper has the locale set as a base path, you don't need to worry about generating URLs within your view. Just use the helper to generate a URL and it will do the rest. &lt;?php echo $this-&gt;url('your-route') ?&gt; Helpers differ between template renderers The above example is specific to laminas-view; syntax will differ for Twig and Plates. Redirecting within your middleware If you want to add the locale parameter when creating URIs within your action middleware, you just need to inject the UrlHelper into your middleware and use it for URL generation: &lt;?php namespace Application\\Action; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Laminas\\Diactoros\\Response\\RedirectResponse; use Mezzio\\Helper\\UrlHelper; use Psr\\Http\\Message\\ServerRequestInterface; class RedirectAction implements MiddlewareInterface { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } /** * @param ServerRequestInterface $request * @param DelegateInterface $delegate * @return RedirectResponse */ public function process(ServerRequestInterface $request, DelegateInterface $delegate) { $routeParams = [ /* ... */ ]; return new RedirectResponse( $this-&gt;helper-&gt;generate('your-route', $routeParams) ); } } Injecting the UrlHelper into your middleware will also require that the middleware have a factory that manages the injection. As an example, the following would work for the above middleware: namespace Application\\Action; use Psr\\Container\\ContainerInterface; use Mezzio\\Helper\\UrlHelper; class RedirectActionFactory { public function __invoke(ContainerInterface $container) { return new RedirectAction( $container-&gt;get(UrlHelper::class) ); } }","title":"Setting a locale without a routing parameter"},{"location":"v2/cookbook/setting-locale-without-routing-parameter/#how-can-i-set-up-the-locale-without-routing-parameters","text":"Localized web applications often set the locale (and therefore the language) based on a routing parameter, the session, or a specialized sub-domain. In this recipe we will concentrate on introspecting the URI path via middleware, which allows you to have a global mechanism for detecting the locale without requiring any changes to existing routes.","title":"How can I set up the locale without routing parameters?"},{"location":"v2/cookbook/setting-locale-without-routing-parameter/#set-up-a-middleware-to-extract-the-locale-from-the-uri","text":"First, we need to set up middleware that extracts the locale param directly from the request URI's path. If it doesn't find one, it sets a default. If it does find one, it uses the value to set up the locale. It also: amends the request with a truncated path (removing the locale segment). adds the locale segment as the base path of the UrlHelper . &lt;?php namespace Application\\I18n; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Locale; use Mezzio\\Helper\\UrlHelper; use Psr\\Http\\Message\\ServerRequestInterface; class SetLocaleMiddleware implements MiddlewareInterface { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } public function process(ServerRequestInterface $request, DelegateInterface $delegate) { $uri = $request-&gt;getUri(); $path = $uri-&gt;getPath(); if (! preg_match('#^/(?P&lt;locale&gt;[a-z]{2,3}([-_][a-zA-Z]{2}|))/#', $path, $matches)) { Locale::setDefault('de_DE'); return $delegate-&gt;process($request); } $locale = $matches['locale']; Locale::setDefault(Locale::canonicalize($locale)); $this-&gt;helper-&gt;setBasePath($locale); return $delegate-&gt;process($request-&gt;withUri( $uri-&gt;withPath(substr($path, strlen($locale)+1)) )); } } Then you will need a factory for the SetLocaleMiddleware to inject the UrlHelper instance. &lt;?php namespace Application\\I18n; use Mezzio\\Helper\\UrlHelper; use Psr\\Container\\ContainerInterface; class SetLocaleMiddlewareFactory { public function __invoke(ContainerInterface $container) { return new SetLocaleMiddleware( $container-&gt;get(UrlHelper::class) ); } } Next, map the middleware to its factory in either /config/autoload/dependencies.global.php or /config/autoload/middleware-pipeline.global.php : use Application\\I18n\\SetLocaleMiddleware; use Application\\I18n\\SetLocaleMiddlewareFactory; return [ 'dependencies' =&gt; [ /* ... */ 'factories' =&gt; [ SetLocaleMiddleware::class =&gt; SetLocaleMiddlewareFactory::class, /* ... */ ], ], ]; Finally, you will need to configure your middleware pipeline to ensure this middleware is executed on every request. If using a programmatic pipeline: use Application\\I18n\\SetLocaleMiddleware; use Mezzio\\Helper\\UrlHelperMiddleware; /* ... */ $app-&gt;pipe(SetLocaleMiddleware::class); /* ... */ $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(UrlHelperMiddleware::class); $app-&gt;pipeDispatchMiddleware(); /* ... */ If using a configuration-driven application, update /config/autoload/middleware-pipeline.global.php to add the middleware: return [ 'middleware_pipeline' =&gt; [ [ 'middleware' =&gt; [ Application\\I18n\\SetLocaleMiddleware::class, /* ... */ ], 'priority' =&gt; 1000, ], /* ... */ 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Mezzio\\Helper\\UrlHelperMiddleware::class, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], /* ... */ ], ];","title":"Set up a middleware to extract the locale from the URI"},{"location":"v2/cookbook/setting-locale-without-routing-parameter/#url-generation-in-the-view","text":"Since the UrlHelper has the locale set as a base path, you don't need to worry about generating URLs within your view. Just use the helper to generate a URL and it will do the rest. &lt;?php echo $this-&gt;url('your-route') ?&gt;","title":"Url generation in the view"},{"location":"v2/cookbook/setting-locale-without-routing-parameter/#redirecting-within-your-middleware","text":"If you want to add the locale parameter when creating URIs within your action middleware, you just need to inject the UrlHelper into your middleware and use it for URL generation: &lt;?php namespace Application\\Action; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Laminas\\Diactoros\\Response\\RedirectResponse; use Mezzio\\Helper\\UrlHelper; use Psr\\Http\\Message\\ServerRequestInterface; class RedirectAction implements MiddlewareInterface { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } /** * @param ServerRequestInterface $request * @param DelegateInterface $delegate * @return RedirectResponse */ public function process(ServerRequestInterface $request, DelegateInterface $delegate) { $routeParams = [ /* ... */ ]; return new RedirectResponse( $this-&gt;helper-&gt;generate('your-route', $routeParams) ); } } Injecting the UrlHelper into your middleware will also require that the middleware have a factory that manages the injection. As an example, the following would work for the above middleware: namespace Application\\Action; use Psr\\Container\\ContainerInterface; use Mezzio\\Helper\\UrlHelper; class RedirectActionFactory { public function __invoke(ContainerInterface $container) { return new RedirectAction( $container-&gt;get(UrlHelper::class) ); } }","title":"Redirecting within your middleware"},{"location":"v2/cookbook/using-a-base-path/","text":"How can I tell my application about a base path? In some environments, your application may be running in a subdirectory of your web root. For example: var/ |- www/ | |- wordpress/ | |- mezzio/ | | |- public/ | | | |- index.php where /var/www is the web root, and your Mezzio application is in the mezzio/ subdirectory. How can you make your application work correctly in this environment? .htaccess in the application root If you are using Apache, your first step is to add an .htaccess file to your application root, with directives for rewriting to the public/ directory: RewriteEngine On RewriteRule (.*) ./public/$1 Using other web servers If you are using a web-server other than Apache, and know how to do a similar rewrite, we'd love to know! Please submit ideas/instructions to our issue tracker ! Use middleware to rewrite the path The above step ensures that clients can hit the website. Now we need to ensure that the application can route to middleware! To do this, we will add pipeline middleware to intercept the request, and rewrite the URL accordingly. At the time of writing, we have two suggestions: los/basepath provides the basic mechanics of rewriting the URL, and has a stable release. mtymek/blast-base-url provides the URL rewriting mechanics, as well as utilities for generating URIs that retain the base path, but does not have a stable release yet. los/basepath To use los/basepath , install it via Composer, copy the configuration files to your application, and then edit the configuration. To install and copy the configuration: $ composer require los/basepath $ cp vendor/los/basepath/config/los-basepath.global.php.dist config/autoload/los-basepath.global.php We recommend copying the global configuration to a local configuration file as well; this allows you to have the production settings in your global configuration, and development settings in a local configuration (which is excluded from git by default): $ cp config/autoload/los-basepath.global.php config/autoload/los-basepath.local.php Then edit one or both, to change the los_basepath settings: return [ 'los_basepath' =&gt; '&lt;base path here&gt;', /* ... */ ]; The base path should be the portion of the web root leading up to the index.php of your application. In the above example, this would be /mezzio . mtymek/blast-base-url To use mtymek/blast-base-url , install it via Composer, and register some configuration. To install it: $ composer require mtymek/blast-base-url To configure it, update the file config/autoload/middleware-pipeline.global.php , or config/autoload/dependencies.global.php to map the middleware to its factory: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ Blast\\BaseUrl\\BaseUrlMiddleware::class =&gt; Blast\\BaseUrl\\BaseUrlMiddlewareFactory::class, /* ... */ ], /* ... */ ], ]; If using programmatic pipelines, pipe the middleware early in your pipeline: $app-&gt;pipe(\\Blast\\BaseUrl\\BaseUrlMiddleware::class); For configuration-driven pipelines, add an entry in your config/autoload/middleware-pipeline.global.php file: 'middleware_pipeline' =&gt; [ ['middleware' =&gt; [Blast\\BaseUrl\\BaseUrlMiddleware::class], 'priority' =&gt; 1000], /* ... */ ], At this point, the middleware will take care of the rewriting for you. No configuration is necessary, as it does auto-detection of the base path based on the request URI and the operating system path to the application. The primary advantage of mtymek/blast-base-url is in its additional features: it injects Mezzio\\Helper\\UrlHelper with the base path, allowing you to create relative route-based URLs. it provides a new helper, Blast\\BaseUrl\\BasePathHelper , which allows you to create URLs relative to the base path; this is particularly useful for assets. To enable these features, we'll add some configuration to config/autoload/dependencies.global.php file: return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ Blast\\BaseUrl\\BasePathHelper::class =&gt; Blast\\BaseUrl\\BasePathHelper::class, /* ... */ ], ], ]; Finally, if you're using laminas-view, you can register a new \"basePath\" helper in your config/autoload/templates.global.php : return [ /* ... */ 'view_helpers' =&gt; [ 'factories' =&gt; [ 'basePath' =&gt; Blast\\BaseUrl\\BasePathViewHelperFactory::class, /* ... */ ], /* ... */ ], ]; Usage of the BasePath helper is as follows: // where $basePathHelper is an instance of Blast\\BaseUrl\\BasePathHelper // as pulled from your container: echo $basePathHelper('/icons/favicon.ico'); // or, from laminas-view's PhpRenderer: echo $this-&gt;basePath('/icons/favicon.ico');","title":"Using Mezzio from a subdirectory"},{"location":"v2/cookbook/using-a-base-path/#how-can-i-tell-my-application-about-a-base-path","text":"In some environments, your application may be running in a subdirectory of your web root. For example: var/ |- www/ | |- wordpress/ | |- mezzio/ | | |- public/ | | | |- index.php where /var/www is the web root, and your Mezzio application is in the mezzio/ subdirectory. How can you make your application work correctly in this environment?","title":"How can I tell my application about a base path?"},{"location":"v2/cookbook/using-a-base-path/#htaccess-in-the-application-root","text":"If you are using Apache, your first step is to add an .htaccess file to your application root, with directives for rewriting to the public/ directory: RewriteEngine On RewriteRule (.*) ./public/$1","title":".htaccess in the application root"},{"location":"v2/cookbook/using-a-base-path/#use-middleware-to-rewrite-the-path","text":"The above step ensures that clients can hit the website. Now we need to ensure that the application can route to middleware! To do this, we will add pipeline middleware to intercept the request, and rewrite the URL accordingly. At the time of writing, we have two suggestions: los/basepath provides the basic mechanics of rewriting the URL, and has a stable release. mtymek/blast-base-url provides the URL rewriting mechanics, as well as utilities for generating URIs that retain the base path, but does not have a stable release yet.","title":"Use middleware to rewrite the path"},{"location":"v2/cookbook/using-custom-view-helpers/","text":"How do you register custom view helpers when using laminas-view? If you've selected laminas-view as your preferred template renderer, you may want to define and use custom view helpers. How can you use them? Assuming you've used the Mezzio skeleton to start your application, you will already have a factory defined for Laminas\\View\\HelperPluginManager , and it will be injected into the PhpRenderer instance used. Since the HelperPluginManager is available, we can configure it. Open the file config/autoload/templates.global.php . In that file, you'll see three top-level keys: return [ 'dependencies' =&gt; [ /* ... */ ], 'templates' =&gt; [ /* ... */ ], 'view_helpers' =&gt; [ /* ... */ ], ]; The last is the one you want. In this, you can define service mappings, including aliases, invokables, factories, and abstract factories to define how helpers are named and created. See the laminas-view custom helpers documentation for information on how to populate this configuration.","title":"Registering custom view helpers when using laminas-view"},{"location":"v2/cookbook/using-custom-view-helpers/#how-do-you-register-custom-view-helpers-when-using-laminas-view","text":"If you've selected laminas-view as your preferred template renderer, you may want to define and use custom view helpers. How can you use them? Assuming you've used the Mezzio skeleton to start your application, you will already have a factory defined for Laminas\\View\\HelperPluginManager , and it will be injected into the PhpRenderer instance used. Since the HelperPluginManager is available, we can configure it. Open the file config/autoload/templates.global.php . In that file, you'll see three top-level keys: return [ 'dependencies' =&gt; [ /* ... */ ], 'templates' =&gt; [ /* ... */ ], 'view_helpers' =&gt; [ /* ... */ ], ]; The last is the one you want. In this, you can define service mappings, including aliases, invokables, factories, and abstract factories to define how helpers are named and created. See the laminas-view custom helpers documentation for information on how to populate this configuration.","title":"How do you register custom view helpers when using laminas-view?"},{"location":"v2/cookbook/using-laminas-form-view-helpers/","text":"How can I use laminas-form view helpers? If you've selected laminas-view as your preferred template renderer, you'll likely want to use the various view helpers available in other components, such as: laminas-form laminas-i18n laminas-navigation By default, only the view helpers directly available in laminas-view are available; how can you add the others? ConfigProvider When you install laminas-form, Composer should prompt you if you want to inject one or more ConfigProvider classes, including those from laminas-hydrator, laminas-inputfilter, and several others. Always answer \"yes\" to these; when you do, a Composer plugin will add entries for their ConfigProvider classes to your config/config.php file. If for some reason you are not prompted, or chose \"no\" when answering the prompts, you can add them manually. Add the following entries in the array used to create your ConfigAggregator instance within config/config.php : \\Laminas\\Form\\ConfigProvider::class, \\Laminas\\InputFilter\\ConfigProvider::class, \\Laminas\\Filter\\ConfigProvider::class, \\Laminas\\Validator\\ConfigProvider::class, \\Laminas\\Hydrator\\ConfigProvider::class, If you installed Mezzio via the skeleton, the service Laminas\\View\\HelperPluginManager is registered for you, and represents the helper plugin manager injected into the PhpRenderer instance. This instance gets its helper configuration from the view_helpers top-level configuration key — which the laminas-form ConfigProvider helps to populate! At this point, all view helpers provided by laminas-form are registered and ready to use. Alternative options to configure HelperPluginManager: Replace the HelperPluginManager factory with your own; or Add a delegator factory to or extend the HelperPluginManager service to inject the additional helper configuration; or Add pipeline middleware that composes the HelperPluginManager and configures it. Replacing the HelperPluginManager factory The laminas-view integration provides Mezzio\\LaminasView\\HelperPluginManagerFactory , and the Mezzio skeleton registers it be default. The simplest solution for adding other helpers is to replace it with your own. In your own factory, you will also configure the plugin manager with the configuration from the laminas-form component (or whichever other components you wish to use). namespace Your\\Application; use Psr\\Container\\ContainerInterface; use Laminas\\ServiceManager\\Config; use Laminas\\View\\HelperPluginManager; class HelperPluginManagerFactory { public function __invoke(ContainerInterface $container) { $manager = new HelperPluginManager($container); $config = $container-&gt;has('config') ? $container-&gt;get('config') : []; $config = isset($config['view_helpers']) ? $config['view_helpers'] : []; (new Config($config))-&gt;configureServiceManager($manager); return $manager; } } In your config/autoload/templates.global.php file, change the line that reads: Laminas\\View\\HelperPluginManager::class =&gt; Mezzio\\LaminasView\\HelperPluginManagerFactory::class, to instead read as: Laminas\\View\\HelperPluginManager::class =&gt; Your\\Application\\HelperPluginManagerFactory::class, This approach will work for any of the various containers supported. Delegator factories/service extension Delegator factories and service extension operate on the same principle: they intercept after the original factory was called, and then operate on the generated instance, either modifying or replacing it. We'll demonstrate this for laminas-servicemanager and Pimple; at the time of writing, we're unaware of a mechanism for doing so in Aura.Di. laminas-servicemanager You'll first need to create a delegator factory: namespace Your\\Application; use Psr\\Container\\ContainerInterface; use Laminas\\ServiceManager\\Config; use Laminas\\ServiceManager\\DelegatorFactoryInterface; use Laminas\\ServiceManager\\ServiceLocatorInterface; class FormHelpersDelegatorFactory { /** * laminas-servicemanager v3 support */ public function __invoke( ContainerInterface $container, $name, callable $callback, array $options = null ) { $helpers = $callback(); $config = $container-&gt;has('config') ? $container-&gt;get('config') : []; $config = new Config($config['view_helpers']); $config-&gt;configureServiceManager($helpers); return $helpers; } /** * laminas-servicemanager v2 support */ public function createDelegatorWithName( ServiceLocatorInterface $container, $name, $requestedName, $callback ) { return $this($container, $name, $callback); } } The above creates an instance of Laminas\\ServiceManager\\Config , uses it to configure the already created Laminas\\View\\HelperPluginManager instance, and then returns the plugin manager instance. From here, you'll add a delegators configuration key in your config/autoload/templates.global.php file: return [ 'dependencies' =&gt; [ 'delegators' =&gt; [ Laminas\\View\\HelperPluginManager::class =&gt; [ Your\\Application\\FormHelpersDelegatorFactory::class, ], ], /* ... */ ], 'templates' =&gt; [ /* ... */ ], 'view_helpers' =&gt; [ /* ... */ ], ]; Note: delegator factories are keyed by the service they modify, and the value is an array of delegator factories, to allow multiple such factories to be in use. Pimple For Pimple, we don't currently support configuration of service extensions, so you'll need to edit the main container configuration file, config/container.php . Place the following anywhere after the factories and invokables are defined: // The following assumes you've added the following import statements to // the start of the file: // use Laminas\\ServiceManager\\Config as ServiceConfig; // use Laminas\\View\\HelperPluginManager; $container[HelperPluginManager::class] = $container-&gt;extend( HelperPluginManager::class, function ($helpers, $container) { $config = isset($container['config']) ? $container['config'] : []; $config = new ServiceConfig($config['view_helpers']); $config-&gt;configureServiceManager($helpers); return $helpers; } ); Pipeline middleware Another option is to use pipeline middleware. This approach will require that the middleware execute on every request, which introduces (very slight) performance overhead. However, it's a portable method that works regardless of the container implementation you choose. First, define the middleware: namespace Your\\Application use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Laminas\\Form\\View\\HelperConfig as FormHelperConfig; use Laminas\\View\\HelperPluginManager; class FormHelpersMiddleware implements MiddlewareInterface { private $helpers; public function __construct(HelperPluginManager $helpers) { $this-&gt;helpers = $helpers; } public function process(ServerRequestInterface $request, DelegateInterface $delegate) { $config = new FormHelperConfig(); $config-&gt;configureServiceManager($this-&gt;helpers); return $delegate-&gt;process($request); } } You'll also need a factory for the middleware, to ensure it receives the HelperPluginManager : namespace Your\\Application use Laminas\\View\\HelperPluginManager; class FormHelpersMiddlewareFactory { public function __invoke($container) { return new FormHelpersMiddleware( $container-&gt;get(HelperPluginManager::class) ); } } Next, register the middleware with its factory in one of config/autoload/middleware-pipeline.global.php or config/autoload/dependencies.global.php : return [ 'dependencies' =&gt; [ 'factories' =&gt; [ Your\\Application\\FormHelpersMiddleware::class =&gt; Your\\Application\\FormHelpersMiddlewareFactory::class /* ... */ ], /* ... */ ], ]; If using programmatic pipelines, pipe the middleware in an appropriate location in your pipeline: $app-&gt;pipe(FormHelpersMiddleware::class); // or, perhaps, in a route-specific middleware pipeline: $app-&gt;post('/register', [ FormHelpersMiddleware::class, RegisterMiddleware::class, ], 'register'); If using configuration-driven pipelines or routing: // Via the middleware pipeline: 'middleware_pipeline' =&gt; [ ['middleware' =&gt; Your\\Application\\FormHelpersMiddleware::class, 'priority' =&gt; 1000], ], // Or via routes: 'routes' =&gt; [ [ 'name' =&gt; 'register', 'path' =&gt; '/register', 'middleware' =&gt; [ FormHelpersMiddleware::class, RegisterMiddleware::class, ], 'allowed_methods' =&gt; ['POST'], ], ] At that point, you're all set! Registering more helpers What if you need to register helpers from multiple components? You can do so using the same technique above. Better yet, do them all at once! If you chose to use delegator factories/service extension, do all helper configuration registrations for all components in the same factory. If you chose to use middleware, do all helper configuration registrations for all components in the same middleware.","title":"Using laminas-form view helpers"},{"location":"v2/cookbook/using-laminas-form-view-helpers/#how-can-i-use-laminas-form-view-helpers","text":"If you've selected laminas-view as your preferred template renderer, you'll likely want to use the various view helpers available in other components, such as: laminas-form laminas-i18n laminas-navigation By default, only the view helpers directly available in laminas-view are available; how can you add the others?","title":"How can I use laminas-form view helpers?"},{"location":"v2/cookbook/using-laminas-form-view-helpers/#configprovider","text":"When you install laminas-form, Composer should prompt you if you want to inject one or more ConfigProvider classes, including those from laminas-hydrator, laminas-inputfilter, and several others. Always answer \"yes\" to these; when you do, a Composer plugin will add entries for their ConfigProvider classes to your config/config.php file. If for some reason you are not prompted, or chose \"no\" when answering the prompts, you can add them manually. Add the following entries in the array used to create your ConfigAggregator instance within config/config.php : \\Laminas\\Form\\ConfigProvider::class, \\Laminas\\InputFilter\\ConfigProvider::class, \\Laminas\\Filter\\ConfigProvider::class, \\Laminas\\Validator\\ConfigProvider::class, \\Laminas\\Hydrator\\ConfigProvider::class, If you installed Mezzio via the skeleton, the service Laminas\\View\\HelperPluginManager is registered for you, and represents the helper plugin manager injected into the PhpRenderer instance. This instance gets its helper configuration from the view_helpers top-level configuration key — which the laminas-form ConfigProvider helps to populate! At this point, all view helpers provided by laminas-form are registered and ready to use. Alternative options to configure HelperPluginManager: Replace the HelperPluginManager factory with your own; or Add a delegator factory to or extend the HelperPluginManager service to inject the additional helper configuration; or Add pipeline middleware that composes the HelperPluginManager and configures it.","title":"ConfigProvider"},{"location":"v2/cookbook/using-laminas-form-view-helpers/#replacing-the-helperpluginmanager-factory","text":"The laminas-view integration provides Mezzio\\LaminasView\\HelperPluginManagerFactory , and the Mezzio skeleton registers it be default. The simplest solution for adding other helpers is to replace it with your own. In your own factory, you will also configure the plugin manager with the configuration from the laminas-form component (or whichever other components you wish to use). namespace Your\\Application; use Psr\\Container\\ContainerInterface; use Laminas\\ServiceManager\\Config; use Laminas\\View\\HelperPluginManager; class HelperPluginManagerFactory { public function __invoke(ContainerInterface $container) { $manager = new HelperPluginManager($container); $config = $container-&gt;has('config') ? $container-&gt;get('config') : []; $config = isset($config['view_helpers']) ? $config['view_helpers'] : []; (new Config($config))-&gt;configureServiceManager($manager); return $manager; } } In your config/autoload/templates.global.php file, change the line that reads: Laminas\\View\\HelperPluginManager::class =&gt; Mezzio\\LaminasView\\HelperPluginManagerFactory::class, to instead read as: Laminas\\View\\HelperPluginManager::class =&gt; Your\\Application\\HelperPluginManagerFactory::class, This approach will work for any of the various containers supported.","title":"Replacing the HelperPluginManager factory"},{"location":"v2/cookbook/using-laminas-form-view-helpers/#delegator-factoriesservice-extension","text":"Delegator factories and service extension operate on the same principle: they intercept after the original factory was called, and then operate on the generated instance, either modifying or replacing it. We'll demonstrate this for laminas-servicemanager and Pimple; at the time of writing, we're unaware of a mechanism for doing so in Aura.Di.","title":"Delegator factories/service extension"},{"location":"v2/cookbook/using-laminas-form-view-helpers/#pipeline-middleware","text":"Another option is to use pipeline middleware. This approach will require that the middleware execute on every request, which introduces (very slight) performance overhead. However, it's a portable method that works regardless of the container implementation you choose. First, define the middleware: namespace Your\\Application use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Laminas\\Form\\View\\HelperConfig as FormHelperConfig; use Laminas\\View\\HelperPluginManager; class FormHelpersMiddleware implements MiddlewareInterface { private $helpers; public function __construct(HelperPluginManager $helpers) { $this-&gt;helpers = $helpers; } public function process(ServerRequestInterface $request, DelegateInterface $delegate) { $config = new FormHelperConfig(); $config-&gt;configureServiceManager($this-&gt;helpers); return $delegate-&gt;process($request); } } You'll also need a factory for the middleware, to ensure it receives the HelperPluginManager : namespace Your\\Application use Laminas\\View\\HelperPluginManager; class FormHelpersMiddlewareFactory { public function __invoke($container) { return new FormHelpersMiddleware( $container-&gt;get(HelperPluginManager::class) ); } } Next, register the middleware with its factory in one of config/autoload/middleware-pipeline.global.php or config/autoload/dependencies.global.php : return [ 'dependencies' =&gt; [ 'factories' =&gt; [ Your\\Application\\FormHelpersMiddleware::class =&gt; Your\\Application\\FormHelpersMiddlewareFactory::class /* ... */ ], /* ... */ ], ]; If using programmatic pipelines, pipe the middleware in an appropriate location in your pipeline: $app-&gt;pipe(FormHelpersMiddleware::class); // or, perhaps, in a route-specific middleware pipeline: $app-&gt;post('/register', [ FormHelpersMiddleware::class, RegisterMiddleware::class, ], 'register'); If using configuration-driven pipelines or routing: // Via the middleware pipeline: 'middleware_pipeline' =&gt; [ ['middleware' =&gt; Your\\Application\\FormHelpersMiddleware::class, 'priority' =&gt; 1000], ], // Or via routes: 'routes' =&gt; [ [ 'name' =&gt; 'register', 'path' =&gt; '/register', 'middleware' =&gt; [ FormHelpersMiddleware::class, RegisterMiddleware::class, ], 'allowed_methods' =&gt; ['POST'], ], ] At that point, you're all set!","title":"Pipeline middleware"},{"location":"v2/cookbook/using-laminas-form-view-helpers/#registering-more-helpers","text":"What if you need to register helpers from multiple components? You can do so using the same technique above. Better yet, do them all at once! If you chose to use delegator factories/service extension, do all helper configuration registrations for all components in the same factory. If you chose to use middleware, do all helper configuration registrations for all components in the same middleware.","title":"Registering more helpers"},{"location":"v2/cookbook/using-routed-middleware-class-as-controller/","text":"Handling multiple routes in a single class Typically, in Mezzio, we would define one middleware class per route. For a standard CRUD-style application, however, this leads to multiple related classes: AlbumPageIndex AlbumPageEdit AlbumPageAdd If you are familiar with frameworks that provide controllers capable of handling multiple \"actions\", such as those found in Laminas's MVC layer, Symfony, CodeIgniter, CakePHP, and other popular frameworks, you may want to apply a similar pattern when using Mezzio. In other words, what if we want to use only one middleware class to facilitate all three of the above? In the following example, we'll use an action routing parameter which our middleware class will use in order to determine which internal method to invoke. Consider the following route configuration: use Album\\Action\\AlbumPage; // Programmatic: $app-&gt;get('/album[/{action:add|edit}[/{id}]]', AlbumPage::class, 'album'); // Config-driven: return [ /* ... */ 'routes' =&gt; [ /* ... */ [ 'name' =&gt; 'album', 'path' =&gt; '/album[/{action:add|edit}[/{id}]]', 'middleware' =&gt; AlbumPage::class, 'allowed_methods' =&gt; ['GET'], ], /* ... */ ], ]; The above each define a route that will match any of the following: /album /album/add /album/edit/3 The action attribute can thus be one of add or edit , and we can optionally also receive an id attribute (in the latter example, it would be 3 ). Routing definitions may vary Depending on the router you chose when starting your project, your routing definition may differ. The above example uses the default FastRoute implementation. We might then implement Album\\Action\\AlbumPage as follows: &lt;?php namespace Album\\Action; use Fig\\Http\\Message\\StatusCodeInterface as StatusCode; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Laminas\\Diactoros\\Response\\EmptyResponse; use Laminas\\Diactoros\\Response\\HtmlResponse; use Mezzio\\Template\\TemplateRendererInterface; use Psr\\Http\\Message\\ServerRequestInterface; class AlbumPage implements MiddlewareInterface { private $template; public function __construct(TemplateRendererInterface $template) { $this-&gt;template = $template; } public function process(ServerRequestInterface $request, DelegateInterface $delegate) { switch ($request-&gt;getAttribute('action', 'index')) { case 'index': return $this-&gt;indexAction($request, $delegate); case 'add': return $this-&gt;addAction($request, $delegate); case 'edit': return $this-&gt;editAction($request, $delegate); default: // Invalid; thus, a 404! return new EmptyResponse(StatusCode::STATUS_NOT_FOUND); } } public function indexAction(ServerRequestInterface $request, DelegateInterface $delegate) { return new HtmlResponse($this-&gt;template-&gt;render('album::album-page')); } public function addAction(ServerRequestInterface $request, DelegateInterface $delegate) { return new HtmlResponse($this-&gt;template-&gt;render('album::album-page-add')); } public function editAction(ServerRequestInterface $request, DelegateInterface $delegate) { $id = $request-&gt;getAttribute('id', false); if (! $id) { throw new \\InvalidArgumentException('id parameter must be provided'); } return new HtmlResponse( $this-&gt;template-&gt;render('album::album-page-edit', ['id' =&gt; $id]) ); } } This allows us to have the same dependencies for a set of related actions, and, if desired, even have common internal methods each can utilize. This approach is reasonable, but requires that I create a similar process() implementation every time I want to accomplish a similar workflow. Let's create a generic implementation, via an AbstractPage class: &lt;?php namespace App\\Action; use Fig\\Http\\Message\\StatusCodeInterface as StatusCode; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Laminas\\Diactoros\\Response\\EmptyResponse; use Psr\\Http\\Message\\ServerRequestInterface; abstract class AbstractPage implements MiddlewareInterface { public function process(ServerRequestInterface $request, DelegateInterface $delegate) { $action = $request-&gt;getAttribute('action', 'index') . 'Action'; if (! method_exists($this, $action)) { return new EmptyResponse(StatusCode::STATUS_NOT_FOUND); } return $this-&gt;$action($request, $delegate); } } The above abstract class pulls the action attribute on invocation, and concatenates it with the word Action . It then uses this value to determine if a corresponding method exists in the current class, and, if so, calls it with the arguments it received; otherwise, it returns an empty 404 response. Our original AlbumPage implementation could then be modified to extend AbstractPage : namespace Album\\Action; use App\\Action\\AbstractPage; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Laminas\\Diactoros\\Response\\HtmlResponse; use Mezzio\\Template\\TemplateRendererInterface; class AlbumPage extends AbstractPage { private $template; public function __construct(TemplateRendererInterface $template) { $this-&gt;template = $template; } public function indexAction( /* ... */ ) { /* ... */ } public function addAction( /* ... */ ) { /* ... */ } public function editAction( /* ... */ ) { /* ... */ } } Or use a trait As an alternative to an abstract class, you could define the __invoke() logic in a trait, which you then compose into your middleware: &lt;?php namespace App\\Action; use Fig\\Http\\Message\\StatusCodeInterface as StatusCode; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Laminas\\Diactoros\\Response\\EmptyResponse; trait ActionBasedInvocation { public function process(ServerRequestInterface $request, DelegateInterface $delegate) { $action = $request-&gt;getAttribute('action', 'index') . 'Action'; if (! method_exists($this, $action)) { return new EmptyResponse(StatusCode::STATUS_NOT_FOUND); } return $this-&gt;$action($request, $delegate); } } You would then compose it into a class as follows: &lt;?php namespace Album\\Action; use App\\Action\\ActionBasedInvocation; use Mezzio\\Template\\TemplateRendererInterface; class AlbumPage { use ActionBasedInvocation; private $template; public function __construct(TemplateRendererInterface $template) { $this-&gt;template = $template; } public function indexAction( /* ... */ ) { /* ... */ } public function addAction( /* ... */ ) { /* ... */ } public function editAction( /* ... */ ) { /* ... */ } }","title":"Handling multiple routes in a single class"},{"location":"v2/cookbook/using-routed-middleware-class-as-controller/#handling-multiple-routes-in-a-single-class","text":"Typically, in Mezzio, we would define one middleware class per route. For a standard CRUD-style application, however, this leads to multiple related classes: AlbumPageIndex AlbumPageEdit AlbumPageAdd If you are familiar with frameworks that provide controllers capable of handling multiple \"actions\", such as those found in Laminas's MVC layer, Symfony, CodeIgniter, CakePHP, and other popular frameworks, you may want to apply a similar pattern when using Mezzio. In other words, what if we want to use only one middleware class to facilitate all three of the above? In the following example, we'll use an action routing parameter which our middleware class will use in order to determine which internal method to invoke. Consider the following route configuration: use Album\\Action\\AlbumPage; // Programmatic: $app-&gt;get('/album[/{action:add|edit}[/{id}]]', AlbumPage::class, 'album'); // Config-driven: return [ /* ... */ 'routes' =&gt; [ /* ... */ [ 'name' =&gt; 'album', 'path' =&gt; '/album[/{action:add|edit}[/{id}]]', 'middleware' =&gt; AlbumPage::class, 'allowed_methods' =&gt; ['GET'], ], /* ... */ ], ]; The above each define a route that will match any of the following: /album /album/add /album/edit/3 The action attribute can thus be one of add or edit , and we can optionally also receive an id attribute (in the latter example, it would be 3 ).","title":"Handling multiple routes in a single class"},{"location":"v2/features/application/","text":"Applications In mezzio, you define a Mezzio\\Application instance and execute it. The Application instance is itself middleware that composes: a router , for dynamically routing requests to middleware. a dependency injection container , for retrieving middleware to dispatch. a default delegate (Mezzio 2.X) or final handler an emitter , for emitting the response when application execution is complete. You can define the Application instance in several ways: Direct instantiation, which requires providing several dependencies. The AppFactory , which will use some common defaults, but allows injecting alternate container and/or router implementations. Via a dependency injection container; we provide a factory for setting up all aspects of the instance via configuration and other defined services. Regardless of how you set up the instance, there are several methods you will likely interact with at some point or another. Instantiation As noted at the start of this document, we provide several ways to create an Application instance. Constructor If you wish to manually instantiate the Application instance, it has the following constructor: /** * @param Mezzio\\Router\\RouterInterface $router * @param null|Psr\\Container\\ContainerInterface $container IoC container from which to pull services, if any. * @param null|Interop\\Http\\ServerMiddleware\\DelegateInterface $defaultDelegate * Delegate to invoke when the internal middleware pipeline is exhausted * without returning a response. * @param null|Laminas\\Diactoros\\Response\\EmitterInterface $emitter Emitter to use when `run()` is * invoked. */ public function __construct( Mezzio\\Router\\RouterInterface $router, Psr\\Container\\ContainerInterface $container = null, Interop\\Http\\ServerMiddleware\\DelegateInterface $defaultDelegate = null, Laminas\\Diactoros\\Response\\EmitterInterface $emitter = null ); If no container is provided at instantiation, then all routed and piped middleware must be provided as callables. AppFactory Deprecated since version 2.2; instantiate Application directly and/or use a Laminas\\Stratigility\\MiddlewarePipe instance instead. Mezzio\\AppFactory provides a convenience layer for creating an Application instance; it makes the assumption that you will use defaults in most situations, and likely only change which container and/or router you wish to use. It has the following signature: AppFactory::create( Psr\\Container\\ContainerInterface $container = null, Mezzio\\Router\\RouterInterface $router = null ); When no container or router are provided, it defaults to: laminas-servicemanager for the container. FastRoute for the router. Container factory We also provide a factory that can be consumed by a PSR-11 dependency injection container; see the container factories documentation for details. Adding routable middleware We discuss routing vs piping elsewhere ; routing is the act of dynamically matching an incoming request against criteria, and it is one of the primary features of mezzio. Regardless of which router implementation you use, you can use the following methods to provide routable middleware: route() route() has the following signature: public function route( $pathOrRoute, $middleware = null, array $methods = null, $name = null ) : Mezzio\\Router\\Route where: $pathOrRoute may be either a string path to match, or a Mezzio\\Router\\Route instance. $middleware must be present if $pathOrRoute is a string path, and must be: a callable; a service name that resolves to valid middleware in the container; a fully qualified class name of a constructor-less class; an array of any of the above; these will be composed in order into a Laminas\\Stratigility\\MiddlewarePipe instance. $methods must be an array of HTTP methods valid for the given path and middleware. If null, it assumes any method is valid. $name is the optional name for the route, and is used when generating a URI from known routes. See the section on route naming for details. This method is typically only used if you want a single middleware to handle multiple HTTP request methods. get(), post(), put(), patch(), delete(), any() Each of the methods get() , post() , put() , patch() , delete() , and any() proxies to route() and has the signature: function ( $pathOrRoute, $middleware = null, $name = null ) : Mezzio\\Router\\Route Essentially, each calls route() and specifies an array consisting solely of the corresponding HTTP method for the $methods argument. Piping Because mezzio builds on laminas-stratigility , and, more specifically, its MiddlewarePipe definition, you can also pipe (queue) middleware to the application. This is useful for adding middleware that should execute on each request, defining error handlers, and/or segregating applications by subpath. The signature of pipe() is: public function pipe($pathOrMiddleware, $middleware = null) where: $pathOrMiddleware is either a string URI path (for path segregation), a callable middleware, or the service name for a middleware to fetch from the composed container. $middleware is required if $pathOrMiddleware is a string URI path. It can be one of: a callable; a service name that resolves to valid middleware in the container; a fully qualified class name of a constructor-less class; an array of any of the above; these will be composed in order into a Laminas\\Stratigility\\MiddlewarePipe instance. Unlike Laminas\\Stratigility\\MiddlewarePipe , Application::pipe() allows fetching middleware by service name . This facility allows lazy-loading of middleware only when it is invoked. Internally, it wraps the call to fetch and dispatch the middleware inside a closure. Additionally, we define a new method, pipeErrorHandler() , with the following signature: public function pipeErrorHandler($pathOrMiddleware, $middleware = null) It acts just like pipe() except when the middleware specified is a service name; in that particular case, when it wraps the middleware in a closure, it uses the error handler signature: function ($error, ServerRequestInterface $request, ResponseInterface $response, callable $next); Read the section on piping vs routing for more information. Registering routing and dispatch middleware Routing is accomplished via dedicated middleware, Mezzio\\Middleware\\RouteMiddleware ; similarly, dispatching of routed middleware has a corresponding middleware, Mezzio\\Middleware\\DispatchMiddleware . Each can be piped/registered with other middleware platforms if desired. These methods MUST be piped to the application so that the application will route and dispatch routed middleware. This is done using the following methods: $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); See the section on piping to see how you can register non-routed middleware and create layered middleware applications. Changed in version 2.2 Starting in version 2.2, the methods pipeRoutingMiddleware and pipeDispatchMiddleware are deprecated in favor of piping the middleware manually. Additionally, the middleware has been ported to the mezzio-router package, under the namespace Mezzio\\Router\\Middleware . We suggest piping them by service name. Please see our migration documentation for more details, and for information on how to automatically update your application. Retrieving dependencies As noted in the intro, the Application class has several dependencies. Some of these may allow further configuration, or may be useful on their own, and have methods for retrieving them. They include: getContainer() : returns the composed PSR-11 container instance (used to retrieve routed middleware). getEmitter() : returns the composed emitter , typically a Mezzio\\Emitter\\EmitterStack instance. getDefaultDelegate() : retrieves the default delegate to use when the internal middleware pipeline is exhausted without returning a response. If none is provided at instantiation, this method will do one of the following: If no container is composed, instantiates a Mezzio\\Delegate\\NotFoundDelegate using the composed response prototype only. If a container is composed, but does not have the Mezzio\\Delegate\\DefaultDelegate service, it creates and invokes an instance of Mezzio\\Container\\NotFoundDelegateFactory , passing it the composed container, and uses the value created. If a container is composed and contains the Mezzio\\Delegate\\DefaultDelegate service, it returns that. Deprecated Each of the above methods are deprecated starting in version 2.2, and will be removed in version 3.0. Executing the application: run() When the application is completely setup, you can execute it with the run() method. The method may be called with no arguments, but has the following signature: public function run( ServerRequestInterface $request = null, ResponseInterface $response = null );","title":"Applications"},{"location":"v2/features/application/#applications","text":"In mezzio, you define a Mezzio\\Application instance and execute it. The Application instance is itself middleware that composes: a router , for dynamically routing requests to middleware. a dependency injection container , for retrieving middleware to dispatch. a default delegate (Mezzio 2.X) or final handler an emitter , for emitting the response when application execution is complete. You can define the Application instance in several ways: Direct instantiation, which requires providing several dependencies. The AppFactory , which will use some common defaults, but allows injecting alternate container and/or router implementations. Via a dependency injection container; we provide a factory for setting up all aspects of the instance via configuration and other defined services. Regardless of how you set up the instance, there are several methods you will likely interact with at some point or another.","title":"Applications"},{"location":"v2/features/application/#instantiation","text":"As noted at the start of this document, we provide several ways to create an Application instance.","title":"Instantiation"},{"location":"v2/features/application/#adding-routable-middleware","text":"We discuss routing vs piping elsewhere ; routing is the act of dynamically matching an incoming request against criteria, and it is one of the primary features of mezzio. Regardless of which router implementation you use, you can use the following methods to provide routable middleware:","title":"Adding routable middleware"},{"location":"v2/features/application/#retrieving-dependencies","text":"As noted in the intro, the Application class has several dependencies. Some of these may allow further configuration, or may be useful on their own, and have methods for retrieving them. They include: getContainer() : returns the composed PSR-11 container instance (used to retrieve routed middleware). getEmitter() : returns the composed emitter , typically a Mezzio\\Emitter\\EmitterStack instance. getDefaultDelegate() : retrieves the default delegate to use when the internal middleware pipeline is exhausted without returning a response. If none is provided at instantiation, this method will do one of the following: If no container is composed, instantiates a Mezzio\\Delegate\\NotFoundDelegate using the composed response prototype only. If a container is composed, but does not have the Mezzio\\Delegate\\DefaultDelegate service, it creates and invokes an instance of Mezzio\\Container\\NotFoundDelegateFactory , passing it the composed container, and uses the value created. If a container is composed and contains the Mezzio\\Delegate\\DefaultDelegate service, it returns that.","title":"Retrieving dependencies"},{"location":"v2/features/application/#executing-the-application-run","text":"When the application is completely setup, you can execute it with the run() method. The method may be called with no arguments, but has the following signature: public function run( ServerRequestInterface $request = null, ResponseInterface $response = null );","title":"Executing the application: run()"},{"location":"v2/features/emitters/","text":"Emitters To simplify the usage of Mezzio, we added the run() method, which handles the incoming request, and emits a response. The latter aspect, emitting the response, is the responsibility of an emitter . An emitter accepts a response instance, and then does something with it, usually sending the response back to a browser. Diactoros defines an EmitterInterface , and — as of the time we write this — a single emitter implementation, Laminas\\Diactoros\\Response\\SapiEmitter , which sends headers and output using PHP's standard SAPI mechanisms (the header() method and the output buffer). We recognize that there are times when you may want to use alternate emitter implementations; for example, if you use React , the SAPI emitter will likely not work for you. To facilitate alternate emitters, we offer two facilities: First, Application composes an emitter, and you can specify an alternate emitter during instantiation, or via the Laminas\\Diactoros\\Response\\EmitterInterface service when using the container factory. Second, we provide Mezzio\\Emitter\\EmitterStack , which allows you to compose multiple emitter strategies; the first to return a value other than boolean false will cause execution of the stack to short-circuit. Application composes an EmitterStack by default, with an SapiEmitter composed at the bottom of the stack. EmitterStack The EmitterStack is an SplStack extension that implements EmitterInterface . You can add emitters to the stack by pushing them on: $stack-&gt;push($emitterInstance); As a stack, execution is in LIFO (last in, first out) order; the first emitter on the stack will be evaluated last. Deprecated with version 2.2 Starting in version 2.2, the EmitterStack is deprecated, and moved, along with the laminas-diactoros EmitterInterface and implementations, to a new package, laminas-httphandlerrunner . The interface and the EmitterStack are roughly identical to what is present in version 2; if you are defining a Laminas\\Diactoros\\Emitter\\EmitterInterface service of your own, you will need to update it in that version.","title":"Emitters"},{"location":"v2/features/emitters/#emitters","text":"To simplify the usage of Mezzio, we added the run() method, which handles the incoming request, and emits a response. The latter aspect, emitting the response, is the responsibility of an emitter . An emitter accepts a response instance, and then does something with it, usually sending the response back to a browser. Diactoros defines an EmitterInterface , and — as of the time we write this — a single emitter implementation, Laminas\\Diactoros\\Response\\SapiEmitter , which sends headers and output using PHP's standard SAPI mechanisms (the header() method and the output buffer). We recognize that there are times when you may want to use alternate emitter implementations; for example, if you use React , the SAPI emitter will likely not work for you. To facilitate alternate emitters, we offer two facilities: First, Application composes an emitter, and you can specify an alternate emitter during instantiation, or via the Laminas\\Diactoros\\Response\\EmitterInterface service when using the container factory. Second, we provide Mezzio\\Emitter\\EmitterStack , which allows you to compose multiple emitter strategies; the first to return a value other than boolean false will cause execution of the stack to short-circuit. Application composes an EmitterStack by default, with an SapiEmitter composed at the bottom of the stack.","title":"Emitters"},{"location":"v2/features/emitters/#emitterstack","text":"The EmitterStack is an SplStack extension that implements EmitterInterface . You can add emitters to the stack by pushing them on: $stack-&gt;push($emitterInstance); As a stack, execution is in LIFO (last in, first out) order; the first emitter on the stack will be evaluated last.","title":"EmitterStack"},{"location":"v2/features/error-handling/","text":"Error Handling We recommend that your code raise exceptions for conditions where it cannot gracefully recover. Additionally, we recommend that you have a reasonable PHP error_reporting setting that includes warnings and fatal errors: error_reporting(E_ALL &amp; ~E_USER_DEPRECATED &amp; ~E_DEPRECATED &amp; ~E_STRICT &amp; ~E_NOTICE); If you follow these guidelines, you can then write or use middleware that does the following: sets an error handler that converts PHP errors to ErrorException instances. wraps execution of the delegate ( $delegate-&gt;process() ) with a try/catch block. As an example: function ($request, DelegateInterface $delegate) { set_error_handler(function ($errno, $errstr, $errfile, $errline) { if (! (error_reporting() &amp; $errno)) { // Error is not in mask return; } throw new ErrorException($errstr, 0, $errno, $errfile, $errline); }); try { $response = $delegate-&gt;process($request); return $response; } catch (Throwable $e) { } catch (Exception $e) { } restore_error_handler(); $response = new TextResponse(sprintf( \"[%d] %s\\n\\n%s\", $e-&gt;getCode(), $e-&gt;getMessage(), $e-&gt;getTraceAsString() ), 500); } You would then pipe this as the outermost (or close to outermost) layer of your application: $app-&gt;pipe($errorMiddleware); So that you do not need to do this, we provide an error handler for you, via laminas-stratigility: Laminas\\Stratigility\\Middleware\\ErrorHandler . This implementation allows you to both: provide a response generator, invoked when an error is caught; and register listeners to trigger when errors are caught. We provide the factory Mezzio\\Container\\ErrorHandlerFactory for generating the instance; it should be mapped to the service Laminas\\Stratigility\\Middleware\\ErrorHandler . We provide two error response generators for you: Mezzio\\Middleware\\ErrorResponseGenerator , which optionally will accept a Mezzio\\Template\\TemplateRendererInterface instance, and a template name. When present, these will be used to generate response content; otherwise, a plain text response is generated that notes the request method and URI. Mezzio\\Middleware\\WhoopsErrorResponseGenerator , which uses whoops to present detailed exception and request information; this implementation is intended for development purposes. Each also has an accompanying factory for generating the instance: Mezzio\\Container\\ErrorResponseGeneratorFactory Mezzio\\Container\\WhoopsErrorResponseGeneratorFactory Map the service Mezzio\\Middleware\\ErrorResponseGenerator to one of these two factories in your configuration: use Laminas\\Stratigility\\Middleware\\ErrorHandler; use Mezzio\\Container; use Mezzio\\Middleware; return [ 'dependencies' =&gt; [ 'factories' =&gt; [ ErrorHandler::class =&gt; Container\\ErrorHandlerFactory::class, Middleware\\ErrorResponseGenerator::class =&gt; Container\\ErrorResponseGeneratorFactory::class, ], ], ]; Use development mode configuration to enable whoops You can specify the above in one of your config/autoload/*.global.php files, to ensure you have a production-capable error response generator. If you are using laminas-development-mode in your application (which is provided by default in the skeleton application), you can toggle usage of whoops by adding configuration to the file config/autoload/development.local.php.dist : use Mezzio\\Container; use Mezzio\\Middleware; return [ 'dependencies' =&gt; [ 'factories' =&gt; [ Middleware\\WhoopsErrorResponseGenerator::class =&gt; Container\\WhoopsErrorResponseGeneratorFactory::class, ], ], ]; When you enable development mode, whoops will then be enabled; when you disable development mode, you'll be using your production generator. If you are not using laminas-development-mode, you can define a config/autoload/*.local.php file with the above configuration whenever you want to enable whoops. Listening for errors When errors occur, you may want to listen for them in order to provide features such as logging. Laminas\\Stratigility\\Middleware\\ErrorHandler provides the ability to do so via its attachListener() method. This method accepts a callable with the following signature: function ( Throwable|Exception $error, ServerRequestInterface $request, ResponseInterface $response ) : void The response provided is the response returned by your error response generator, allowing the listener the ability to introspect the generated response as well. As an example, you could create a logging listener as follows: namespace Acme; use Exception; use Psr\\Log\\LoggerInterface; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Throwable; class LoggingErrorListener { /** * Log format for messages: * * STATUS [METHOD] path: message */ const LOG_FORMAT = '%d [%s] %s: %s'; private $logger; public function __construct(LoggerInterface $logger) { $this-&gt;logger = $logger; } public function __invoke($error, ServerRequestInterface $request, ResponseInterface $response) { $this-&gt;logger-&gt;error(sprintf( self::LOG_FORMAT, $response-&gt;getStatusCode(), $request-&gt;getMethod(), (string) $request-&gt;getUri(), $error-&gt;getMessage() )); } } You could then use a delegator factory to create your logger listener and attach it to your error handler: namespace Acme; use Psr\\Container\\ContainerInterface; use Psr\\Log\\LoggerInterface; use Laminas\\Stratigility\\Middleware\\ErrorHandler; class LoggingErrorListenerDelegatorFactory { /** * @param ContainerInterface $container * @param string $name * @param callable $callback * @return ErrorHandler */ public function __invoke(ContainerInterface $container, $name, callable $callback) { $listener = new LoggingErrorListener($container-&gt;get(LoggerInterface::class)); $errorHandler = $callback(); $errorHandler-&gt;attachListener($listener); return $errorHandler; } } Handling more specific error types You could also write more specific error handlers. As an example, you might want to catch UnauthorizedException instances specifically, and display a login page: function ($request, DelegateInterface $delegate) use ($renderer) { try { $response = $delegate-&gt;process($request); return $response; } catch (UnauthorizedException $e) { } return new HtmlResponse( $renderer-&gt;render('error::unauthorized'), 401 ); } You could then push this into a middleware pipe only when it's needed: $app-&gt;get('/dashboard', [ $unauthorizedHandlerMiddleware, $middlewareThatChecksForAuthorization, $middlewareBehindAuthorizationWall, ], 'dashboard'); Default delegates Mezzio\\Application manages an internal middleware pipeline; when you call $delegate-&gt;process() , Application is popping off the next middleware in the queue and dispatching it. What happens when that queue is exhausted? That situation indicates an error condition: no middleware was capable of returning a response. This could either mean a problem with the request (HTTP 400 \"Bad Request\" status) or inability to route the request (HTTP 404 \"Not Found\" status). In order to report that information, Mezzio\\Application composes a \"default delegate\": a delegate it will invoke once the queue is exhausted and no response returned. By default, it uses a custom implementation, Mezzio\\Delegate\\NotFoundDelegate , which will report a 404 response, optionally using a composed template renderer to do so. We provide a factory, Mezzio\\Container\\NotFoundDelegateFactory , for creating an instance, and this should be mapped to the Mezzio\\Delegate\\NotFoundDelegate service, and aliased to the Mezzio\\Delegate\\DefaultDelegate service: use Mezzio\\Container; use Mezzio\\Delegate; return [ 'dependencies' =&gt; [ 'aliases' =&gt; [ 'Mezzio\\Delegate\\DefaultDelegate' =&gt; Delegate\\NotFoundDelegate::class, ], 'factories' =&gt; [ Delegate\\NotFoundDelegate::class =&gt; Container\\NotFoundDelegateFactory::class, ], ], ]; The factory will consume the following services: Mezzio\\Template\\TemplateRendererInterface (optional): if present, the renderer will be used to render a template for use as the response content. config (optional): if present, it will use the $config['mezzio']['error_handler']['template_404'] value as the template to use when rendering; if not provided, defaults to error::404 . If you wish to provide an alternate response status or use a canned response, you should provide your own default delegate, and expose it via the Mezzio\\Delegate\\DefaultDelegate service. Page not found Error handlers work at the outermost layer, and are used to catch exceptions and errors in your application. At the innermost layer of your application, you should ensure you have middleware that is guaranteed to return a response; this will prevent the default delegate from needing to execute by ensuring that the middleware queue never fully depletes. This in turn allows you to fully craft what sort of response is returned. Generally speaking, reaching the innermost middleware layer indicates that no middleware was capable of handling the request, and thus an HTTP 404 Not Found condition. To simplify such responses, we provide Mezzio\\Middleware\\NotFoundHandler , with an accompanying Mezzio\\Container\\NotFoundHandlerFactory . This middleware composes and proxies to the NotFoundDelegate detailed in the previous section, and, as such, requires that that service be present. use Mezzio\\Container; use Mezzio\\Delegate; use Mezzio\\Middleware; return [ 'factories' =&gt; [ Delegate\\NotFoundDelegate::class =&gt; Container\\NotFoundDelegateFactory::class, Middleware\\NotFoundHandler::class =&gt; Container\\NotFoundHandlerFactory::class, ], ]; When registered, you should then pipe it as the innermost layer of your application: // A basic application: $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); $app-&gt;pipe(NotFoundHandler::class);","title":"Error Handling"},{"location":"v2/features/error-handling/#error-handling","text":"We recommend that your code raise exceptions for conditions where it cannot gracefully recover. Additionally, we recommend that you have a reasonable PHP error_reporting setting that includes warnings and fatal errors: error_reporting(E_ALL &amp; ~E_USER_DEPRECATED &amp; ~E_DEPRECATED &amp; ~E_STRICT &amp; ~E_NOTICE); If you follow these guidelines, you can then write or use middleware that does the following: sets an error handler that converts PHP errors to ErrorException instances. wraps execution of the delegate ( $delegate-&gt;process() ) with a try/catch block. As an example: function ($request, DelegateInterface $delegate) { set_error_handler(function ($errno, $errstr, $errfile, $errline) { if (! (error_reporting() &amp; $errno)) { // Error is not in mask return; } throw new ErrorException($errstr, 0, $errno, $errfile, $errline); }); try { $response = $delegate-&gt;process($request); return $response; } catch (Throwable $e) { } catch (Exception $e) { } restore_error_handler(); $response = new TextResponse(sprintf( \"[%d] %s\\n\\n%s\", $e-&gt;getCode(), $e-&gt;getMessage(), $e-&gt;getTraceAsString() ), 500); } You would then pipe this as the outermost (or close to outermost) layer of your application: $app-&gt;pipe($errorMiddleware); So that you do not need to do this, we provide an error handler for you, via laminas-stratigility: Laminas\\Stratigility\\Middleware\\ErrorHandler . This implementation allows you to both: provide a response generator, invoked when an error is caught; and register listeners to trigger when errors are caught. We provide the factory Mezzio\\Container\\ErrorHandlerFactory for generating the instance; it should be mapped to the service Laminas\\Stratigility\\Middleware\\ErrorHandler . We provide two error response generators for you: Mezzio\\Middleware\\ErrorResponseGenerator , which optionally will accept a Mezzio\\Template\\TemplateRendererInterface instance, and a template name. When present, these will be used to generate response content; otherwise, a plain text response is generated that notes the request method and URI. Mezzio\\Middleware\\WhoopsErrorResponseGenerator , which uses whoops to present detailed exception and request information; this implementation is intended for development purposes. Each also has an accompanying factory for generating the instance: Mezzio\\Container\\ErrorResponseGeneratorFactory Mezzio\\Container\\WhoopsErrorResponseGeneratorFactory Map the service Mezzio\\Middleware\\ErrorResponseGenerator to one of these two factories in your configuration: use Laminas\\Stratigility\\Middleware\\ErrorHandler; use Mezzio\\Container; use Mezzio\\Middleware; return [ 'dependencies' =&gt; [ 'factories' =&gt; [ ErrorHandler::class =&gt; Container\\ErrorHandlerFactory::class, Middleware\\ErrorResponseGenerator::class =&gt; Container\\ErrorResponseGeneratorFactory::class, ], ], ];","title":"Error Handling"},{"location":"v2/features/error-handling/#listening-for-errors","text":"When errors occur, you may want to listen for them in order to provide features such as logging. Laminas\\Stratigility\\Middleware\\ErrorHandler provides the ability to do so via its attachListener() method. This method accepts a callable with the following signature: function ( Throwable|Exception $error, ServerRequestInterface $request, ResponseInterface $response ) : void The response provided is the response returned by your error response generator, allowing the listener the ability to introspect the generated response as well. As an example, you could create a logging listener as follows: namespace Acme; use Exception; use Psr\\Log\\LoggerInterface; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Throwable; class LoggingErrorListener { /** * Log format for messages: * * STATUS [METHOD] path: message */ const LOG_FORMAT = '%d [%s] %s: %s'; private $logger; public function __construct(LoggerInterface $logger) { $this-&gt;logger = $logger; } public function __invoke($error, ServerRequestInterface $request, ResponseInterface $response) { $this-&gt;logger-&gt;error(sprintf( self::LOG_FORMAT, $response-&gt;getStatusCode(), $request-&gt;getMethod(), (string) $request-&gt;getUri(), $error-&gt;getMessage() )); } } You could then use a delegator factory to create your logger listener and attach it to your error handler: namespace Acme; use Psr\\Container\\ContainerInterface; use Psr\\Log\\LoggerInterface; use Laminas\\Stratigility\\Middleware\\ErrorHandler; class LoggingErrorListenerDelegatorFactory { /** * @param ContainerInterface $container * @param string $name * @param callable $callback * @return ErrorHandler */ public function __invoke(ContainerInterface $container, $name, callable $callback) { $listener = new LoggingErrorListener($container-&gt;get(LoggerInterface::class)); $errorHandler = $callback(); $errorHandler-&gt;attachListener($listener); return $errorHandler; } }","title":"Listening for errors"},{"location":"v2/features/error-handling/#handling-more-specific-error-types","text":"You could also write more specific error handlers. As an example, you might want to catch UnauthorizedException instances specifically, and display a login page: function ($request, DelegateInterface $delegate) use ($renderer) { try { $response = $delegate-&gt;process($request); return $response; } catch (UnauthorizedException $e) { } return new HtmlResponse( $renderer-&gt;render('error::unauthorized'), 401 ); } You could then push this into a middleware pipe only when it's needed: $app-&gt;get('/dashboard', [ $unauthorizedHandlerMiddleware, $middlewareThatChecksForAuthorization, $middlewareBehindAuthorizationWall, ], 'dashboard');","title":"Handling more specific error types"},{"location":"v2/features/error-handling/#default-delegates","text":"Mezzio\\Application manages an internal middleware pipeline; when you call $delegate-&gt;process() , Application is popping off the next middleware in the queue and dispatching it. What happens when that queue is exhausted? That situation indicates an error condition: no middleware was capable of returning a response. This could either mean a problem with the request (HTTP 400 \"Bad Request\" status) or inability to route the request (HTTP 404 \"Not Found\" status). In order to report that information, Mezzio\\Application composes a \"default delegate\": a delegate it will invoke once the queue is exhausted and no response returned. By default, it uses a custom implementation, Mezzio\\Delegate\\NotFoundDelegate , which will report a 404 response, optionally using a composed template renderer to do so. We provide a factory, Mezzio\\Container\\NotFoundDelegateFactory , for creating an instance, and this should be mapped to the Mezzio\\Delegate\\NotFoundDelegate service, and aliased to the Mezzio\\Delegate\\DefaultDelegate service: use Mezzio\\Container; use Mezzio\\Delegate; return [ 'dependencies' =&gt; [ 'aliases' =&gt; [ 'Mezzio\\Delegate\\DefaultDelegate' =&gt; Delegate\\NotFoundDelegate::class, ], 'factories' =&gt; [ Delegate\\NotFoundDelegate::class =&gt; Container\\NotFoundDelegateFactory::class, ], ], ]; The factory will consume the following services: Mezzio\\Template\\TemplateRendererInterface (optional): if present, the renderer will be used to render a template for use as the response content. config (optional): if present, it will use the $config['mezzio']['error_handler']['template_404'] value as the template to use when rendering; if not provided, defaults to error::404 . If you wish to provide an alternate response status or use a canned response, you should provide your own default delegate, and expose it via the Mezzio\\Delegate\\DefaultDelegate service.","title":"Default delegates"},{"location":"v2/features/error-handling/#page-not-found","text":"Error handlers work at the outermost layer, and are used to catch exceptions and errors in your application. At the innermost layer of your application, you should ensure you have middleware that is guaranteed to return a response; this will prevent the default delegate from needing to execute by ensuring that the middleware queue never fully depletes. This in turn allows you to fully craft what sort of response is returned. Generally speaking, reaching the innermost middleware layer indicates that no middleware was capable of handling the request, and thus an HTTP 404 Not Found condition. To simplify such responses, we provide Mezzio\\Middleware\\NotFoundHandler , with an accompanying Mezzio\\Container\\NotFoundHandlerFactory . This middleware composes and proxies to the NotFoundDelegate detailed in the previous section, and, as such, requires that that service be present. use Mezzio\\Container; use Mezzio\\Delegate; use Mezzio\\Middleware; return [ 'factories' =&gt; [ Delegate\\NotFoundDelegate::class =&gt; Container\\NotFoundDelegateFactory::class, Middleware\\NotFoundHandler::class =&gt; Container\\NotFoundHandlerFactory::class, ], ]; When registered, you should then pipe it as the innermost layer of your application: // A basic application: $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); $app-&gt;pipe(NotFoundHandler::class);","title":"Page not found"},{"location":"v2/features/middleware-types/","text":"Middleware Types Mezzio allows you to compose applications out of pipeline and routed middleware. Pipeline middleware is middleware that defines the workflow of your application. These generally run on every execution of the application, and include such aspects as: Error handling Locale detection Session setup Authentication and authorization Routed middleware is middleware that responds only to specific URI paths and HTTP methods. As an example, you might want middleware that only responds to HTTP POST requests to the path /users . Mezzio allows you to define middleware using any of the following: http-interop/http-middleware instances. Callable middleware that implements the http-interop/http-middleware signature. Callable \"double-pass\" middleware (as used in Mezzio 1.X, and supported in Mezzio 2.X). Service names resolving to one of the above middleware types. Middleware pipelines expressed as arrays of the above middleware types. http-interop/http-middleware The http-interop/http-middleware project is the basis for the proposed PSR-15 specification, which covers HTTP Server Middleware that consumes PSR-7 HTTP messages. The project defines two interfaces, Interop\\Http\\ServerMiddleware\\MiddlewareInterface and Interop\\Http\\ServerMiddleware\\DelegateInterface . Mezzio accepts middleware that implements the MiddlewareInterface . As an example: use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; class SomeMiddleware implements MiddlewareInterface { public function process(ServerRequestInterface $request, DelegateInterface $delegate) { // do something and return a response, or // delegate to another handler capable of // returning a response via: // // return $delegate-&gt;process($request); } } If you are using PHP 7 or above, you could also implement such middleware via an anonymous class. Callable http-middleware Sometimes you may not want to create a class for one-off middleware. As such, Mezzio allows you to provide a PHP callable that uses the same signature as Interop\\Http\\ServerMiddleware\\MiddlewareInterface : use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; function (ServerRequestInterface $request, DelegateInterface $delegate) { // do something and return a response, or // delegate to another handler capable of // returning a response via: // // return $delegate-&gt;process($request); } One note: the $request argument does not require a typehint, and examples throughout the manual will omit the typehint when demonstrating callable middleware. Double-pass middleware Mezzio 1.X was based on Stratigility 1.X, which allowed middleware with the following signature: &lt;?php use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; function( ServerRequestInterface $request, ResponseInterface $response, callable $next ) { // Process the request and return a response, // or delegate to another process to handle // the request via: // // return $next($request, $response); } This middleware is called \"double-pass\" due to the fact that it requires both the request and response arguments. In such middleware, no typehints are required , but they are encouraged . Additionally, we encourage users to never use the provided $response argument, but instead create a concrete response to return, or manipulate the response returned by $next ; this prevents a number of potential error conditions that may otherwise occur due to incomplete or mutated response state. This middleware is still supported in Mezzio 2.X, but we encourage users to adopt http-interop/http-middleware signatures, as we will be deprecating double-pass middleware eventually. Service-based middleware We encourage the use of a dependency injection container for providing your middleware. As such, Mezzio also allows you to use service names for both pipeline and routed middleware. Generally, service names will be the specific middleware class names, but can be any valid string that resolves to a service. When Mezzio is provided a service name for middleware, it internally decorates the middleware in a Mezzio\\Middleware\\LazyLoadingMiddleware instance, allowing it to be loaded only when dispatched. Middleware pipelines Mezzio allows any pipeline or routed middleware to be self-contained middleware pipelines . To prevent the need for instantiating a Laminas\\Stratigility\\MiddlewarePipe or Mezzio\\Application instance when defining the pipeline, Mezzio allows you to provide an array of middleware: // Pipeline middleware: $app-&gt;pipe([ FirstMiddleware::class, SecondMiddleware::class, ]); // Routed middleware: $app-&gt;get([ FirstMiddleware::class, SecondMiddleware::class, ]); The values in these arrays may be any valid middleware type as defined in this chapter.","title":"Middleware Types"},{"location":"v2/features/middleware-types/#middleware-types","text":"Mezzio allows you to compose applications out of pipeline and routed middleware. Pipeline middleware is middleware that defines the workflow of your application. These generally run on every execution of the application, and include such aspects as: Error handling Locale detection Session setup Authentication and authorization Routed middleware is middleware that responds only to specific URI paths and HTTP methods. As an example, you might want middleware that only responds to HTTP POST requests to the path /users . Mezzio allows you to define middleware using any of the following: http-interop/http-middleware instances. Callable middleware that implements the http-interop/http-middleware signature. Callable \"double-pass\" middleware (as used in Mezzio 1.X, and supported in Mezzio 2.X). Service names resolving to one of the above middleware types. Middleware pipelines expressed as arrays of the above middleware types.","title":"Middleware Types"},{"location":"v2/features/middleware-types/#http-interophttp-middleware","text":"The http-interop/http-middleware project is the basis for the proposed PSR-15 specification, which covers HTTP Server Middleware that consumes PSR-7 HTTP messages. The project defines two interfaces, Interop\\Http\\ServerMiddleware\\MiddlewareInterface and Interop\\Http\\ServerMiddleware\\DelegateInterface . Mezzio accepts middleware that implements the MiddlewareInterface . As an example: use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; class SomeMiddleware implements MiddlewareInterface { public function process(ServerRequestInterface $request, DelegateInterface $delegate) { // do something and return a response, or // delegate to another handler capable of // returning a response via: // // return $delegate-&gt;process($request); } } If you are using PHP 7 or above, you could also implement such middleware via an anonymous class.","title":"http-interop/http-middleware"},{"location":"v2/features/middleware-types/#callable-http-middleware","text":"Sometimes you may not want to create a class for one-off middleware. As such, Mezzio allows you to provide a PHP callable that uses the same signature as Interop\\Http\\ServerMiddleware\\MiddlewareInterface : use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; function (ServerRequestInterface $request, DelegateInterface $delegate) { // do something and return a response, or // delegate to another handler capable of // returning a response via: // // return $delegate-&gt;process($request); } One note: the $request argument does not require a typehint, and examples throughout the manual will omit the typehint when demonstrating callable middleware.","title":"Callable http-middleware"},{"location":"v2/features/middleware-types/#double-pass-middleware","text":"Mezzio 1.X was based on Stratigility 1.X, which allowed middleware with the following signature: &lt;?php use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; function( ServerRequestInterface $request, ResponseInterface $response, callable $next ) { // Process the request and return a response, // or delegate to another process to handle // the request via: // // return $next($request, $response); } This middleware is called \"double-pass\" due to the fact that it requires both the request and response arguments. In such middleware, no typehints are required , but they are encouraged . Additionally, we encourage users to never use the provided $response argument, but instead create a concrete response to return, or manipulate the response returned by $next ; this prevents a number of potential error conditions that may otherwise occur due to incomplete or mutated response state. This middleware is still supported in Mezzio 2.X, but we encourage users to adopt http-interop/http-middleware signatures, as we will be deprecating double-pass middleware eventually.","title":"Double-pass middleware"},{"location":"v2/features/middleware-types/#service-based-middleware","text":"We encourage the use of a dependency injection container for providing your middleware. As such, Mezzio also allows you to use service names for both pipeline and routed middleware. Generally, service names will be the specific middleware class names, but can be any valid string that resolves to a service. When Mezzio is provided a service name for middleware, it internally decorates the middleware in a Mezzio\\Middleware\\LazyLoadingMiddleware instance, allowing it to be loaded only when dispatched.","title":"Service-based middleware"},{"location":"v2/features/middleware-types/#middleware-pipelines","text":"Mezzio allows any pipeline or routed middleware to be self-contained middleware pipelines . To prevent the need for instantiating a Laminas\\Stratigility\\MiddlewarePipe or Mezzio\\Application instance when defining the pipeline, Mezzio allows you to provide an array of middleware: // Pipeline middleware: $app-&gt;pipe([ FirstMiddleware::class, SecondMiddleware::class, ]); // Routed middleware: $app-&gt;get([ FirstMiddleware::class, SecondMiddleware::class, ]); The values in these arrays may be any valid middleware type as defined in this chapter.","title":"Middleware pipelines"},{"location":"v2/features/modular-applications/","text":"Modular applications Laminas+ applications have a concept of modules , independent units that can provide configuration, services, and hooks into its MVC lifecycle. This functionality is provided by laminas-modulemanager. Mezzio provides similar functionality by incorporating two packages within the default skeleton application: laminas/laminas-config-aggregator , which provides features for aggregating configuration from a variety of sources, including: PHP files globbed from the filesystem that return an array of configuration. laminas-config -compatible configuration files globbed from the filesystem. Configuration provider classes; these are invokable classes which return an array of configuration. laminas/laminas-component-installer , a Composer plugin that looks for an extra.laminas.config-provider entry in a package to install, and, if found, adds an entry for that provider to the config/config.php file (if it uses laminas-config-aggregator). These features allow you to install packages via composer and expose their configuration — which may include dependency information — to your application. Making your application modular When using the Mezzio installer via the skeleton application, the first question asked is the installation type, which includes the options: Minimal (no default middleware, templates, or assets; configuration only) Flat (flat source code structure; default selection) Modular (modular source code structure; recommended) We recommend choosing the \"Modular\" option from the outset. If you do not, you can still create and use modules in your application; however, the initial \"App\" module will not be modular. Module structure Mezzio does not force you to use any particular structure for your module; its only requirement is to expose default configuration using a \"config provider\", which is simply an invokable class that returns a configuration array. We generally recommend that a module have a PSR-4 structure, and that the module contain a src/ directory at the minimum, along with directories for other module-specific content, such as templates, tests, and assets: src/ Acme/ src/ ConfigProvider.php Container/ VerifyUserFactory.php Helper/ AuthorizationHelper.php Middleware/ VerifyUser.php templates/ verify-user.php test/ Helper/ AuthorizationHelperTest.php Middleware/ VerifyUserTest.php If you use the above structure, you would then add an entry in your composer.json file to provide autoloading: \"autoload\": { \"psr-4\": { \"Acme\\\\\": \"src/Acme/src/\" } } Don't forget to execute composer dump-autoload after making the change! Creating and enabling a module The only requirement for creating a module is that you define a \"config provider\", which is simply an invokable class that returns a configuration array. Generally, a config provider will return dependency information, and module-specific configuration: namespace Acme; class ConfigProvider { public function __invoke() { return [ 'dependencies' =&gt; $this-&gt;getDependencies(), 'acme' =&gt; [ 'some-setting' =&gt; 'default value', ], 'templates' =&gt; [ 'paths' =&gt; [ 'acme' =&gt; [__DIR__ . '/../templates'], ], ], ]; } public function getDependencies() { return [ 'invokables' =&gt; [ Helper\\AuthorizationHelper::class =&gt; Helper\\AuthorizationHelper::class, ], 'factories' =&gt; [ Middleware\\VerifyUser::class =&gt; Container\\VerifyUserFactory::class, ], ]; } } You would then add the config provider to the top (or towards the top) of your config/config.php : $aggregator = new ConfigAggregator([ Acme\\ConfigProvider::class, /* ... */ This approach allows your config/autoload/* files to take precedence over the module configuration, allowing you to override the values. Caching configuration In order to provide configuration caching, two things must occur: First, you must define a config_cache_enabled key in your configuration somewhere. Second, you must pass a second argument to the ConfigManager , the location of the cache file to use. The config_cache_enabled key can be defined in any of your configuration providers, including the autoloaded configuration files. We recommend defining them in two locations: config/autoload/global.php should define the value to true , as the production setting. config/autoload/local.php should also define the setting, and use a value appropriate to the current environment. In development, for instance, this would be false . // config/autoload/global.php return [ 'config_cache_enabled' =&gt; true, /* ... */ ]; // config/autoload/local.php return [ 'config_cache_enabled' =&gt; false, // &lt;- development! /* ... */ ]; You would then alter your config/config.php file to add the second argument. The following example builds on the previous, and demonstrates having the AppConfig entry enabled. The configuration will be cached to data/config-cache.php in the application root: $configManager = new ConfigManager([ App\\AppConfig::class, new PhpFileProvider('config/autoload/{{,*.}global,{,*.}local}.php'), ], 'data/config-cache.php'); When the configuration cache path is present, if the config_cache_enabled flag is enabled, then configuration will be read from the cached configuration, instead of parsing and merging the various configuration sources. Final notes This approach may look simple, but it is flexible and powerful: You pass a list of config providers to the ConfigAggregator constructor. Configuration is merged in the same order as it is passed, with later entries having precedence. You can override module configuration using *.global.php and *.local.php files. If cached config is found, ConfigAggregator does not iterate over provider list. For more details, please refer to the laminas-config-aggregator documentation .","title":"Modular Applications"},{"location":"v2/features/modular-applications/#modular-applications","text":"Laminas+ applications have a concept of modules , independent units that can provide configuration, services, and hooks into its MVC lifecycle. This functionality is provided by laminas-modulemanager. Mezzio provides similar functionality by incorporating two packages within the default skeleton application: laminas/laminas-config-aggregator , which provides features for aggregating configuration from a variety of sources, including: PHP files globbed from the filesystem that return an array of configuration. laminas-config -compatible configuration files globbed from the filesystem. Configuration provider classes; these are invokable classes which return an array of configuration. laminas/laminas-component-installer , a Composer plugin that looks for an extra.laminas.config-provider entry in a package to install, and, if found, adds an entry for that provider to the config/config.php file (if it uses laminas-config-aggregator). These features allow you to install packages via composer and expose their configuration — which may include dependency information — to your application.","title":"Modular applications"},{"location":"v2/features/modular-applications/#making-your-application-modular","text":"When using the Mezzio installer via the skeleton application, the first question asked is the installation type, which includes the options: Minimal (no default middleware, templates, or assets; configuration only) Flat (flat source code structure; default selection) Modular (modular source code structure; recommended) We recommend choosing the \"Modular\" option from the outset. If you do not, you can still create and use modules in your application; however, the initial \"App\" module will not be modular.","title":"Making your application modular"},{"location":"v2/features/modular-applications/#module-structure","text":"Mezzio does not force you to use any particular structure for your module; its only requirement is to expose default configuration using a \"config provider\", which is simply an invokable class that returns a configuration array. We generally recommend that a module have a PSR-4 structure, and that the module contain a src/ directory at the minimum, along with directories for other module-specific content, such as templates, tests, and assets: src/ Acme/ src/ ConfigProvider.php Container/ VerifyUserFactory.php Helper/ AuthorizationHelper.php Middleware/ VerifyUser.php templates/ verify-user.php test/ Helper/ AuthorizationHelperTest.php Middleware/ VerifyUserTest.php If you use the above structure, you would then add an entry in your composer.json file to provide autoloading: \"autoload\": { \"psr-4\": { \"Acme\\\\\": \"src/Acme/src/\" } } Don't forget to execute composer dump-autoload after making the change!","title":"Module structure"},{"location":"v2/features/modular-applications/#creating-and-enabling-a-module","text":"The only requirement for creating a module is that you define a \"config provider\", which is simply an invokable class that returns a configuration array. Generally, a config provider will return dependency information, and module-specific configuration: namespace Acme; class ConfigProvider { public function __invoke() { return [ 'dependencies' =&gt; $this-&gt;getDependencies(), 'acme' =&gt; [ 'some-setting' =&gt; 'default value', ], 'templates' =&gt; [ 'paths' =&gt; [ 'acme' =&gt; [__DIR__ . '/../templates'], ], ], ]; } public function getDependencies() { return [ 'invokables' =&gt; [ Helper\\AuthorizationHelper::class =&gt; Helper\\AuthorizationHelper::class, ], 'factories' =&gt; [ Middleware\\VerifyUser::class =&gt; Container\\VerifyUserFactory::class, ], ]; } } You would then add the config provider to the top (or towards the top) of your config/config.php : $aggregator = new ConfigAggregator([ Acme\\ConfigProvider::class, /* ... */ This approach allows your config/autoload/* files to take precedence over the module configuration, allowing you to override the values.","title":"Creating and enabling a module"},{"location":"v2/features/modular-applications/#caching-configuration","text":"In order to provide configuration caching, two things must occur: First, you must define a config_cache_enabled key in your configuration somewhere. Second, you must pass a second argument to the ConfigManager , the location of the cache file to use. The config_cache_enabled key can be defined in any of your configuration providers, including the autoloaded configuration files. We recommend defining them in two locations: config/autoload/global.php should define the value to true , as the production setting. config/autoload/local.php should also define the setting, and use a value appropriate to the current environment. In development, for instance, this would be false . // config/autoload/global.php return [ 'config_cache_enabled' =&gt; true, /* ... */ ]; // config/autoload/local.php return [ 'config_cache_enabled' =&gt; false, // &lt;- development! /* ... */ ]; You would then alter your config/config.php file to add the second argument. The following example builds on the previous, and demonstrates having the AppConfig entry enabled. The configuration will be cached to data/config-cache.php in the application root: $configManager = new ConfigManager([ App\\AppConfig::class, new PhpFileProvider('config/autoload/{{,*.}global,{,*.}local}.php'), ], 'data/config-cache.php'); When the configuration cache path is present, if the config_cache_enabled flag is enabled, then configuration will be read from the cached configuration, instead of parsing and merging the various configuration sources.","title":"Caching configuration"},{"location":"v2/features/modular-applications/#final-notes","text":"This approach may look simple, but it is flexible and powerful: You pass a list of config providers to the ConfigAggregator constructor. Configuration is merged in the same order as it is passed, with later entries having precedence. You can override module configuration using *.global.php and *.local.php files. If cached config is found, ConfigAggregator does not iterate over provider list. For more details, please refer to the laminas-config-aggregator documentation .","title":"Final notes"},{"location":"v2/features/container/aura-di/","text":"Using Aura.Di Aura.Di provides a serializable dependency injection container with the following features: constructor and setter injection. inheritance of constructor parameter and setter method values from parent classes. inheritance of setter method values from interfaces and traits. lazy-loaded instances, services, includes/requires, and values. instance factories. optional auto-resolution of typehinted constructor parameter values. Installing Aura.Di Aura.Di implements PSR-11 as of version 3. $ composer require aura/di Configuration Aura.Di can help you to organize your code better with ContainerConfig classes and two step configuration . In this example, we'll put that in config/container.php : &lt;?php use Aura\\Di\\ContainerBuilder; $containerBuilder = new ContainerBuilder(); // Use the builder to create and configure a container using an array of // ContainerConfig classes. Make sure the classes can be autoloaded! return $containerBuilder-&gt;newConfiguredInstance([ 'Application\\Config\\Common', ]); The bare minimum ContainerConfig code needed to make mezzio work is: &lt;?php // In src/Config/Common.php: namespace Application\\Config; use Aura\\Di\\Container; use Aura\\Di\\ContainerConfig; use Aura\\Router\\Generator; use Aura\\Router\\RouteCollection; use Aura\\Router\\RouteFactory; use Aura\\Router\\Router; use Laminas\\Escaper\\Escaper; use Mezzio\\Application; use Mezzio\\Container as MezzioContainer; use Mezzio\\Delegate; use Mezzio\\Middleware; use Mezzio\\Plates\\PlatesRenderer; use Mezzio\\Router\\AuraRouter; use Mezzio\\Router\\Route; use Mezzio\\Router\\RouterInterface; use Mezzio\\Template\\TemplateRendererInterface; class Common extends ContainerConfig { public function define(Container $di) { $di-&gt;params[RouteCollection::class] = array( 'route_factory' =&gt; $di-&gt;lazyNew(RouteFactory::class), ); $di-&gt;params[Router::class] = array( 'routes' =&gt; $di-&gt;lazyNew(RouteCollection::class), 'generator' =&gt; $di-&gt;lazyNew(Generator::class), ); $di-&gt;params[AuraRouter::class]['router'] = $di-&gt;lazyNew(Router::class); $di-&gt;set(RouterInterface::class, $di-&gt;lazyNew(AuraRouter::class)); $di-&gt;set(MezzioContainer\\NotFoundDelegateFactory::class, $di-&gt;lazyNew(MezzioContainer\\NotFoundDelegateFactory::class)); $di-&gt;set(Delegate\\NotFoundDelegate::class, $di-&gt;lazyGetCall(MezzioContainer\\NotFoundDelegateFactory::class, '__invoke', $di)); $di-&gt;set('Mezzio\\Delegate\\DefaultDelegate', $di-&gt;lazyGetCall(MezzioContainer\\NotFoundDelegateFactory::class, '__invoke', $di)); $di-&gt;set(MezzioContainer\\ApplicationFactory::class, $di-&gt;lazyNew(MezzioContainer\\ApplicationFactory::class)); $di-&gt;set(Application::class, $di-&gt;lazyGetCall(MezzioContainer\\ApplicationFactory::class, '__invoke', $di)); // Not Found handler $di-&gt;set(Middleware\\NotFoundHandler::class, $di-&gt;lazyGetCall(MezzioContainer\\NotFoundHandlerFactory::class, '__invoke', $di)); // Templating // In most cases, you can instantiate the template renderer you want to use // without using a factory: $di-&gt;set(TemplateRendererInterface::class, $di-&gt;lazyNew(PlatesRenderer::class)); // These next two can be added in any environment; they won't be used unless // you add the WhoopsErrorResponseGenerator as the ErrorResponseGenerator implementation: $di-&gt;set(MezzioContainer\\WhoopsFactory::class, $di-&gt;lazyNew(MezzioContainer\\WhoopsFactory::class)); $di-&gt;set('Mezzio\\Whoops', $di-&gt;lazyGetCall(MezzioContainer\\WhoopsFactory::class, '__invoke', $di)); $di-&gt;set(MezzioContainer\\WhoopsPageHandlerFactory::class, $di-&gt;lazyNew(MezzioContainer\\WhoopsPageHandlerFactory::class)); $di-&gt;set('Mezzio\\WhoopsPageHandler', $di-&gt;lazyGetCall(MezzioContainer\\WhoopsPageHandlerFactory::class, '__invoke', $di)); // Error Handling $di-&gt;set('Laminas\\Stratigility\\Middleware\\ErrorHandler', $di-&gt;lazyGetCall(MezzioContainer\\ErrorHandlerFactory::class, '__invoke', $di)); // If in development: $di-&gt;set(MezzioContainer\\WhoopsErrorResponseGeneratorFactory::class, $di-&gt;lazyNew(MezzioContainer\\WhoopsErrorResponseGeneratorFactory::class)); $di-&gt;set(Middleware\\ErrorResponseGenerator::class, $di-&gt;lazyGetCall(MezzioContainer\\WhoopsErrorResponseGeneratorFactory::class, '__invoke', $di)); // If in production: // $di-&gt;set(Middleware\\ErrorResponseGenerator::class, $di-&gt;lazyGetCall(MezzioContainer\\ErrorResponseGeneratorFactory::class, '__invoke', $di)); } public function modify(Container $di) { /* $router = $di-&gt;get(RouterInterface::class); $router-&gt;addRoute(new Route('/hello/{name}', function ($request, $response, $next) { $escaper = new Escaper(); $name = $request-&gt;getAttribute('name', 'World'); $response-&gt;getBody()-&gt;write('Hello ' . $escaper-&gt;escapeHtml($name)); return $response; }, Route::HTTP_METHOD_ANY, 'hello')); */ } } Your bootstrap (typically public/index.php ) will then look like this: chdir(dirname(__DIR__)); require 'vendor/autoload.php'; $container = require 'config/container.php'; $app = $container-&gt;get(Mezzio\\Application::class); require 'config/pipeline.php'; require 'config/routes.php'; $app-&gt;run();","title":"Using Aura.Di"},{"location":"v2/features/container/aura-di/#using-auradi","text":"Aura.Di provides a serializable dependency injection container with the following features: constructor and setter injection. inheritance of constructor parameter and setter method values from parent classes. inheritance of setter method values from interfaces and traits. lazy-loaded instances, services, includes/requires, and values. instance factories. optional auto-resolution of typehinted constructor parameter values.","title":"Using Aura.Di"},{"location":"v2/features/container/aura-di/#installing-auradi","text":"Aura.Di implements PSR-11 as of version 3. $ composer require aura/di","title":"Installing Aura.Di"},{"location":"v2/features/container/aura-di/#configuration","text":"Aura.Di can help you to organize your code better with ContainerConfig classes and two step configuration . In this example, we'll put that in config/container.php : &lt;?php use Aura\\Di\\ContainerBuilder; $containerBuilder = new ContainerBuilder(); // Use the builder to create and configure a container using an array of // ContainerConfig classes. Make sure the classes can be autoloaded! return $containerBuilder-&gt;newConfiguredInstance([ 'Application\\Config\\Common', ]); The bare minimum ContainerConfig code needed to make mezzio work is: &lt;?php // In src/Config/Common.php: namespace Application\\Config; use Aura\\Di\\Container; use Aura\\Di\\ContainerConfig; use Aura\\Router\\Generator; use Aura\\Router\\RouteCollection; use Aura\\Router\\RouteFactory; use Aura\\Router\\Router; use Laminas\\Escaper\\Escaper; use Mezzio\\Application; use Mezzio\\Container as MezzioContainer; use Mezzio\\Delegate; use Mezzio\\Middleware; use Mezzio\\Plates\\PlatesRenderer; use Mezzio\\Router\\AuraRouter; use Mezzio\\Router\\Route; use Mezzio\\Router\\RouterInterface; use Mezzio\\Template\\TemplateRendererInterface; class Common extends ContainerConfig { public function define(Container $di) { $di-&gt;params[RouteCollection::class] = array( 'route_factory' =&gt; $di-&gt;lazyNew(RouteFactory::class), ); $di-&gt;params[Router::class] = array( 'routes' =&gt; $di-&gt;lazyNew(RouteCollection::class), 'generator' =&gt; $di-&gt;lazyNew(Generator::class), ); $di-&gt;params[AuraRouter::class]['router'] = $di-&gt;lazyNew(Router::class); $di-&gt;set(RouterInterface::class, $di-&gt;lazyNew(AuraRouter::class)); $di-&gt;set(MezzioContainer\\NotFoundDelegateFactory::class, $di-&gt;lazyNew(MezzioContainer\\NotFoundDelegateFactory::class)); $di-&gt;set(Delegate\\NotFoundDelegate::class, $di-&gt;lazyGetCall(MezzioContainer\\NotFoundDelegateFactory::class, '__invoke', $di)); $di-&gt;set('Mezzio\\Delegate\\DefaultDelegate', $di-&gt;lazyGetCall(MezzioContainer\\NotFoundDelegateFactory::class, '__invoke', $di)); $di-&gt;set(MezzioContainer\\ApplicationFactory::class, $di-&gt;lazyNew(MezzioContainer\\ApplicationFactory::class)); $di-&gt;set(Application::class, $di-&gt;lazyGetCall(MezzioContainer\\ApplicationFactory::class, '__invoke', $di)); // Not Found handler $di-&gt;set(Middleware\\NotFoundHandler::class, $di-&gt;lazyGetCall(MezzioContainer\\NotFoundHandlerFactory::class, '__invoke', $di)); // Templating // In most cases, you can instantiate the template renderer you want to use // without using a factory: $di-&gt;set(TemplateRendererInterface::class, $di-&gt;lazyNew(PlatesRenderer::class)); // These next two can be added in any environment; they won't be used unless // you add the WhoopsErrorResponseGenerator as the ErrorResponseGenerator implementation: $di-&gt;set(MezzioContainer\\WhoopsFactory::class, $di-&gt;lazyNew(MezzioContainer\\WhoopsFactory::class)); $di-&gt;set('Mezzio\\Whoops', $di-&gt;lazyGetCall(MezzioContainer\\WhoopsFactory::class, '__invoke', $di)); $di-&gt;set(MezzioContainer\\WhoopsPageHandlerFactory::class, $di-&gt;lazyNew(MezzioContainer\\WhoopsPageHandlerFactory::class)); $di-&gt;set('Mezzio\\WhoopsPageHandler', $di-&gt;lazyGetCall(MezzioContainer\\WhoopsPageHandlerFactory::class, '__invoke', $di)); // Error Handling $di-&gt;set('Laminas\\Stratigility\\Middleware\\ErrorHandler', $di-&gt;lazyGetCall(MezzioContainer\\ErrorHandlerFactory::class, '__invoke', $di)); // If in development: $di-&gt;set(MezzioContainer\\WhoopsErrorResponseGeneratorFactory::class, $di-&gt;lazyNew(MezzioContainer\\WhoopsErrorResponseGeneratorFactory::class)); $di-&gt;set(Middleware\\ErrorResponseGenerator::class, $di-&gt;lazyGetCall(MezzioContainer\\WhoopsErrorResponseGeneratorFactory::class, '__invoke', $di)); // If in production: // $di-&gt;set(Middleware\\ErrorResponseGenerator::class, $di-&gt;lazyGetCall(MezzioContainer\\ErrorResponseGeneratorFactory::class, '__invoke', $di)); } public function modify(Container $di) { /* $router = $di-&gt;get(RouterInterface::class); $router-&gt;addRoute(new Route('/hello/{name}', function ($request, $response, $next) { $escaper = new Escaper(); $name = $request-&gt;getAttribute('name', 'World'); $response-&gt;getBody()-&gt;write('Hello ' . $escaper-&gt;escapeHtml($name)); return $response; }, Route::HTTP_METHOD_ANY, 'hello')); */ } } Your bootstrap (typically public/index.php ) will then look like this: chdir(dirname(__DIR__)); require 'vendor/autoload.php'; $container = require 'config/container.php'; $app = $container-&gt;get(Mezzio\\Application::class); require 'config/pipeline.php'; require 'config/routes.php'; $app-&gt;run();","title":"Configuration"},{"location":"v2/features/container/delegator-factories/","text":"Delegator Factories Mezzio supports the concept of delegator factories , which allow decoration of services created by your dependency injection container, across all dependency injection containers supported by Mezzio. Delegator factories accept the following arguments: The container itself; The name of the service whose creation is being decorated; A callback that will produce the service being decorated. As an example, let's say we have a UserRepository class that composes some sort of event manager. We might want to attach listeners to that event manager, but not wish to alter the basic creation logic for the repository itself. As such, we might write a delegator factory as follows: namespace Acme; use Psr\\Container\\ContainerInterface; use Psr\\Log\\LoggerInterface; class UserRepositoryListenerDelegatorFactory { /** * @param ContainerInterface $container * @param string $name * @param callable $callback * @return UserRepository */ public function __invoke(ContainerInterface $container, $name, callable $callback) { $listener = new LoggerListener($container-&gt;get(LoggerInterface::class)); $repository = $callback(); $repository-&gt;getEventManager()-&gt;attach($listener); return $repository; } } To notify the container about this delegator factory, we would add the following configuration to our application: 'dependencies' =&gt; [ 'delegators' =&gt; [ Acme\\UserRepository::class =&gt; [ Acme\\UserRepositoryListenerDelegatorFactory::class, ], ], ], Note that you specify delegator factories using the service name being decorated as the key, with an array of delegator factories as a value. You may attach multiple delegator factories to any given service , which can be a very powerful feature. At the time of writing, this feature works for each of the Aura.Di, Pimple, and laminas-servicemanager container implementations. Delegator factories have been supported with Pimple and laminas-servicemanager since the 1.X series.","title":"Delegator Factories"},{"location":"v2/features/container/delegator-factories/#delegator-factories","text":"Mezzio supports the concept of delegator factories , which allow decoration of services created by your dependency injection container, across all dependency injection containers supported by Mezzio. Delegator factories accept the following arguments: The container itself; The name of the service whose creation is being decorated; A callback that will produce the service being decorated. As an example, let's say we have a UserRepository class that composes some sort of event manager. We might want to attach listeners to that event manager, but not wish to alter the basic creation logic for the repository itself. As such, we might write a delegator factory as follows: namespace Acme; use Psr\\Container\\ContainerInterface; use Psr\\Log\\LoggerInterface; class UserRepositoryListenerDelegatorFactory { /** * @param ContainerInterface $container * @param string $name * @param callable $callback * @return UserRepository */ public function __invoke(ContainerInterface $container, $name, callable $callback) { $listener = new LoggerListener($container-&gt;get(LoggerInterface::class)); $repository = $callback(); $repository-&gt;getEventManager()-&gt;attach($listener); return $repository; } } To notify the container about this delegator factory, we would add the following configuration to our application: 'dependencies' =&gt; [ 'delegators' =&gt; [ Acme\\UserRepository::class =&gt; [ Acme\\UserRepositoryListenerDelegatorFactory::class, ], ], ], Note that you specify delegator factories using the service name being decorated as the key, with an array of delegator factories as a value. You may attach multiple delegator factories to any given service , which can be a very powerful feature. At the time of writing, this feature works for each of the Aura.Di, Pimple, and laminas-servicemanager container implementations. Delegator factories have been supported with Pimple and laminas-servicemanager since the 1.X series.","title":"Delegator Factories"},{"location":"v2/features/container/factories/","text":"Provided Factories Mezzio provides several factories compatible with PSR-11 Container to facilitate setting up common dependencies. The following is a list of provided containers, what they will create, the suggested service name, and any additional dependencies they may require. All factories, unless noted otherwise, are in the Mezzio\\Container namespace, and define an __invoke() method that accepts an Psr\\Container\\ContainerInterface instance as the sole argument. ApplicationFactory Provides : Mezzio\\Application Suggested Name : Mezzio\\Application Requires : no additional services are required. Optional : Mezzio\\Router\\RouterInterface . When provided, the service will be used to construct the Application instance; otherwise, an FastRoute router implementation will be used. Mezzio\\Delegate\\DefaultDelegate . This should return an Interop\\Http\\ServerMiddleware\\DelegateInterface instance to process when the middleware pipeline is exhausted without returning a response; by default, this will be a Mezzio\\Delegate\\NotFoundDelegate instance. Laminas\\Diactoros\\Response\\EmitterInterface . If none is provided, an instance of Mezzio\\Emitter\\EmitterStack composing a Laminas\\Diactoros\\Response\\SapiEmitter instance will be used. config , an array or ArrayAccess instance. This may be used to seed the application instance with pipeline middleware and/or routed middleware (see more below). Additionally, the container instance itself is injected into the Application instance. When the config service is present, the factory can utilize several keys in order to seed the Application instance: programmatic_pipeline (bool) (Since 1.1.0): when enabled, middleware_pipeline and routes configuration are ignored, and the factory will assume that these are injected programmatically elsewhere. raise_throwables (bool) (Since 1.1.0; obsolete as of 2.0.0): when enabled, this flag will prevent the Stratigility middleware dispatcher from catching exceptions, and instead allow them to bubble outwards. middleware_pipeline can be used to seed the middleware pipeline: 'middleware_pipeline' =&gt; [ // An array of middleware to register. [ /* ... */ ], // Mezzio 1.0: Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, // Mezzio 1.1 and above (above constants will still work, though): Mezzio\\Application::ROUTING_MIDDLEWARE, Mezzio\\Application::DISPATCH_MIDDLEWARE, [ /* ... */ ], ], Each item of the array, other than the entries for routing and dispatch middleware, must be an array itself, with the following structure: [ // required: 'middleware' =&gt; 'Name of middleware service, valid middleware, or an array of these', // optional: 'path' =&gt; '/path/to/match', 'priority' =&gt; 1, // Integer // optional under Mezzio 1.X; ignored under 2.X: 'error' =&gt; false, // boolean ], The middleware key itself is the middleware to execute, and must be a service name resolving to valid middleware, middleware instances (either http-interop middleware or callable double-pass middleware), or an array of these values. If an array is provided, the specified middleware will be composed into a Laminas\\Stratigility\\MiddlewarePipe instance. If the path key is present, that key will be used to segregate the middleware to a specific matched path (in other words, it will not execute if the path is not matched). The priority defaults to 1, and follows the semantics of SplPriorityQueue : higher integer values indicate higher priority (will execute earlier), while lower/negative integer values indicate lower priority (will execute last). Default priority is 1; use granular priority values to specify the order in which middleware should be piped to the application. You can specify keys for each middleware specification. These will be ignored by the factory, but can be useful when merging several configurations into one for the application. Under Mezzio 1.X, if the error key is present and boolean true , then the middleware will be registered as error middleware. (This is necessary due to the fact that the factory defines a callable wrapper around middleware to enable lazy-loading of middleware.) We recommend not using this feature; see the chapter on error handling for details. routes is used to define routed middleware. The value must be an array, consisting of arrays defining each middleware: 'routes' =&gt; [ [ 'path' =&gt; '/path/to/match', 'middleware' =&gt; 'Middleware service name, valid middleware, or array of these values', 'allowed_methods' =&gt; ['GET', 'POST', 'PATCH'], 'options' =&gt; [ 'stuff' =&gt; 'to', 'pass' =&gt; 'to', 'the' =&gt; 'underlying router', ], ], // etc. ], Each route requires : - `path`: the path to match. Format will be based on the router you choose for your project. - `middleware`: a service name resolving to valid middleware, valid middleware (either http-interop middleware or callable double-pass middleware), or an array of such values (which will be composed into a `Laminas\\Stratigility\\MiddlewarePipe` instance); this middleware will be dispatched when the route matches. Optionally, the route definition may provide: - `allowed_methods`: an array of allowed HTTP methods. If not provided, the application assumes any method is allowed. - `name`: if not provided, the path will be used as the route name (and, if specific HTTP methods are allowed, a list of those). - `options`: a key/value set of additional options to pass to the underlying router implementation for the given route. (Typical use cases include passing constraints or default values.) ErrorHandlerFactory Provides : Laminas\\Stratigility\\Middleware\\ErrorHandler Suggested Name : Laminas\\Stratigility\\Middleware\\ErrorHandler Requires : no additional services are required. Optional : Mezzio\\Middleware\\ErrorResponseGenerator . If not provided, the error handler will not compose an error response generator, making it largely useless other than to provide an empty response. ErrorResponseGeneratorFactory Provides : Mezzio\\Middleware\\ErrorResponseGenerator Suggested Name : Laminas\\Stratigility\\Middleware\\ErrorResponseGenerator Requires : no additional services are required. Optional : Mezzio\\Template\\TemplateRendererInterface . If not provided, the error response generator will provide a plain text response instead of a templated one. config , an array or ArrayAccess instance. This will be used to seed the ErrorResponseGenerator instance with a template name to use for errors (see more below), and/or a \"debug\" flag value. When the config service is present, the factory can utilize two values: debug , a flag indicating whether or not to provide debug information when creating an error response. mezzio.error_handler.template_error , a name of an alternate template to use (instead of the default represented in the Mezzio\\Middleware\\ErrorResponseGenerator::TEMPLATE_DEFAULT constant). As an example: 'debug' =&gt; true, 'mezzio' =&gt; [ 'error_handler' =&gt; [ 'template_error' =&gt; 'name of error template', ], ], NotFoundDelegateFactory Provides : Mezzio\\Delegate\\NotFoundDelegate Suggested Name : Mezzio\\Delegate\\NotFoundDelegate , and aliased to Mezzio\\Delegate\\DefaultDelegate . Requires : no additional services are required. Optional : Mezzio\\Template\\TemplateRendererInterface . If not provided, the delegate will provide a plain text response instead of a templated one. config , an array or ArrayAccess instance. This will be used to seed the NotFoundDelegate instance with a template name to use. When the config service is present, the factory can utilize two values: mezzio.error_handler.template_404 , a name of an alternate template to use (instead of the default represented in the Mezzio\\Delegate\\NotFoundDelegate::TEMPLATE_DEFAULT constant). As an example: 'mezzio' =&gt; [ 'error_handler' =&gt; [ 'template_404' =&gt; 'name of 404 template', ], ], NotFoundHandlerFactory Provides : Mezzio\\Middleware\\NotFoundHandler Suggested Name : Mezzio\\Middleware\\NotFoundHandler Requires : Mezzio\\Delegate\\DefaultDelegate WhoopsErrorResponseGeneratorFactory Provides : Mezzio\\Middleware\\WhoopsErrorResponseGenerator Suggested Name : Mezzio\\Middleware\\ErrorResponseGenerator Requires : Mezzio\\Whoops (see WhoopsFactory , below) WhoopsFactory Provides : Whoops\\Run Suggested Name : Mezzio\\Whoops Requires : Mezzio\\WhoopsPageHandler Optional : config , an array or ArrayAccess instance. This will be used to seed additional page handlers, specifically the JsonResponseHandler (see more below). This factory creates and configures a Whoops\\Run instance so that it will work properly with Mezzio\\Application ; this includes disabling immediate write-to-output, disabling immediate quit, etc. The PrettyPageHandler returned for the Mezzio\\WhoopsPageHandler service will be injected. It consumes the following config structure: 'whoops' =&gt; [ 'json_exceptions' =&gt; [ 'display' =&gt; true, 'show_trace' =&gt; true, 'ajax_only' =&gt; true, ], ], If no whoops top-level key is present in the configuration, a default instance with no JsonResponseHandler composed will be created. WhoopsPageHandlerFactory Provides : Whoops\\Handler\\PrettyPageHandler Suggested Name : Mezzio\\WhoopsPageHandler Optional : config , an array or ArrayAccess instance. This will be used to further configure the PrettyPageHandler instance, specifically with editor configuration (for linking files such that they open in the configured editor). It consumes the following config structure: 'whoops' =&gt; [ 'editor' =&gt; 'editor name, editor service name, or callable', ], The editor value must be a known editor name (see the Whoops documentation for pre-configured editor types), a callable, or a service name to use. PlatesRendererFactory Provides : Mezzio\\Plates\\PlatesRenderer FactoryName : Mezzio\\Plates\\PlatesRendererFactory Suggested Name : Mezzio\\Template\\TemplateRendererInterface Requires : no additional services are required. Optional : config , an array or ArrayAccess instance. This will be used to further configure the Plates instance, specifically with the filename extension to use, and paths to inject. It consumes the following config structure: 'templates' =&gt; [ 'extension' =&gt; 'file extension used by templates; defaults to html', 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ] One note: Due to a limitation in the Plates engine, you can only map one path per namespace when using Plates. TwigRendererFactory Provides : Mezzio\\Twig\\TwigRenderer FactoryName : Mezzio\\Twig\\TwigRendererFactory Suggested Name : Mezzio\\Template\\TemplateRendererInterface Requires : no additional services are required. Optional : Mezzio\\Router\\RouterInterface ; if found, it will be used to seed a Mezzio\\Twig\\TwigExtension instance for purposes of rendering application URLs. config , an array or ArrayAccess instance. This will be used to further configure the Twig instance, specifically with the filename extension, paths to assets (and default asset version to use), and template paths to inject. It consumes the following config structure: 'debug' =&gt; boolean, 'templates' =&gt; [ 'cache_dir' =&gt; 'path to cached templates', 'assets_url' =&gt; 'base URL for assets', 'assets_version' =&gt; 'base version for assets', 'extension' =&gt; 'file extension used by templates; defaults to html.twig', 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ] When debug is true, it disables caching, enables debug mode, enables strict variables, and enables auto reloading. The assets_* values are used to seed the TwigExtension instance (assuming the router was found). LaminasViewRendererFactory Provides : Mezzio\\LaminasView\\LaminasViewRenderer FactoryName : Mezzio\\LaminasView\\LaminasViewRendererFactory Suggested Name : Mezzio\\Template\\TemplateRendererInterface Requires : no additional services are required. Mezzio\\Router\\RouterInterface , in order to inject the custom url helper implementation. Optional : config , an array or ArrayAccess instance. This will be used to further configure the LaminasView instance, specifically with the layout template name, entries for a TemplateMapResolver , and template paths to inject. Laminas\\View\\HelperPluginManager ; if present, will be used to inject the PhpRenderer instance. It consumes the following config structure: 'templates' =&gt; [ 'layout' =&gt; 'name of layout view to use, if any', 'map' =&gt; [ // template =&gt; filename pairs ], 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ] When creating the PhpRenderer instance, it will inject it with a Laminas\\View\\HelperPluginManager instance (either pulled from the container, or instantiated directly). It injects the helper plugin manager with custom url and serverurl helpers, Mezzio\\LaminasView\\UrlHelper and Mezzio\\LaminasView\\ServerUrlHelper , respetively.","title":"Container Factories"},{"location":"v2/features/container/factories/#provided-factories","text":"Mezzio provides several factories compatible with PSR-11 Container to facilitate setting up common dependencies. The following is a list of provided containers, what they will create, the suggested service name, and any additional dependencies they may require. All factories, unless noted otherwise, are in the Mezzio\\Container namespace, and define an __invoke() method that accepts an Psr\\Container\\ContainerInterface instance as the sole argument.","title":"Provided Factories"},{"location":"v2/features/container/factories/#applicationfactory","text":"Provides : Mezzio\\Application Suggested Name : Mezzio\\Application Requires : no additional services are required. Optional : Mezzio\\Router\\RouterInterface . When provided, the service will be used to construct the Application instance; otherwise, an FastRoute router implementation will be used. Mezzio\\Delegate\\DefaultDelegate . This should return an Interop\\Http\\ServerMiddleware\\DelegateInterface instance to process when the middleware pipeline is exhausted without returning a response; by default, this will be a Mezzio\\Delegate\\NotFoundDelegate instance. Laminas\\Diactoros\\Response\\EmitterInterface . If none is provided, an instance of Mezzio\\Emitter\\EmitterStack composing a Laminas\\Diactoros\\Response\\SapiEmitter instance will be used. config , an array or ArrayAccess instance. This may be used to seed the application instance with pipeline middleware and/or routed middleware (see more below). Additionally, the container instance itself is injected into the Application instance. When the config service is present, the factory can utilize several keys in order to seed the Application instance: programmatic_pipeline (bool) (Since 1.1.0): when enabled, middleware_pipeline and routes configuration are ignored, and the factory will assume that these are injected programmatically elsewhere. raise_throwables (bool) (Since 1.1.0; obsolete as of 2.0.0): when enabled, this flag will prevent the Stratigility middleware dispatcher from catching exceptions, and instead allow them to bubble outwards. middleware_pipeline can be used to seed the middleware pipeline: 'middleware_pipeline' =&gt; [ // An array of middleware to register. [ /* ... */ ], // Mezzio 1.0: Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, // Mezzio 1.1 and above (above constants will still work, though): Mezzio\\Application::ROUTING_MIDDLEWARE, Mezzio\\Application::DISPATCH_MIDDLEWARE, [ /* ... */ ], ], Each item of the array, other than the entries for routing and dispatch middleware, must be an array itself, with the following structure: [ // required: 'middleware' =&gt; 'Name of middleware service, valid middleware, or an array of these', // optional: 'path' =&gt; '/path/to/match', 'priority' =&gt; 1, // Integer // optional under Mezzio 1.X; ignored under 2.X: 'error' =&gt; false, // boolean ], The middleware key itself is the middleware to execute, and must be a service name resolving to valid middleware, middleware instances (either http-interop middleware or callable double-pass middleware), or an array of these values. If an array is provided, the specified middleware will be composed into a Laminas\\Stratigility\\MiddlewarePipe instance. If the path key is present, that key will be used to segregate the middleware to a specific matched path (in other words, it will not execute if the path is not matched). The priority defaults to 1, and follows the semantics of SplPriorityQueue : higher integer values indicate higher priority (will execute earlier), while lower/negative integer values indicate lower priority (will execute last). Default priority is 1; use granular priority values to specify the order in which middleware should be piped to the application. You can specify keys for each middleware specification. These will be ignored by the factory, but can be useful when merging several configurations into one for the application. Under Mezzio 1.X, if the error key is present and boolean true , then the middleware will be registered as error middleware. (This is necessary due to the fact that the factory defines a callable wrapper around middleware to enable lazy-loading of middleware.) We recommend not using this feature; see the chapter on error handling for details. routes is used to define routed middleware. The value must be an array, consisting of arrays defining each middleware: 'routes' =&gt; [ [ 'path' =&gt; '/path/to/match', 'middleware' =&gt; 'Middleware service name, valid middleware, or array of these values', 'allowed_methods' =&gt; ['GET', 'POST', 'PATCH'], 'options' =&gt; [ 'stuff' =&gt; 'to', 'pass' =&gt; 'to', 'the' =&gt; 'underlying router', ], ], // etc. ], Each route requires : - `path`: the path to match. Format will be based on the router you choose for your project. - `middleware`: a service name resolving to valid middleware, valid middleware (either http-interop middleware or callable double-pass middleware), or an array of such values (which will be composed into a `Laminas\\Stratigility\\MiddlewarePipe` instance); this middleware will be dispatched when the route matches. Optionally, the route definition may provide: - `allowed_methods`: an array of allowed HTTP methods. If not provided, the application assumes any method is allowed. - `name`: if not provided, the path will be used as the route name (and, if specific HTTP methods are allowed, a list of those). - `options`: a key/value set of additional options to pass to the underlying router implementation for the given route. (Typical use cases include passing constraints or default values.)","title":"ApplicationFactory"},{"location":"v2/features/container/factories/#errorhandlerfactory","text":"Provides : Laminas\\Stratigility\\Middleware\\ErrorHandler Suggested Name : Laminas\\Stratigility\\Middleware\\ErrorHandler Requires : no additional services are required. Optional : Mezzio\\Middleware\\ErrorResponseGenerator . If not provided, the error handler will not compose an error response generator, making it largely useless other than to provide an empty response.","title":"ErrorHandlerFactory"},{"location":"v2/features/container/factories/#errorresponsegeneratorfactory","text":"Provides : Mezzio\\Middleware\\ErrorResponseGenerator Suggested Name : Laminas\\Stratigility\\Middleware\\ErrorResponseGenerator Requires : no additional services are required. Optional : Mezzio\\Template\\TemplateRendererInterface . If not provided, the error response generator will provide a plain text response instead of a templated one. config , an array or ArrayAccess instance. This will be used to seed the ErrorResponseGenerator instance with a template name to use for errors (see more below), and/or a \"debug\" flag value. When the config service is present, the factory can utilize two values: debug , a flag indicating whether or not to provide debug information when creating an error response. mezzio.error_handler.template_error , a name of an alternate template to use (instead of the default represented in the Mezzio\\Middleware\\ErrorResponseGenerator::TEMPLATE_DEFAULT constant). As an example: 'debug' =&gt; true, 'mezzio' =&gt; [ 'error_handler' =&gt; [ 'template_error' =&gt; 'name of error template', ], ],","title":"ErrorResponseGeneratorFactory"},{"location":"v2/features/container/factories/#notfounddelegatefactory","text":"Provides : Mezzio\\Delegate\\NotFoundDelegate Suggested Name : Mezzio\\Delegate\\NotFoundDelegate , and aliased to Mezzio\\Delegate\\DefaultDelegate . Requires : no additional services are required. Optional : Mezzio\\Template\\TemplateRendererInterface . If not provided, the delegate will provide a plain text response instead of a templated one. config , an array or ArrayAccess instance. This will be used to seed the NotFoundDelegate instance with a template name to use. When the config service is present, the factory can utilize two values: mezzio.error_handler.template_404 , a name of an alternate template to use (instead of the default represented in the Mezzio\\Delegate\\NotFoundDelegate::TEMPLATE_DEFAULT constant). As an example: 'mezzio' =&gt; [ 'error_handler' =&gt; [ 'template_404' =&gt; 'name of 404 template', ], ],","title":"NotFoundDelegateFactory"},{"location":"v2/features/container/factories/#notfoundhandlerfactory","text":"Provides : Mezzio\\Middleware\\NotFoundHandler Suggested Name : Mezzio\\Middleware\\NotFoundHandler Requires : Mezzio\\Delegate\\DefaultDelegate","title":"NotFoundHandlerFactory"},{"location":"v2/features/container/factories/#whoopserrorresponsegeneratorfactory","text":"Provides : Mezzio\\Middleware\\WhoopsErrorResponseGenerator Suggested Name : Mezzio\\Middleware\\ErrorResponseGenerator Requires : Mezzio\\Whoops (see WhoopsFactory , below)","title":"WhoopsErrorResponseGeneratorFactory"},{"location":"v2/features/container/factories/#whoopsfactory","text":"Provides : Whoops\\Run Suggested Name : Mezzio\\Whoops Requires : Mezzio\\WhoopsPageHandler Optional : config , an array or ArrayAccess instance. This will be used to seed additional page handlers, specifically the JsonResponseHandler (see more below). This factory creates and configures a Whoops\\Run instance so that it will work properly with Mezzio\\Application ; this includes disabling immediate write-to-output, disabling immediate quit, etc. The PrettyPageHandler returned for the Mezzio\\WhoopsPageHandler service will be injected. It consumes the following config structure: 'whoops' =&gt; [ 'json_exceptions' =&gt; [ 'display' =&gt; true, 'show_trace' =&gt; true, 'ajax_only' =&gt; true, ], ], If no whoops top-level key is present in the configuration, a default instance with no JsonResponseHandler composed will be created.","title":"WhoopsFactory"},{"location":"v2/features/container/factories/#whoopspagehandlerfactory","text":"Provides : Whoops\\Handler\\PrettyPageHandler Suggested Name : Mezzio\\WhoopsPageHandler Optional : config , an array or ArrayAccess instance. This will be used to further configure the PrettyPageHandler instance, specifically with editor configuration (for linking files such that they open in the configured editor). It consumes the following config structure: 'whoops' =&gt; [ 'editor' =&gt; 'editor name, editor service name, or callable', ], The editor value must be a known editor name (see the Whoops documentation for pre-configured editor types), a callable, or a service name to use.","title":"WhoopsPageHandlerFactory"},{"location":"v2/features/container/factories/#platesrendererfactory","text":"Provides : Mezzio\\Plates\\PlatesRenderer FactoryName : Mezzio\\Plates\\PlatesRendererFactory Suggested Name : Mezzio\\Template\\TemplateRendererInterface Requires : no additional services are required. Optional : config , an array or ArrayAccess instance. This will be used to further configure the Plates instance, specifically with the filename extension to use, and paths to inject. It consumes the following config structure: 'templates' =&gt; [ 'extension' =&gt; 'file extension used by templates; defaults to html', 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ] One note: Due to a limitation in the Plates engine, you can only map one path per namespace when using Plates.","title":"PlatesRendererFactory"},{"location":"v2/features/container/factories/#twigrendererfactory","text":"Provides : Mezzio\\Twig\\TwigRenderer FactoryName : Mezzio\\Twig\\TwigRendererFactory Suggested Name : Mezzio\\Template\\TemplateRendererInterface Requires : no additional services are required. Optional : Mezzio\\Router\\RouterInterface ; if found, it will be used to seed a Mezzio\\Twig\\TwigExtension instance for purposes of rendering application URLs. config , an array or ArrayAccess instance. This will be used to further configure the Twig instance, specifically with the filename extension, paths to assets (and default asset version to use), and template paths to inject. It consumes the following config structure: 'debug' =&gt; boolean, 'templates' =&gt; [ 'cache_dir' =&gt; 'path to cached templates', 'assets_url' =&gt; 'base URL for assets', 'assets_version' =&gt; 'base version for assets', 'extension' =&gt; 'file extension used by templates; defaults to html.twig', 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ] When debug is true, it disables caching, enables debug mode, enables strict variables, and enables auto reloading. The assets_* values are used to seed the TwigExtension instance (assuming the router was found).","title":"TwigRendererFactory"},{"location":"v2/features/container/factories/#laminasviewrendererfactory","text":"Provides : Mezzio\\LaminasView\\LaminasViewRenderer FactoryName : Mezzio\\LaminasView\\LaminasViewRendererFactory Suggested Name : Mezzio\\Template\\TemplateRendererInterface Requires : no additional services are required. Mezzio\\Router\\RouterInterface , in order to inject the custom url helper implementation. Optional : config , an array or ArrayAccess instance. This will be used to further configure the LaminasView instance, specifically with the layout template name, entries for a TemplateMapResolver , and template paths to inject. Laminas\\View\\HelperPluginManager ; if present, will be used to inject the PhpRenderer instance. It consumes the following config structure: 'templates' =&gt; [ 'layout' =&gt; 'name of layout view to use, if any', 'map' =&gt; [ // template =&gt; filename pairs ], 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ] When creating the PhpRenderer instance, it will inject it with a Laminas\\View\\HelperPluginManager instance (either pulled from the container, or instantiated directly). It injects the helper plugin manager with custom url and serverurl helpers, Mezzio\\LaminasView\\UrlHelper and Mezzio\\LaminasView\\ServerUrlHelper , respetively.","title":"LaminasViewRendererFactory"},{"location":"v2/features/container/intro/","text":"Containers Mezzio promotes and advocates the usage of Dependency Injection / Inversion of Control (also referred to as DI — or DIC — and IoC, respectively) containers when writing your applications. These should be used for the following: Defining application dependencies: routers, template engines, error handlers, even the Application instance itself. Defining middleware and related dependencies. The Application instance itself stores a container, from which it fetches middleware when ready to dispatch it; this encourages the idea of defining middleware-specific dependencies, and factories for ensuring they are injected. To facilitate this and allow you as a developer to choose the container you prefer, mezzio typehints against PSR-11 Container , and throughout this manual, we attempt to show using a variety of containers in examples. At this time, we document support for the following specific containers: laminas-servicemanager pimple-interop aura.di Service Names We recommend using fully-qualified class names whenever possible as service names, with one exception: in cases where a service provides an implementation of an interface used for typehints, use the interface name. Following these practices encourages the following: Consumers have a reasonable idea of what the service should return. Using interface names as service names promotes re-use and substitution. In a few cases, we define \"virtual service\" names. These are cases where there is no clear typehint to follow (e.g., most middleware only uses callable as a typehint, or where we want to imply specific configuration is necessary (e.g., Whoops requires specific configuration to work correctly with Mezzio, and thus we do not want a generic service name for it). We try to keep these to a minimum, however.","title":"Introduction"},{"location":"v2/features/container/intro/#containers","text":"Mezzio promotes and advocates the usage of Dependency Injection / Inversion of Control (also referred to as DI — or DIC — and IoC, respectively) containers when writing your applications. These should be used for the following: Defining application dependencies: routers, template engines, error handlers, even the Application instance itself. Defining middleware and related dependencies. The Application instance itself stores a container, from which it fetches middleware when ready to dispatch it; this encourages the idea of defining middleware-specific dependencies, and factories for ensuring they are injected. To facilitate this and allow you as a developer to choose the container you prefer, mezzio typehints against PSR-11 Container , and throughout this manual, we attempt to show using a variety of containers in examples. At this time, we document support for the following specific containers: laminas-servicemanager pimple-interop aura.di","title":"Containers"},{"location":"v2/features/container/laminas-servicemanager/","text":"Using laminas-servicemanager laminas-servicemanager is a code-driven dependency injection container provided as a standalone component by Laminas. It features: lazy-loading of invokable (constructor-less) classes. ability to define factories for specific classes. ability to define generalized factories for classes with identical construction patterns (aka abstract factories ). ability to create lazy-loading proxies. ability to intercept before or after instantiation to alter the construction workflow (aka delegator factories ). interface injection (via initializers ). laminas-servicemanager may either be created and populated programmatically, or via configuration. Configuration uses the following structure: [ 'services' =&gt; [ 'service name' =&gt; $serviceInstance, ], 'invokables' =&gt; [ 'service name' =&gt; 'class to instantiate', ], 'factories' =&gt; [ 'service name' =&gt; 'callable, Laminas\\ServiceManager\\FactoryInterface instance, or name of factory class returning the service', ], 'abstract_factories' =&gt; [ 'class name of Laminas\\ServiceManager\\AbstractFactoryInterface implementation', ], 'delegators' =&gt; [ 'service name' =&gt; [ 'class name of Laminas\\ServiceManager\\DelegatorFactoryInterface implementation', ], ], 'lazy_services' =&gt; [ 'class_map' =&gt; [ 'service name' =&gt; 'Class\\Name\\Of\\Service', ], ], 'initializers' =&gt; [ 'callable, Laminas\\ServiceManager\\InitializerInterface implementation, or name of initializer class', ], ] Read more about laminas-servicemanager in its documentation . Installing laminas-servicemanager To use laminas-servicemanager with mezzio, you can install it via composer: $ composer require laminas/laminas-servicemanager Configuring laminas-servicemanager You can configure laminas-servicemanager either programmatically or via configuration. We'll show you both methods. Programmatically To use laminas-servicemanager programatically, you'll need to create a Laminas\\ServiceManager\\ServiceManager instance, and then start populating it. For this example, we'll assume your application configuration (used by several factories to configure instances) is in config/config.php , and that that file returns an array. We'll create a config/container.php file that creates and returns a Laminas\\ServiceManager\\ServiceManager instance as follows: use Laminas\\ServiceManager\\ServiceManager; $container = new ServiceManager(); // Application and configuration $container-&gt;setService('config', include 'config/config.php'); $container-&gt;setFactory( Mezzio\\Application::class, Mezzio\\Container\\ApplicationFactory::class ); // Routing // In most cases, you can instantiate the router you want to use without using a // factory: $container-&gt;setInvokableClass( Mezzio\\Router\\RouterInterface::class, Mezzio\\Router\\AuraRouter::class ); // Templating // In most cases, you can instantiate the template renderer you want to use // without using a factory: $container-&gt;setInvokableClass( Mezzio\\Template\\TemplateRendererInterface::class, Mezzio\\Plates\\PlatesRenderer::class ); // These next two can be added in any environment; they won't be used unless // you add the WhoopsErrorResponseGenerator as the ErrorResponseGenerator // implementation: $container-&gt;setFactory( 'Mezzio\\Whoops', Mezzio\\Container\\WhoopsFactory::class ); $container-&gt;setFactory( 'Mezzio\\WhoopsPageHandler', Mezzio\\Container\\WhoopsPageHandlerFactory::class ); // Error Handling // All environments: $container-&gt;setFactory( Mezzio\\Middleware\\ErrorHandler::class, Mezzio\\Container\\ErrorHandlerFactory::class ); // If in development: $container-&gt;setFactory( Mezzio\\Middleware\\ErrorResponseGenerator::class, Mezzio\\Container\\WhoopsErrorResponseGeneratorFactory::class ); // If in production: $container-&gt;setFactory( Mezzio\\Middleware\\ErrorResponseGenerator::class, Mezzio\\Container\\ErrorResponseGeneratorFactory::class ); return $container; Your bootstrap (typically public/index.php ) will then look like this: chdir(dirname(__DIR__)); require 'vendor/autoload.php'; $container = require 'config/container.php'; $app = $container-&gt;get(\\Mezzio\\Application::class); require 'config/pipeline.php'; require 'config/routes.php'; // All versions: $app-&gt;run(); Configuration-Driven Container Alternately, you can use a configuration file to define the container. As before, we'll define our configuration in config/config.php , and our config/container.php file will still return our service manager instance; we'll define the service configuration in config/dependencies.php : return [ 'services' =&gt; [ 'config' =&gt; include __DIR__ . '/config.php', ], 'aliases' =&gt; [ 'Mezzio\\Delegate\\DefaultDelegate' =&gt; 'Mezzio\\Delegate\\NotFoundDelegate', ], 'invokables' =&gt; [ Mezzio\\Router\\RouterInterface::class =&gt; Mezzio\\Router\\AuraRouter::class, Mezzio\\Template\\TemplateRendererInterface::class =&gt; 'Mezzio\\Plates\\PlatesRenderer::class ], 'factories' =&gt; [ Mezzio\\Application::class =&gt; Mezzio\\Container\\ApplicationFactory::class, 'Mezzio\\Whoops' =&gt; Mezzio\\Container\\WhoopsFactory::class, 'Mezzio\\WhoopsPageHandler' =&gt; Mezzio\\Container\\WhoopsPageHandlerFactory::class, Laminas\\Stratigility\\Middleware\\ErrorHandler::class =&gt; Mezzio\\Container\\ErrorHandlerFactory::class, Mezzio\\Delegate\\NotFoundDelegate::class =&gt; Mezzio\\Container\\NotFoundDelegateFactory::class, Mezzio\\Middleware\\NotFoundHandler::class =&gt; Mezzio\\Container\\NotFoundHandlerFactory::class, ], ]; config/container.php becomes: use Laminas\\ServiceManager\\Config; use Laminas\\ServiceManager\\ServiceManager; return new ServiceManager(new Config(include 'config/dependencies.php')); There is one problem, however: you may want to vary error handling strategies based on whether or not you're in production: You have two choices on how to approach this: Selectively inject the factory in the bootstrap. Define the final handler service in an environment specific file and use file globbing to merge files. In the first case, you would change the config/container.php example to look like this: use Laminas\\ServiceManager\\Config; use Laminas\\ServiceManager\\ServiceManager; $container = new ServiceManager(new Config(include 'config/container.php')); switch ($variableOrConstantIndicatingEnvironment) { case 'development': $container-&gt;setFactory( Mezzio\\Middleware\\ErrorResponseGenerator::class, Mezzio\\Container\\WhoopsErrorResponseGeneratorFactory::class ); break; case 'production': default: $container-&gt;setFactory( Mezzio\\Middleware\\ErrorResponseGenerator::class, Mezzio\\Container\\ErrorResponseGeneratorFactory::class ); } return $container; In the second case, you will need to install laminas-config: $ composer require laminas/laminas-config Then, create the directory config/autoload/ , and create two files, dependencies.global.php and dependencies.local.php . In your .gitignore , add an entry for config/autoload/*local.php to ensure \"local\" (environment-specific) files are excluded from the repository. config/dependencies.php will look like this: use Laminas\\Config\\Factory as ConfigFactory; return ConfigFactory::fromFiles( glob('config/autoload/dependencies.{global,local}.php', GLOB_BRACE) ); config/autoload/dependencies.global.php will look like this: return [ 'services' =&gt; [ 'config' =&gt; include __DIR__ . '/config.php', ], 'aliases' =&gt; [ 'Mezzio\\Delegate\\DefaultDelegate' =&gt; Mezzio\\Delegate\\NotFoundDelegate::class, ], 'invokables' =&gt; [ Mezzio\\Router\\RouterInterface::class =&gt; Mezzio\\Router\\AuraRouter::class, Mezzio\\Template\\TemplateRendererInterface::class =&gt; 'Mezzio\\Plates\\PlatesRenderer::class ], 'factories' =&gt; [ Mezzio\\Application::class =&gt; Mezzio\\Container\\ApplicationFactory::class, 'Mezzio\\Whoops' =&gt; Mezzio\\Container\\WhoopsFactory::class, 'Mezzio\\WhoopsPageHandler' =&gt; Mezzio\\Container\\WhoopsPageHandlerFactory::class, Mezzio\\Middleware\\ErrorResponseGenerator::class =&gt; Mezzio\\Container\\ErrorResponseGeneratorFactory::class, Laminas\\Stratigility\\Middleware\\ErrorHandler::class =&gt; Mezzio\\Container\\ErrorHandlerFactory::class, 'Mezzio\\Delegate\\NotFoundDelegate' =&gt; Mezzio\\Container\\NotFoundDelegateFactory::class, Mezzio\\Middleware\\NotFoundHandler::class =&gt; Mezzio\\Container\\NotFoundHandlerFactory::class, ], ]; config/autoload/dependencies.local.php on your development machine can look like this: return [ 'factories' =&gt; [ 'Mezzio\\Whoops' =&gt; Mezzio\\Container\\WhoopsFactory::class, 'Mezzio\\WhoopsPageHandler' =&gt; Mezzio\\Container\\WhoopsPageHandlerFactory::class, Mezzio\\Middleware\\ErrorResponseGenerator::class =&gt; 'Mezzio\\Container\\WhoopsErrorResponseGeneratorFactory::class, ], ]; Using the above approach allows you to keep the bootstrap file minimal and agnostic of environment. (Note: you can take a similar approach with the application configuration.)","title":"Using laminas-servicemanager"},{"location":"v2/features/container/laminas-servicemanager/#using-laminas-servicemanager","text":"laminas-servicemanager is a code-driven dependency injection container provided as a standalone component by Laminas. It features: lazy-loading of invokable (constructor-less) classes. ability to define factories for specific classes. ability to define generalized factories for classes with identical construction patterns (aka abstract factories ). ability to create lazy-loading proxies. ability to intercept before or after instantiation to alter the construction workflow (aka delegator factories ). interface injection (via initializers ). laminas-servicemanager may either be created and populated programmatically, or via configuration. Configuration uses the following structure: [ 'services' =&gt; [ 'service name' =&gt; $serviceInstance, ], 'invokables' =&gt; [ 'service name' =&gt; 'class to instantiate', ], 'factories' =&gt; [ 'service name' =&gt; 'callable, Laminas\\ServiceManager\\FactoryInterface instance, or name of factory class returning the service', ], 'abstract_factories' =&gt; [ 'class name of Laminas\\ServiceManager\\AbstractFactoryInterface implementation', ], 'delegators' =&gt; [ 'service name' =&gt; [ 'class name of Laminas\\ServiceManager\\DelegatorFactoryInterface implementation', ], ], 'lazy_services' =&gt; [ 'class_map' =&gt; [ 'service name' =&gt; 'Class\\Name\\Of\\Service', ], ], 'initializers' =&gt; [ 'callable, Laminas\\ServiceManager\\InitializerInterface implementation, or name of initializer class', ], ] Read more about laminas-servicemanager in its documentation .","title":"Using laminas-servicemanager"},{"location":"v2/features/container/laminas-servicemanager/#installing-laminas-servicemanager","text":"To use laminas-servicemanager with mezzio, you can install it via composer: $ composer require laminas/laminas-servicemanager","title":"Installing laminas-servicemanager"},{"location":"v2/features/container/laminas-servicemanager/#configuring-laminas-servicemanager","text":"You can configure laminas-servicemanager either programmatically or via configuration. We'll show you both methods.","title":"Configuring laminas-servicemanager"},{"location":"v2/features/container/pimple/","text":"Using Pimple Pimple is a widely used code-driven dependency injection container provided as a standalone component by SensioLabs. It features: combined parameter and service storage. ability to define factories for specific classes. lazy-loading via factories. Pimple only supports programmatic creation at this time. Installing Pimple Pimple does not currently (as of v3) implement PSR-11 Container ; as such, you need to install the xtreamwayz/pimple-container-interop project, which provides a PSR-11 container wrapper around Pimple v3: $ composer require xtreamwayz/pimple-container-interop Configuring Pimple To configure Pimple, instantiate it, and then add the factories desired. We recommend doing this in a dedicated script that returns the Pimple instance; in this example, we'll have that in config/container.php . use Mezzio\\Container; use Mezzio\\Plates\\PlatesRenderer; use Mezzio\\Router; use Mezzio\\Template\\TemplateRendererInterface; use Xtreamwayz\\Pimple\\Container as Pimple; $container = new Pimple(); // Application and configuration $container['config'] = include 'config/config.php'; $container['Mezzio\\Application'] = new Container\\ApplicationFactory; // Routing // In most cases, you can instantiate the router you want to use without using a // factory: $container['Mezzio\\Router\\RouterInterface'] = function ($container) { return new Router\\Aura(); }; // We'll provide a default delegate: $delegateFactory = new Container\\NotFoundDelegateFactory(); $container['Mezzio\\Delegate\\DefaultDelegate'] = $delegateFactory; $container[Mezzio\\Delegate\\NotFoundDelegate::class] = $delegateFactory; // We'll provide a not found handler: $container[Mezzio\\Middleware\\NotFoundHandler::class] = new Container\\NotFoundHandlerFactory(); // Templating // In most cases, you can instantiate the template renderer you want to use // without using a factory: $container[TemplateRendererInterface::class] = function ($container) { return new PlatesRenderer(); }; // These next two can be added in any environment; they won't be used unless // you add the WhoopsErrorResponseGenerator as the ErrorResponseGenerator // implementation $container['Mezzio\\Whoops'] = new Container\\WhoopsFactory(); $container['Mezzio\\WhoopsPageHandler'] = new Container\\WhoopsPageHandlerFactory(); // Error Handling // - In all environments: $container['Mezzio\\Middleware\\ErrorHandler'] = new Container\\ErrorHandlerFactory(); // If in development: $container[Mezzio\\Middleware\\ErrorResponseGenerator::class] = new Container\\WhoopsErrorResponseGeneratorFactory(); // If in production: $container[Mezzio\\Middleware\\ErrorResponseGenerator::class] = new Container\\ErrorResponseGeneratorFactory(); return $container; Your bootstrap (typically public/index.php ) will then look like this: chdir(dirname(__DIR__)); $container = require 'config/container.php'; $app = $container-&gt;get(Mezzio\\Application::class); require 'config/pipeline.php'; require 'config/routes.php'; // All versions: $app-&gt;run(); Environments In the example above, we provide two alternate definitions for the service Mezzio\\Middleware\\ErrorResponseGenerator , one for development and one for production. You will need to add logic to your file to determine which definition to provide; this could be accomplished via an environment variable.","title":"Using Pimple"},{"location":"v2/features/container/pimple/#using-pimple","text":"Pimple is a widely used code-driven dependency injection container provided as a standalone component by SensioLabs. It features: combined parameter and service storage. ability to define factories for specific classes. lazy-loading via factories. Pimple only supports programmatic creation at this time.","title":"Using Pimple"},{"location":"v2/features/container/pimple/#installing-pimple","text":"Pimple does not currently (as of v3) implement PSR-11 Container ; as such, you need to install the xtreamwayz/pimple-container-interop project, which provides a PSR-11 container wrapper around Pimple v3: $ composer require xtreamwayz/pimple-container-interop","title":"Installing Pimple"},{"location":"v2/features/container/pimple/#configuring-pimple","text":"To configure Pimple, instantiate it, and then add the factories desired. We recommend doing this in a dedicated script that returns the Pimple instance; in this example, we'll have that in config/container.php . use Mezzio\\Container; use Mezzio\\Plates\\PlatesRenderer; use Mezzio\\Router; use Mezzio\\Template\\TemplateRendererInterface; use Xtreamwayz\\Pimple\\Container as Pimple; $container = new Pimple(); // Application and configuration $container['config'] = include 'config/config.php'; $container['Mezzio\\Application'] = new Container\\ApplicationFactory; // Routing // In most cases, you can instantiate the router you want to use without using a // factory: $container['Mezzio\\Router\\RouterInterface'] = function ($container) { return new Router\\Aura(); }; // We'll provide a default delegate: $delegateFactory = new Container\\NotFoundDelegateFactory(); $container['Mezzio\\Delegate\\DefaultDelegate'] = $delegateFactory; $container[Mezzio\\Delegate\\NotFoundDelegate::class] = $delegateFactory; // We'll provide a not found handler: $container[Mezzio\\Middleware\\NotFoundHandler::class] = new Container\\NotFoundHandlerFactory(); // Templating // In most cases, you can instantiate the template renderer you want to use // without using a factory: $container[TemplateRendererInterface::class] = function ($container) { return new PlatesRenderer(); }; // These next two can be added in any environment; they won't be used unless // you add the WhoopsErrorResponseGenerator as the ErrorResponseGenerator // implementation $container['Mezzio\\Whoops'] = new Container\\WhoopsFactory(); $container['Mezzio\\WhoopsPageHandler'] = new Container\\WhoopsPageHandlerFactory(); // Error Handling // - In all environments: $container['Mezzio\\Middleware\\ErrorHandler'] = new Container\\ErrorHandlerFactory(); // If in development: $container[Mezzio\\Middleware\\ErrorResponseGenerator::class] = new Container\\WhoopsErrorResponseGeneratorFactory(); // If in production: $container[Mezzio\\Middleware\\ErrorResponseGenerator::class] = new Container\\ErrorResponseGeneratorFactory(); return $container; Your bootstrap (typically public/index.php ) will then look like this: chdir(dirname(__DIR__)); $container = require 'config/container.php'; $app = $container-&gt;get(Mezzio\\Application::class); require 'config/pipeline.php'; require 'config/routes.php'; // All versions: $app-&gt;run();","title":"Configuring Pimple"},{"location":"v2/features/helpers/body-parse/","text":"Body Parsing Middleware Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware provides generic PSR-7 middleware for parsing the request body into parameters, and returning a new request instance that composes them. The subcomponent provides a strategy pattern around matching the request Content-Type , and then parsing it, giving you a flexible approach that can grow with your accepted content types. By default, this middleware will detect the following content types: application/x-www-form-urlencoded (standard web-based forms, without file uploads) application/json , application/*+json (JSON payloads) Registering the middleware You can register it programmatically: $app-&gt;pipe(BodyParamsMiddleware::class); Alternately, register it via configuration, if using configuration-based applications: // config/autoload/middleware-pipeline.global.php use Mezzio\\Helper; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; Helper\\BodyParams\\BodyParamsMiddleware::class, /* ... */ ], 'factories' =&gt; [ /* ... */ ], ], 'middleware_pipeline' =&gt; [ ['middleware' =&gt; Helper\\BodyParams\\BodyParamsMiddleware::class, 'priority' =&gt; 100], /* ... */ 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Helper\\UrlHelperMiddleware::class, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], /* ... */ ], ]; Since body parsing does not necessarily need to happen for every request, you can also choose to incorporate it in route-specific middleware pipelines: $app-&gt;post('/login', [ BodyParamsMiddleware::class, LoginMiddleware::class, ]); If using a configuration-based application: // config/autoload/routes.global.php use Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; Helper\\BodyParams\\BodyParamsMiddleware::class, /* ... */ ], 'factories' =&gt; [ /* ... */ ], ], 'routes' =&gt; [ [ 'name' =&gt; 'contact:process', 'path' =&gt; '/contact/process', 'middleware' =&gt; [ BodyParamsMiddleware::class, Contact\\Process::class, ], 'allowed_methods' =&gt; ['POST'], ], ], ]; Using route-based middleware pipelines has the advantage of ensuring that the body parsing middleware only executes for routes that require the processing. While the middleware has some checks to ensure it only triggers for HTTP methods that accept bodies, those checks are still overhead that you might want to avoid; the above strategy of using the middleware only with specific routes can accomplish that. Strategies If you want to intercept and parse other payload types, you can add strategies to the middleware. Strategies implement Mezzio\\Helper\\BodyParams\\StrategyInterface : namespace Mezzio\\Helper\\BodyParams; use Psr\\Http\\Message\\ServerRequestInterface; interface StrategyInterface { /** * Match the content type to the strategy criteria. * * @param string $contentType * @return bool Whether or not the strategy matches. */ public function match($contentType); /** * Parse the body content and return a new response. * * @param ServerRequestInterface $request * @return ServerRequestInterface */ public function parse(ServerRequestInterface $request); } You then register them with the middleware using the addStrategy() method: $bodyParams-&gt;addStrategy(new MyCustomBodyParamsStrategy()); To automate the registration, we recommend writing a factory for the BodyParamsMiddleware , and replacing the invokables registration with a registration in the factories section of the middleware-pipeline.config.php file: use Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware; class MyCustomBodyParamsStrategyFactory { public function __invoke($container) { $bodyParams = new BodyParamsMiddleware(); $bodyParams-&gt;addStrategy(new MyCustomBodyParamsStrategy()); return $bodyParams; } } // In config/autoload/middleware-pipeline.config.php: use Mezzio\\Helper; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ // Remove this line: Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; Helper\\BodyParams\\BodyParamsMiddleware::class, /* ... */ ], 'factories' =&gt; [ // Add this line: Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; MyCustomBodyParamsStrategyFactory::class, /* ... */ ], ], ]; Removing the default strategies By default, BodyParamsMiddleware composes the following strategies: Mezzio\\Helper\\BodyParams\\FormUrlEncodedStrategy Mezzio\\Helper\\BodyParams\\JsonStrategy These provide the most basic approaches to parsing the request body. They operate in the order they do to ensure the most common content type — application/x-www-form-urlencoded — matches first, as the middleware delegates parsing to the first match. If you do not want to use these default strategies, you can clear them from the middleware using clearStrategies() : $bodyParamsMiddleware-&gt;clearStrategies(); Note: if you do this, all strategies will be removed! As such, we recommend doing this only immediately before registering any custom strategies you might be using.","title":"Body Parsing Middleware"},{"location":"v2/features/helpers/body-parse/#body-parsing-middleware","text":"Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware provides generic PSR-7 middleware for parsing the request body into parameters, and returning a new request instance that composes them. The subcomponent provides a strategy pattern around matching the request Content-Type , and then parsing it, giving you a flexible approach that can grow with your accepted content types. By default, this middleware will detect the following content types: application/x-www-form-urlencoded (standard web-based forms, without file uploads) application/json , application/*+json (JSON payloads)","title":"Body Parsing Middleware"},{"location":"v2/features/helpers/body-parse/#registering-the-middleware","text":"You can register it programmatically: $app-&gt;pipe(BodyParamsMiddleware::class); Alternately, register it via configuration, if using configuration-based applications: // config/autoload/middleware-pipeline.global.php use Mezzio\\Helper; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; Helper\\BodyParams\\BodyParamsMiddleware::class, /* ... */ ], 'factories' =&gt; [ /* ... */ ], ], 'middleware_pipeline' =&gt; [ ['middleware' =&gt; Helper\\BodyParams\\BodyParamsMiddleware::class, 'priority' =&gt; 100], /* ... */ 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Container\\ApplicationFactory::ROUTING_MIDDLEWARE, Helper\\UrlHelperMiddleware::class, Mezzio\\Container\\ApplicationFactory::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], /* ... */ ], ]; Since body parsing does not necessarily need to happen for every request, you can also choose to incorporate it in route-specific middleware pipelines: $app-&gt;post('/login', [ BodyParamsMiddleware::class, LoginMiddleware::class, ]); If using a configuration-based application: // config/autoload/routes.global.php use Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; Helper\\BodyParams\\BodyParamsMiddleware::class, /* ... */ ], 'factories' =&gt; [ /* ... */ ], ], 'routes' =&gt; [ [ 'name' =&gt; 'contact:process', 'path' =&gt; '/contact/process', 'middleware' =&gt; [ BodyParamsMiddleware::class, Contact\\Process::class, ], 'allowed_methods' =&gt; ['POST'], ], ], ]; Using route-based middleware pipelines has the advantage of ensuring that the body parsing middleware only executes for routes that require the processing. While the middleware has some checks to ensure it only triggers for HTTP methods that accept bodies, those checks are still overhead that you might want to avoid; the above strategy of using the middleware only with specific routes can accomplish that.","title":"Registering the middleware"},{"location":"v2/features/helpers/body-parse/#strategies","text":"If you want to intercept and parse other payload types, you can add strategies to the middleware. Strategies implement Mezzio\\Helper\\BodyParams\\StrategyInterface : namespace Mezzio\\Helper\\BodyParams; use Psr\\Http\\Message\\ServerRequestInterface; interface StrategyInterface { /** * Match the content type to the strategy criteria. * * @param string $contentType * @return bool Whether or not the strategy matches. */ public function match($contentType); /** * Parse the body content and return a new response. * * @param ServerRequestInterface $request * @return ServerRequestInterface */ public function parse(ServerRequestInterface $request); } You then register them with the middleware using the addStrategy() method: $bodyParams-&gt;addStrategy(new MyCustomBodyParamsStrategy()); To automate the registration, we recommend writing a factory for the BodyParamsMiddleware , and replacing the invokables registration with a registration in the factories section of the middleware-pipeline.config.php file: use Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware; class MyCustomBodyParamsStrategyFactory { public function __invoke($container) { $bodyParams = new BodyParamsMiddleware(); $bodyParams-&gt;addStrategy(new MyCustomBodyParamsStrategy()); return $bodyParams; } } // In config/autoload/middleware-pipeline.config.php: use Mezzio\\Helper; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ // Remove this line: Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; Helper\\BodyParams\\BodyParamsMiddleware::class, /* ... */ ], 'factories' =&gt; [ // Add this line: Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; MyCustomBodyParamsStrategyFactory::class, /* ... */ ], ], ];","title":"Strategies"},{"location":"v2/features/helpers/body-parse/#removing-the-default-strategies","text":"By default, BodyParamsMiddleware composes the following strategies: Mezzio\\Helper\\BodyParams\\FormUrlEncodedStrategy Mezzio\\Helper\\BodyParams\\JsonStrategy These provide the most basic approaches to parsing the request body. They operate in the order they do to ensure the most common content type — application/x-www-form-urlencoded — matches first, as the middleware delegates parsing to the first match. If you do not want to use these default strategies, you can clear them from the middleware using clearStrategies() : $bodyParamsMiddleware-&gt;clearStrategies(); Note: if you do this, all strategies will be removed! As such, we recommend doing this only immediately before registering any custom strategies you might be using.","title":"Removing the default strategies"},{"location":"v2/features/helpers/content-length/","text":"Content-Length Middleware Available since mezzio-helpers version 4.1.0. In some cases, you may want to include an explicit Content-Length response header, without having to inject it manually. To facilitate this, we provide Mezzio\\Helper\\ContentLengthMiddleware . When to use this middleware In most cases, you do not need to provide an explicit Content-Length value in your responses. While the HTTP/1.1 specification indicates the header SHOULD be provided, most clients will not degrade to HTTP/1.0 if the header is omitted. The one exception that has been reported is when working with New Relic , which requires valid Content-Length headers for some of its analytics; in such cases, enabling this middleware will fix those situations. This middleware delegates the request, and operates on the returned response. It will return a new response with the Content-Length header injected under the following conditions: No Content-Length header is already present AND the body size is non-null. To register it in your application, you will need to do two things: register the middleware with the container, and register the middleware in either your application pipeline, or within routed middleware. To add it to your container, add the following configuration: // In a `config/autoload/*.global.php` file, or a `ConfigProvider` class: use Mezzio\\Helper; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ Helper\\ContentLengthMiddleware::class =&gt; Helper\\ContentLengthMiddleware::class, ], ], ]; To register it as pipeline middleware to execute on any request: // In `config/pipeline.php`: use Mezzio\\Helper; $app-&gt;pipe(Helper\\ContentLengthMiddleware::class); To register it within a routed middleware pipeline: // In `config/routes.php`: use Mezzio\\Helper; $app-&gt;get('/download/tarball', [ Helper\\ContentLengthMiddleware::class, Download\\Tarball::class, ], 'download-tar'); Caveats One caveat to note is that if you use this middleware, but also write directly to the output buffer (e.g., via a var_dump , or if display_errors is on and an uncaught error or exception occurs), the output will not appear as you expect. Generally in such situations, the contents of the output buffer will appear, up to the specified Content-Length value. This can lead to truncated error content and/or truncated application content. We recommend that if you use this feature, you also use a PHP error and/or exception handler that logs errors in order to prevent truncated output.","title":"Content-Length Middleware"},{"location":"v2/features/helpers/content-length/#content-length-middleware","text":"Available since mezzio-helpers version 4.1.0. In some cases, you may want to include an explicit Content-Length response header, without having to inject it manually. To facilitate this, we provide Mezzio\\Helper\\ContentLengthMiddleware .","title":"Content-Length Middleware"},{"location":"v2/features/helpers/content-length/#caveats","text":"One caveat to note is that if you use this middleware, but also write directly to the output buffer (e.g., via a var_dump , or if display_errors is on and an uncaught error or exception occurs), the output will not appear as you expect. Generally in such situations, the contents of the output buffer will appear, up to the specified Content-Length value. This can lead to truncated error content and/or truncated application content. We recommend that if you use this feature, you also use a PHP error and/or exception handler that logs errors in order to prevent truncated output.","title":"Caveats"},{"location":"v2/features/helpers/intro/","text":"Helpers Some tasks and features will be common to many if not all applications. For those, Mezzio provides helpers . These are typically utility classes that may integrate features or simply provide standalone benefits. Currently, these include: Body Parsing Middleware Content-Length Middleware (since mezzio-helpers 4.1.0) UrlHelper ServerUrlHelper Installation If you started your project using the Mezzio skeleton package, the helpers are already installed. If not, you can install them as follows: $ composer require mezzio/mezzio-helpers","title":"Introduction"},{"location":"v2/features/helpers/intro/#helpers","text":"Some tasks and features will be common to many if not all applications. For those, Mezzio provides helpers . These are typically utility classes that may integrate features or simply provide standalone benefits. Currently, these include: Body Parsing Middleware Content-Length Middleware (since mezzio-helpers 4.1.0) UrlHelper ServerUrlHelper","title":"Helpers"},{"location":"v2/features/helpers/intro/#installation","text":"If you started your project using the Mezzio skeleton package, the helpers are already installed. If not, you can install them as follows: $ composer require mezzio/mezzio-helpers","title":"Installation"},{"location":"v2/features/helpers/server-url-helper/","text":"ServerUrlHelper Mezzio\\Helper\\ServerUrlHelper provides the ability to generate a full URI by passing only the path to the helper; it will then use that path with the current Psr\\Http\\Message\\UriInterface instance provided to it in order to generate a fully qualified URI. Usage When you have an instance, use either its generate() method, or call the instance as an invokable: // Using the generate() method: $url = $helper-&gt;generate('/foo'); // is equivalent to invocation: $url = $helper('/foo'); The helper is particularly useful when used in conjunction with the UrlHelper , as you can then create fully qualified URIs for use with headers, API hypermedia links, etc.: $url = $serverUrl($url('resource', ['id' =&gt; 'sha1'])); The signature for the ServerUrlHelper generate() and __invoke() methods is: function ($path = null) : string Where: $path , when provided, can be a string path to use to generate a URI. Creating an instance In order to use the helper, you will need to inject it with the current UriInterface from the request instance. To automate this, we provide Mezzio\\Helper\\ServerUrlMiddleware , which composes a ServerUrl instance, and, when invoked, injects it with the URI instance. As such, you will need to: Register the ServerUrlHelper as a service in your container. Register the ServerUrlMiddleware as a service in your container. Register the ServerUrlMiddleware as pipeline middleware, anytime before the routing middleware. The following examples demonstrate registering the services. use Mezzio\\Helper\\ServerUrlHelper; use Mezzio\\Helper\\ServerUrlMiddleware; use Mezzio\\Helper\\ServerUrlMiddlewareFactory; // laminas-servicemanager: $services-&gt;setInvokableClass(ServerUrlHelper::class, ServerUrlHelper::class); $services-&gt;setFactory(ServerUrlMiddleware::class, ServerUrlMiddlewareFactory::class); // Pimple: $pimple[ServerUrlHelper::class] = function ($container) { return new ServerUrlHelper(); }; $pimple[ServerUrlMiddleware::class] = function ($container) { $factory = new ServerUrlMiddlewareFactory(); return $factory($container); }; // Aura.Di: $container-&gt;set(ServerUrlHelper::class, $container-&gt;lazyNew(ServerUrlHelper::class)); $container-&gt;set(ServerUrlMiddlewareFactory::class, $container-&gt;lazyNew(ServerUrlMiddlewareFactory::class)); $container-&gt;set( ServerUrlMiddleware::class, $container-&gt;lazyGetCall(ServerUrlMiddlewareFactory::class, '__invoke', $container) ); To register the ServerUrlMiddleware as pipeline middleware anytime before the routing middleware: use Mezzio\\Helper\\ServerUrlMiddleware; // Programmatically: $app-&gt;pipe(ServerUrlMiddleware::class); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); // Or use configuration: // [ // 'middleware_pipeline' =&gt; [ // ['middleware' =&gt; ServerUrlMiddleware::class, 'priority' =&gt; PHP_INT_MAX], // /* ... */ // ], // ] The following dependency configuration will work for all three when using the Mezzio skeleton: return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ ServerUrlHelper::class =&gt; ServerUrlHelper::class, ], 'factories' =&gt; [ ServerUrlMiddleware::class =&gt; ServerUrlMiddlewareFactory::class, ], ], 'middleware_pipeline' =&gt; [ ['middleware' =&gt; ServerUrlMiddleware::class, 'priority' =&gt; PHP_INT_MAX], /* ... */ ], ]; Skeleton configures helpers If you started your project using the Mezzio skeleton package, the ServerUrlHelper and ServerUrlMiddleware factories are already registered for you, as is the ServerUrlMiddleware pipeline middleware. Using the helper in middleware Compose the helper in your middleware (or elsewhere), and then use it to generate URI paths: use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Mezzio\\Helper\\ServerUrlHelper; class FooMiddleware implements MiddlewareInterface { private $helper; public function __construct(ServerUrlHelper $helper) { $this-&gt;helper = $helper; } public function process(ServerRequestInterface $request, DelegateInterface $delegate) { $response = $delegate-&gt;process($request); return $response-&gt;withHeader( 'Link', $this-&gt;helper-&gt;generate() . '; rel=\"self\"' ); } }","title":"ServerUrlHelper"},{"location":"v2/features/helpers/server-url-helper/#serverurlhelper","text":"Mezzio\\Helper\\ServerUrlHelper provides the ability to generate a full URI by passing only the path to the helper; it will then use that path with the current Psr\\Http\\Message\\UriInterface instance provided to it in order to generate a fully qualified URI.","title":"ServerUrlHelper"},{"location":"v2/features/helpers/server-url-helper/#usage","text":"When you have an instance, use either its generate() method, or call the instance as an invokable: // Using the generate() method: $url = $helper-&gt;generate('/foo'); // is equivalent to invocation: $url = $helper('/foo'); The helper is particularly useful when used in conjunction with the UrlHelper , as you can then create fully qualified URIs for use with headers, API hypermedia links, etc.: $url = $serverUrl($url('resource', ['id' =&gt; 'sha1'])); The signature for the ServerUrlHelper generate() and __invoke() methods is: function ($path = null) : string Where: $path , when provided, can be a string path to use to generate a URI.","title":"Usage"},{"location":"v2/features/helpers/server-url-helper/#creating-an-instance","text":"In order to use the helper, you will need to inject it with the current UriInterface from the request instance. To automate this, we provide Mezzio\\Helper\\ServerUrlMiddleware , which composes a ServerUrl instance, and, when invoked, injects it with the URI instance. As such, you will need to: Register the ServerUrlHelper as a service in your container. Register the ServerUrlMiddleware as a service in your container. Register the ServerUrlMiddleware as pipeline middleware, anytime before the routing middleware. The following examples demonstrate registering the services. use Mezzio\\Helper\\ServerUrlHelper; use Mezzio\\Helper\\ServerUrlMiddleware; use Mezzio\\Helper\\ServerUrlMiddlewareFactory; // laminas-servicemanager: $services-&gt;setInvokableClass(ServerUrlHelper::class, ServerUrlHelper::class); $services-&gt;setFactory(ServerUrlMiddleware::class, ServerUrlMiddlewareFactory::class); // Pimple: $pimple[ServerUrlHelper::class] = function ($container) { return new ServerUrlHelper(); }; $pimple[ServerUrlMiddleware::class] = function ($container) { $factory = new ServerUrlMiddlewareFactory(); return $factory($container); }; // Aura.Di: $container-&gt;set(ServerUrlHelper::class, $container-&gt;lazyNew(ServerUrlHelper::class)); $container-&gt;set(ServerUrlMiddlewareFactory::class, $container-&gt;lazyNew(ServerUrlMiddlewareFactory::class)); $container-&gt;set( ServerUrlMiddleware::class, $container-&gt;lazyGetCall(ServerUrlMiddlewareFactory::class, '__invoke', $container) ); To register the ServerUrlMiddleware as pipeline middleware anytime before the routing middleware: use Mezzio\\Helper\\ServerUrlMiddleware; // Programmatically: $app-&gt;pipe(ServerUrlMiddleware::class); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); // Or use configuration: // [ // 'middleware_pipeline' =&gt; [ // ['middleware' =&gt; ServerUrlMiddleware::class, 'priority' =&gt; PHP_INT_MAX], // /* ... */ // ], // ] The following dependency configuration will work for all three when using the Mezzio skeleton: return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ ServerUrlHelper::class =&gt; ServerUrlHelper::class, ], 'factories' =&gt; [ ServerUrlMiddleware::class =&gt; ServerUrlMiddlewareFactory::class, ], ], 'middleware_pipeline' =&gt; [ ['middleware' =&gt; ServerUrlMiddleware::class, 'priority' =&gt; PHP_INT_MAX], /* ... */ ], ];","title":"Creating an instance"},{"location":"v2/features/helpers/server-url-helper/#using-the-helper-in-middleware","text":"Compose the helper in your middleware (or elsewhere), and then use it to generate URI paths: use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Mezzio\\Helper\\ServerUrlHelper; class FooMiddleware implements MiddlewareInterface { private $helper; public function __construct(ServerUrlHelper $helper) { $this-&gt;helper = $helper; } public function process(ServerRequestInterface $request, DelegateInterface $delegate) { $response = $delegate-&gt;process($request); return $response-&gt;withHeader( 'Link', $this-&gt;helper-&gt;generate() . '; rel=\"self\"' ); } }","title":"Using the helper in middleware"},{"location":"v2/features/helpers/url-helper/","text":"UrlHelper Mezzio\\Helper\\UrlHelper provides the ability to generate a URI path based on a given route defined in the Mezzio\\Router\\RouterInterface . If injected with a route result, and the route being used was also the one matched during routing, you can provide a subset of routing parameters, and any not provided will be pulled from those matched. Usage When you have an instance, use either its generate() method, or call the instance as an invokable: // Using the generate() method: $url = $helper-&gt;generate('resource', ['id' =&gt; 'sha1']); // is equivalent to invocation: $url = $helper('resource', ['id' =&gt; 'sha1']); The signature for both is: function ( $routeName, array $routeParams = [], $queryParams = [], $fragmentIdentifier = null, array $options = [] ) : string Where: $routeName is the name of a route defined in the composed router. You may omit this argument if you want to generate the path for the currently matched request. $routeParams is an array of substitutions to use for the provided route, with the following behavior: If a RouteResult is composed in the helper, and the $routeName matches it, the provided $params will be merged with any matched parameters, with those provided taking precedence. If a RouteResult is not composed, or if the composed result does not match the provided $routeName , then only the $params provided will be used for substitutions. If no $params are provided, and the $routeName matches the currently matched route, then any matched parameters found will be used. parameters found will be used. If no $params are provided, and the $routeName does not match the currently matched route, or if no route result is present, then no substitutions will be made. $queryParams is an array of query string arguments to include in the generated URI. $fragmentIdentifier is a string to use as the URI fragment. $options is an array of options to provide to the router for purposes of controlling URI generation. As an example, laminas-router can consume \"translator\" and \"text_domain\" options in order to provide translated URIs. Each method will raise an exception if: No $routeName is provided, and no RouteResult is composed. No $routeName is provided, a RouteResult is composed, but that result represents a matching failure. The given $routeName is not defined in the router. Signature changes The signature listed above is current as of version 3.0.0 of mezzio/mezzio-helpers. Prior to that version, the helper only accepted the route name and route parameters. Creating an instance In order to use the helper, you will need to instantiate it with the current RouterInterface . The factory Mezzio\\Helper\\UrlHelperFactory has been provided for this purpose, and can be used trivially with most dependency injection containers implementing PSR-11 Container . Additionally, it is most useful when injected with the current results of routing, which requires registering middleware with the application that can inject the route result. The following steps should be followed to register and configure the helper: Register the UrlHelper as a service in your container, using the provided factory. Register the UrlHelperMiddleware as a service in your container, using the provided factory. Register the UrlHelperMiddleware as pipeline middleware, immediately following the routing middleware. Registering the helper service The following examples demonstrate programmatic registration of the UrlHelper service in your selected dependency injection container. use Mezzio\\Helper\\UrlHelper; use Mezzio\\Helper\\UrlHelperFactory; // laminas-servicemanager: $services-&gt;setFactory(UrlHelper::class, UrlHelperFactory::class); // Pimple: $pimple[UrlHelper::class] = function ($container) { $factory = new UrlHelperFactory(); return $factory($container); }; // Aura.Di: $container-&gt;set(UrlHelperFactory::class, $container-&gt;lazyNew(UrlHelperFactory::class)); $container-&gt;set( UrlHelper::class, $container-&gt;lazyGetCall(UrlHelperFactory::class, '__invoke', $container) ); The following dependency configuration will work for all three when using the Mezzio skeleton: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ UrlHelper::class =&gt; UrlHelperFactory::class, ], ], ]; UrlHelperFactory requires RouterInterface The factory requires that a service named Mezzio\\Router\\RouterInterface is present, and will raise an exception if the service is not found. Registering the pipeline middleware To register the UrlHelperMiddleware as pipeline middleware following the routing middleware: use Mezzio\\Helper\\UrlHelperMiddleware; // Programmatically: $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(UrlHelperMiddleware::class); $app-&gt;pipeDispatchMiddleware(); // Or use configuration: // [ // 'middleware_pipeline' =&gt; [ // /* ... */ // Mezzio\\Application::ROUTING_MIDDLEWARE, // ['middleware' =&gt; UrlHelperMiddleware::class], // Mezzio\\Application::DISPATCH_MIDDLEWARE, // /* ... */ // ], // ] // // Alternately, create a nested middleware pipeline for the routing, UrlHelper, // and dispatch middleware: // [ // 'middleware_pipeline' =&gt; [ // /* ... */ // 'routing' =&gt; [ // 'middleware' =&gt; [ // Mezzio\\Application::ROUTING_MIDDLEWARE, // UrlHelperMiddleware::class // Mezzio\\Application::DISPATCH_MIDDLEWARE, // ], // 'priority' =&gt; 1, // ], // /* ... */ // ], // ] The following dependency configuration will work for all three when using the Mezzio skeleton: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ UrlHelper::class =&gt; UrlHelperFactory::class, UrlHelperMiddleware::class =&gt; UrlHelperMiddlewareFactory::class, ], ], 'middleware_pipeline' =&gt; [ Mezzio\\Application::ROUTING_MIDDLEWARE, ['middleware' =&gt; UrlHelperMiddleware::class], Mezzio\\Application::DISPATCH_MIDDLEWARE, ], ]; // OR: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ UrlHelper::class =&gt; UrlHelperFactory::class, UrlHelperMiddleware::class =&gt; UrlHelperMiddlewareFactory::class, ], ], 'middleware_pipeline' =&gt; [ 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Application::ROUTING_MIDDLEWARE, UrlHelperMiddleware::class, Mezzio\\Application::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], ], ]; Skeleton configures helpers If you started your project using the Mezzio skeleton package, the UrlHelper and UrlHelperMiddleware factories are already registered for you, as is the UrlHelperMiddleware pipeline middleware. Using the helper in middleware Compose the helper in your middleware (or elsewhere), and then use it to generate URI paths: use Mezzio\\Helper\\UrlHelper; class FooMiddleware { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } public function __invoke($request, $response, callable $next) { $response = $response-&gt;withHeader( 'Link', $this-&gt;helper-&gt;generate('resource', ['id' =&gt; 'sha1']) ); return $next($request, $response); } } Base Path support If your application is running under a subdirectory, or if you are running pipeline middleware that is intercepting on a subpath, the paths generated by the router may not reflect the base path , and thus be invalid. To accommodate this, the UrlHelper supports injection of the base path; when present, it will be prepended to the path generated by the router. As an example, perhaps you have middleware running to intercept a language prefix in the URL; this middleware could then inject the UrlHelper with the detected language, before stripping it off the request URI instance to pass on to the router: use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Locale; use Psr\\Http\\Message\\ServerRequestInterface; use Mezzio\\Helper\\UrlHelper; class LocaleMiddleware implements MiddlewareInterface { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } public function process(ServerRequestInterface $request, DelegateInterface $delegate) { $uri = $request-&gt;getUri(); $path = $uri-&gt;getPath(); if (! preg_match('#^/(?P&lt;locale&gt;[a-z]{2,3}([-_][a-zA-Z]{2}|))/#', $path, $matches)) { return $delegate-&gt;process($request); } $locale = $matches['locale']; Locale::setDefault(Locale::canonicalize($locale)); $this-&gt;helper-&gt;setBasePath($locale); return $delegate-&gt;process($request-&gt;withUri( $uri-&gt;withPath(substr($path, (strlen($locale) + 1))) )); } } (Note: if the base path injected is not prefixed with / , the helper will add the slash.) Paths generated by the UriHelper from this point forward will have the detected language prefix.","title":"UrlHelper"},{"location":"v2/features/helpers/url-helper/#urlhelper","text":"Mezzio\\Helper\\UrlHelper provides the ability to generate a URI path based on a given route defined in the Mezzio\\Router\\RouterInterface . If injected with a route result, and the route being used was also the one matched during routing, you can provide a subset of routing parameters, and any not provided will be pulled from those matched.","title":"UrlHelper"},{"location":"v2/features/helpers/url-helper/#usage","text":"When you have an instance, use either its generate() method, or call the instance as an invokable: // Using the generate() method: $url = $helper-&gt;generate('resource', ['id' =&gt; 'sha1']); // is equivalent to invocation: $url = $helper('resource', ['id' =&gt; 'sha1']); The signature for both is: function ( $routeName, array $routeParams = [], $queryParams = [], $fragmentIdentifier = null, array $options = [] ) : string Where: $routeName is the name of a route defined in the composed router. You may omit this argument if you want to generate the path for the currently matched request. $routeParams is an array of substitutions to use for the provided route, with the following behavior: If a RouteResult is composed in the helper, and the $routeName matches it, the provided $params will be merged with any matched parameters, with those provided taking precedence. If a RouteResult is not composed, or if the composed result does not match the provided $routeName , then only the $params provided will be used for substitutions. If no $params are provided, and the $routeName matches the currently matched route, then any matched parameters found will be used. parameters found will be used. If no $params are provided, and the $routeName does not match the currently matched route, or if no route result is present, then no substitutions will be made. $queryParams is an array of query string arguments to include in the generated URI. $fragmentIdentifier is a string to use as the URI fragment. $options is an array of options to provide to the router for purposes of controlling URI generation. As an example, laminas-router can consume \"translator\" and \"text_domain\" options in order to provide translated URIs. Each method will raise an exception if: No $routeName is provided, and no RouteResult is composed. No $routeName is provided, a RouteResult is composed, but that result represents a matching failure. The given $routeName is not defined in the router.","title":"Usage"},{"location":"v2/features/helpers/url-helper/#creating-an-instance","text":"In order to use the helper, you will need to instantiate it with the current RouterInterface . The factory Mezzio\\Helper\\UrlHelperFactory has been provided for this purpose, and can be used trivially with most dependency injection containers implementing PSR-11 Container . Additionally, it is most useful when injected with the current results of routing, which requires registering middleware with the application that can inject the route result. The following steps should be followed to register and configure the helper: Register the UrlHelper as a service in your container, using the provided factory. Register the UrlHelperMiddleware as a service in your container, using the provided factory. Register the UrlHelperMiddleware as pipeline middleware, immediately following the routing middleware.","title":"Creating an instance"},{"location":"v2/features/helpers/url-helper/#using-the-helper-in-middleware","text":"Compose the helper in your middleware (or elsewhere), and then use it to generate URI paths: use Mezzio\\Helper\\UrlHelper; class FooMiddleware { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } public function __invoke($request, $response, callable $next) { $response = $response-&gt;withHeader( 'Link', $this-&gt;helper-&gt;generate('resource', ['id' =&gt; 'sha1']) ); return $next($request, $response); } }","title":"Using the helper in middleware"},{"location":"v2/features/helpers/url-helper/#base-path-support","text":"If your application is running under a subdirectory, or if you are running pipeline middleware that is intercepting on a subpath, the paths generated by the router may not reflect the base path , and thus be invalid. To accommodate this, the UrlHelper supports injection of the base path; when present, it will be prepended to the path generated by the router. As an example, perhaps you have middleware running to intercept a language prefix in the URL; this middleware could then inject the UrlHelper with the detected language, before stripping it off the request URI instance to pass on to the router: use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Locale; use Psr\\Http\\Message\\ServerRequestInterface; use Mezzio\\Helper\\UrlHelper; class LocaleMiddleware implements MiddlewareInterface { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } public function process(ServerRequestInterface $request, DelegateInterface $delegate) { $uri = $request-&gt;getUri(); $path = $uri-&gt;getPath(); if (! preg_match('#^/(?P&lt;locale&gt;[a-z]{2,3}([-_][a-zA-Z]{2}|))/#', $path, $matches)) { return $delegate-&gt;process($request); } $locale = $matches['locale']; Locale::setDefault(Locale::canonicalize($locale)); $this-&gt;helper-&gt;setBasePath($locale); return $delegate-&gt;process($request-&gt;withUri( $uri-&gt;withPath(substr($path, (strlen($locale) + 1))) )); } } (Note: if the base path injected is not prefixed with / , the helper will add the slash.) Paths generated by the UriHelper from this point forward will have the detected language prefix.","title":"Base Path support"},{"location":"v2/features/middleware/implicit-methods-middleware/","text":"ImplicitHeadMiddleware and ImplicitOptionsMiddleware Mezzio offers middleware for implicitly supporting HEAD and OPTIONS requests. The HTTP/1.1 specifications indicate that all server implementations must support HEAD requests for any given URI, and that they should support OPTIONS requests. To make this possible, we have added features to our routing layer, and middleware that can detect implicit support for these methods (i.e., the route was not registered explicitly with the method). Versions prior to 2.2 If you are using Mezzio versions earlier than 2.2, you may define a Mezzio\\Middleware\\ImplicitHeadMiddleware or Mezzio\\Middleware\\ImplicitOptionsMiddleware service under the invokables service configuration. However, starting in version 2.2, these classes are deprecated in favor of their equivalents that are now offered in the mezzio-router v2.4+ releases, under the namespace Mezzio\\Router\\Middleware . The documentation here has been updated to reflect usage under Mezzio 2.2+. ImplicitHeadMiddleware Mezzio\\Middleware\\ImplicitHeadMiddleware provides support for handling HEAD requests to routed middleware when the route does not explicitly allow for the method. It should be registered between the routing and dispatch middleware. To use it, it must first be registered with your container. The easiest way to do that is to register the mezzio-router ConfigProvider in your config/config.php : $aggregator = new ConfigAggregator([ \\Mezzio\\Router\\ConfigProvider::class, Alternately, add the following dependency configuration in one of your config/autoload/ configuration files or a ConfigProvider class: use Mezzio\\Router\\Middleware\\ImplicitHeadMiddleware; use Mezzio\\Router\\Middleware\\ImplicitHeadMiddlewareFactory; 'dependencies' =&gt; [ 'factories' =&gt; [ ImplicitHeadMiddleware::class =&gt; ImplicitHeadMiddlewareFactory::class, ], ], Within your application pipeline, add the middleware between the routing and dispatch middleware: $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(ImplicitHeadMiddleware::class); // ... $app-&gt;pipeDispatchMiddleware(); (Note: if you used the mezzio-pipeline-from-config tool to create your programmatic pipeline, or if you used the Mezzio skeleton, this middleware is likely already in your pipeline, as is a dependency entry.) When in place, it will do the following: If the request method is HEAD , AND the request composes a RouteResult attribute, AND the route result composes a Route instance, AND the route returns true for the implicitHead() method, THEN the middleware will return a response. In all other cases, it returns the result of delegating to the next middleware layer. When implicitHead() is matched, one of two things may occur. First, if the route does not support the GET method, then the middleware returns the composed response (either the one injected at instantiation, or an empty instance). However, if GET is supported, it will dispatch the next layer, but with a GET request instead of HEAD ; additionally, it will inject the returned response with an empty response body before returning it. Detecting forwarded requests Since 2.1.0 When the next layer is dispatched, the request will have an additional attribute, Mezzio\\Middleware\\ImplicitHeadMiddleware::FORWARDED_HTTP_METHOD_ATTRIBUTE , with a value of HEAD . As such, you can check for this value in order to vary the headers returned if desired. ImplicitOptionsMiddleware Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware provides support for handling OPTIONS requests to routed middleware when the route does not expliclity allow for the method. Like the ImplicitHeadMiddleware , it should be registered between the routing and dispatch middleware. To use it, it must first be registered with your container. The easiest way to do that is to register the mezzio-router ConfigProvider in your config/config.php : $aggregator = new ConfigAggregator([ \\Mezzio\\Router\\ConfigProvider::class, Alternately, add the following dependency configuration in one of your config/autoload/ configuration files or a ConfigProvider class: use Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware; use Mezzio\\Router\\Middleware\\ImplicitOptionsMiddlewareFactory; 'dependencies' =&gt; [ 'factories' =&gt; [ ImplicitOptionsMiddleware::class =&gt; ImplicitOptionsMiddlewareFactory::class, ], ], Within your application pipeline, add the middleware between the routing and dispatch middleware: $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(ImplicitOptionsMiddleware::class); // ... $app-&gt;pipeDispatchMiddleware(); (Note: if you used the mezzio-pipeline-from-config tool to create your programmatic pipeline, or if you used the Mezzio skeleton, this middleware is likely already in your pipeline, as is a dependency entry.) When in place, it will do the following: If the request method is OPTIONS , AND the request composes a RouteResult attribute, AND the route result composes a Route instance, AND the route returns true for the implicitOptions() method, THEN the middleware will return a response with an Allow header indicating methods the route allows. In all other cases, it returns the result of delegating to the next middleware layer. One thing to note: the allowed methods reported by the route and/or route result, and returned via the Allow header, may vary based on router implementation. In most cases, it should be an aggregate of all routes using the same path specification; however, it could be only the methods supported explicitly by the matched route.","title":"Implicit HEAD and OPTIONS Middleware"},{"location":"v2/features/middleware/implicit-methods-middleware/#implicitheadmiddleware-and-implicitoptionsmiddleware","text":"Mezzio offers middleware for implicitly supporting HEAD and OPTIONS requests. The HTTP/1.1 specifications indicate that all server implementations must support HEAD requests for any given URI, and that they should support OPTIONS requests. To make this possible, we have added features to our routing layer, and middleware that can detect implicit support for these methods (i.e., the route was not registered explicitly with the method).","title":"ImplicitHeadMiddleware and ImplicitOptionsMiddleware"},{"location":"v2/features/middleware/implicit-methods-middleware/#implicitheadmiddleware","text":"Mezzio\\Middleware\\ImplicitHeadMiddleware provides support for handling HEAD requests to routed middleware when the route does not explicitly allow for the method. It should be registered between the routing and dispatch middleware. To use it, it must first be registered with your container. The easiest way to do that is to register the mezzio-router ConfigProvider in your config/config.php : $aggregator = new ConfigAggregator([ \\Mezzio\\Router\\ConfigProvider::class, Alternately, add the following dependency configuration in one of your config/autoload/ configuration files or a ConfigProvider class: use Mezzio\\Router\\Middleware\\ImplicitHeadMiddleware; use Mezzio\\Router\\Middleware\\ImplicitHeadMiddlewareFactory; 'dependencies' =&gt; [ 'factories' =&gt; [ ImplicitHeadMiddleware::class =&gt; ImplicitHeadMiddlewareFactory::class, ], ], Within your application pipeline, add the middleware between the routing and dispatch middleware: $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(ImplicitHeadMiddleware::class); // ... $app-&gt;pipeDispatchMiddleware(); (Note: if you used the mezzio-pipeline-from-config tool to create your programmatic pipeline, or if you used the Mezzio skeleton, this middleware is likely already in your pipeline, as is a dependency entry.) When in place, it will do the following: If the request method is HEAD , AND the request composes a RouteResult attribute, AND the route result composes a Route instance, AND the route returns true for the implicitHead() method, THEN the middleware will return a response. In all other cases, it returns the result of delegating to the next middleware layer. When implicitHead() is matched, one of two things may occur. First, if the route does not support the GET method, then the middleware returns the composed response (either the one injected at instantiation, or an empty instance). However, if GET is supported, it will dispatch the next layer, but with a GET request instead of HEAD ; additionally, it will inject the returned response with an empty response body before returning it.","title":"ImplicitHeadMiddleware"},{"location":"v2/features/middleware/implicit-methods-middleware/#implicitoptionsmiddleware","text":"Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware provides support for handling OPTIONS requests to routed middleware when the route does not expliclity allow for the method. Like the ImplicitHeadMiddleware , it should be registered between the routing and dispatch middleware. To use it, it must first be registered with your container. The easiest way to do that is to register the mezzio-router ConfigProvider in your config/config.php : $aggregator = new ConfigAggregator([ \\Mezzio\\Router\\ConfigProvider::class, Alternately, add the following dependency configuration in one of your config/autoload/ configuration files or a ConfigProvider class: use Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware; use Mezzio\\Router\\Middleware\\ImplicitOptionsMiddlewareFactory; 'dependencies' =&gt; [ 'factories' =&gt; [ ImplicitOptionsMiddleware::class =&gt; ImplicitOptionsMiddlewareFactory::class, ], ], Within your application pipeline, add the middleware between the routing and dispatch middleware: $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(ImplicitOptionsMiddleware::class); // ... $app-&gt;pipeDispatchMiddleware(); (Note: if you used the mezzio-pipeline-from-config tool to create your programmatic pipeline, or if you used the Mezzio skeleton, this middleware is likely already in your pipeline, as is a dependency entry.) When in place, it will do the following: If the request method is OPTIONS , AND the request composes a RouteResult attribute, AND the route result composes a Route instance, AND the route returns true for the implicitOptions() method, THEN the middleware will return a response with an Allow header indicating methods the route allows. In all other cases, it returns the result of delegating to the next middleware layer. One thing to note: the allowed methods reported by the route and/or route result, and returned via the Allow header, may vary based on router implementation. In most cases, it should be an aggregate of all routes using the same path specification; however, it could be only the methods supported explicitly by the matched route.","title":"ImplicitOptionsMiddleware"},{"location":"v2/features/router/aura/","text":"Using Aura.Router Aura.Router provides a plethora of methods for further configuring the router instance. One of the more useful configuration is to provide default specifications: A regular expression that applies the same for a given routing match: // Parameters named \"id\" will only match digits by default: $router-&gt;addTokens([ 'id' =&gt; '\\d+', ]); A default parameter and/or its default value to always provide: // mediatype defaults to \"application/xhtml+xml\" and will be available in all // requests: $router-&gt;addValues([ 'mediatype' =&gt; 'application/xhtml+xml', ]); Only match if secure (i.e., under HTTPS): $router-&gt;setSecure(true); In order to specify these, you need access to the underlying Aura.Router instance, however, and the RouterInterface does not provide an accessor! The answer, then, is to use dependency injection. This can be done in two ways: programmatically, or via a factory to use in conjunction with your container instance. Installing Aura.Router To use Aura.Router, you will first need to install the Aura.Router integration: $ composer require mezzio/mezzio-aurarouter Quick Start At its simplest, you can instantiate a Mezzio\\Router\\AuraRouter instance with no arguments; it will create the underlying Aura.Router objects required and compose them for you: use Mezzio\\Router\\AuraRouter; $router = new AuraRouter(); Programmatic Creation If you need greater control over the Aura.Router setup and configuration, you can create the instances necessary and inject them into Mezzio\\Router\\AuraRouter during instantiation. &lt;?php use Aura\\Router\\RouterFactory; use Mezzio\\AppFactory; use Mezzio\\Router\\AuraRouter as AuraBridge; $auraRouter = (new RouterFactory())-&gt;newInstance(); $auraRouter-&gt;setSecure(true); $auraRouter-&gt;addValues([ 'mediatype' =&gt; 'application/xhtml+xml', ]); $router = new AuraBridge($auraRouter); // First argument is the container to use, if not using the default; // second is the router. $app = AppFactory::create(null, $router); Piping the route middleware As a reminder, you will need to ensure that middleware is piped in the order in which it needs to be executed; please see the section on \"Controlling middleware execution order\" in the piping documentation . This is particularly salient when defining routes before injecting the router in the application instance! Factory-Driven Creation We recommend using an Inversion of Control container for your applications; as such, in this section we will demonstrate two strategies for creating your Aura.Router implementation. Basic Router If you don't need to provide any setup or configuration, you can simply instantiate and return an instance of Mezzio\\Router\\AuraRouter for the service name Mezzio\\Router\\RouterInterface . A factory would look like this: // in src/Application/Container/RouterFactory.php namespace Application\\Container; use Psr\\Container\\ContainerInterface; use Mezzio\\Router\\AuraRouter; class RouterFactory { /** * @param ContainerInterface $container * @return AuraRouter */ public function __invoke(ContainerInterface $container) { return new AuraRouter(); } } You would register this with laminas-servicemanager using: $container-&gt;setFactory( Mezzio\\Router\\RouterInterface::class, Application\\Container\\RouterFactory::class ); And in Pimple: $pimple[Mezzio\\Router\\RouterInterface::class] = new Application\\Container\\RouterFactory(); For laminas-servicemanager, you can omit the factory entirely, and register the class as an invokable: $container-&gt;setInvokableClass( Mezzio\\Router\\RouterInterface::class, Mezzio\\Router\\AuraRouter::class ); Advanced Configuration If you want to provide custom setup or configuration, you can do so. In this example, we will be defining two factories: A factory to register as and generate an Aura\\Router\\Router instance. A factory registered as Mezzio\\Router\\RouterInterface , which creates and returns a Mezzio\\Router\\AuraRouter instance composing the Aura\\Router\\Router instance. Sound difficult? It's not; we've essentially done it above already! // in src/Application/Container/AuraRouterFactory.php: namespace Application\\Container; use Aura\\Router\\RouterFactory; use Psr\\Container\\ContainerInterface; class AuraRouterFactory { /** * @param ContainerInterface $container * @return \\Aura\\Router\\Router */ public function __invoke(ContainerInterface $container) { $router = (new RouterFactory())-&gt;newInstance(); $router-&gt;setSecure(true); $router-&gt;addValues([ 'mediatype' =&gt; 'application/xhtml+xml', ]); return $router; } } // in src/Application/Container/RouterFactory.php namespace Application\\Container; use Psr\\Container\\ContainerInterface; use Mezzio\\Router\\AuraRouter as AuraBridge; class RouterFactory { /** * @param ContainerInterface $container * @return AuraBridge */ public function __invoke(ContainerInterface $container) { return new AuraBridge($container-&gt;get('Aura\\Router\\Router')); } } From here, you will need to register your factories with your IoC container. If you are using laminas-servicemanager, this will look like: // Programmatically: use Laminas\\ServiceManager\\ServiceManager; $container = new ServiceManager(); $container-&gt;addFactory( 'Aura\\Router\\Router', Application\\Container\\AuraRouterFactory::class ); $container-&gt;addFactory( Mezzio\\Router\\RouterInterface::class, 'Application\\Container\\RouterFactory' ); // Alternately, via configuration: return [ 'factories' =&gt; [ 'Aura\\Router\\Router' =&gt; Application\\Container\\AuraRouterFactory::class, Mezzio\\Router\\RouterInterface::class =&gt; 'Application\\Container\\RouterFactory::class, ], ]; For Pimple, configuration looks like: use Application\\Container\\AuraRouterFactory; use Application\\Container\\RouterFactory; use Interop\\Container\\Pimple\\PimpleInterop as Pimple; $container = new Pimple(); $container['Aura\\Router\\Router'] = new AuraRouterFactory(); $container[Mezzio\\Router\\RouterInterface::class] = new RouterFactory();","title":"Using Aura"},{"location":"v2/features/router/aura/#using-aurarouter","text":"Aura.Router provides a plethora of methods for further configuring the router instance. One of the more useful configuration is to provide default specifications: A regular expression that applies the same for a given routing match: // Parameters named \"id\" will only match digits by default: $router-&gt;addTokens([ 'id' =&gt; '\\d+', ]); A default parameter and/or its default value to always provide: // mediatype defaults to \"application/xhtml+xml\" and will be available in all // requests: $router-&gt;addValues([ 'mediatype' =&gt; 'application/xhtml+xml', ]); Only match if secure (i.e., under HTTPS): $router-&gt;setSecure(true); In order to specify these, you need access to the underlying Aura.Router instance, however, and the RouterInterface does not provide an accessor! The answer, then, is to use dependency injection. This can be done in two ways: programmatically, or via a factory to use in conjunction with your container instance.","title":"Using Aura.Router"},{"location":"v2/features/router/aura/#installing-aurarouter","text":"To use Aura.Router, you will first need to install the Aura.Router integration: $ composer require mezzio/mezzio-aurarouter","title":"Installing Aura.Router"},{"location":"v2/features/router/aura/#quick-start","text":"At its simplest, you can instantiate a Mezzio\\Router\\AuraRouter instance with no arguments; it will create the underlying Aura.Router objects required and compose them for you: use Mezzio\\Router\\AuraRouter; $router = new AuraRouter();","title":"Quick Start"},{"location":"v2/features/router/aura/#programmatic-creation","text":"If you need greater control over the Aura.Router setup and configuration, you can create the instances necessary and inject them into Mezzio\\Router\\AuraRouter during instantiation. &lt;?php use Aura\\Router\\RouterFactory; use Mezzio\\AppFactory; use Mezzio\\Router\\AuraRouter as AuraBridge; $auraRouter = (new RouterFactory())-&gt;newInstance(); $auraRouter-&gt;setSecure(true); $auraRouter-&gt;addValues([ 'mediatype' =&gt; 'application/xhtml+xml', ]); $router = new AuraBridge($auraRouter); // First argument is the container to use, if not using the default; // second is the router. $app = AppFactory::create(null, $router);","title":"Programmatic Creation"},{"location":"v2/features/router/aura/#factory-driven-creation","text":"We recommend using an Inversion of Control container for your applications; as such, in this section we will demonstrate two strategies for creating your Aura.Router implementation.","title":"Factory-Driven Creation"},{"location":"v2/features/router/fast-route/","text":"Using FastRoute FastRoute provides a number of different combinations for how to both parse routes and match incoming requests against them. Internally, we use the standard route parser ( FastRoute\\RouterParser\\Std ) to parse routes, a RouteCollector to collect them, and the \"Group Count Based\" dispatcher to match incoming requests against routes. If you wish to use a different combination — e.g., to use the Group Position Based route matcher — you will need to create your own instances and inject them into the Mezzio\\Router\\FastRouteRouter class, at instantiation. The FastRouteRouter bridge class accepts two arguments at instantiation: A FastRoute\\RouteCollector instance A callable that will return a FastRoute\\Dispatcher\\RegexBasedAbstract instance. Injection can be done either programmatically or via a factory to use in conjunction with your container instance. Installing FastRoute To use FastRoute, you will first need to install the FastRoute integration: $ composer require mezzio/mezzio-fastroute Quick Start At its simplest, you can instantiate a Mezzio\\Router\\FastRouteRouter instance with no arguments; it will create the underlying FastRoute objects required and compose them for you: use Mezzio\\Router\\FastRouteRouter; $router = new FastRouteRouter(); Programmatic Creation If you need greater control over the FastRoute setup and configuration, you can create the instances necessary and inject them into Mezzio\\Router\\FastRouteRouter during instantiation. To do so, you will need to set up your RouteCollector instance and/or optionally callable to return your RegexBasedAbstract instance manually, inject them in your Mezzio\\Router\\FastRouteRouter instance, and inject use that when creating your Application instance. &lt;?php use FastRoute\\Dispatcher\\GroupPosBased as FastRouteDispatcher; use FastRoute\\RouteCollector; use FastRoute\\RouteGenerator; use FastRoute\\RouteParser\\Std as RouteParser; use Mezzio\\AppFactory; use Mezzio\\Router\\FastRouteRouter as FastRouteBridge; $fastRoute = new RouteCollector( new RouteParser(), new RouteGenerator() ); $getDispatcher = function ($data) { return new FastRouteDispatcher($data); }; $router = new FastRouteBridge($fastRoute, $getDispatcher); // First argument is the container to use, if not using the default; // second is the router. $app = AppFactory::create(null, $router); Piping the route middleware As a reminder, you will need to ensure that middleware is piped in the order in which it needs to be executed; please see the section on \"Controlling middleware execution order\" in the piping documentation . This is particularly salient when defining routes before injecting the router in the application instance! Factory-Driven Creation We recommend using an Inversion of Control container for your applications; as such, in this section we will demonstrate two strategies for creating your FastRoute implementation. Basic Router If you don't need to provide any setup or configuration, you can simply instantiate and return an instance of Mezzio\\Router\\FastRouteRouter for the service name Mezzio\\Router\\RouterInterface . A factory would look like this: // in src/App/Container/RouterFactory.php namespace App\\Container; use Psr\\Container\\ContainerInterface; use Mezzio\\Router\\FastRouteRouter; class RouterFactory { /** * @param ContainerInterface $container * @return FastRouteRouter */ public function __invoke(ContainerInterface $container) { return new FastRouteRouter(); } } You would register this with laminas-servicemanager using: $container-&gt;setFactory( Mezzio\\Router\\RouterInterface::class, App\\Container\\RouterFactory::class ); And in Pimple: $pimple[Mezzio\\Router\\RouterInterface::class] = new App\\Container\\RouterFactory(); For laminas-servicemanager, you can omit the factory entirely, and register the class as an invokable: $container-&gt;setInvokableClass( Mezzio\\Router\\RouterInterface::class, Mezzio\\Router\\FastRouteRouter::class ); Advanced Configuration If you want to provide custom setup or configuration, you can do so. In this example, we will be defining three factories: A factory to register as and generate a FastRoute\\RouteCollector instance. A factory to register as FastRoute\\DispatcherFactory and return a callable factory that returns a RegexBasedAbstract instance. A factory registered as Mezzio\\Router\\RouterInterface , which creates and returns a Mezzio\\Router\\FastRouteRouter instance composing the two services. Sound difficult? It's not; we've essentially done it above already! &lt;?php // in src/App/Container/FastRouteCollectorFactory.php: namespace App\\Container; use FastRoute\\RouteCollector; use FastRoute\\RouteGenerator; use FastRoute\\RouteParser\\Std as RouteParser; use Psr\\Container\\ContainerInterface; class FastRouteCollectorFactory { /** * @param ContainerInterface $container * @return RouteCollector */ public function __invoke(ContainerInterface $container) { return new RouteCollector( new RouteParser(), new RouteGenerator() ); } } // in src/App/Container/FastRouteDispatcherFactory.php: namespace App\\Container; use FastRoute\\Dispatcher\\GroupPosBased as FastRouteDispatcher; use Psr\\Container\\ContainerInterface; class FastRouteDispatcherFactory { /** * @param ContainerInterface $container * @return callable */ public function __invoke(ContainerInterface $container) { return function ($data) { return new FastRouteDispatcher($data); }; } } // in src/App/Container/RouterFactory.php namespace App\\Container; use Psr\\Container\\ContainerInterface; use Mezzio\\Router\\FastRouteRouter as FastRouteBridge; class RouterFactory { /** * @param ContainerInterface $container * @return FastRouteBridge */ public function __invoke(ContainerInterface $container) { return new FastRouteBridge( $container-&gt;get(FastRoute\\RouteCollector::class), $container-&gt;get(FastRoute\\DispatcherFactory::class) ); } } From here, you will need to register your factories with your IoC container. If you are using laminas-servicemanager, this will look like: // Programmatically: use Laminas\\ServiceManager\\ServiceManager; $container = new ServiceManager(); $container-&gt;addFactory( FastRoute\\RouteCollector::class, App\\Container\\FastRouteCollectorFactory::class ); $container-&gt;addFactory( FastRoute\\DispatcherFactory::class, App\\Container\\FastRouteDispatcherFactory::class ); $container-&gt;addFactory( Mezzio\\Router\\RouterInterface::class, App\\Container\\RouterFactory::class ); // Alternately, via configuration: return [ 'factories' =&gt; [ 'FastRoute\\RouteCollector' =&gt; App\\Container\\FastRouteCollectorFactory::class, 'FastRoute\\DispatcherFactory' =&gt; App\\Container\\FastRouteDispatcherFactory::class, Mezzio\\Router\\RouterInterface::class =&gt; App\\Container\\RouterFactory::class, ], ]; For Pimple, configuration looks like: use App\\Container\\FastRouteCollectorFactory; use App\\Container\\FastRouteDispatcherFactory; use App\\Container\\RouterFactory; use Interop\\Container\\Pimple\\PimpleInterop as Pimple; $container = new Pimple(); $container[FastRoute\\RouteCollector::class] = new FastRouteCollectorFactory(); $container[FastRoute\\RouteDispatcher::class] = new FastRouteDispatcherFactory(); $container[Mezzio\\Router\\RouterInterface::class] = new RouterFactory(); FastRoute caching support Since mezzio-fastroute 1.3.0. Starting from version 1.3.0, mezzio-fastroute comes with support for FastRoute native dispatch data caching. Enabling this feature requires changes to your configuration. Typically, router configuration occurs in config/autoload/routes.global.php ; as such, we will reference that file when indicating configuration changes. The changes required are: You will need to delegate creation of the router instance to a new factory. You will need to add a new configuration entry, $config['router']['fastroute'] . The options in this entry will be used by the factory to build the router instance in order to toggle caching support and to specify a custom cache file. As an example: // File config/autoload/routes.global.php return [ 'dependencies' =&gt; [ //.. 'invokables' =&gt; [ /* ... */ // Comment out or remove the following line: // Mezzio\\Router\\RouterInterface::class =&gt; Mezzio\\Router\\FastRouteRouter::class, /* ... */ ], 'factories' =&gt; [ /* ... */ // Add this line; the specified factory now creates the router instance: Mezzio\\Router\\RouterInterface::class =&gt; Mezzio\\Router\\FastRouteRouterFactory::class, /* ... */ ], ], // Add the following to enable caching support: 'router' =&gt; [ 'fastroute' =&gt; [ // Enable caching support: 'cache_enabled' =&gt; true, // Optional (but recommended) cache file path: 'cache_file' =&gt; 'data/cache/fastroute.php.cache', ], ], 'routes' =&gt; [ /* ... */ ], ]; The FastRoute-specific caching options are as follows: cache_enabled (bool) is used to toggle caching support. It's advisable to enable caching in a production environment and leave it disabled for the development environment. Commenting or omitting this option is equivalent to having it set to false . We recommend enabling it in config/autoload/routes.global.php , and, in development, disabling it within config/autoload/routes.local.php or config/autoload/local.php . cache_file (string) is an optional parameter that represents the path of the dispatch data cache file. It can be provided as an absolute file path or as a path relative to the mezzio working directory. It defaults to data/cache/fastroute.php.cache , where data/cache/ is the cache directory defined within the mezzio skeleton application. An explicit absolute file path is recommended since the php include construct will skip searching the include_path and the current directory. If you choose a custom path, make sure that the directory exists and is writable by the owner of the PHP process. As with any other mezzio cached configuration, you will need to purge this file in order to enable any newly added route when FastRoute caching is enabled.","title":"Using FastRoute"},{"location":"v2/features/router/fast-route/#using-fastroute","text":"FastRoute provides a number of different combinations for how to both parse routes and match incoming requests against them. Internally, we use the standard route parser ( FastRoute\\RouterParser\\Std ) to parse routes, a RouteCollector to collect them, and the \"Group Count Based\" dispatcher to match incoming requests against routes. If you wish to use a different combination — e.g., to use the Group Position Based route matcher — you will need to create your own instances and inject them into the Mezzio\\Router\\FastRouteRouter class, at instantiation. The FastRouteRouter bridge class accepts two arguments at instantiation: A FastRoute\\RouteCollector instance A callable that will return a FastRoute\\Dispatcher\\RegexBasedAbstract instance. Injection can be done either programmatically or via a factory to use in conjunction with your container instance.","title":"Using FastRoute"},{"location":"v2/features/router/fast-route/#installing-fastroute","text":"To use FastRoute, you will first need to install the FastRoute integration: $ composer require mezzio/mezzio-fastroute","title":"Installing FastRoute"},{"location":"v2/features/router/fast-route/#quick-start","text":"At its simplest, you can instantiate a Mezzio\\Router\\FastRouteRouter instance with no arguments; it will create the underlying FastRoute objects required and compose them for you: use Mezzio\\Router\\FastRouteRouter; $router = new FastRouteRouter();","title":"Quick Start"},{"location":"v2/features/router/fast-route/#programmatic-creation","text":"If you need greater control over the FastRoute setup and configuration, you can create the instances necessary and inject them into Mezzio\\Router\\FastRouteRouter during instantiation. To do so, you will need to set up your RouteCollector instance and/or optionally callable to return your RegexBasedAbstract instance manually, inject them in your Mezzio\\Router\\FastRouteRouter instance, and inject use that when creating your Application instance. &lt;?php use FastRoute\\Dispatcher\\GroupPosBased as FastRouteDispatcher; use FastRoute\\RouteCollector; use FastRoute\\RouteGenerator; use FastRoute\\RouteParser\\Std as RouteParser; use Mezzio\\AppFactory; use Mezzio\\Router\\FastRouteRouter as FastRouteBridge; $fastRoute = new RouteCollector( new RouteParser(), new RouteGenerator() ); $getDispatcher = function ($data) { return new FastRouteDispatcher($data); }; $router = new FastRouteBridge($fastRoute, $getDispatcher); // First argument is the container to use, if not using the default; // second is the router. $app = AppFactory::create(null, $router);","title":"Programmatic Creation"},{"location":"v2/features/router/fast-route/#factory-driven-creation","text":"We recommend using an Inversion of Control container for your applications; as such, in this section we will demonstrate two strategies for creating your FastRoute implementation.","title":"Factory-Driven Creation"},{"location":"v2/features/router/interface/","text":"Routing Interface Mezzio defines Mezzio\\Router\\RouterInterface , which can be injected into and consumed by Mezzio\\Application in order to provide dynamic routing capabilities to middleware. The interface serves as an abstraction to allow routers with varying capabilities to be used with an application. The interface is defined as follows: namespace Mezzio\\Router; use Psr\\Http\\Message\\ServerRequestInterface as Request; interface RouterInterface { /** * Add a route. * * This method adds a route against which the underlying implementation may * match. Implementations MUST aggregate route instances, but MUST NOT use * the details to inject the underlying router until `match()` and/or * `generateUri()` is called. This is required to allow consumers to * modify route instances before matching (e.g., to provide route options, * inject a name, etc.). * * The method MUST raise Exception\\RuntimeException if called after either `match()` * or `generateUri()` have already been called, to ensure integrity of the * router between invocations of either of those methods. * * @param Route $route * @throws Exception\\RuntimeException when called after match() or * generateUri() have been called. */ public function addRoute(Route $route); /** * Match a request against the known routes. * * Implementations will aggregate required information from the provided * request instance, and pass them to the underlying router implementation; * when done, they will then marshal a `RouteResult` instance indicating * the results of the matching operation and return it to the caller. * * @param Request $request * @return RouteResult */ public function match(Request $request); /** * Generate a URI from the named route. * * Takes the named route and any substitutions, and attempts to generate a * URI from it. * * @see https://github.com/auraphp/Aura.Router#generating-a-route-path * @see https://docs.laminas.dev/laminas.mvc.routing.html * @param string $name * @param array $substitutions * @param array $options * @return string * @throws Exception\\RuntimeException if unable to generate the given URI. */ public function generateUri($name, array $substitutions = [], array $options = []); } Developers may create and use their own implementations. We recommend registering your implementation as the service Mezzio\\Router\\RouterInterface in your container to ensure other factories provided by mezzio will receive your custom service. Implementors should also read the following sections detailing the Route and RouteResult classes, to ensure that their implementations interoperate correctly. Routes Routes are defined via Mezzio\\Router\\Route , and aggregate the following information: Path to match. Middleware to use when the route is matched. This may be a callable or a service name resolving to middleware. HTTP methods allowed for the route; if none are provided, all are assumed. Optionally, a name by which to reference the route. The Route class has the following signature: namespace Mezzio\\Router; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; class Route { const HTTP_METHOD_ANY = 0xff; const HTTP_METHOD_SEPARATOR = ':'; /** * @param string $path Path to match. * @param string|callable|MiddlewareInterface $middleware Middleware to use * when this route is matched. * @param int|array Allowed HTTP methods; defaults to HTTP_METHOD_ANY. * @param string|null $name the route name * @throws Exception\\InvalidArgumentException for invalid path type. * @throws Exception\\InvalidArgumentException for invalid middleware type. * @throws Exception\\InvalidArgumentException for any invalid HTTP method names. */ public function __construct($path, $middleware, $methods = self::HTTP_METHOD_ANY, $name = null); /** * @return string */ public function getPath(); /** * Set the route name. * * @param string $name */ public function setName($name); /** * @return string */ public function getName(); /** * @return string|callable|MiddlewareInterface */ public function getMiddleware(); /** * @return int|string[] Returns HTTP_METHOD_ANY or array of allowed methods. */ public function getAllowedMethods(); /** * Indicate whether the specified method is allowed by the route. * * @param string $method HTTP method to test. * @return bool */ public function allowsMethod($method); /** * @param array $options */ public function setOptions(array $options); /** * @return array */ public function getOptions(); } Typically, developers will use Mezzio\\Application::route() (or one of the HTTP-specific routing methods) to create routes, and will not need to interact with Route instances. However, that method can also accept Route instances, allowing more flexibility in defining and configuring them; additionally, when working with RouteResult instances, you may pull the Route instance from that in order to obtain data about the matched route. Matching and RouteResults Internally, Mezzio\\Application calls on RouterInterface::match() , passing it the current request instance. This allows implementations to pull what they may need from the request in order to perform their routing logic; for example, they may need the request method, the URI path, the value of the HTTPS server variable, etc. Implementations are expected to return a Mezzio\\Router\\RouteResult instance, which the routing middleware then uses to determine if routing succeeded. In the event of success, it will pull any matched parameters from the result and inject them as request attributes, and then pull the matched middleware and execute it. In the case of failure, it will determine if the failure was due to inability to match, or usage of a disallowed HTTP method; in the former case, it proceeds to the next middleware in the stack, and in the latter, returns a 405 response. The RouteResult signature is as follows: namespace Mezzio\\Router; class RouteResult { /** * Create an instance representing a route success from a Route instance. * * This method should be used for generating an instance indicating a route * success. * * @param Route $route * @param array $params Parameters associated with the matched route. * @return static */ public static function fromRoute(Route $route, array $params = []); /** * Create an instance representing a route failure. * * @param null|int|array $methods HTTP methods allowed for the current URI, if any * @return static */ public static function fromRouteFailure($methods = null); /** * Does the result represent successful routing? * * @return bool */ public function isSuccess(); /** * Retrieve the matched route, if possible. * * If this result represents a failure, return false; otherwise, return the * matched route instance. * * @return Route */ public function getMatchedRoute(); /** * Retrieve the matched route name, if possible. * * If this result represents a failure, return false; otherwise, return the * matched route name. * * @return string */ public function getMatchedRouteName(); /** * Retrieve the matched middleware, if possible. * * @return false|callable|string Returns false if the result represents a * failure; otherwise, a callable or a string service name. */ public function getMatchedMiddleware(); /** * Returns the matched params. * * Guaranteed to return an array, even if it is simply empty. * * @return array */ public function getMatchedParams(); /** * Is this a routing failure result? * * @return bool */ public function isFailure(); /** * Does the result represent failure to route due to HTTP method? * * @return bool */ public function isMethodFailure(); /** * Retrieve the allowed methods for the route failure. * * @return string[] HTTP methods allowed */ public function getAllowedMethods(); } Typically, only those implementing routers will interact with this class.","title":"Routing Interface"},{"location":"v2/features/router/interface/#routing-interface","text":"Mezzio defines Mezzio\\Router\\RouterInterface , which can be injected into and consumed by Mezzio\\Application in order to provide dynamic routing capabilities to middleware. The interface serves as an abstraction to allow routers with varying capabilities to be used with an application. The interface is defined as follows: namespace Mezzio\\Router; use Psr\\Http\\Message\\ServerRequestInterface as Request; interface RouterInterface { /** * Add a route. * * This method adds a route against which the underlying implementation may * match. Implementations MUST aggregate route instances, but MUST NOT use * the details to inject the underlying router until `match()` and/or * `generateUri()` is called. This is required to allow consumers to * modify route instances before matching (e.g., to provide route options, * inject a name, etc.). * * The method MUST raise Exception\\RuntimeException if called after either `match()` * or `generateUri()` have already been called, to ensure integrity of the * router between invocations of either of those methods. * * @param Route $route * @throws Exception\\RuntimeException when called after match() or * generateUri() have been called. */ public function addRoute(Route $route); /** * Match a request against the known routes. * * Implementations will aggregate required information from the provided * request instance, and pass them to the underlying router implementation; * when done, they will then marshal a `RouteResult` instance indicating * the results of the matching operation and return it to the caller. * * @param Request $request * @return RouteResult */ public function match(Request $request); /** * Generate a URI from the named route. * * Takes the named route and any substitutions, and attempts to generate a * URI from it. * * @see https://github.com/auraphp/Aura.Router#generating-a-route-path * @see https://docs.laminas.dev/laminas.mvc.routing.html * @param string $name * @param array $substitutions * @param array $options * @return string * @throws Exception\\RuntimeException if unable to generate the given URI. */ public function generateUri($name, array $substitutions = [], array $options = []); } Developers may create and use their own implementations. We recommend registering your implementation as the service Mezzio\\Router\\RouterInterface in your container to ensure other factories provided by mezzio will receive your custom service. Implementors should also read the following sections detailing the Route and RouteResult classes, to ensure that their implementations interoperate correctly.","title":"Routing Interface"},{"location":"v2/features/router/interface/#routes","text":"Routes are defined via Mezzio\\Router\\Route , and aggregate the following information: Path to match. Middleware to use when the route is matched. This may be a callable or a service name resolving to middleware. HTTP methods allowed for the route; if none are provided, all are assumed. Optionally, a name by which to reference the route. The Route class has the following signature: namespace Mezzio\\Router; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; class Route { const HTTP_METHOD_ANY = 0xff; const HTTP_METHOD_SEPARATOR = ':'; /** * @param string $path Path to match. * @param string|callable|MiddlewareInterface $middleware Middleware to use * when this route is matched. * @param int|array Allowed HTTP methods; defaults to HTTP_METHOD_ANY. * @param string|null $name the route name * @throws Exception\\InvalidArgumentException for invalid path type. * @throws Exception\\InvalidArgumentException for invalid middleware type. * @throws Exception\\InvalidArgumentException for any invalid HTTP method names. */ public function __construct($path, $middleware, $methods = self::HTTP_METHOD_ANY, $name = null); /** * @return string */ public function getPath(); /** * Set the route name. * * @param string $name */ public function setName($name); /** * @return string */ public function getName(); /** * @return string|callable|MiddlewareInterface */ public function getMiddleware(); /** * @return int|string[] Returns HTTP_METHOD_ANY or array of allowed methods. */ public function getAllowedMethods(); /** * Indicate whether the specified method is allowed by the route. * * @param string $method HTTP method to test. * @return bool */ public function allowsMethod($method); /** * @param array $options */ public function setOptions(array $options); /** * @return array */ public function getOptions(); } Typically, developers will use Mezzio\\Application::route() (or one of the HTTP-specific routing methods) to create routes, and will not need to interact with Route instances. However, that method can also accept Route instances, allowing more flexibility in defining and configuring them; additionally, when working with RouteResult instances, you may pull the Route instance from that in order to obtain data about the matched route.","title":"Routes"},{"location":"v2/features/router/interface/#matching-and-routeresults","text":"Internally, Mezzio\\Application calls on RouterInterface::match() , passing it the current request instance. This allows implementations to pull what they may need from the request in order to perform their routing logic; for example, they may need the request method, the URI path, the value of the HTTPS server variable, etc. Implementations are expected to return a Mezzio\\Router\\RouteResult instance, which the routing middleware then uses to determine if routing succeeded. In the event of success, it will pull any matched parameters from the result and inject them as request attributes, and then pull the matched middleware and execute it. In the case of failure, it will determine if the failure was due to inability to match, or usage of a disallowed HTTP method; in the former case, it proceeds to the next middleware in the stack, and in the latter, returns a 405 response. The RouteResult signature is as follows: namespace Mezzio\\Router; class RouteResult { /** * Create an instance representing a route success from a Route instance. * * This method should be used for generating an instance indicating a route * success. * * @param Route $route * @param array $params Parameters associated with the matched route. * @return static */ public static function fromRoute(Route $route, array $params = []); /** * Create an instance representing a route failure. * * @param null|int|array $methods HTTP methods allowed for the current URI, if any * @return static */ public static function fromRouteFailure($methods = null); /** * Does the result represent successful routing? * * @return bool */ public function isSuccess(); /** * Retrieve the matched route, if possible. * * If this result represents a failure, return false; otherwise, return the * matched route instance. * * @return Route */ public function getMatchedRoute(); /** * Retrieve the matched route name, if possible. * * If this result represents a failure, return false; otherwise, return the * matched route name. * * @return string */ public function getMatchedRouteName(); /** * Retrieve the matched middleware, if possible. * * @return false|callable|string Returns false if the result represents a * failure; otherwise, a callable or a string service name. */ public function getMatchedMiddleware(); /** * Returns the matched params. * * Guaranteed to return an array, even if it is simply empty. * * @return array */ public function getMatchedParams(); /** * Is this a routing failure result? * * @return bool */ public function isFailure(); /** * Does the result represent failure to route due to HTTP method? * * @return bool */ public function isMethodFailure(); /** * Retrieve the allowed methods for the route failure. * * @return string[] HTTP methods allowed */ public function getAllowedMethods(); } Typically, only those implementing routers will interact with this class.","title":"Matching and RouteResults"},{"location":"v2/features/router/intro/","text":"Routing One fundamental feature of mezzio is that it provides mechanisms for implementing dynamic routing, a feature required in most modern web applications. As an example, you may want to allow matching both a resource, as well as individual items of that resource: /books might return a collection of books /books/mezzio might return the individual book identified by \"mezzio\". Mezzio does not provide routing on its own; you must choose a routing adapter that implements Mezzio\\Router\\RouterInterface and provide it to the Application instance. This allows you to choose the router with the capabilities that best match your own needs, while still providing a common abstraction for defining and aggregating routes and their related middleware. Retrieving matched parameters Routing enables the ability to match dynamic path segments (or other criteria). Typically, you will want access to the values matched. The routing middleware injects any matched parameters as returned by the underlying router into the request as attributes . In the example above, let's assume the route was defined as /books/:id , where id is the name of the dynamic segment. This means that in the middleware invoked for this route, you can fetch the id attribute to discover what was matched: $id = $request-&gt;getAttribute('id'); Retrieving the matched route When routing is successful, the routing middleware injects a Mezzio\\Router\\RouteResult instance as a request attribute, using that class name as the attribute name. The RouteResult instance provides you access to the following: The matched Mezzio\\Router\\Route instance, via $result-&gt;getMatchedRoute() . The matched route name, via $result-&gt;getMatchedRouteName() (or via $result-&gt;getMatchedRoute()-&gt;getName() ). The matched middleware, via $result-&gt;getMatchedMiddleware() (or via $result-&gt;getMatchedRoute()-&gt;getMiddleware() ). Matched parameters, via $result-&gt;getMatchedParams() (as noted above, these are also each injected as discrete request attributes). Allowed HTTP methods, via $result-&gt;getAllowedMethods() . As an example, you could use middleware similar to the following to return a 403 response if routing was successful, but no Authorization header is present: use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Laminas\\Diactoros\\Response\\EmptyResponse; use Mezzio\\Router\\RouteResult; function ($request, DelegateInterface $delegate) use ($routesRequiringAuthorization, $validator) { if (! ($result = $request-&gt;getAttribute(RouteResult::class, false))) { // No route matched; delegate to next middleware return $delegate-&gt;process($request); } if (! in_array($result-&gt;getMatchedRouteName(), $routesRequiringAuthorization, true)) { // Not a route requiring authorization return $delegate-&gt;process($request); } $header = $request-&gt;getHeaderLine('Authorization'); if (! $validator($header)) { return new EmptyResponse(403); } return $delegate-&gt;process($request); } Note that the first step is to determine if we have a RouteResult ; if we do not have one, we should either delegate to the next middleware, or return some sort of response (generally a 404). In the case of Mezzio, a later middleware will generate the 404 response for us, so we can safely delegate. URI generation Because routers have knowledge of the various paths they can match, they are also typically used within applications to generate URIs to other application resources. Mezzio provides this capability in the RouterInterface , either delegating to the underlying router implementations or providing a compatible implementation of its own. At it's most basic level, you call the generateUri() method with a route name and any substitutions you want to make: $uri = $router-&gt;generateUri('book', ['id' =&gt; 'mezzio']); Some routers may support providing options during URI generation. Starting in mezzio-router 2.0, which ships with Mezzio starting with version 2.0, you may also pass a third argument to generateUri() , an array of router options: $uri = $router-&gt;generateUri('book', ['id' =&gt; 'mezzio'], [ 'translator' =&gt; $translator, 'text_domain' =&gt; $currentLocale, ]); Supported implementations Mezzio currently ships with adapters for the following routers: Aura.Router FastRoute laminas-mvc Router","title":"Introduction"},{"location":"v2/features/router/intro/#routing","text":"One fundamental feature of mezzio is that it provides mechanisms for implementing dynamic routing, a feature required in most modern web applications. As an example, you may want to allow matching both a resource, as well as individual items of that resource: /books might return a collection of books /books/mezzio might return the individual book identified by \"mezzio\". Mezzio does not provide routing on its own; you must choose a routing adapter that implements Mezzio\\Router\\RouterInterface and provide it to the Application instance. This allows you to choose the router with the capabilities that best match your own needs, while still providing a common abstraction for defining and aggregating routes and their related middleware.","title":"Routing"},{"location":"v2/features/router/intro/#retrieving-matched-parameters","text":"Routing enables the ability to match dynamic path segments (or other criteria). Typically, you will want access to the values matched. The routing middleware injects any matched parameters as returned by the underlying router into the request as attributes . In the example above, let's assume the route was defined as /books/:id , where id is the name of the dynamic segment. This means that in the middleware invoked for this route, you can fetch the id attribute to discover what was matched: $id = $request-&gt;getAttribute('id');","title":"Retrieving matched parameters"},{"location":"v2/features/router/intro/#retrieving-the-matched-route","text":"When routing is successful, the routing middleware injects a Mezzio\\Router\\RouteResult instance as a request attribute, using that class name as the attribute name. The RouteResult instance provides you access to the following: The matched Mezzio\\Router\\Route instance, via $result-&gt;getMatchedRoute() . The matched route name, via $result-&gt;getMatchedRouteName() (or via $result-&gt;getMatchedRoute()-&gt;getName() ). The matched middleware, via $result-&gt;getMatchedMiddleware() (or via $result-&gt;getMatchedRoute()-&gt;getMiddleware() ). Matched parameters, via $result-&gt;getMatchedParams() (as noted above, these are also each injected as discrete request attributes). Allowed HTTP methods, via $result-&gt;getAllowedMethods() . As an example, you could use middleware similar to the following to return a 403 response if routing was successful, but no Authorization header is present: use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Laminas\\Diactoros\\Response\\EmptyResponse; use Mezzio\\Router\\RouteResult; function ($request, DelegateInterface $delegate) use ($routesRequiringAuthorization, $validator) { if (! ($result = $request-&gt;getAttribute(RouteResult::class, false))) { // No route matched; delegate to next middleware return $delegate-&gt;process($request); } if (! in_array($result-&gt;getMatchedRouteName(), $routesRequiringAuthorization, true)) { // Not a route requiring authorization return $delegate-&gt;process($request); } $header = $request-&gt;getHeaderLine('Authorization'); if (! $validator($header)) { return new EmptyResponse(403); } return $delegate-&gt;process($request); } Note that the first step is to determine if we have a RouteResult ; if we do not have one, we should either delegate to the next middleware, or return some sort of response (generally a 404). In the case of Mezzio, a later middleware will generate the 404 response for us, so we can safely delegate.","title":"Retrieving the matched route"},{"location":"v2/features/router/intro/#uri-generation","text":"Because routers have knowledge of the various paths they can match, they are also typically used within applications to generate URIs to other application resources. Mezzio provides this capability in the RouterInterface , either delegating to the underlying router implementations or providing a compatible implementation of its own. At it's most basic level, you call the generateUri() method with a route name and any substitutions you want to make: $uri = $router-&gt;generateUri('book', ['id' =&gt; 'mezzio']); Some routers may support providing options during URI generation. Starting in mezzio-router 2.0, which ships with Mezzio starting with version 2.0, you may also pass a third argument to generateUri() , an array of router options: $uri = $router-&gt;generateUri('book', ['id' =&gt; 'mezzio'], [ 'translator' =&gt; $translator, 'text_domain' =&gt; $currentLocale, ]);","title":"URI generation"},{"location":"v2/features/router/intro/#supported-implementations","text":"Mezzio currently ships with adapters for the following routers: Aura.Router FastRoute laminas-mvc Router","title":"Supported implementations"},{"location":"v2/features/router/laminas-router/","text":"Using the Laminas Router laminas-router provides several router implementations used for Laminas+ applications; the default is Laminas\\Router\\Http\\TreeRouteStack , which can compose a number of different routes of differing types in order to perform routing. The Laminas bridge we provide, Mezzio\\Router\\LaminasRouter , uses the TreeRouteStack , and injects Segment routes to it; these are in turn injected with Method routes, and a special \"method not allowed\" route at negative priority to enable us to distinguish between failure to match the path and failure to match the HTTP method. If you instantiate it with no arguments, it will create an empty TreeRouteStack . Thus, the simplest way to start with this router is: use Mezzio\\AppFactory; use Mezzio\\Router\\LaminasRouter; $app = AppFactory::create(null, new LaminasRouter()); The TreeRouteStack offers some unique features: Route \"prototypes\". These are essentially like child routes that must also match in order for a given route to match. These are useful for implementing functionality such as ensuring the request comes in over HTTPS, or over a specific subdomain. Base URL functionality. If a base URL is injected, comparisons will be relative to that URL. This is mostly unnecessary with Stratigility-based middleware, but could solve some edge cases. To specify these, you need access to the underlying TreeRouteStack instance, however, and the RouterInterface does not provide an accessor! The answer, then, is to use dependency injection. This can be done in two ways: programmatically, or via a factory to use in conjunction with your container instance. Installing the Laminas Router To use the Laminas router, you will need to install the laminas-mvc router integration: $ composer require mezzio/mezzio-laminasrouter Quick Start At its simplest, you can instantiate a Mezzio\\Router\\LaminasRouter instance with no arguments; it will create the underlying laminas-mvc routing objects required and compose them for you: use Mezzio\\Router\\LaminasRouter; $router = new LaminasRouter(); Programmatic Creation If you need greater control over the laminas-mvc router setup and configuration, you can create the instances necessary and inject them into Mezzio\\Router\\LaminasRouter during instantiation. use Laminas\\Router\\Http\\TreeRouteStack; use Mezzio\\AppFactory; use Mezzio\\Router\\LaminasRouter; $laminasRouter = new TreeRouteStack(); $laminasRouter-&gt;addPrototypes(/* ... */); $laminasRouter-&gt;setBaseUrl(/* ... */); $router = new LaminasRouter($laminasRouter); // First argument is the container to use, if not using the default; // second is the router. $app = AppFactory::create(null, $router); Piping the route middleware As a reminder, you will need to ensure that middleware is piped in the order in which it needs to be executed; please see the section on \"Controlling middleware execution order\" in the piping documentation . This is particularly salient when defining routes before injecting the router in the application instance! Factory-Driven Creation We recommend using an Inversion of Control container for your applications; as such, in this section we will demonstrate two strategies for creating your laminas-mvc router implementation. Basic Router If you don't need to provide any setup or configuration, you can simply instantiate and return an instance of Mezzio\\Router\\LaminasRouter for the service name Mezzio\\Router\\RouterInterface . A factory would look like this: // in src/App/Container/RouterFactory.php namespace App\\Container; use Psr\\Container\\ContainerInterface; use Mezzio\\Router\\LaminasRouter; class RouterFactory { /** * @param ContainerInterface $container * @return LaminasRouter */ public function __invoke(ContainerInterface $container) { return new LaminasRouter(); } } You would register this with laminas-servicemanager using: $container-&gt;setFactory( Mezzio\\Router\\RouterInterface::class, App\\Container\\RouterFactory::class ); And in Pimple: $pimple[Mezzio\\Router\\RouterInterface::class] = new Application\\Container\\RouterFactory(); For laminas-servicemanager, you can omit the factory entirely, and register the class as an invokable: $container-&gt;setInvokableClass( Mezzio\\Router\\RouterInterface::class, Mezzio\\Router\\LaminasRouter::class ); Advanced Configuration If you want to provide custom setup or configuration, you can do so. In this example, we will be defining two factories: A factory to register as and generate an Laminas\\Router\\Http\\TreeRouteStack instance. A factory registered as Mezzio\\Router\\RouterInterface , which creates and returns a Mezzio\\Router\\LaminasRouter instance composing the Laminas\\Mvc\\Router\\Http\\TreeRouteStack instance. Sound difficult? It's not; we've essentially done it above already! // in src/App/Container/TreeRouteStackFactory.php: namespace App\\Container; use Psr\\Container\\ContainerInterface; use Laminas\\Http\\Router\\TreeRouteStack; class TreeRouteStackFactory { /** * @param ContainerInterface $container * @return TreeRouteStack */ public function __invoke(ContainerInterface $container) { $router = new TreeRouteStack(); $router-&gt;addPrototypes(/* ... */); $router-&gt;setBaseUrl(/* ... */); return $router; } } // in src/App/Container/RouterFactory.php namespace App\\Container; use Psr\\Container\\ContainerInterface; use Mezzio\\Router\\LaminasRouter; class RouterFactory { /** * @param ContainerInterface $container * @return LaminasRouter */ public function __invoke(ContainerInterface $container) { return new LaminasRouter($container-&gt;get(Laminas\\Mvc\\Router\\Http\\TreeRouteStack::class)); } } From here, you will need to register your factories with your IoC container. If you are using laminas-servicemanager, this will look like: // Programmatically: use Laminas\\ServiceManager\\ServiceManager; $container = new ServiceManager(); $container-&gt;addFactory( Laminas\\Router\\Http\\TreeRouteStack::class, App\\Container\\TreeRouteStackFactory::class ); $container-&gt;addFactory( Mezzio\\Router\\RouterInterface::class, App\\Container\\RouterFactory::class ); // Alternately, via configuration: return [ 'factories' =&gt; [ Laminas\\Router\\Http\\TreeRouteStack::class =&gt; App\\Container\\TreeRouteStackFactory::class, Mezzio\\Router\\RouterInterface::class =&gt; App\\Container\\RouterFactory::class, ], ]; For Pimple, configuration looks like: use Application\\Container\\TreeRouteStackFactory; use Application\\Container\\LaminasRouterFactory; use Interop\\Container\\Pimple\\PimpleInterop; $container = new PimpleInterop(); $container[Laminas\\Router\\Http\\TreeRouteStackFactory::class] = new TreeRouteStackFactory(); $container[Mezzio\\Router\\RouterInterface::class] = new RouterFactory();","title":"Using the Laminas Router"},{"location":"v2/features/router/laminas-router/#using-the-laminas-router","text":"laminas-router provides several router implementations used for Laminas+ applications; the default is Laminas\\Router\\Http\\TreeRouteStack , which can compose a number of different routes of differing types in order to perform routing. The Laminas bridge we provide, Mezzio\\Router\\LaminasRouter , uses the TreeRouteStack , and injects Segment routes to it; these are in turn injected with Method routes, and a special \"method not allowed\" route at negative priority to enable us to distinguish between failure to match the path and failure to match the HTTP method. If you instantiate it with no arguments, it will create an empty TreeRouteStack . Thus, the simplest way to start with this router is: use Mezzio\\AppFactory; use Mezzio\\Router\\LaminasRouter; $app = AppFactory::create(null, new LaminasRouter()); The TreeRouteStack offers some unique features: Route \"prototypes\". These are essentially like child routes that must also match in order for a given route to match. These are useful for implementing functionality such as ensuring the request comes in over HTTPS, or over a specific subdomain. Base URL functionality. If a base URL is injected, comparisons will be relative to that URL. This is mostly unnecessary with Stratigility-based middleware, but could solve some edge cases. To specify these, you need access to the underlying TreeRouteStack instance, however, and the RouterInterface does not provide an accessor! The answer, then, is to use dependency injection. This can be done in two ways: programmatically, or via a factory to use in conjunction with your container instance.","title":"Using the Laminas Router"},{"location":"v2/features/router/laminas-router/#installing-the-laminas-router","text":"To use the Laminas router, you will need to install the laminas-mvc router integration: $ composer require mezzio/mezzio-laminasrouter","title":"Installing the Laminas Router"},{"location":"v2/features/router/laminas-router/#quick-start","text":"At its simplest, you can instantiate a Mezzio\\Router\\LaminasRouter instance with no arguments; it will create the underlying laminas-mvc routing objects required and compose them for you: use Mezzio\\Router\\LaminasRouter; $router = new LaminasRouter();","title":"Quick Start"},{"location":"v2/features/router/laminas-router/#programmatic-creation","text":"If you need greater control over the laminas-mvc router setup and configuration, you can create the instances necessary and inject them into Mezzio\\Router\\LaminasRouter during instantiation. use Laminas\\Router\\Http\\TreeRouteStack; use Mezzio\\AppFactory; use Mezzio\\Router\\LaminasRouter; $laminasRouter = new TreeRouteStack(); $laminasRouter-&gt;addPrototypes(/* ... */); $laminasRouter-&gt;setBaseUrl(/* ... */); $router = new LaminasRouter($laminasRouter); // First argument is the container to use, if not using the default; // second is the router. $app = AppFactory::create(null, $router);","title":"Programmatic Creation"},{"location":"v2/features/router/laminas-router/#factory-driven-creation","text":"We recommend using an Inversion of Control container for your applications; as such, in this section we will demonstrate two strategies for creating your laminas-mvc router implementation.","title":"Factory-Driven Creation"},{"location":"v2/features/router/piping/","text":"Routing vs Piping Mezzio provides two mechanisms for adding middleware to your application: piping, which is a foundation feature of the underlying laminas-stratigility implementation. routing, which is an additional feature provided by mezzio. Piping laminas-stratigility provides a mechanism termed piping for composing middleware in an application. When you pipe middleware to the application, it is added to a queue, and dequeued in order until a middleware returns a response instance. If none ever returns a response instance, execution is delegated to a \"final handler\", which determines whether to return an error, and, if so, what kind of error to return. Stratigility also allows you to segregate piped middleware to specific paths. As an example: $app-&gt;pipe('/api', $apiMiddleware); will execute $apiMiddleware only if the path matches /api ; otherwise, it will skip over that middleware. This path segregation, however, is limited: it will only match literal paths. This is done purposefully, to provide excellent baseline performance, and to prevent feature creep in the library. Mezzio uses and exposes piping to users, with one addition: middleware may be specified by service name, and mezzio will lazy-load the service only when the middleware is invoked . In order to accomplish the lazy-loading, mezzio wraps the calls to fetch and dispatch the middleware inside a Mezzio\\Middleware\\LazyLoadingMiddleware instance; as such, there is no overhead to utilizing service-based middleware until it is dispatched . Routing Routing is the process of discovering values from the incoming request based on defined criteria. That criteria might look like: /book/:id (Laminas) /book/{id} (Aura.Router) /book/{id:\\d+} (FastRoute) In each of the above, if the router determines that the request matches the criteria, it will indicate: the route that matched the id parameter was matched, and the value matched Most routers allow you to define arbitrarily complex rules, and many even allow you to define: default values for unmatched parameters criteria for evaluating a match (such as a regular expression) additional criteria to meet (such as SSL usage, allowed query string variables, etc.) As such, routing is more powerful than the literal path matching used when piping, but it is also more costly (though routers such as FastRoute largely make such performance issues moot). When to Pipe In Mezzio, we recommend that you pipe middleware in the following circumstances: It should (potentially) run on every execution. Examples for such usage include: Logging requests Performing content negotiation Handling cookies Error handling. Application segregation. You can write re-usable middleware, potentially even based off of Mezzio, that contains its own routing logic, and compose it such that it only executes if it matches a sub-path. When to Route Use routing when: Your middleware is reacting to a given path. You want to use dynamic routing. You want to restrict usage of middleware to specific HTTP methods. You want to be able to generate URIs to your middleware. The above cover most use cases; in other words, most middleware should be added to the application as routed middleware . Controlling middleware execution order As noted in the earlier section on piping, piped middleware is queued , meaning it has a FIFO (\"first in, first out\") execution order. Additionally, mezzio's routing and dispatch capabilities are themselves implemented as piped middleware. To ensure your middleware is piped correctly, keep in mind the following: If middleware should execute on every request , pipe it early. Pipe routing and dispatch middleware using their dedicated application methods (more on this below), optionally with middleware between them to further shape application flow. Pipe middleware guaranteed to return a response (such as a \"not found\" handler or similar) last . To use the shipped routing and dispatch middleware (likely a good idea!), use the dedicated application methods pipeRoutingMiddleware() and pipeDispatchMiddleware() ; Application contains logic to ensure neither of these are called more than once. As an example: $app-&gt;pipe(OriginalMessages::class); $app-&gt;pipe(ServerUrlMiddleware::class); $app-&gt;pipe(XClacksOverhead::class); $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(UrlHelperMiddleware::class); $app-&gt;pipe(AuthorizationCheck::class); $app-&gt;pipeDispatchMiddleware(); $app-&gt;pipe(NotFoundHandler::class);","title":"Routing vs Piping"},{"location":"v2/features/router/piping/#routing-vs-piping","text":"Mezzio provides two mechanisms for adding middleware to your application: piping, which is a foundation feature of the underlying laminas-stratigility implementation. routing, which is an additional feature provided by mezzio.","title":"Routing vs Piping"},{"location":"v2/features/router/piping/#piping","text":"laminas-stratigility provides a mechanism termed piping for composing middleware in an application. When you pipe middleware to the application, it is added to a queue, and dequeued in order until a middleware returns a response instance. If none ever returns a response instance, execution is delegated to a \"final handler\", which determines whether to return an error, and, if so, what kind of error to return. Stratigility also allows you to segregate piped middleware to specific paths. As an example: $app-&gt;pipe('/api', $apiMiddleware); will execute $apiMiddleware only if the path matches /api ; otherwise, it will skip over that middleware. This path segregation, however, is limited: it will only match literal paths. This is done purposefully, to provide excellent baseline performance, and to prevent feature creep in the library. Mezzio uses and exposes piping to users, with one addition: middleware may be specified by service name, and mezzio will lazy-load the service only when the middleware is invoked . In order to accomplish the lazy-loading, mezzio wraps the calls to fetch and dispatch the middleware inside a Mezzio\\Middleware\\LazyLoadingMiddleware instance; as such, there is no overhead to utilizing service-based middleware until it is dispatched .","title":"Piping"},{"location":"v2/features/router/piping/#routing","text":"Routing is the process of discovering values from the incoming request based on defined criteria. That criteria might look like: /book/:id (Laminas) /book/{id} (Aura.Router) /book/{id:\\d+} (FastRoute) In each of the above, if the router determines that the request matches the criteria, it will indicate: the route that matched the id parameter was matched, and the value matched Most routers allow you to define arbitrarily complex rules, and many even allow you to define: default values for unmatched parameters criteria for evaluating a match (such as a regular expression) additional criteria to meet (such as SSL usage, allowed query string variables, etc.) As such, routing is more powerful than the literal path matching used when piping, but it is also more costly (though routers such as FastRoute largely make such performance issues moot).","title":"Routing"},{"location":"v2/features/router/piping/#when-to-pipe","text":"In Mezzio, we recommend that you pipe middleware in the following circumstances: It should (potentially) run on every execution. Examples for such usage include: Logging requests Performing content negotiation Handling cookies Error handling. Application segregation. You can write re-usable middleware, potentially even based off of Mezzio, that contains its own routing logic, and compose it such that it only executes if it matches a sub-path.","title":"When to Pipe"},{"location":"v2/features/router/piping/#when-to-route","text":"Use routing when: Your middleware is reacting to a given path. You want to use dynamic routing. You want to restrict usage of middleware to specific HTTP methods. You want to be able to generate URIs to your middleware. The above cover most use cases; in other words, most middleware should be added to the application as routed middleware .","title":"When to Route"},{"location":"v2/features/router/piping/#controlling-middleware-execution-order","text":"As noted in the earlier section on piping, piped middleware is queued , meaning it has a FIFO (\"first in, first out\") execution order. Additionally, mezzio's routing and dispatch capabilities are themselves implemented as piped middleware. To ensure your middleware is piped correctly, keep in mind the following: If middleware should execute on every request , pipe it early. Pipe routing and dispatch middleware using their dedicated application methods (more on this below), optionally with middleware between them to further shape application flow. Pipe middleware guaranteed to return a response (such as a \"not found\" handler or similar) last . To use the shipped routing and dispatch middleware (likely a good idea!), use the dedicated application methods pipeRoutingMiddleware() and pipeDispatchMiddleware() ; Application contains logic to ensure neither of these are called more than once. As an example: $app-&gt;pipe(OriginalMessages::class); $app-&gt;pipe(ServerUrlMiddleware::class); $app-&gt;pipe(XClacksOverhead::class); $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(UrlHelperMiddleware::class); $app-&gt;pipe(AuthorizationCheck::class); $app-&gt;pipeDispatchMiddleware(); $app-&gt;pipe(NotFoundHandler::class);","title":"Controlling middleware execution order"},{"location":"v2/features/router/uri-generation/","text":"URI Generation One aspect of the Mezzio\\Router\\RouterInterface is that it provides a generateUri() method. This method accepts a route name, and optionally an associative array of substitutions to use in the generated URI (e.g., if the URI has any named placeholders). You may also pass router-specific options to use during URI generation as a third argument. Naming routes By default, routes use a combination of the path and HTTP methods supported as the name: If you call route() with no HTTP methods, the name is the literal path with no changes. $app-&gt;route('/foo', $middleware); // \"foo\" If you call get() , post() , put() , patch() , or delete() , the name will be the literal path, followed by a caret ( ^ ), followed by the uppercase HTTP method name: $app-&gt;get('/foo', $middleware); // \"foo^GET\" Alternately, these methods return a Route instance, and you can set the name on it: $app-&gt;get('/foo', $middleware)-&gt;setName('foo'); // \"foo\" If you call route() and specify a list of HTTP methods accepted, the name will be the literal path, followed by a caret ( ^ ), followed by a colon ( : )-separated list of the uppercase HTTP method names, in the order in which they were added. $app-&gt;route('/foo', $middleware, ['GET', 'POST']); // \"foo^GET:POST\" Like the HTTP-specific methods, route() also returns a Route instance, and you can set the name on it: $route = $app-&gt;route('/foo', $middleware, ['GET', 'POST']); // \"foo^GET:POST\" $route-&gt;setName('foo'); // \"foo\" Clearly, this can become difficult to remember. As such, Mezzio offers the ability to specify a custom string for the route name as an additional, optional argument to any of the above: $app-&gt;route('/foo', $middleware, 'foo'); // 'foo' $app-&gt;get('/foo/:id', $middleware, 'foo-item'); // 'foo-item' $app-&gt;route('/foo', $middleware, ['GET', 'POST'], 'foo-collection'); // 'foo-collection' As noted above, these methods also return Route instances, allowing you to set the name after-the-fact; this is particularly useful with the route() method, where you may want to omit the HTTP methods if any HTTP method is allowed: $app-&gt;route('/foo', $middleware)-&gt;setName('foo'); // 'foo' We recommend that if you plan on generating URIs for given routes, you provide a custom name. Generating URIs Once you know the name of a URI you wish to generate, you can do so from the router instance: $uri = $router-&gt;generateUri('foo-item', ['id' =&gt; 'bar']); // \"/foo/bar\" You can omit the second argument if no substitutions are necessary. Compose the router For this to work, you'll need to compose the router instance in any class that requires the URI generation facility. Inject the Mezzio\\Router\\RouterInterface service in these situations.","title":"URI Generation"},{"location":"v2/features/router/uri-generation/#uri-generation","text":"One aspect of the Mezzio\\Router\\RouterInterface is that it provides a generateUri() method. This method accepts a route name, and optionally an associative array of substitutions to use in the generated URI (e.g., if the URI has any named placeholders). You may also pass router-specific options to use during URI generation as a third argument.","title":"URI Generation"},{"location":"v2/features/router/uri-generation/#naming-routes","text":"By default, routes use a combination of the path and HTTP methods supported as the name: If you call route() with no HTTP methods, the name is the literal path with no changes. $app-&gt;route('/foo', $middleware); // \"foo\" If you call get() , post() , put() , patch() , or delete() , the name will be the literal path, followed by a caret ( ^ ), followed by the uppercase HTTP method name: $app-&gt;get('/foo', $middleware); // \"foo^GET\" Alternately, these methods return a Route instance, and you can set the name on it: $app-&gt;get('/foo', $middleware)-&gt;setName('foo'); // \"foo\" If you call route() and specify a list of HTTP methods accepted, the name will be the literal path, followed by a caret ( ^ ), followed by a colon ( : )-separated list of the uppercase HTTP method names, in the order in which they were added. $app-&gt;route('/foo', $middleware, ['GET', 'POST']); // \"foo^GET:POST\" Like the HTTP-specific methods, route() also returns a Route instance, and you can set the name on it: $route = $app-&gt;route('/foo', $middleware, ['GET', 'POST']); // \"foo^GET:POST\" $route-&gt;setName('foo'); // \"foo\" Clearly, this can become difficult to remember. As such, Mezzio offers the ability to specify a custom string for the route name as an additional, optional argument to any of the above: $app-&gt;route('/foo', $middleware, 'foo'); // 'foo' $app-&gt;get('/foo/:id', $middleware, 'foo-item'); // 'foo-item' $app-&gt;route('/foo', $middleware, ['GET', 'POST'], 'foo-collection'); // 'foo-collection' As noted above, these methods also return Route instances, allowing you to set the name after-the-fact; this is particularly useful with the route() method, where you may want to omit the HTTP methods if any HTTP method is allowed: $app-&gt;route('/foo', $middleware)-&gt;setName('foo'); // 'foo' We recommend that if you plan on generating URIs for given routes, you provide a custom name.","title":"Naming routes"},{"location":"v2/features/router/uri-generation/#generating-uris","text":"Once you know the name of a URI you wish to generate, you can do so from the router instance: $uri = $router-&gt;generateUri('foo-item', ['id' =&gt; 'bar']); // \"/foo/bar\" You can omit the second argument if no substitutions are necessary.","title":"Generating URIs"},{"location":"v2/features/template/interface/","text":"The Template Renderer Interface Mezzio defines Mezzio\\Template\\TemplateRendererInterface , which can be injected into middleware in order to create templated response bodies. The interface is defined as follows: namespace Mezzio\\Template; interface TemplateRendererInterface { /** * Render a template, optionally with parameters. * * Implementations MUST support the `namespace::template` naming convention, * and allow omitting the filename extension. * * @param string $name * @param array|object $params * @return string */ public function render($name, $params = []); /** * Add a template path to the engine. * * Adds a template path, with optional namespace the templates in that path * provide. * * @param string $path * @param string $namespace */ public function addPath($path, $namespace = null); /** * Retrieve configured paths from the engine. * * @return TemplatePath[] */ public function getPaths(); /** * Add a default parameter to use with a template. * * Use this method to provide a default parameter to use when a template is * rendered. The parameter may be overridden by providing it when calling * `render()`, or by calling this method again with a null value. * * The parameter will be specific to the template name provided. To make * the parameter available to any template, pass the TEMPLATE_ALL constant * for the template name. * * If the default parameter existed previously, subsequent invocations with * the same template name and parameter name will overwrite. * * @param string $templateName Name of template to which the param applies; * use TEMPLATE_ALL to apply to all templates. * @param string $param Param name. * @param mixed $value */ public function addDefaultParam($templateName, $param, $value); } Namespaces Unfortunately, namespace syntax varies between different template engine implementations. As an example: Plates uses the syntax namespace::template . Twig uses the syntax @namespace/template . laminas-view does not natively support namespaces, though custom resolvers can provide the functionality. To make different engines compatible, we require implementations to support the syntax namespace::template (where namespace:: is optional) when rendering. Additionally, we require that engines allow omitting the filename suffix. When using a TemplateRendererInterface implementation, feel free to use namespaced templates, and to omit the filename suffix; this will make your code portable and allow it to use alternate template engines. Paths Most template engines and implementations will require that you specify one or more paths to templates; these are then used when resolving a template name to the actual template. You may use the addPath() method to do so: $renderer-&gt;addPath('templates'); Template engines adapted for mezzio are also required to allow namespacing templates; when adding a path, you specify the template namespace that it fulfills, and the engine will only return a template from that path if the namespace provided matches the namespace for the path. // Resolves to a path registered with the namespace \"error\"; // this example is specific to the Plates engine. $content = $renderer-&gt;render('error::404'); You can provide a namespace when registering a path via an optional second argument: // Registers the \"error\" namespace to the path \"templates/error/\" $renderer-&gt;addPath('templates/error/', 'error'); Rendering To render a template, call the render() method. This method requires the name of a template as the first argument: $content = $renderer-&gt;render('foo'); You can specify a namespaced template using the syntax namespace::template ; the template segment of the template name may use additional directory separators when necessary. One key reason to use templates is to dynamically provide data to inject in the template. You may do so by passing either an associative array or an object as the second argument to render() : $content = $renderer-&gt;render('message', [ 'greeting' =&gt; 'Hello', 'recipient' =&gt; 'World', ]); It is up to the underlying template engine to determine how to perform the injections. Default params The TemplateRendererInterface defines the method addDefaultParam() . This method can be used to specify default parameters to use when rendering a template. The signature is: public function addDefaultParam($templateName, $param, $value) If you want a parameter to be used for every template, you can specify the constant TemplateRendererInterface::TEMPLATE_ALL for the $templateName parameter. When rendering, parameters are considered in the following order, with later items having precedence over earlier ones: Default parameters specified for all templates. Default parameters specified for the template specified at rendering. Parameters specified when rendering. As an example, if we did the following: $renderer-&gt;addDefaultParam($renderer::TEMPLATE_ALL, 'foo', 'bar'); $renderer-&gt;addDefaultParam($renderer::TEMPLATE_ALL, 'bar', 'baz'); $renderer-&gt;addDefaultParam($renderer::TEMPLATE_ALL, 'baz', 'bat'); $renderer-&gt;addDefaultParam('example', 'foo', 'template default foo'); $renderer-&gt;addDefaultParam('example', 'bar', 'template default bar'); $content = $renderer-&gt;render('example', [ 'foo' =&gt; 'override', ]); Then we can expect the following substitutions will occur when rendering: References to the \"foo\" variable will contain \"override\". References to the \"bar\" variable will contain \"template default bar\". References to the \"baz\" variable will contain \"bat\". Support for default params The support for default params will often be renderer-specific. The reason is because the render() signature does not specify a type for $params , in order to allow passing alternative arguments such as view models. In such cases, the implementation will indicate its behavior when default parameters are specified, but a given $params argument does not support it. At the time of writing, each of the Plates, Twig, and laminas-view implementations support the feature.","title":"Template Renderer Interface"},{"location":"v2/features/template/interface/#the-template-renderer-interface","text":"Mezzio defines Mezzio\\Template\\TemplateRendererInterface , which can be injected into middleware in order to create templated response bodies. The interface is defined as follows: namespace Mezzio\\Template; interface TemplateRendererInterface { /** * Render a template, optionally with parameters. * * Implementations MUST support the `namespace::template` naming convention, * and allow omitting the filename extension. * * @param string $name * @param array|object $params * @return string */ public function render($name, $params = []); /** * Add a template path to the engine. * * Adds a template path, with optional namespace the templates in that path * provide. * * @param string $path * @param string $namespace */ public function addPath($path, $namespace = null); /** * Retrieve configured paths from the engine. * * @return TemplatePath[] */ public function getPaths(); /** * Add a default parameter to use with a template. * * Use this method to provide a default parameter to use when a template is * rendered. The parameter may be overridden by providing it when calling * `render()`, or by calling this method again with a null value. * * The parameter will be specific to the template name provided. To make * the parameter available to any template, pass the TEMPLATE_ALL constant * for the template name. * * If the default parameter existed previously, subsequent invocations with * the same template name and parameter name will overwrite. * * @param string $templateName Name of template to which the param applies; * use TEMPLATE_ALL to apply to all templates. * @param string $param Param name. * @param mixed $value */ public function addDefaultParam($templateName, $param, $value); }","title":"The Template Renderer Interface"},{"location":"v2/features/template/interface/#paths","text":"Most template engines and implementations will require that you specify one or more paths to templates; these are then used when resolving a template name to the actual template. You may use the addPath() method to do so: $renderer-&gt;addPath('templates'); Template engines adapted for mezzio are also required to allow namespacing templates; when adding a path, you specify the template namespace that it fulfills, and the engine will only return a template from that path if the namespace provided matches the namespace for the path. // Resolves to a path registered with the namespace \"error\"; // this example is specific to the Plates engine. $content = $renderer-&gt;render('error::404'); You can provide a namespace when registering a path via an optional second argument: // Registers the \"error\" namespace to the path \"templates/error/\" $renderer-&gt;addPath('templates/error/', 'error');","title":"Paths"},{"location":"v2/features/template/interface/#rendering","text":"To render a template, call the render() method. This method requires the name of a template as the first argument: $content = $renderer-&gt;render('foo'); You can specify a namespaced template using the syntax namespace::template ; the template segment of the template name may use additional directory separators when necessary. One key reason to use templates is to dynamically provide data to inject in the template. You may do so by passing either an associative array or an object as the second argument to render() : $content = $renderer-&gt;render('message', [ 'greeting' =&gt; 'Hello', 'recipient' =&gt; 'World', ]); It is up to the underlying template engine to determine how to perform the injections.","title":"Rendering"},{"location":"v2/features/template/intro/","text":"Templating By default, no middleware in Mezzio is templated. We do not even provide a default templating engine, as the choice of templating engine is often very specific to the project and/or organization. We do, however, provide abstraction for templating via the interface Mezzio\\Template\\TemplateRendererInterface , which allows you to write middleware that is engine-agnostic. For Mezzio, this means: All adapters MUST support template namespacing. Namespaces MUST be referenced using the notation namespace::template when rendering. Adapters MUST allow rendering templates that omit the extension; they will, of course, resolve to whatever default extension they require (or as configured). Adapters SHOULD allow passing an extension in the template name, but how that is handled is left up to the adapter. Adapters SHOULD abstract layout capabilities. Many templating systems provide this out of the box, or similar, compatible features such as template inheritance. This should be transparent to end-users; they should be able to simply render a template and assume it has the full content to return. In this documentation, we'll detail the features of this interface, the various implementations we provide, and how you can configure, inject, and consume templating in your middleware. We currently support: Plates Twig laminas-view Each has an associated container factory; details are found in the factories documentation .","title":"Introduction"},{"location":"v2/features/template/intro/#templating","text":"By default, no middleware in Mezzio is templated. We do not even provide a default templating engine, as the choice of templating engine is often very specific to the project and/or organization. We do, however, provide abstraction for templating via the interface Mezzio\\Template\\TemplateRendererInterface , which allows you to write middleware that is engine-agnostic. For Mezzio, this means: All adapters MUST support template namespacing. Namespaces MUST be referenced using the notation namespace::template when rendering. Adapters MUST allow rendering templates that omit the extension; they will, of course, resolve to whatever default extension they require (or as configured). Adapters SHOULD allow passing an extension in the template name, but how that is handled is left up to the adapter. Adapters SHOULD abstract layout capabilities. Many templating systems provide this out of the box, or similar, compatible features such as template inheritance. This should be transparent to end-users; they should be able to simply render a template and assume it has the full content to return. In this documentation, we'll detail the features of this interface, the various implementations we provide, and how you can configure, inject, and consume templating in your middleware. We currently support: Plates Twig laminas-view Each has an associated container factory; details are found in the factories documentation .","title":"Templating"},{"location":"v2/features/template/laminas-view/","text":"Using laminas-view laminas-view provides a native PHP template system via its PhpRenderer , and is maintained by Laminas. It provides: Layout facilities. Helpers for escaping, and the ability to provide custom helper extensions. We provide a TemplateRendererInterface wrapper for laminas-view's PhpRenderer via Mezzio\\LaminasView\\LaminasViewRenderer . Installing laminas-view To use the laminas-view wrapper, you must first install the laminas-view integration: $ composer require mezzio/mezzio-laminasviewrenderer Using the wrapper If instantiated without arguments, Mezzio\\LaminasView\\LaminasViewRenderer will create an instance of the PhpRenderer , which it will then proxy to. use Mezzio\\LaminasView\\LaminasViewRenderer; $renderer = new LaminasViewRenderer(); Alternately, you can instantiate and configure the engine yourself, and pass it to the Mezzio\\LaminasView\\LaminasViewRenderer constructor: use Laminas\\View\\Renderer\\PhpRenderer; use Laminas\\View\\Resolver; use Mezzio\\LaminasView\\LaminasViewRenderer; // Create the engine instance: $renderer = new PhpRenderer(); // Configure it: $resolver = new Resolver\\AggregateResolver(); $resolver-&gt;attach( new Resolver\\TemplateMapResolver(include 'config/templates.php'), 100 ); $resolver-&gt;attach( (new Resolver\\TemplatePathStack()) -&gt;setPaths(include 'config/template_paths.php') ); $renderer-&gt;setResolver($resolver); // Inject: $renderer = new LaminasViewRenderer($renderer); Namespaced path resolving Mezzio defines a custom laminas-view resolver, Mezzio\\LaminasView\\NamespacedPathStackResolver . This resolver provides the ability to segregate paths by namespace, and later resolve a template according to the namespace, using the namespace::template notation required of TemplateRendererInterface implementations. The LaminasView adapter ensures that: An AggregateResolver is registered with the renderer. If the registered resolver is not an AggregateResolver , it creates one and adds the original resolver to it. A NamespacedPathStackResolver is registered with the AggregateResolver , at a low priority (0), ensuring attempts to resolve hit it later. With resolvers such as the TemplateMapResolver , you can also resolve namespaced templates, mapping them directly to the template on the filesystem that matches; adding such a resolver can be a nice performance boost! Layouts Unlike the other supported template engines, laminas-view does not support layouts out-of-the-box. Mezzio abstracts this fact away, providing two facilities for doing so: You may pass a layout template name or Laminas\\View\\Model\\ModelInterface instance representing the layout as the second argument to the constructor. You may pass a \"layout\" parameter during rendering, with a value of either a layout template name or a Laminas\\View\\Model\\ModelInterface instance representing the layout. Passing a layout this way will override any layout provided to the constructor. In each case, the laminas-view implementation will do a depth-first, recursive render in order to provide content within the selected layout. Since 1.3: You may also pass a boolean false value to either addDefaultParam() or via the template variables for the layout key; doing so will disable the layout. Layout name passed to constructor use Mezzio\\LaminasView\\LaminasViewRenderer; // Create the engine instance with a layout name: $renderer = new LaminasViewRenderer(null, 'layout::layout'); Layout view model passed to constructor use Laminas\\View\\Model\\ViewModel; use Mezzio\\LaminasView\\LaminasViewRenderer; // Create the layout view model: $layout = new ViewModel([ 'encoding' =&gt; 'utf-8', 'cssPath' =&gt; '/css/prod/', ]); $layout-&gt;setTemplate('layout::layout'); // Create the engine instance with the layout: $renderer = new LaminasViewRenderer(null, $layout); Provide a layout name when rendering $content = $renderer-&gt;render('blog/entry', [ 'layout' =&gt; 'layout::blog', 'entry' =&gt; $entry, ]); Provide a layout view model when rendering use Laminas\\View\\Model\\ViewModel; // Create the layout view model: $layout = new ViewModel([ 'encoding' =&gt; 'utf-8', 'cssPath' =&gt; '/css/blog/', ]); $layout-&gt;setTemplate('layout::layout'); $content = $renderer-&gt;render('blog/entry', [ 'layout' =&gt; $layout, 'entry' =&gt; $entry, ]); Helpers Mezzio provides overrides of specific view helpers in order to better integrate with PSR-7 . These include: Mezzio\\LaminasView\\UrlHelper . This helper consumes the application's Mezzio\\Router\\RouterInterface instance in order to generate URIs. Its signature is: url($routeName, array $routeParams = [], array $queryParams = [], $fragmentIdentifier = null, array $options = []) Mezzio\\LaminasView\\ServerUrlHelper . This helper consumes the URI from the application's request in order to provide fully qualified URIs. Its signature is: serverUrl($path = null) . To use this particular helper, you will need to inject it with the request URI somewhere within your application: $serverUrlHelper-&gt;setUri($request-&gt;getUri()); We recommend doing this within a pre-pipeline middleware. Recommendations We recommend the following practices when using the laminas-view adapter: If using a layout, create a factory to return the layout view model as a service; this allows you to inject it into middleware and add variables to it. While we support passing the layout as a rendering parameter, be aware that if you change engines, this may not be supported.","title":"Using laminas-view"},{"location":"v2/features/template/laminas-view/#using-laminas-view","text":"laminas-view provides a native PHP template system via its PhpRenderer , and is maintained by Laminas. It provides: Layout facilities. Helpers for escaping, and the ability to provide custom helper extensions. We provide a TemplateRendererInterface wrapper for laminas-view's PhpRenderer via Mezzio\\LaminasView\\LaminasViewRenderer .","title":"Using laminas-view"},{"location":"v2/features/template/laminas-view/#installing-laminas-view","text":"To use the laminas-view wrapper, you must first install the laminas-view integration: $ composer require mezzio/mezzio-laminasviewrenderer","title":"Installing laminas-view"},{"location":"v2/features/template/laminas-view/#using-the-wrapper","text":"If instantiated without arguments, Mezzio\\LaminasView\\LaminasViewRenderer will create an instance of the PhpRenderer , which it will then proxy to. use Mezzio\\LaminasView\\LaminasViewRenderer; $renderer = new LaminasViewRenderer(); Alternately, you can instantiate and configure the engine yourself, and pass it to the Mezzio\\LaminasView\\LaminasViewRenderer constructor: use Laminas\\View\\Renderer\\PhpRenderer; use Laminas\\View\\Resolver; use Mezzio\\LaminasView\\LaminasViewRenderer; // Create the engine instance: $renderer = new PhpRenderer(); // Configure it: $resolver = new Resolver\\AggregateResolver(); $resolver-&gt;attach( new Resolver\\TemplateMapResolver(include 'config/templates.php'), 100 ); $resolver-&gt;attach( (new Resolver\\TemplatePathStack()) -&gt;setPaths(include 'config/template_paths.php') ); $renderer-&gt;setResolver($resolver); // Inject: $renderer = new LaminasViewRenderer($renderer);","title":"Using the wrapper"},{"location":"v2/features/template/laminas-view/#layouts","text":"Unlike the other supported template engines, laminas-view does not support layouts out-of-the-box. Mezzio abstracts this fact away, providing two facilities for doing so: You may pass a layout template name or Laminas\\View\\Model\\ModelInterface instance representing the layout as the second argument to the constructor. You may pass a \"layout\" parameter during rendering, with a value of either a layout template name or a Laminas\\View\\Model\\ModelInterface instance representing the layout. Passing a layout this way will override any layout provided to the constructor. In each case, the laminas-view implementation will do a depth-first, recursive render in order to provide content within the selected layout. Since 1.3: You may also pass a boolean false value to either addDefaultParam() or via the template variables for the layout key; doing so will disable the layout.","title":"Layouts"},{"location":"v2/features/template/laminas-view/#helpers","text":"Mezzio provides overrides of specific view helpers in order to better integrate with PSR-7 . These include: Mezzio\\LaminasView\\UrlHelper . This helper consumes the application's Mezzio\\Router\\RouterInterface instance in order to generate URIs. Its signature is: url($routeName, array $routeParams = [], array $queryParams = [], $fragmentIdentifier = null, array $options = []) Mezzio\\LaminasView\\ServerUrlHelper . This helper consumes the URI from the application's request in order to provide fully qualified URIs. Its signature is: serverUrl($path = null) . To use this particular helper, you will need to inject it with the request URI somewhere within your application: $serverUrlHelper-&gt;setUri($request-&gt;getUri()); We recommend doing this within a pre-pipeline middleware.","title":"Helpers"},{"location":"v2/features/template/laminas-view/#recommendations","text":"We recommend the following practices when using the laminas-view adapter: If using a layout, create a factory to return the layout view model as a service; this allows you to inject it into middleware and add variables to it. While we support passing the layout as a rendering parameter, be aware that if you change engines, this may not be supported.","title":"Recommendations"},{"location":"v2/features/template/middleware/","text":"Templated Middleware The primary use case for templating is within middleware, to provide templated responses. To do this, you will: Inject an instance of Mezzio\\Template\\TemplateRendererInterface into your middleware. Potentially add paths to the templating instance. Render a template. Add the results of rendering to your response. Injecting a TemplateRendererInterface We encourage the use of dependency injection. As such, we recommend writing your middleware to accept the TemplateRendererInterface via either the constructor or a setter. As an example: namespace Acme\\Blog; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Mezzio\\Template\\TemplateRendererInterface; class EntryMiddleware implements MiddlewareInterface { private $templateRenderer; public function __construct(TemplateRendererInterface $renderer) { $this-&gt;templateRenderer = $renderer; } public function process(ServerRequestInterface $request, DelegateInterface $delegate) { // ... } } This will necessitate having a factory for your middleware: namespace Acme\\Blog\\Container; use Acme\\Blog\\EntryMiddleware; use Psr\\Container\\ContainerInterface; use Mezzio\\Template\\TemplateRendererInterface; class EntryMiddlewareFactory { public function __invoke(ContainerInterface $container) { return new EntryMiddleware( $container-&gt;get(TemplateRendererInterface::class) ); } } And, of course, you'll need to tell your container to use the factory; see the container documentation for more information on how you might accomplish that. Consuming templates Now that we have the templating engine injected into our middleware, we can consume it. Most often, we will want to render a template, optionally with substitutions to pass to it. This will typically look like the following: namespace Acme\\Blog; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Laminas\\Diactoros\\Response\\HtmlResponse; use Mezzio\\Template\\TemplateRendererInterface; class EntryMiddleware implements MiddlewareInterface { private $templateRenderer; public function __construct(TemplateRendererInterface $renderer) { $this-&gt;templateRenderer = $renderer; } public function process(ServerRequestInterface $request, DelegateInterface $delegate) { // do some work... return new HtmlResponse( $this-&gt;templateRenderer-&gt;render('blog::entry', [ 'entry' =&gt; $entry, ]) ); } }","title":"Templated Middleware"},{"location":"v2/features/template/middleware/#templated-middleware","text":"The primary use case for templating is within middleware, to provide templated responses. To do this, you will: Inject an instance of Mezzio\\Template\\TemplateRendererInterface into your middleware. Potentially add paths to the templating instance. Render a template. Add the results of rendering to your response.","title":"Templated Middleware"},{"location":"v2/features/template/middleware/#injecting-a-templaterendererinterface","text":"We encourage the use of dependency injection. As such, we recommend writing your middleware to accept the TemplateRendererInterface via either the constructor or a setter. As an example: namespace Acme\\Blog; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Mezzio\\Template\\TemplateRendererInterface; class EntryMiddleware implements MiddlewareInterface { private $templateRenderer; public function __construct(TemplateRendererInterface $renderer) { $this-&gt;templateRenderer = $renderer; } public function process(ServerRequestInterface $request, DelegateInterface $delegate) { // ... } } This will necessitate having a factory for your middleware: namespace Acme\\Blog\\Container; use Acme\\Blog\\EntryMiddleware; use Psr\\Container\\ContainerInterface; use Mezzio\\Template\\TemplateRendererInterface; class EntryMiddlewareFactory { public function __invoke(ContainerInterface $container) { return new EntryMiddleware( $container-&gt;get(TemplateRendererInterface::class) ); } } And, of course, you'll need to tell your container to use the factory; see the container documentation for more information on how you might accomplish that.","title":"Injecting a TemplateRendererInterface"},{"location":"v2/features/template/middleware/#consuming-templates","text":"Now that we have the templating engine injected into our middleware, we can consume it. Most often, we will want to render a template, optionally with substitutions to pass to it. This will typically look like the following: namespace Acme\\Blog; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Laminas\\Diactoros\\Response\\HtmlResponse; use Mezzio\\Template\\TemplateRendererInterface; class EntryMiddleware implements MiddlewareInterface { private $templateRenderer; public function __construct(TemplateRendererInterface $renderer) { $this-&gt;templateRenderer = $renderer; } public function process(ServerRequestInterface $request, DelegateInterface $delegate) { // do some work... return new HtmlResponse( $this-&gt;templateRenderer-&gt;render('blog::entry', [ 'entry' =&gt; $entry, ]) ); } }","title":"Consuming templates"},{"location":"v2/features/template/plates/","text":"Using Plates Plates is a native PHP template system maintained by The League of Extraordinary Packages . it provides: Layout facilities. Template inheritance. Helpers for escaping, and the ability to provide custom helper extensions. We provide a TemplateRendererInterface wrapper for Plates via Mezzio\\Plates\\PlatesRenderer . Installing Plates To use the Plates wrapper, you must install the Plates integration: $ composer require mezzio/mezzio-platesrenderer Using the wrapper If instantiated without arguments, Mezzio\\Plates\\PlatesRenderer will create an instance of the Plates engine, which it will then proxy to. use Mezzio\\Plates\\PlatesRenderer; $renderer = new PlatesRenderer(); Alternately, you can instantiate and configure the engine yourself, and pass it to the Mezzio\\Plates\\PlatesRenderer constructor: use League\\Plates\\Engine as PlatesEngine; use Mezzio\\Plates\\PlatesRenderer; // Create the engine instance: $plates = new PlatesEngine(); // Configure it: $plates-&gt;addFolder('error', 'templates/error/'); $plates-&gt;loadExtension(new CustomExtension(); // Inject: $renderer = new PlatesRenderer($plates);","title":"Using Plates"},{"location":"v2/features/template/plates/#using-plates","text":"Plates is a native PHP template system maintained by The League of Extraordinary Packages . it provides: Layout facilities. Template inheritance. Helpers for escaping, and the ability to provide custom helper extensions. We provide a TemplateRendererInterface wrapper for Plates via Mezzio\\Plates\\PlatesRenderer .","title":"Using Plates"},{"location":"v2/features/template/plates/#installing-plates","text":"To use the Plates wrapper, you must install the Plates integration: $ composer require mezzio/mezzio-platesrenderer","title":"Installing Plates"},{"location":"v2/features/template/plates/#using-the-wrapper","text":"If instantiated without arguments, Mezzio\\Plates\\PlatesRenderer will create an instance of the Plates engine, which it will then proxy to. use Mezzio\\Plates\\PlatesRenderer; $renderer = new PlatesRenderer(); Alternately, you can instantiate and configure the engine yourself, and pass it to the Mezzio\\Plates\\PlatesRenderer constructor: use League\\Plates\\Engine as PlatesEngine; use Mezzio\\Plates\\PlatesRenderer; // Create the engine instance: $plates = new PlatesEngine(); // Configure it: $plates-&gt;addFolder('error', 'templates/error/'); $plates-&gt;loadExtension(new CustomExtension(); // Inject: $renderer = new PlatesRenderer($plates);","title":"Using the wrapper"},{"location":"v2/features/template/twig/","text":"Using Twig Twig is a template language and engine provided as a standalone component by SensioLabs. It provides: Layout facilities. Template inheritance. Helpers for escaping, and the ability to provide custom helper extensions. We provide a TemplateRendererInterface wrapper for Twig via Mezzio\\Twig\\TwigRenderer . Installing Twig To use the Twig wrapper, you must first install the Twig integration: $ composer require mezzio/mezzio-twigrenderer Using the wrapper If instantiated without arguments, Mezzio\\Twig\\TwigRenderer will create an instance of the Twig engine, which it will then proxy to. use Mezzio\\Twig\\TwigRenderer; $renderer = new TwigRenderer(); Alternately, you can instantiate and configure the engine yourself, and pass it to the Mezzio\\Twig\\TwigRenderer constructor: use Twig_Environment; use Twig_Loader_Array; use Mezzio\\Twig\\TwigRenderer; // Create the engine instance: $loader = new Twig_Loader_Array(include 'config/templates.php'); $twig = new Twig_Environment($loader); // Configure it: $twig-&gt;addExtension(new CustomExtension()); $twig-&gt;loadExtension(new CustomExtension(); // Inject: $renderer = new TwigRenderer($twig); Included extensions and functions The included Twig extension adds support for url generation. The extension is automatically activated if the UrlHelper and ServerUrlHelper are registered with the container. The following template functions are exposed: path : Render the relative path for a given route and parameters. If there is no route, it returns the current path. {{ path('article_show', {'id': '3'}) }} Generates: /article/3 url : Render the absolute url for a given route with its route parameters, query string arguments, and fragment. If there is no route, it returns the current url. {{ url('article_show', {'id': '3'}, {'foo': 'bar'}, 'fragment') }} Generates: http://example.com/article/3?foo=bar#fragment absolute_url : Render the absolute url from a given path. If the path is empty, it returns the current url. {{ absolute_url('path/to/something') }} Generates: http://example.com/path/to/something asset Render an (optionally versioned) asset url. {{ asset('path/to/asset/name.ext', version=3) }} Generates: path/to/asset/name.ext?v=3 To get the absolute url for an asset: {{ absolute_url(asset('path/to/asset/name.ext', version=3)) }} Generates: http://example.com/path/to/asset/name.ext?v=3 Configuration The following details configuration specific to Twig, as consumed by the TwigRendererFactory : return [ 'templates' =&gt; [ 'extension' =&gt; 'file extension used by templates; defaults to html.twig', 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ], 'twig' =&gt; [ 'cache_dir' =&gt; 'path to cached templates', 'assets_url' =&gt; 'base URL for assets', 'assets_version' =&gt; 'base version for assets', 'extensions' =&gt; [ // extension service names or instances ], 'globals' =&gt; [ // Global variables passed to twig templates 'ga_tracking' =&gt; 'UA-XXXXX-X' ], ], ]; When specifying the twig.extensions values, always use fully qualified class names or actual extension instances to ensure compatibility with any version of Twig used. Version 2 of Twig requires that a fully qualified class name is used, and not a short-name alias.","title":"Using Twig"},{"location":"v2/features/template/twig/#using-twig","text":"Twig is a template language and engine provided as a standalone component by SensioLabs. It provides: Layout facilities. Template inheritance. Helpers for escaping, and the ability to provide custom helper extensions. We provide a TemplateRendererInterface wrapper for Twig via Mezzio\\Twig\\TwigRenderer .","title":"Using Twig"},{"location":"v2/features/template/twig/#installing-twig","text":"To use the Twig wrapper, you must first install the Twig integration: $ composer require mezzio/mezzio-twigrenderer","title":"Installing Twig"},{"location":"v2/features/template/twig/#using-the-wrapper","text":"If instantiated without arguments, Mezzio\\Twig\\TwigRenderer will create an instance of the Twig engine, which it will then proxy to. use Mezzio\\Twig\\TwigRenderer; $renderer = new TwigRenderer(); Alternately, you can instantiate and configure the engine yourself, and pass it to the Mezzio\\Twig\\TwigRenderer constructor: use Twig_Environment; use Twig_Loader_Array; use Mezzio\\Twig\\TwigRenderer; // Create the engine instance: $loader = new Twig_Loader_Array(include 'config/templates.php'); $twig = new Twig_Environment($loader); // Configure it: $twig-&gt;addExtension(new CustomExtension()); $twig-&gt;loadExtension(new CustomExtension(); // Inject: $renderer = new TwigRenderer($twig);","title":"Using the wrapper"},{"location":"v2/features/template/twig/#included-extensions-and-functions","text":"The included Twig extension adds support for url generation. The extension is automatically activated if the UrlHelper and ServerUrlHelper are registered with the container. The following template functions are exposed: path : Render the relative path for a given route and parameters. If there is no route, it returns the current path. {{ path('article_show', {'id': '3'}) }} Generates: /article/3 url : Render the absolute url for a given route with its route parameters, query string arguments, and fragment. If there is no route, it returns the current url. {{ url('article_show', {'id': '3'}, {'foo': 'bar'}, 'fragment') }} Generates: http://example.com/article/3?foo=bar#fragment absolute_url : Render the absolute url from a given path. If the path is empty, it returns the current url. {{ absolute_url('path/to/something') }} Generates: http://example.com/path/to/something asset Render an (optionally versioned) asset url. {{ asset('path/to/asset/name.ext', version=3) }} Generates: path/to/asset/name.ext?v=3 To get the absolute url for an asset: {{ absolute_url(asset('path/to/asset/name.ext', version=3)) }} Generates: http://example.com/path/to/asset/name.ext?v=3","title":"Included extensions and functions"},{"location":"v2/features/template/twig/#configuration","text":"The following details configuration specific to Twig, as consumed by the TwigRendererFactory : return [ 'templates' =&gt; [ 'extension' =&gt; 'file extension used by templates; defaults to html.twig', 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ], 'twig' =&gt; [ 'cache_dir' =&gt; 'path to cached templates', 'assets_url' =&gt; 'base URL for assets', 'assets_version' =&gt; 'base version for assets', 'extensions' =&gt; [ // extension service names or instances ], 'globals' =&gt; [ // Global variables passed to twig templates 'ga_tracking' =&gt; 'UA-XXXXX-X' ], ], ]; When specifying the twig.extensions values, always use fully qualified class names or actual extension instances to ensure compatibility with any version of Twig used. Version 2 of Twig requires that a fully qualified class name is used, and not a short-name alias.","title":"Configuration"},{"location":"v2/getting-started/features/","text":"Overview Mezzio allows you to write PSR-7 middleware applications for the web. PSR-7 is a standard defining HTTP message interfaces; these are the incoming request and outgoing response for your application. By using PSR-7, we ensure that your applications will work in other PSR-7 contexts. Middleware is any code sitting between a request and a response; it typically analyzes the request to aggregate incoming data, delegates it to another layer to process, and then creates and returns a response. Middleware can and should be relegated only to those tasks, and should be relatively easy to write and maintain. Middleware is also designed for composability; you should be able to nest middleware and re-use middleware. With Mezzio, you can build PSR-7-based middleware applications: APIs Websites Single Page Applications and more. Features Mezzio builds on laminas-stratigility to provide a robust convenience layer on which to build applications. The features it provides include: Routing Stratigility provides limited, literal matching only. Mezzio allows you to utilize dynamic routing capabilities from a variety of routers, providing much more fine-grained matching capabilities. The routing layer also allows restricting matched routes to specific HTTP methods, and will return \"405 Not Allowed\" responses with an \"Allow\" HTTP header containing allowed HTTP methods for invalid requests. Routing is abstracted in Mezzio, allowing the developer to choose the routing library that best fits the project needs. By default, we provide wrappers for Aura.Router, FastRoute, and the laminas-mvc router. PSR-11 Container Mezzio encourages the use of Dependency Injection, and defines its Application class to compose a PSR-11 ContainerInterface instance. The container is used to lazy-load middleware, whether it is piped (Stratigility interface) or routed (Mezzio). Templating While Mezzio does not assume templating is being used, it provides a templating abstraction. Developers can write middleware that typehints on this abstraction, and assume that the underlying adapter will provide layout support and namespaced template support. Error Handling Applications should handle errors gracefully, but also handle them differently in development versus production. Mezzio provides both basic error handling via Stratigility's own ErrorHandler implementation, providing specialized error response generators that can perform templating or use Whoops. Flow Overview Below is a diagram detailing the workflow used by Mezzio. The Application acts as an \"onion\"; in the diagram above, the top is the outermost layer of the onion, while the bottom is the innermost. The Application dispatches each middleware. Each middleware receives a request and a delegate for handing off processing of the request should the middleware not be able to fully process it itself. Internally, the delegate composes a queue of middleware, and invokes the next in the queue when invoked. Any given middleware can return a response , at which point execution winds its way back out the onion. Pipelines The terminology \"pipeline\" is often used to describe the onion. One way of looking at the \"onion\" is as a queue , which is first-in-first-out (FIFO) in operation. This means that the first middleware on the queue is executed first, and this invokes the next, and so on (and hence the \"next\" terminology). When looked at from this perspective: In most cases, the entire queue will not be traversed. The innermost layer of the onion represents the last item in the queue, and should be guaranteed to return a response; usually this is indicative of a malformed request (HTTP 400 response status) and/or inability to route the middleware to a handler (HTTP 404 response status). Responses are returned through the pipeline, in reverse order of traversal. Double pass middleware The system described above is what is known as lambda middleware . Each middleware receives the request and the delegate, and you pass only the request to the delegate when wanting to hand off processing: function (ServerRequestInterface $request, DelegateInterface $delegate) { $response = $delegate-&gt;process($request); return $response-&gt;withHeader('X-Test', time()); } In Mezzio 1.X, the default middleware style was what is known as double pass middleware. Double pass middleware receives both the request and a response in addition to the delegate, and passes both the request and response to the delegate when invoking it: function (ServerRequestInterface $request, ResponseInterface $response, callable $next) { $response = $next($request, $response); return $response-&gt;withHeader('X-Test', time()); } It is termed \"double pass\" because you pass both the request and response when delegating to the next layer. Mezzio 2.X still supports double-pass middleware, though we recommend the lambda style. The Application allows arbitrary middleware to be injected, with each being executed in the order in which they are attached; returning a response from middleware prevents any middleware attached later from executing. You can attach middleware manually, in which case the pipeline is executed in the order of attachment, or use configuration. When you use configuration, you will specify a priority integer to dictate the order in which middleware should be attached. Middleware specifying high integer priorities are attached (and thus executed) earlier, while those specifying lower and/or negative integers are attached later. The default priority is 1. Mezzio provides default implementations of \"routing\" and \"dispatch\" middleware, which you either attach to the middleware pipeline manually, or via configuration. These are implemented as the classes Mezzio\\Middleware\\RouteMiddleware and Mezzio\\Middleware\\DispatchMiddleware , respectively. Routing within Mezzio consists of decomposing the request to match it to middleware that can handle that given request. This typically consists of a combination of matching the requested URI path along with allowed HTTP methods: map a GET request to the path /api/ping to the PingMiddleware map a POST request to the path /contact/process to the HandleContactMiddleware etc. Dispatching is simply the act of calling the middleware mapped by routing. The two events are modeled as separate middleware to allow you to act on the results of routing before attempting to dispatch the mapped middleware; this can be useful for implementing route-based authentication or validation. The majority of your application will consist of routing rules that map to routed middleware. Middleware piped to the application earlier than routing should be middleware that you wish to execute for every request. These might include: bootstrapping parsing of request body parameters addition of debugging tools embedded Mezzio applications that you want to match at a given literal path etc. Such middleware may decide that a request is invalid, and return a response; doing so means no further middleware will be executed! This is an important feature of middleware architectures, as it allows you to define application-specific workflows optimized for performance, security, etc. Middleware piped to the application after the routing and dispatch middleware will execute in one of two conditions: routing failed routed middleware called on the next middleware instead of returning a response. As such, the largest use case for such middleware is to provide a \"default\" error response for your application, usually as an HTTP 404 Not Found response. The main points to remember are: The application is a queue, and operates in FIFO order. Each middleware can choose whether to return a response, which will cause the queue to unwind, or to traverse to the next middleware. Most of the time, you will be defining routed middleware , and the routing rules that map to them. You get to control the workflow of your application by deciding the order in which middleware is queued.","title":"Overview and Features"},{"location":"v2/getting-started/features/#overview","text":"Mezzio allows you to write PSR-7 middleware applications for the web. PSR-7 is a standard defining HTTP message interfaces; these are the incoming request and outgoing response for your application. By using PSR-7, we ensure that your applications will work in other PSR-7 contexts. Middleware is any code sitting between a request and a response; it typically analyzes the request to aggregate incoming data, delegates it to another layer to process, and then creates and returns a response. Middleware can and should be relegated only to those tasks, and should be relatively easy to write and maintain. Middleware is also designed for composability; you should be able to nest middleware and re-use middleware. With Mezzio, you can build PSR-7-based middleware applications: APIs Websites Single Page Applications and more.","title":"Overview"},{"location":"v2/getting-started/features/#features","text":"Mezzio builds on laminas-stratigility to provide a robust convenience layer on which to build applications. The features it provides include: Routing Stratigility provides limited, literal matching only. Mezzio allows you to utilize dynamic routing capabilities from a variety of routers, providing much more fine-grained matching capabilities. The routing layer also allows restricting matched routes to specific HTTP methods, and will return \"405 Not Allowed\" responses with an \"Allow\" HTTP header containing allowed HTTP methods for invalid requests. Routing is abstracted in Mezzio, allowing the developer to choose the routing library that best fits the project needs. By default, we provide wrappers for Aura.Router, FastRoute, and the laminas-mvc router. PSR-11 Container Mezzio encourages the use of Dependency Injection, and defines its Application class to compose a PSR-11 ContainerInterface instance. The container is used to lazy-load middleware, whether it is piped (Stratigility interface) or routed (Mezzio). Templating While Mezzio does not assume templating is being used, it provides a templating abstraction. Developers can write middleware that typehints on this abstraction, and assume that the underlying adapter will provide layout support and namespaced template support. Error Handling Applications should handle errors gracefully, but also handle them differently in development versus production. Mezzio provides both basic error handling via Stratigility's own ErrorHandler implementation, providing specialized error response generators that can perform templating or use Whoops.","title":"Features"},{"location":"v2/getting-started/features/#flow-overview","text":"Below is a diagram detailing the workflow used by Mezzio. The Application acts as an \"onion\"; in the diagram above, the top is the outermost layer of the onion, while the bottom is the innermost. The Application dispatches each middleware. Each middleware receives a request and a delegate for handing off processing of the request should the middleware not be able to fully process it itself. Internally, the delegate composes a queue of middleware, and invokes the next in the queue when invoked. Any given middleware can return a response , at which point execution winds its way back out the onion.","title":"Flow Overview"},{"location":"v2/getting-started/skeleton/","text":"Quick Start: Using the Skeleton + Installer The easiest way to get started with Mezzio is to use the skeleton application and installer . The skeleton provides a generic structure for creating your applications, and prompts you to choose a router, dependency injection container, template renderer, and error handler from the outset. Create a new project First, we'll create a new project, using Composer's create-project command: $ composer create-project mezzio/mezzio-skeleton mezzio This will prompt you to choose: Whether to install a minimal skeleton (no default middleware), a flat application structure (all code under src/ ), or a modular structure (directories under src/ are modules, each with source code and potentially templates, configuration, assets, etc.). A dependency injection container. We recommend using the default, Laminas ServiceManager. (We use ServiceManager in the examples below, so choose it if you want to code along). A router. We recommend using the default, FastRoute. A template renderer. You can ignore this when creating an API project, but if you will be creating any HTML pages, we recommend installing one. (We use Plates in the examples below, so choose it if you want to code along). An error handler. Whoops is a very nice option for development, as it gives you extensive, browsable information for exceptions and errors raised. Start a web server The Skeleton + Installer creates a full application structure that's ready-to-go when complete. You can test it out using built-in web server . From the project root directory, execute the following: $ composer run --timeout=0 serve This starts up a web server on localhost port 8080; browse to http://localhost:8080/ to see if your application responds correctly! Setting a timeout Composer commands time out after 300 seconds (5 minutes). On Linux-based systems, the php -S command that composer serve spawns continues running as a background process, but on other systems halts when the timeout occurs. As such, we recommend running the serve script using a timeout. This can be done by using composer run to execute the serve script, with a --timeout option. When set to 0 , as in the previous example, no timeout will be used, and it will run until you cancel the process (usually via Ctrl-C ). Alternately, you can specify a finite timeout; as an example, the following will extend the timeout to a full day: $ composer run --timeout=86400 serve Development Tools We ship tools in our skeleton application to make development easier. Development Mode laminas-development-mode allows you to enable and disable development mode from your cli. $ composer development-enable # enable development mode $ composer development-disable # disable development mode $ composer development-status # show development status The development configuration is set in config/autoload/development.local.php.dist . It also allows you to specify configuration and modules that should only be enabled when in development, and not when in production. Clear config cache Production settings are the default, which means enabling the configuration cache. However, it must be easy for developers to clear the configuration cache. That's what this command does. $ composer clear-config-cache Testing Your Code PHPUnit and PHP_CodeSniffer are now installed by default. To execute tests and detect coding standards violations, run the following command: $ composer check Security Advisories We have included the security-advisories package to notify you about installed dependencies with known security vulnerabilities. Each time you run composer update , composer install , or composer require , it prevents installation of software with known and documented security issues. Modules Composer will prompt you during installation to ask if you want a minimal application (no structure or default middleware provided), flat application (all source code under the same tree, and the default selection), or modular application. This latter option is new in the version 2 series, and allows you to segregate discrete areas of application functionality into modules , which can contain source code, templates, assets, and more; these can later be repackaged for re-use if desired. Support for modules is available via the laminas-component-installer and laminas-config-aggregator packages; the mezzio-tooling . package provides tools for creating and manipulating modules in your application. Component Installer Whenever you add a component or module that exposes itself as such, the laminas-component-installer composer plugin will prompt you, asking if and where you want to inject its configuration. This ensures that components are wired automatically for you. In most cases, you will choose to inject in the config/config.php file; for tools intended only for usage during development, choose config/development.config.php.dist . Config Aggregator The laminas-config-aggregator library collects and merges configuration from different sources. It also supports configuration caching. As an example, your config/config.php file might read as follows in order to aggregate configuration from development mode settings, application configuration, and theoretical User , Blog , and App modules: &lt;?php // config/config.php $aggregator = new ConfigAggregator([ // Module configuration App\\ConfigProvider::class, BlogModule\\ConfigProvider::class, UserModule\\ConfigProvider::class, // Load application config in a pre-defined order in such a way that local settings // overwrite global settings. (Loaded as first to last): // - `global.php` // - `*.global.php` // - `local.php` // - `*.local.php` new PhpFileProvider('config/autoload/{{,*.}global,{,*.}local}.php'), // Load development config if it exists new PhpFileProvider('config/development.config.php'), ], 'data/config-cache.php'); return $aggregator-&gt;getMergedConfig(); The configuration is merged in the same order as it is passed, with later entries having precedence. Config Providers ConfigAggregator works by aggregating \"Config Providers\" passed to its constructor. Each provider should be a callable class that requires no constructor parameters, where invocation returns a configuration array (or a PHP generator) to be merged. Libraries or modules can have configuration providers that provide default values for a library or module. For the UserModule\\ConfigProvider class loaded in the ConfigAggregator above, the ConfigProvider might look like this: &lt;?php namespace UserModule; class ConfigProvider { /** * Returns the configuration array * * To add some sort of a structure, each section is defined in a separate * method which returns an array with its configuration. * * @return array */ public function __invoke() { return [ 'dependencies' =&gt; $this-&gt;getDependencies(), 'users' =&gt; $this-&gt;getConfig(), ]; } /** * Returns the container dependencies * * @return array */ public function getDependencies() { return [ 'factories' =&gt; [ Action\\LoginAction::class =&gt; Factory\\Action\\LoginActionFactory::class, Middleware\\AuthenticationMiddleware::class =&gt; Factory\\Middleware\\AuthenticationMiddlewareFactory::class, ], ]; } /** * Returns the default module configuration * * @return array */ public function getConfig() { return [ 'paths' =&gt; [ 'enable_registration' =&gt; true, 'enable_username' =&gt; false, 'enable_display_name' =&gt; true, ], ]; } } mezzio-module command To aid in the creation, registration, and deregistration of modules in your application, the installer will add the mezzio/mezzio-tooling as a development requirement when you choose the modular application layout. The tool is available from your application root directory via ./vendor/bin/mezzio-module . For brevity, we will only reference the tool's name, mezzio-module , when describing its capabilities. This tool provides the following functionality: mezzio-module create &lt;modulename&gt; will create the default directory structure for the named module, create a ConfigProvider for the module, add an autoloading rule to composer.json , and register the ConfigProvider with the application configuration. mezzio-module register &lt;modulename&gt; will add an autoloading rule to composer.json for the module, and register its ConfigProvider , if found, with the application configuration. mezzio-module deregister &lt;modulename&gt; will remove any autoloading rules for the module from composer.json , and deregister its ConfigProvider , if found, from the application configuration. You can find out more about its features in the command line tooling documentation . Adding Middleware The skeleton makes the assumption that you will be writing your middleware as classes, and uses piping and routing to add your middleware. Piping Piping is a foundation feature of the underlying laminas-stratigility implementation. You can set up the middleware pipeline in config/pipeline.php . In this section, we'll demonstrate setting up a basic pipeline that includes error handling, segregated applications, routing, middleware dispatch, and more. The error handler should be the first (most outer) middleware to catch all exceptions. $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipe(ServerUrlMiddleware::class); After the ErrorHandler you can pipe more middleware that you want to execute on every request, such as bootstrapping, pre-conditions, and modifications to outgoing responses: $app-&gt;pipe(ServerUrlMiddleware::class); Piped middleware may be either callables or service names. Middleware may also be passed as an array; each item in the array must resolve to middleware eventually (i.e., callable or service name); underneath, Mezzio creates Laminas\\Stratigility\\MiddlewarePipe instances with each of the middleware listed piped to it. Middleware can be attached to specific paths, allowing you to mix and match applications under a common domain. The handlers in each middleware attached this way will see a URI with the MATCHED PATH SEGMENT REMOVED!!! $app-&gt;pipe('/api', $apiMiddleware); $app-&gt;pipe('/docs', $apiDocMiddleware); $app-&gt;pipe('/files', $filesMiddleware); Next, you should register the routing middleware in the middleware pipeline: $app-&gt;pipeRoutingMiddleware(); Add more middleware that needs to introspect the routing results; this might include: handling for HTTP HEAD requests handling for HTTP OPTIONS requests middleware for handling URI generation route-based authentication route-based validation etc. $app-&gt;pipe(ImplicitHeadMiddleware::class); $app-&gt;pipe(ImplicitOptionsMiddleware::class); $app-&gt;pipe(UrlHelperMiddleware::class); Next, register the dispatch middleware in the middleware pipeline: $app-&gt;pipeDispatchMiddleware(); At this point, if no response is return by any middleware, we need to provide a way of notifying the user of this; by default, we use the NotFoundHandler , but you can provide any other fallback middleware you wish: $app-&gt;pipe(NotFoundHandler::class); The full example then looks something like this: // In config/pipeline.php: use Mezzio\\Helper\\ServerUrlMiddleware; use Mezzio\\Helper\\UrlHelperMiddleware; use Mezzio\\Middleware\\ImplicitHeadMiddleware; use Mezzio\\Middleware\\ImplicitOptionsMiddleware; use Mezzio\\Middleware\\NotFoundHandler; use Laminas\\Stratigility\\Middleware\\ErrorHandler; $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipe(ServerUrlMiddleware::class); // These assume that the variables listed are defined in this scope: $app-&gt;pipe('/api', $apiMiddleware); $app-&gt;pipe('/docs', $apiDocMiddleware); $app-&gt;pipe('/files', $filesMiddleware); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(ImplicitHeadMiddleware::class); $app-&gt;pipe(ImplicitOptionsMiddleware::class); $app-&gt;pipe(UrlHelperMiddleware::class); $app-&gt;pipeDispatchMiddleware(); $app-&gt;pipe(NotFoundHandler::class); Routing Routing is an additional feature provided by Mezzio. Routing is set up in config/routes.php . You can setup routes with a single request method: $app-&gt;get('/', App\\Action\\HomePageAction::class, 'home'); $app-&gt;post('/album', App\\Action\\AlbumCreateAction::class, 'album.create'); $app-&gt;put('/album/:id', App\\Action\\AlbumUpdateAction::class, 'album.put'); $app-&gt;patch('/album/:id', App\\Action\\AlbumUpdateAction::class, 'album.patch'); $app-&gt;delete('/album/:id', App\\Action\\AlbumDeleteAction::class, 'album.delete'); Or with multiple request methods: $app-&gt;route('/contact', App\\Action\\ContactAction::class, ['GET', 'POST', ...], 'contact'); Or handling all request methods: $app-&gt;route('/contact', App\\Action\\ContactAction::class)-&gt;setName('contact'); Alternately, to be explicit, the above could be written as: $app-&gt;route( '/contact', App\\Action\\ContactAction::class, Mezzio\\Router\\Route::HTTP_METHOD_ANY, 'contact' ); We recommend a single middleware class per combination of route and request method. Next Steps The skeleton provides a default structure for templates, if you choose to use them. Let's see how you can create your first vanilla middleware, and templated middleware. Creating middleware To create middleware, create a class implementing Interop\\Http\\ServerMiddleware\\MiddlewareInterface . This interface defines a single method, process() , which accepts a Psr\\Http\\Message\\ServerRequestInterface instance and an Interop\\Http\\ServerMiddleware\\DelegateInterface instance. Legacy double-pass middleware Prior to Mezzio 2.0, the default middleware style was what is termed \"double-pass\", for the fact that it passes both the request and response between layers. This middleware did not require an interface, and relied on a conventional definition of: use Psr\\Http\\Message; function ( Message\\ServerRequestInterface $request, Message\\ResponseInterface $response, callable $next ) : Message\\ResponseInterface While this style of middleware is still quite wide-spread and used in a number of projects, it has some flaws. Chief among them is the fact that middleware should not rely on the $response instance provided to them (as it may have modifications unacceptable for the current context), and that a response returned from inner layers may not be based off the $response provided to them (as inner layers may create and return a completely different response). Starting in Mezzio 2.0, we add support for http-interop/http-middleware , which is a working group of PHP-FIG dedicated to creating a common middleware standard. This middleware uses what is termed a \"single-pass\" or \"lambda\" architecture, whereby only the request instance is passed between layers. We now recommend writing middleware using the http-middleware interfaces for all new middleware. Middleware using the double-pass style is still accepted by Mezzio, but support for it will be discontinued with version 3. The skeleton defines an App namespace for you, and suggests placing middleware under the namespace App\\Action . Let's create a \"Hello\" action. Place the following in src/App/Action/HelloAction.php : &lt;?php namespace App\\Action; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Laminas\\Diactoros\\Response\\HtmlResponse; use Psr\\Http\\Message\\ServerRequestInterface; class HelloAction implements MiddlewareInterface { public function process(ServerRequestInterface $request, DelegateInterface $delegate) { // On all PHP versions: $query = $request-&gt;getQueryParams(); $target = isset($query['target']) ? $query['target'] : 'World'; // Or, on PHP 7+: $target = $request-&gt;getQueryParams()['target'] ?? 'World'; $target = htmlspecialchars($target, ENT_HTML5, 'UTF-8'); return new HtmlResponse(sprintf( '&lt;h1&gt;Hello, %s!&lt;/h1&gt;', $target )); } } The above looks for a query string parameter \"target\", and uses its value to provide a message, which is then returned in an HTML response. Now we need to inform the application of this middleware, and indicate what path will invoke it. Open the file config/autoload/dependencies.global.php . Edit that file to add an invokable entry for the new middleware: return [ 'dependencies' =&gt; [ /* ... */ 'invokables' =&gt; [ App\\Action\\HelloAction::class =&gt; App\\Action\\HelloAction::class, /* ... */ ], /* ... */ ], ]; Now open the file config/routes.php , and add the following at the bottom of the file: $app-&gt;get('/hello', App\\Action\\HelloAction::class, 'hello'); Once you've completed the above, give it a try by going to each of the following URIs: http://localhost:8080/hello http://localhost:8080/hello?target=ME You should see the message change as you go between the two URIs! Using templates You likely don't want to hardcode HTML into your middleware; so, let's use templates. This particular exercise assumes you chose to use the Plates integration. Templates are installed under the templates/ subdirectory. By default, we also register the template namespace app to correspond with the templates/app subdirectory. Create the file templates/app/hello-world.phtml with the following contents: &lt;?php $this-&gt;layout('layout::default', ['title' =&gt; 'Greetings']) ?&gt; &lt;h2&gt;Hello, &lt;?= $this-&gt;e($target) ?&gt;&lt;/h2&gt; Now that we have a template, we need to: Inject a renderer into our action class. Use the renderer to render the contents. Replace your src/App/Action/HelloAction.php file with the following contents: &lt;?php namespace App\\Action; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Laminas\\Diactoros\\Response\\HtmlResponse; use Mezzio\\Template\\TemplateRendererInterface; use Psr\\Http\\Message\\ServerRequestInterface; class HelloAction implements MiddlewareInterface { private $renderer; public function __construct(TemplateRendererInterface $renderer) { $this-&gt;renderer = $renderer; } public function process(ServerRequestInterface $request, DelegateInterface $delegate) { // On all PHP versions: $query = $request-&gt;getQueryParams(); $target = isset($query['target']) ? $query['target'] : 'World'; // Or, on PHP 7+: $target = $request-&gt;getQueryParams()['target'] ?? 'World'; return new HtmlResponse( $this-&gt;renderer-&gt;render('app::hello-world', ['target' =&gt; $target]) ); } } The above modifies the class to accept a renderer to the constructor, and then calls on it to render a template. Note that we no longer need to escape our target; the template takes care of that for us. How does the template renderer get into the action? The answer is dependency injection. For the next part of the example, we'll be creating and wiring a factory for creating the HelloAction instance; the example assumes you used the default selection for a dependency injection container, laminas-servicemanager. laminas-servicemanager provides a console (command line) tool for generating factories based on reflecting a class; we'll use that to generate our factory. Navigate to your root skeleton-app directory in the console and enter the following: $ ./vendor/bin/generate-factory-for-class \\ &gt; \"App\\\\Action\\\\HelloAction\" &gt; ./src/App/src/Action/HelloActionFactory.php For more information see generate-factory-for-class With that in place, we'll now update our configuration. Open the file config/autoload/dependencies.global.php ; we'll remove the invokables entry we created previously, and add a factories entry: return [ 'dependencies' =&gt; [ /* ... */ 'invokables' =&gt; [ // Remove this entry: App\\Action\\HelloAction::class =&gt; App\\Action\\HelloAction::class, ], 'factories' =&gt; [ /* ... */ // Add this: App\\Action\\HelloAction::class =&gt; App\\Action\\HelloActionFactory::class, ], /* ... */ ], ]; Save that file, and now re-visit the URIs: http://localhost:8080/hello http://localhost:8080/hello?target=ME Your page should now have the same layout as the landing page of the skeleton application! Congratulations Congratulations! You've now created your application, and started writing middleware! It's time to start learning about the rest of the features of Mezzio: Containers Routing Templating Error Handling","title":"Quick Start: Skeleton Installer"},{"location":"v2/getting-started/skeleton/#quick-start-using-the-skeleton-installer","text":"The easiest way to get started with Mezzio is to use the skeleton application and installer . The skeleton provides a generic structure for creating your applications, and prompts you to choose a router, dependency injection container, template renderer, and error handler from the outset.","title":"Quick Start: Using the Skeleton + Installer"},{"location":"v2/getting-started/skeleton/#create-a-new-project","text":"First, we'll create a new project, using Composer's create-project command: $ composer create-project mezzio/mezzio-skeleton mezzio This will prompt you to choose: Whether to install a minimal skeleton (no default middleware), a flat application structure (all code under src/ ), or a modular structure (directories under src/ are modules, each with source code and potentially templates, configuration, assets, etc.). A dependency injection container. We recommend using the default, Laminas ServiceManager. (We use ServiceManager in the examples below, so choose it if you want to code along). A router. We recommend using the default, FastRoute. A template renderer. You can ignore this when creating an API project, but if you will be creating any HTML pages, we recommend installing one. (We use Plates in the examples below, so choose it if you want to code along). An error handler. Whoops is a very nice option for development, as it gives you extensive, browsable information for exceptions and errors raised.","title":"Create a new project"},{"location":"v2/getting-started/skeleton/#start-a-web-server","text":"The Skeleton + Installer creates a full application structure that's ready-to-go when complete. You can test it out using built-in web server . From the project root directory, execute the following: $ composer run --timeout=0 serve This starts up a web server on localhost port 8080; browse to http://localhost:8080/ to see if your application responds correctly!","title":"Start a web server"},{"location":"v2/getting-started/skeleton/#development-tools","text":"We ship tools in our skeleton application to make development easier.","title":"Development Tools"},{"location":"v2/getting-started/skeleton/#modules","text":"Composer will prompt you during installation to ask if you want a minimal application (no structure or default middleware provided), flat application (all source code under the same tree, and the default selection), or modular application. This latter option is new in the version 2 series, and allows you to segregate discrete areas of application functionality into modules , which can contain source code, templates, assets, and more; these can later be repackaged for re-use if desired. Support for modules is available via the laminas-component-installer and laminas-config-aggregator packages; the mezzio-tooling . package provides tools for creating and manipulating modules in your application.","title":"Modules"},{"location":"v2/getting-started/skeleton/#adding-middleware","text":"The skeleton makes the assumption that you will be writing your middleware as classes, and uses piping and routing to add your middleware.","title":"Adding Middleware"},{"location":"v2/getting-started/skeleton/#next-steps","text":"The skeleton provides a default structure for templates, if you choose to use them. Let's see how you can create your first vanilla middleware, and templated middleware.","title":"Next Steps"},{"location":"v2/getting-started/skeleton/#congratulations","text":"Congratulations! You've now created your application, and started writing middleware! It's time to start learning about the rest of the features of Mezzio: Containers Routing Templating Error Handling","title":"Congratulations"},{"location":"v2/getting-started/standalone/","text":"Quick Start: Standalone Usage Mezzio allows you to get started at your own pace. You can start with the simplest example, detailed below, or move on to a more structured, configuration-driven approach as detailed in the use case examples . Deprecated with version 2.2 The Mezzio\\AppFactory detailed in this chapter is deprecated as of version 2.2, and will be removed in version 3.0. We recommend instead constructing Mezzio\\Application manually, or using a Laminas\\Stratigility\\MiddlewarePipe instance instead. 1. Create a new project directory First, let's create a new project directory and enter it: $ mkdir mezzio $ cd mezzio 2. Install Mezzio If you haven't already, install Composer . Once you have, we can install Mezzio, along with a router and a container: $ composer require mezzio/mezzio mezzio/mezzio-fastroute laminas/laminas-servicemanager Routers Mezzio needs a routing implementation in order to create routed middleware. We suggest FastRoute in the quick start, but you can also currently choose from Aura.Router and laminas-router. Containers We highly recommend using dependency injection containers with Mezzio; they allow you to define dependencies for your middleware, as well as to lazy load your middleware only when it needs to be executed. We suggest laminas-servicemanager in the quick start, but you can also use any container supporting PSR-11 Container . 3. Create a web root directory You'll need a directory from which to serve your application, and for security reasons, it's a good idea to keep it separate from your source code. We'll create a public/ directory for this: $ mkdir public 4. Create your bootstrap script Next, we'll create a bootstrap script. Such scripts typically set up the environment, set up the application, and invoke it. This needs to be in our web root, and we want it to intercept any incoming request; as such, we'll use public/index.php : &lt;?php use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Laminas\\Diactoros\\Response\\TextResponse; use Mezzio\\AppFactory; chdir(dirname(__DIR__)); require 'vendor/autoload.php'; $app = AppFactory::create(); $app-&gt;get('/', function ($request, DelegateInterface $delegate) { return new TextResponse('Hello, world!'); }); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); $app-&gt;run(); Rewriting URLs Many web servers will not rewrite URLs to the bootstrap script by default. If you use Apache, for instance, you'll need to set up rewrite rules to ensure your bootstrap is invoked for unknown URLs. We'll cover that in a later chapter. Routing and dispatching Note the lines from the above: $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); Mezzio's Application class provides two separate middlewares, one for routing, and one for dispatching middleware matched by routing. This allows you to slip in validations between the two activities if desired. They are not automatically piped to the application, however, to allow exactly that situation, which means they must be piped manually. 5. Start a web server Since we're just testing out the basic functionality of our application, we'll use PHP's built-in web server . From the project root directory, execute the following: $ php -S 0.0.0.0:8080 -t public/ This starts up a web server on localhost port 8080; browse to http://localhost:8080/ to see if your application responds correctly! Tip: Serve via Composer To simplify starting up a local web server, try adding the following to your composer.json : \"scripts\": { \"serve\": \"php -S 0.0.0.0:8080 -t public/\" } Once you've added that, you can fire up the web server using: $ composer serve Setting a timeout Composer commands time out after 300 seconds (5 minutes). On Linux-based systems, the php -S command that composer serve spawns continues running as a background process, but on other systems halts when the timeout occurs. As such, we recommend running the serve script using a timeout. This can be done by using composer run to execute the serve script, with a --timeout option. When set to 0 , as in the previous example, no timeout will be used, and it will run until you cancel the process (usually via Ctrl-C ). Alternately, you can specify a finite timeout; as an example, the following will extend the timeout to a full day: $ composer run --timeout=86400 serve Next steps At this point, you have a working mezzio application, that responds to a single route. From here, you may want to read up on: Applications Containers Routing Templating Error Handling Additionally, we have more use case examples .","title":"Quick Start: Standalone"},{"location":"v2/getting-started/standalone/#quick-start-standalone-usage","text":"Mezzio allows you to get started at your own pace. You can start with the simplest example, detailed below, or move on to a more structured, configuration-driven approach as detailed in the use case examples .","title":"Quick Start: Standalone Usage"},{"location":"v2/getting-started/standalone/#1-create-a-new-project-directory","text":"First, let's create a new project directory and enter it: $ mkdir mezzio $ cd mezzio","title":"1. Create a new project directory"},{"location":"v2/getting-started/standalone/#2-install-mezzio","text":"If you haven't already, install Composer . Once you have, we can install Mezzio, along with a router and a container: $ composer require mezzio/mezzio mezzio/mezzio-fastroute laminas/laminas-servicemanager","title":"2. Install Mezzio"},{"location":"v2/getting-started/standalone/#3-create-a-web-root-directory","text":"You'll need a directory from which to serve your application, and for security reasons, it's a good idea to keep it separate from your source code. We'll create a public/ directory for this: $ mkdir public","title":"3. Create a web root directory"},{"location":"v2/getting-started/standalone/#4-create-your-bootstrap-script","text":"Next, we'll create a bootstrap script. Such scripts typically set up the environment, set up the application, and invoke it. This needs to be in our web root, and we want it to intercept any incoming request; as such, we'll use public/index.php : &lt;?php use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Laminas\\Diactoros\\Response\\TextResponse; use Mezzio\\AppFactory; chdir(dirname(__DIR__)); require 'vendor/autoload.php'; $app = AppFactory::create(); $app-&gt;get('/', function ($request, DelegateInterface $delegate) { return new TextResponse('Hello, world!'); }); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); $app-&gt;run();","title":"4. Create your bootstrap script"},{"location":"v2/getting-started/standalone/#5-start-a-web-server","text":"Since we're just testing out the basic functionality of our application, we'll use PHP's built-in web server . From the project root directory, execute the following: $ php -S 0.0.0.0:8080 -t public/ This starts up a web server on localhost port 8080; browse to http://localhost:8080/ to see if your application responds correctly!","title":"5. Start a web server"},{"location":"v2/getting-started/standalone/#next-steps","text":"At this point, you have a working mezzio application, that responds to a single route. From here, you may want to read up on: Applications Containers Routing Templating Error Handling Additionally, we have more use case examples .","title":"Next steps"},{"location":"v2/reference/cli-tooling/","text":"Command Line Tooling Mezzio offers a number of tools for assisting in project development. This page catalogues each. Development Mode The package laminas/laminas-development-mode provides a simple way to toggle in and out of development mode . Doing so allows you to ship known development-specific settings within your repository, while ensuring they are not enabled in production. The tooling essentially enables optional, development-specific configuration in your application by: Copying the file config/development.config.php.dist to config/development.config.php ; this can be used to enable development-specific modules or settings (such as the debug flag). Copying the file config/autoload/development.local.php.dist to config/autoload/development.local.php ; this can be used to provide local overrides of a number of configuration settings. The package provides the tooling via vendor/bin/laminas-development-mode . If you are using the Mezzio skeleton, it provides aliases via Composer: $ composer development-enable $ composer development-disable $ composer development-status Add settings to your development.*.php.dist files, and commit those files to your repository; always toggle out of and into development mode after making changes, to ensure they pick up in your development environment. Mezzio command-line tool The package mezzio/mezzio-tooling provides the script vendor/bin/mezzio , which contains a number of commands related to migration, modules, and middleware. You can install it if it is not already present in your application: $ composer require --dev mezzio/mezzio-tooling If you installed the Mezzio skeleton prior to version 2.0.2, you will want to update the tooling to get the latest release, which contains the mezzio binary, as follows: $ composer require --dev \"mezzio/mezzio-tooling:^0.4.1\" Once installed, invoking the binary without arguments will give a listing of available tools: $ ./vendor/bin/mezzio Commands supported include: middleware:create &lt;middleware&gt; : Create a class file for the named middleware class. The class must use a namespace already declared in your application, and will be created relative to the path associated with that namespace. migrate:error-middleware-scanner [--dir|-d] : Scan the associated directory (defaults to src ) for declarations of legacy Stratigility v1 error middleware, or invocations of $next() that provide an error argument. See the section on detecting legacy error middleware for more details. migrate:original-messages [--src|-s] : Scan the associated source directory (defaults to src ) for getOriginal*() method calls and replace them with getAttribute() calls. See the section on detecting legacy calls for more details. migrate:pipeline [--config-file|-c] : Convert configuration-driven pipelines and routing to programmatic declarations. See the section on migrating to programmatic pipelines for more details. module:create [--composer|-c] [--modules-path|-p] &lt;module&gt; : Create the named module, add and generate autoloading rules for it, and register the module's ConfigProvider with your application. module:register [--composer|-c] [--modules-path|-p] &lt;module&gt; : Add and generate autoloading rules for the named module, and register the module's ConfigProvider with your application. module:deregister [--composer|-c] [--modules-path|-p] &lt;module&gt; : Remove autoloading rules for the named module and regenerate autoloading rules; remove the module's ConfigProvider from the application configuration. You may obtain full help for each command by invoking: $ ./vendor/bin/mezzio help &lt;command&gt; Modules Deprecated since mezzio-tooling 0.4.0; see the Mezzio CLI tool section above . The package mezzio/mezzio-tooling provides the binary vendor/bin/mezzio-module , which allows you to create, register, and deregister modules, assuming you are using a modular application layout . For instance, if you wish to create a new module for managing users, you might execute the following: $ ./vendor/bin/mezzio-module create User Which would create the following tree: src/ User/ src/ ConfigProvider.php templates/ It would also create an autoloading rule within your composer.json for the User namespace, pointing it at the src/User/src/ tree (and updating the autoloader in the process), and register the new module's ConfigProvider within your config/config.php . The register command will take an existing module and: Add an autoloading rule for it to your composer.json , if necessary. Add an entry for the module's ConfigProvider class to your config/config.php , if possible. $ ./vendor/bin/mezzio-module register Account The deregister command does the opposite of register . $ ./vendor/bin/mezzio-module deregister Account Migrate to programmatic pipelines Deprecated since mezzio-tooling 0.4.0; see the Mezzio CLI tool section above . We recommend using programmatic pipelines , versus configuration-defined pipelines. For those upgrading their applications from 1.X versions, we provide a tool that will read their application configuration and generate: config/pipeline.php , with the middleware pipeline config/routes.php , with routing directives config/autoload/mezzio.global.php , with settings to ensure programmatic pipelines are used, and new middleware provided for Mezzio 2.0 is registered. directives within public/index.php for using the generated pipeline and routes directives. To use this feature, you will need to first install mezzio/mezzio-tooling: $ composer require --dev mezzio/mezzio-tooling Invoke it as follows: $ ./vendor/bin/mezzio-pipeline-from-config generate The tool will notify you of any errors, including whether or not it found (and skipped) Stratigility v1-style \"error middleware\". Detect usage of legacy getOriginal*() calls Deprecated since mezzio-tooling 0.4.0; see the Mezzio CLI tool section above . When upgrading to version 2.0, you will also receive an upgrade to laminas/laminas-stratigility 2.0. That version eliminates internal decorator classes for the request and response instances, which were used to provide access to the outermost request/response; internal layers could use these to determine the full URI that resulted in their invocation, which is useful when you pipe using a path argument (as the path provided during piping is stripped from the URI when invoking the matched middleware). This affects the following methods: Request::getOriginalRequest() Request::getOriginalUri() Response::getOriginalResponse() To provide equivalent functionality, we provide a couple of tools. First, Stratigility provides middleware, Laminas\\Stratigility\\Middleware\\OriginalMessages , which will inject the current request, its URI, and, if invoked as double-pass middleware, current response, as request attributes , named, respectively, originalRequest , originalUri , and originalResponse . (Since Mezzio 2.0 decorates double-pass middleware using a wrapper that composes a response, the \"original response\" will be the response prototype composed in the Application instance.) This should be registered as the outermost middleware layer. Middleware that needs access to these instances can then use the following syntax to retrieve them: $originalRequest = $request-&gt;getAttribute('originalRequest', $request); $originalUri = $request-&gt;getAttribute('originalUri', $request-&gt;getUri(); $originalResponse = $request-&gt;getAttribute('originalResponse') ?: new Response(); Original response is not trustworthy As noted above, the \"original response\" will likely be injected with the response prototype from the Application instance. We recommend not using it, and instead either composing a pristine response instance in your middleware, or creating a new instance on-the-fly. To aid you in migrating your existing code to use the new getAttribute() syntax, mezzio/mezzio-tooling provides a binary, vendor/bin/mezzio-migrate-original-messages . First, install that package: $ composer require --dev mezzio/mezzio-tooling Then invoke it as follows: $ ./vendor/bin/mezzio-migrate-original-messages scan This script will update any getOriginalRequest() and getOriginalUri() calls, and notify you of any getOriginalResponse() calls, providing you with details on how to correct those manually. Detect usage of legacy error middleware Deprecated since mezzio-tooling 0.4.0; see the Mezzio CLI tool section above . When upgrading to version 2.0, you will also receive an upgrade to laminas/laminas-stratigility 2.0. That version eliminates what was known as \"error middleware\", middleware that either implemented Laminas\\Stratigility\\ErrorMiddlewareInterface , or duck-typed it by implementing the signature function ($error, $request, $response, callable $next) . Such \"error middleware\" allowed other middleware to invoke the $next argument with an additional, third argument representing an error condition; when that occurred, Stratigility/Mezzio would start iterating through error middleware until one was able to return a response. Each would receive the error as the first argument, and determine how to act upon it. With version 2.0 of each project, such middleware is now no longer accepted, and users should instead be using the new error handling features . However, you may find that: You have defined error middleware in your application. You have standard middleware in your application that invokes $next with the third, error argument. To help you identify such instances, mezzio/mezzio-tooling provides the script vendor/bin/mezzio-scan-for-error-middleware . First, install that package: $ composer require --dev mezzio/mezzio-tooling Then invoke it as follows: $ ./vendor/bin/mezzio-scan-for-error-middleware scan The script will notify you of any places where it finds either use case, and provide feedback on how to update your application.","title":"CLI Tooling"},{"location":"v2/reference/cli-tooling/#command-line-tooling","text":"Mezzio offers a number of tools for assisting in project development. This page catalogues each.","title":"Command Line Tooling"},{"location":"v2/reference/cli-tooling/#development-mode","text":"The package laminas/laminas-development-mode provides a simple way to toggle in and out of development mode . Doing so allows you to ship known development-specific settings within your repository, while ensuring they are not enabled in production. The tooling essentially enables optional, development-specific configuration in your application by: Copying the file config/development.config.php.dist to config/development.config.php ; this can be used to enable development-specific modules or settings (such as the debug flag). Copying the file config/autoload/development.local.php.dist to config/autoload/development.local.php ; this can be used to provide local overrides of a number of configuration settings. The package provides the tooling via vendor/bin/laminas-development-mode . If you are using the Mezzio skeleton, it provides aliases via Composer: $ composer development-enable $ composer development-disable $ composer development-status Add settings to your development.*.php.dist files, and commit those files to your repository; always toggle out of and into development mode after making changes, to ensure they pick up in your development environment.","title":"Development Mode"},{"location":"v2/reference/cli-tooling/#mezzio-command-line-tool","text":"The package mezzio/mezzio-tooling provides the script vendor/bin/mezzio , which contains a number of commands related to migration, modules, and middleware. You can install it if it is not already present in your application: $ composer require --dev mezzio/mezzio-tooling If you installed the Mezzio skeleton prior to version 2.0.2, you will want to update the tooling to get the latest release, which contains the mezzio binary, as follows: $ composer require --dev \"mezzio/mezzio-tooling:^0.4.1\" Once installed, invoking the binary without arguments will give a listing of available tools: $ ./vendor/bin/mezzio Commands supported include: middleware:create &lt;middleware&gt; : Create a class file for the named middleware class. The class must use a namespace already declared in your application, and will be created relative to the path associated with that namespace. migrate:error-middleware-scanner [--dir|-d] : Scan the associated directory (defaults to src ) for declarations of legacy Stratigility v1 error middleware, or invocations of $next() that provide an error argument. See the section on detecting legacy error middleware for more details. migrate:original-messages [--src|-s] : Scan the associated source directory (defaults to src ) for getOriginal*() method calls and replace them with getAttribute() calls. See the section on detecting legacy calls for more details. migrate:pipeline [--config-file|-c] : Convert configuration-driven pipelines and routing to programmatic declarations. See the section on migrating to programmatic pipelines for more details. module:create [--composer|-c] [--modules-path|-p] &lt;module&gt; : Create the named module, add and generate autoloading rules for it, and register the module's ConfigProvider with your application. module:register [--composer|-c] [--modules-path|-p] &lt;module&gt; : Add and generate autoloading rules for the named module, and register the module's ConfigProvider with your application. module:deregister [--composer|-c] [--modules-path|-p] &lt;module&gt; : Remove autoloading rules for the named module and regenerate autoloading rules; remove the module's ConfigProvider from the application configuration. You may obtain full help for each command by invoking: $ ./vendor/bin/mezzio help &lt;command&gt;","title":"Mezzio command-line tool"},{"location":"v2/reference/cli-tooling/#modules","text":"Deprecated since mezzio-tooling 0.4.0; see the Mezzio CLI tool section above . The package mezzio/mezzio-tooling provides the binary vendor/bin/mezzio-module , which allows you to create, register, and deregister modules, assuming you are using a modular application layout . For instance, if you wish to create a new module for managing users, you might execute the following: $ ./vendor/bin/mezzio-module create User Which would create the following tree: src/ User/ src/ ConfigProvider.php templates/ It would also create an autoloading rule within your composer.json for the User namespace, pointing it at the src/User/src/ tree (and updating the autoloader in the process), and register the new module's ConfigProvider within your config/config.php . The register command will take an existing module and: Add an autoloading rule for it to your composer.json , if necessary. Add an entry for the module's ConfigProvider class to your config/config.php , if possible. $ ./vendor/bin/mezzio-module register Account The deregister command does the opposite of register . $ ./vendor/bin/mezzio-module deregister Account","title":"Modules"},{"location":"v2/reference/cli-tooling/#migrate-to-programmatic-pipelines","text":"Deprecated since mezzio-tooling 0.4.0; see the Mezzio CLI tool section above . We recommend using programmatic pipelines , versus configuration-defined pipelines. For those upgrading their applications from 1.X versions, we provide a tool that will read their application configuration and generate: config/pipeline.php , with the middleware pipeline config/routes.php , with routing directives config/autoload/mezzio.global.php , with settings to ensure programmatic pipelines are used, and new middleware provided for Mezzio 2.0 is registered. directives within public/index.php for using the generated pipeline and routes directives. To use this feature, you will need to first install mezzio/mezzio-tooling: $ composer require --dev mezzio/mezzio-tooling Invoke it as follows: $ ./vendor/bin/mezzio-pipeline-from-config generate The tool will notify you of any errors, including whether or not it found (and skipped) Stratigility v1-style \"error middleware\".","title":"Migrate to programmatic pipelines"},{"location":"v2/reference/cli-tooling/#detect-usage-of-legacy-getoriginal-calls","text":"Deprecated since mezzio-tooling 0.4.0; see the Mezzio CLI tool section above . When upgrading to version 2.0, you will also receive an upgrade to laminas/laminas-stratigility 2.0. That version eliminates internal decorator classes for the request and response instances, which were used to provide access to the outermost request/response; internal layers could use these to determine the full URI that resulted in their invocation, which is useful when you pipe using a path argument (as the path provided during piping is stripped from the URI when invoking the matched middleware). This affects the following methods: Request::getOriginalRequest() Request::getOriginalUri() Response::getOriginalResponse() To provide equivalent functionality, we provide a couple of tools. First, Stratigility provides middleware, Laminas\\Stratigility\\Middleware\\OriginalMessages , which will inject the current request, its URI, and, if invoked as double-pass middleware, current response, as request attributes , named, respectively, originalRequest , originalUri , and originalResponse . (Since Mezzio 2.0 decorates double-pass middleware using a wrapper that composes a response, the \"original response\" will be the response prototype composed in the Application instance.) This should be registered as the outermost middleware layer. Middleware that needs access to these instances can then use the following syntax to retrieve them: $originalRequest = $request-&gt;getAttribute('originalRequest', $request); $originalUri = $request-&gt;getAttribute('originalUri', $request-&gt;getUri(); $originalResponse = $request-&gt;getAttribute('originalResponse') ?: new Response();","title":"Detect usage of legacy getOriginal*() calls"},{"location":"v2/reference/cli-tooling/#detect-usage-of-legacy-error-middleware","text":"Deprecated since mezzio-tooling 0.4.0; see the Mezzio CLI tool section above . When upgrading to version 2.0, you will also receive an upgrade to laminas/laminas-stratigility 2.0. That version eliminates what was known as \"error middleware\", middleware that either implemented Laminas\\Stratigility\\ErrorMiddlewareInterface , or duck-typed it by implementing the signature function ($error, $request, $response, callable $next) . Such \"error middleware\" allowed other middleware to invoke the $next argument with an additional, third argument representing an error condition; when that occurred, Stratigility/Mezzio would start iterating through error middleware until one was able to return a response. Each would receive the error as the first argument, and determine how to act upon it. With version 2.0 of each project, such middleware is now no longer accepted, and users should instead be using the new error handling features . However, you may find that: You have defined error middleware in your application. You have standard middleware in your application that invokes $next with the third, error argument. To help you identify such instances, mezzio/mezzio-tooling provides the script vendor/bin/mezzio-scan-for-error-middleware . First, install that package: $ composer require --dev mezzio/mezzio-tooling Then invoke it as follows: $ ./vendor/bin/mezzio-scan-for-error-middleware scan The script will notify you of any places where it finds either use case, and provide feedback on how to update your application.","title":"Detect usage of legacy error middleware"},{"location":"v2/reference/mezzio-projects/","text":"Projects powered by mezzio mezzio can be used for anything. Here are some projects, tutorials and the related source code. Have a look around and see how others have used mezzio. Sample Code &amp; Tutorials Expressive Tutorial (WIP) - source AstroSplash - source php-ddd-cargo-sample - source Personal Sites mwop.net - source alejandrocelaya.com - source zimuel.it - source","title":"Mezzio Projects"},{"location":"v2/reference/mezzio-projects/#projects-powered-by-mezzio","text":"mezzio can be used for anything. Here are some projects, tutorials and the related source code. Have a look around and see how others have used mezzio.","title":"Projects powered by mezzio"},{"location":"v2/reference/mezzio-projects/#sample-code-tutorials","text":"Expressive Tutorial (WIP) - source AstroSplash - source php-ddd-cargo-sample - source","title":"Sample Code &amp; Tutorials"},{"location":"v2/reference/mezzio-projects/#personal-sites","text":"mwop.net - source alejandrocelaya.com - source zimuel.it - source","title":"Personal Sites"},{"location":"v2/reference/migration-to-v2-2/","text":"Migration to Mezzio 2.2 Version 2.2 exists to message deprecated functionality, and to provide backports of functionality from version 3.0 as it makes sense. In most cases, your code should continue to work as it did before, but may now emit deprecation notices. This document details some specific deprecations, and how you can change your code to remove the messages, and, simultaneously, help prepare your code for version 3. Config providers The mezzio and mezzio-router packages now expose config providers . These are dedicated classes that return package-specific configuration, including dependency information. We suggest you add these to your application's configuration. Add the following two lines in your config/config.php file, inside the array passed to the ConfigAggregator constructor: \\Mezzio\\ConfigProvider::class, \\Mezzio\\Router\\ConfigProvider::class, The command ./vendor/bin/mezzio migrate:mezzio-v2.2 will do this for you. Routing and dispatch middleware In previous releases of Mezzio, you would route your routing and dispatch middleware using the following dedicated methods: $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); These methods are now deprecated , and will be removed in version 3.0. Instead, you should use pipe() with the following services: $app-&gt;pipe(\\Mezzio\\Router\\Middleware\\RouteMiddleware::class); $app-&gt;pipe(\\Mezzio\\Router\\Middleware\\DispatchMiddleware::class); The command ./vendor/bin/mezzio migrate:mezzio-v2.2 will do this for you. This also means you can easily replace these middleware with your own at this time! Routing and dispatch constants If you are using configuration-driven routes, you are likely using the constants Mezzio\\Application::ROUTING_MIDDLEWARE and DISPATCH_MIDDLEWARE to indicate the routing and dispatch middleware, as follows: 'middleware_pipeline' =&gt; [ Application::ROUTING_MIDDLEWARE, Application::DISPATCH_MIDDLEWARE, ], In the above section, we detailed deprecation of the methods pipeRoutingMiddleware() and pipeDispatchMiddleware() ; the constants above are the configuration equivalent of calling these methods, and are similarly deprecated. Change these entries to use the same syntax as other pipeline middleware, and have the middleware key indicate the appropriate middleware class as follows: 'middleware_pipeline' =&gt; [ [ 'middleware' =&gt; \\Mezzio\\Router\\Middleware\\RouteMiddleware::class, ], [ 'middleware' =&gt; \\Mezzio\\Router\\Middleware\\DispatchMiddleware::class, ], ], Implicit HEAD and OPTIONS middleware These middleware have moved to the mezzio-router package. While they still exist within the mezzio package, we have added deprecation notices indicating their removal in v3. As such, update either of the following statements, if they exist in your application: $app-&gt;pipe(\\Mezzio\\Middleware\\ImplicitHeadMiddleware::class); $app-&gt;pipe(\\Mezzio\\Middleware\\ImplicitOptionsMiddleware::class); to: $app-&gt;pipe(\\Mezzio\\Router\\Middleware\\ImplicitHeadMiddleware::class); $app-&gt;pipe(\\Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware::class); The command ./vendor/bin/mezzio migrate:mezzio-v2.2 will do this for you. Response prototypes A number of services expect a response prototype which will be used in order to generate and return a response. Previously, we did not expose a service for this, and instead hard-coded factories to create a laminas-diactoros Response instance when creating a service. In version 3, we plan to instead compose a response factory in such services. This is done to ensure a unique response prototype instance is generated for each use; this is particularly important if you wish to use such services with async web servers such as Swoole, ReactPHP, AMP, etc. To prepare for that, Mezzio 2.2 does the following: Creates Mezzio\\Container\\ResponseFactoryFactory , and maps it to the service name Psr\\Http\\Response\\ResponseInterface . It returns a callable that will generate a laminas-diactoros Response instance each time it is called. Creates Mezzio\\Container\\StreamFactoryFactory , and maps it to the service name Psr\\Http\\Response\\StreamInterface . It returns a callable that will generate a laminas-diactoros Stream instance (backed by a read/write php://temp stream) each time it is called. The various factories that hard-coded generation of a response previously now pull the ResponseInterface service and, if it is callable, call it to produce a response, but otherwise use the return value. This change should not affect most applications, unless they were defining a ResponseInterface service previously . In such cases, ensure your factory mapping has precedence by placing it in a config/autoload/ configuration file. Double-Pass middleware Double-pass middleware refers to middleware that has the following signature: function ( ServerReqeustInterface $request, ResponseInterface $response, callable $next ) : ResponseInterface where $next will receive both a request and a response instance (this latter is the origin of the \"double-pass\" phrasing). Such middleware was used in v1 releases of Mezzio, and we have continued to support it through v2. However, starting in v3, we will no longer allow you to directly pipe or route such middleware. If you need to continue using such middleware, you will need to decorate it using Laminas\\Stratigility\\Middleware\\DoublePassMiddlewareDecorator() . This decorator class accepts the middleware and a response prototype as constructor arguments, and decorates it to be used as http-interop middleware. (In version 3, it will decorate it as PSR-15 middleware.) The laminas-stratigility package provides a convenience function, Laminas\\Stratigility\\doublePassMiddleware() , to simplify this for you: use Laminas\\Diactoros\\Response; use function Laminas\\Stratigility\\doublePassMiddleware; // Piping: $app-&gt;pipe(doublePassMiddleware($someMiddleware, new Response())); // Routing: $app-&gt;get('/foo', doublePassMiddleware($someMiddleware, new Response())); Other deprecations The following classes, traits, and instance methods were deprecated, and will be removed in version 3: Mezzio\\AppFactory : if you are using this, you will need to switch to direct usage of Mezzio\\Application or a Laminas\\Stratigility\\MiddlewarePipe instance. Mezzio\\Application : deprecates the following methods: pipeRoutingMiddleware() : see the section above pipeDispatchMiddleware() : see the section above getContainer() : this method is removed in version 3; container access will only be via the bootstrap. getDefaultDelegate() : the concept of a default delegate is removed in version 3. getEmitter() : emitters move to a different collaborator in version 3. injectPipelineFromConfig() and injectRoutesFromConfig() are methods defined by the ApplicationConfigInjectionTrait , which will be removed in version 3. See the section on the ApplicationConfigInjectionDelegator for an alternate, forwards-compatible, approach. Mezzio\\ApplicationConfigInjectionTrait : if you are using it, it is marked internal, and deprecated; it will be removed in version 3. Mezzio\\Container\\NotFoundDelegateFactory : the NotFoundDelegate will be renamed to Mezzio\\Handler\\NotFoundHandler in version 3, making this factory obsolete. Mezzio\\Delegate\\NotFoundDelegate : this class becomes Mezzio\\Handler\\NotFoundHandler in v3, and the new class is added in version 2.2 as well. Mezzio\\Emitter\\EmitterStack : the emitter concept is extracted from laminas-diactoros to a new component, laminas-httphandlerrunner. This latter component is used in version 3, and defines the EmitterStack class. Unless you are extending it or interacting with it directly, this change should not affect you; the Laminas\\Diactoros\\Response\\EmitterInterface service will be directed to the new class in that version. Mezzio\\IsCallableInteropMiddlewareTrait : if you are using it, it is marked internal, and deprecated; it will be removed in version 3. Mezzio\\MarshalMiddlewareTrait : if you are using it, it is marked internal, and deprecated; it will be removed in version 3. Mezzio\\Middleware\\DispatchMiddleware : see the section above . Mezzio\\Middleware\\ImplicitHeadMiddleware : see the section above . Mezzio\\Middleware\\ImplicitOptionsMiddleware : see the section above . Mezzio\\Middleware\\NotFoundHandler : this will be removed in version 3, where you can instead pipe Mezzio\\Handler\\NotFoundHandler directly instead. Mezzio\\Middleware\\RouteMiddleware : see the section above . ApplicationConfigInjectionDelegator In addition to the above deprecations, we also provide a new class, Mezzio\\Container\\ApplicationConfigInjectionDelegator . This class services two purposes: It can act as a delegator factory for the Mezzio\\Application service; when enabled, it will look for middleware_pipeline and routes configuration, and use them to inject the Application instance before returning it. It defines static methods for injecting pipelines and routes to an Application instance. To enable the delegator as a delegator factory, add the following configuration to a config/autoload/ configuration file, or a configuration provider class: 'dependencies' =&gt; [ 'delegators' =&gt; [ \\Mezzio\\Application::class =&gt; [ \\Mezzio\\Container\\ApplicationConfigInjectionDelegator::class, ], ], ], To manually inject an Application instance, you can do the following: use Mezzio\\Container\\ApplicationConfigInjectionDelegator; // assuming $config is the application configuration: ApplicationConfigInjectionDelegator::injectPipelineFromConfig($app, $config); ApplicationConfigInjectionDelegator::injectRoutesFromConfig($app, $config); These changes will be forwards-compatible with version 3.","title":"To version 2.2"},{"location":"v2/reference/migration-to-v2-2/#migration-to-mezzio-22","text":"Version 2.2 exists to message deprecated functionality, and to provide backports of functionality from version 3.0 as it makes sense. In most cases, your code should continue to work as it did before, but may now emit deprecation notices. This document details some specific deprecations, and how you can change your code to remove the messages, and, simultaneously, help prepare your code for version 3.","title":"Migration to Mezzio 2.2"},{"location":"v2/reference/migration-to-v2-2/#config-providers","text":"The mezzio and mezzio-router packages now expose config providers . These are dedicated classes that return package-specific configuration, including dependency information. We suggest you add these to your application's configuration. Add the following two lines in your config/config.php file, inside the array passed to the ConfigAggregator constructor: \\Mezzio\\ConfigProvider::class, \\Mezzio\\Router\\ConfigProvider::class, The command ./vendor/bin/mezzio migrate:mezzio-v2.2 will do this for you.","title":"Config providers"},{"location":"v2/reference/migration-to-v2-2/#routing-and-dispatch-middleware","text":"In previous releases of Mezzio, you would route your routing and dispatch middleware using the following dedicated methods: $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); These methods are now deprecated , and will be removed in version 3.0. Instead, you should use pipe() with the following services: $app-&gt;pipe(\\Mezzio\\Router\\Middleware\\RouteMiddleware::class); $app-&gt;pipe(\\Mezzio\\Router\\Middleware\\DispatchMiddleware::class); The command ./vendor/bin/mezzio migrate:mezzio-v2.2 will do this for you. This also means you can easily replace these middleware with your own at this time!","title":"Routing and dispatch middleware"},{"location":"v2/reference/migration-to-v2-2/#routing-and-dispatch-constants","text":"If you are using configuration-driven routes, you are likely using the constants Mezzio\\Application::ROUTING_MIDDLEWARE and DISPATCH_MIDDLEWARE to indicate the routing and dispatch middleware, as follows: 'middleware_pipeline' =&gt; [ Application::ROUTING_MIDDLEWARE, Application::DISPATCH_MIDDLEWARE, ], In the above section, we detailed deprecation of the methods pipeRoutingMiddleware() and pipeDispatchMiddleware() ; the constants above are the configuration equivalent of calling these methods, and are similarly deprecated. Change these entries to use the same syntax as other pipeline middleware, and have the middleware key indicate the appropriate middleware class as follows: 'middleware_pipeline' =&gt; [ [ 'middleware' =&gt; \\Mezzio\\Router\\Middleware\\RouteMiddleware::class, ], [ 'middleware' =&gt; \\Mezzio\\Router\\Middleware\\DispatchMiddleware::class, ], ],","title":"Routing and dispatch constants"},{"location":"v2/reference/migration-to-v2-2/#implicit-head-and-options-middleware","text":"These middleware have moved to the mezzio-router package. While they still exist within the mezzio package, we have added deprecation notices indicating their removal in v3. As such, update either of the following statements, if they exist in your application: $app-&gt;pipe(\\Mezzio\\Middleware\\ImplicitHeadMiddleware::class); $app-&gt;pipe(\\Mezzio\\Middleware\\ImplicitOptionsMiddleware::class); to: $app-&gt;pipe(\\Mezzio\\Router\\Middleware\\ImplicitHeadMiddleware::class); $app-&gt;pipe(\\Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware::class); The command ./vendor/bin/mezzio migrate:mezzio-v2.2 will do this for you.","title":"Implicit HEAD and OPTIONS middleware"},{"location":"v2/reference/migration-to-v2-2/#response-prototypes","text":"A number of services expect a response prototype which will be used in order to generate and return a response. Previously, we did not expose a service for this, and instead hard-coded factories to create a laminas-diactoros Response instance when creating a service. In version 3, we plan to instead compose a response factory in such services. This is done to ensure a unique response prototype instance is generated for each use; this is particularly important if you wish to use such services with async web servers such as Swoole, ReactPHP, AMP, etc. To prepare for that, Mezzio 2.2 does the following: Creates Mezzio\\Container\\ResponseFactoryFactory , and maps it to the service name Psr\\Http\\Response\\ResponseInterface . It returns a callable that will generate a laminas-diactoros Response instance each time it is called. Creates Mezzio\\Container\\StreamFactoryFactory , and maps it to the service name Psr\\Http\\Response\\StreamInterface . It returns a callable that will generate a laminas-diactoros Stream instance (backed by a read/write php://temp stream) each time it is called. The various factories that hard-coded generation of a response previously now pull the ResponseInterface service and, if it is callable, call it to produce a response, but otherwise use the return value. This change should not affect most applications, unless they were defining a ResponseInterface service previously . In such cases, ensure your factory mapping has precedence by placing it in a config/autoload/ configuration file.","title":"Response prototypes"},{"location":"v2/reference/migration-to-v2-2/#double-pass-middleware","text":"Double-pass middleware refers to middleware that has the following signature: function ( ServerReqeustInterface $request, ResponseInterface $response, callable $next ) : ResponseInterface where $next will receive both a request and a response instance (this latter is the origin of the \"double-pass\" phrasing). Such middleware was used in v1 releases of Mezzio, and we have continued to support it through v2. However, starting in v3, we will no longer allow you to directly pipe or route such middleware. If you need to continue using such middleware, you will need to decorate it using Laminas\\Stratigility\\Middleware\\DoublePassMiddlewareDecorator() . This decorator class accepts the middleware and a response prototype as constructor arguments, and decorates it to be used as http-interop middleware. (In version 3, it will decorate it as PSR-15 middleware.) The laminas-stratigility package provides a convenience function, Laminas\\Stratigility\\doublePassMiddleware() , to simplify this for you: use Laminas\\Diactoros\\Response; use function Laminas\\Stratigility\\doublePassMiddleware; // Piping: $app-&gt;pipe(doublePassMiddleware($someMiddleware, new Response())); // Routing: $app-&gt;get('/foo', doublePassMiddleware($someMiddleware, new Response()));","title":"Double-Pass middleware"},{"location":"v2/reference/migration-to-v2-2/#other-deprecations","text":"The following classes, traits, and instance methods were deprecated, and will be removed in version 3: Mezzio\\AppFactory : if you are using this, you will need to switch to direct usage of Mezzio\\Application or a Laminas\\Stratigility\\MiddlewarePipe instance. Mezzio\\Application : deprecates the following methods: pipeRoutingMiddleware() : see the section above pipeDispatchMiddleware() : see the section above getContainer() : this method is removed in version 3; container access will only be via the bootstrap. getDefaultDelegate() : the concept of a default delegate is removed in version 3. getEmitter() : emitters move to a different collaborator in version 3. injectPipelineFromConfig() and injectRoutesFromConfig() are methods defined by the ApplicationConfigInjectionTrait , which will be removed in version 3. See the section on the ApplicationConfigInjectionDelegator for an alternate, forwards-compatible, approach. Mezzio\\ApplicationConfigInjectionTrait : if you are using it, it is marked internal, and deprecated; it will be removed in version 3. Mezzio\\Container\\NotFoundDelegateFactory : the NotFoundDelegate will be renamed to Mezzio\\Handler\\NotFoundHandler in version 3, making this factory obsolete. Mezzio\\Delegate\\NotFoundDelegate : this class becomes Mezzio\\Handler\\NotFoundHandler in v3, and the new class is added in version 2.2 as well. Mezzio\\Emitter\\EmitterStack : the emitter concept is extracted from laminas-diactoros to a new component, laminas-httphandlerrunner. This latter component is used in version 3, and defines the EmitterStack class. Unless you are extending it or interacting with it directly, this change should not affect you; the Laminas\\Diactoros\\Response\\EmitterInterface service will be directed to the new class in that version. Mezzio\\IsCallableInteropMiddlewareTrait : if you are using it, it is marked internal, and deprecated; it will be removed in version 3. Mezzio\\MarshalMiddlewareTrait : if you are using it, it is marked internal, and deprecated; it will be removed in version 3. Mezzio\\Middleware\\DispatchMiddleware : see the section above . Mezzio\\Middleware\\ImplicitHeadMiddleware : see the section above . Mezzio\\Middleware\\ImplicitOptionsMiddleware : see the section above . Mezzio\\Middleware\\NotFoundHandler : this will be removed in version 3, where you can instead pipe Mezzio\\Handler\\NotFoundHandler directly instead. Mezzio\\Middleware\\RouteMiddleware : see the section above .","title":"Other deprecations"},{"location":"v2/reference/migration-to-v2-2/#applicationconfiginjectiondelegator","text":"In addition to the above deprecations, we also provide a new class, Mezzio\\Container\\ApplicationConfigInjectionDelegator . This class services two purposes: It can act as a delegator factory for the Mezzio\\Application service; when enabled, it will look for middleware_pipeline and routes configuration, and use them to inject the Application instance before returning it. It defines static methods for injecting pipelines and routes to an Application instance. To enable the delegator as a delegator factory, add the following configuration to a config/autoload/ configuration file, or a configuration provider class: 'dependencies' =&gt; [ 'delegators' =&gt; [ \\Mezzio\\Application::class =&gt; [ \\Mezzio\\Container\\ApplicationConfigInjectionDelegator::class, ], ], ], To manually inject an Application instance, you can do the following: use Mezzio\\Container\\ApplicationConfigInjectionDelegator; // assuming $config is the application configuration: ApplicationConfigInjectionDelegator::injectPipelineFromConfig($app, $config); ApplicationConfigInjectionDelegator::injectRoutesFromConfig($app, $config); These changes will be forwards-compatible with version 3.","title":"ApplicationConfigInjectionDelegator"},{"location":"v2/reference/migration/","text":"Migration to Mezzio 2.0 Mezzio 2.0 should not result in many upgrade problems for users. However, starting in this version, we offer a few changes affecting the following that you should be aware of, and potentially update your application to adopt: Signature changes Removed functionality Deprecated functionality PSR-11 support Usage of http-interop middleware Original request and response messages Error handling Final handlers become default delegates Programmatic middleware pipelines Implicit handling of HEAD and OPTIONS requests RouterInterface changes URL helper changes laminas-view renderer changes Twig renderer changes Adopting a modular architecture Signature changes The following signature changes were made that could affect class extensions : Mezzio\\Application::__call($method, array $args) : previously, the $args argument was not typehinted; it now is. If you are extending this class and overriding that method, you will need to update your method signature accordingly. Additionally, a number of signatures change due to updating Mezzio to support PSR-11 instead of container-interop (which was the basis for PSR-11). Essentially, these were a matter of updating typehints on Interop\\Container\\ContainerInterface to Psr\\Container\\ContainerInterface . Signatures affected include: Mezzio\\AppFactory::create() Mezzio\\Application::__construct() Mezzio\\Container\\ApplicationFactory::__invoke() Mezzio\\Container\\ErrorHandlerFactory::__invoke() Mezzio\\Container\\ErrorResponseGeneratorFactory::__invoke() Mezzio\\Container\\NotFoundDelegateFactory::__invoke() Mezzio\\Container\\NotFoundHandlerFactory::__invoke() Mezzio\\Container\\WhoopsErrorResponseGeneratorFactory::__invoke() Mezzio\\Container\\WhoopsFactory::__invoke() Mezzio\\Container\\WhoopsPageHandlerFactory::__invoke() In each of the above cases, updating your import statements from Interop\\Container\\ContainerInterface to Psr\\Container\\ContainerInterface will make your code work again. The following exceptions now implement PSR-11 exception interfaces instead of container-interop variants: Mezzio\\Container\\Exception\\InvalidServiceException In the above case, if you were previously catching the container-interop exception on which it was based, your code should still work so long as you have container-interop installed. You should likely update it to catch the more general Psr\\Container\\ContainerExceptionInterface instead, however. Removed functionality The following classes and/or methods were removed for the Mezzio 2.0 release: Mezzio\\Application::pipeErrorHandler() . Stratigility 2.0 dropped its ErrorMiddlewareInterface and the concept of error middleware (middleware supporting an additional $error argument in its signature); this method was thus no longer relevant. Mezzio\\Application::routeMiddleware() . Routing middleware was extracted to the class Mezzio\\Middleware\\RouteMiddleware . Mezzio\\Application::dispatchMiddleware() . Dispatch middleware was extracted to the class Mezzio\\Middleware\\DispatchMiddleware . Mezzio\\Application::getFinalHandler() . Stratigility 2 supports the http-interop/http-middleware project, and now uses delegates . This method was renamed to getDefaultDelegate() , and now returns an Interop\\Http\\ServerMiddleware\\DelegateInterface instance. Mezzio\\Container\\Exception\\InvalidArgumentException . This exception was thrown by Mezzio\\Container\\ApplicationFactory previously; that class now throws Mezzio\\Exception\\InvalidArgumentException instead. Mezzio\\Container\\Exception\\NotFoundException . This exception type was never used internally. Mezzio\\ErrorMiddlewarePipe . With the removal of Stratigility 1 error middleware, this specialized MiddlewarePipe no longer has any use. Mezzio\\Container\\TemplatedErrorHandlerFactory . See the section on final handler changes for more information. Mezzio\\Container\\WhoopsErrorHandlerFactory . See the section on final handler changes for more information. Mezzio\\TemplatedErrorHandler . See the section on final handler changes for more information. Mezzio\\WhoopsErrorHandler . See the section on final handler changes for more information. Deprecated functionality Mezzio\\Application::raiseThrowables() . Stratigility 2.0 makes the method a no-op, as exceptions are no longer caught by the middleware dispatcher. As such, the raise_throwables configuration argument now is no longer used, either. PSR-11 support In previous versions of Mezzio, we consumed container-interop , which provides Interop\\Container\\ContainerInterface , a shared interface for dependency injection containers. container-interop served as a working group for the PSR-11 specification. In the weeks prior to the Mezzio 2.0 release, PSR-11 was formally accepted, and the package psr/container was released. As such, we have updated Mezzio to consume the interfaces PSR-11 exposes. No supported implementations currently directly implement PSR-11, however. Fortunately, the container-interop 1.2.0 release acts as a forwards-compatibility measure by altering every interface it exposes to extend those from PSR-11, making existing container-interop implementations de facto PSR-11 implementations! The result is a (mostly) transparent upgrade for users of Mezzio. As newer versions of container implementations are released supporting PSR-11 directly, you will be able to upgrade immediately; we will also periodically update the skeleton to pick up these new versions when present. (The one caveat to upgrading is signature changes within Mezzio classes based on the new psr/container interface names.) As long as you have container-interop 1.2.0 installed, your existing factories that typehint against its interface will continue to work. However, we recommend updating them to instead typehint against PSR-11, which will allow you to drop the container-interop requirement once your chosen container implementation no longer requires it. Do not update blindly If you are implementing interfaces from other packages in your factory implementations, be sure to check and see if those interfaces update to PSR-11 before making changes. As an example, laminas-servicemanager v3 does not update Laminas\\ServiceManager\\Factory\\FactoryInterface and siblings to typehint against PSR-11, as doing so would break backwards compatibility. http-interop Stratigility 2.0 provides the ability to work with http-interop middleware 0.4.1 . This specification, which is being developed as the basis of PSR-15 , defines what is known as lambda or single-pass middleware, vs the double-pass middleware traditionally used by Stratigility and Mezzio. Double-pass refers to the fact that two arguments are passed to the delegation function $next : the request and response. Lambda or single-pass middleware only pass a single argument, the request. Stratigility 2.0 provides support for dispatching either style of middleware. Specifically, your middleware can now implement: Interop\\Http\\ServerMiddleware\\MiddlewareInterface , which defines a single method, process(Psr\\Http\\Message\\ServerRequestInterface $request, Interop\\Http\\ServerMiddleware\\DelegateInterface $delegate) . Callable middleware that follows the above signature (the typehint for the request argument is optional). Both styles of middleware may be piped directly to the middleware pipeline or as routed middleware within Mezzio. In each case, you can invoke the next middleware layer using $delegate-&gt;process($request) . In Mezzio 2.0, Application will continue to accept the legacy double-pass signature, but will require that you either: Provide a $responsePrototype (a ResponseInterface instance) to the Application instance prior to piping or routing such middleware. Decorate the middleware in a Laminas\\Stratigility\\Middleware\\CallableMiddlewareWrapper instance (which also requires a $responsePrototype ). If you use Mezzio\\Container\\ApplicationFactory to create your Application instance, a response prototype will be injected for you from the outset. We recommend that you begin writing middleware to follow the http-interop standard at this time. As an example: namespace App\\Middleware; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; class XClacksOverheadMiddleware implements MiddlewareInterface { /** * {@inheritDoc} */ public function process(ServerRequestInterface $request, DelegateInterface $delegate) { $response = $delegate-&gt;process($request); return $response-&gt;withHeader('X-Clacks-Overhead', 'GNU Terry Pratchett'); } } Alternately, you can write this as a callable: namespace App\\Middleware; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; class XClacksOverheadMiddleware { /** * @param ServerRequestInterface $request * @param DelegateInterface $delegate * @return ResponseInterface */ public function __invoke(ServerRequestInterface $request, DelegateInterface $delegate) { $response = $delegate-&gt;process($request); return $response-&gt;withHeader('X-Clacks-Overhead', 'GNU Terry Pratchett'); } } Original messages In the migration to version 1.1 guide , we detail the fact that Stratigility 1.3 deprecated its internal request and response decorators. Stratigility 2.0, on which Mezzio 2.0 is based, removes them entirely. If your code relied on the various getOriginal*() methods those decorators exposed, you will need to update your code in two ways: You will need to add Laminas\\Stratigility\\Middleware\\OriginalMessages to your middleware pipeline, as the outermost (or close to outermost) layer. You will need to update your code to call on the request instance's getAttribute() method with one of originalRequest , originalUri , or originalResponse to retrieve the values. To address the first point, see the Mezzio 1.1 migration documentation , which details how to update your configuration or programmatic pipeline. For the second point, we provide a tool via the mezzio/mezzio-tooling package which will help you in this latter part of the migration. Install it as a development requirement via composer: $ composer require --dev mezzio/mezzio-tooling And then execute it via: $ ./vendor/bin/mezzio-migrate-original-messages This tool will update calls to getOriginalRequest() and getOriginalUri() to instead use the new request attributes that the OriginalMessages middleware injects: getOriginalRequest() becomes getAttribute('originalRequest', $request) getOriginalUri() becomes getAttribute('originalUri', $request-&gt;getUri()) In both cases, $request will be replaced with whatever variable name you used for the request instance. For getOriginalResponse() calls, which happen on the response instance, the tool will instead tell you what files had such calls, and detail how you can update those calls to use the originalResponse request attribute. Error handling As noted in the Mezzio 1.1 migration docs , Stratigility 1.3 introduced the ability to tell it to no longer catch exceptions internally, paving the way for middleware-based error handling. Additionally, it deprecated its own ErrorMiddlewareInterface and duck-typed implementations of the interface in favor of middleware-based error handling. Finally, it deprecated the $e / $error argument to \"final handlers\", as that argument would be used only when attempting to invoke ErrorMiddlewareInterface instances. Stratigility 2.0, on which Mezzio 2.0 is based, no longer catches exceptions internally, removes the ErrorMiddlewareInterface entirely, and thus the $e / $error argument to final handlers. As such, you MUST provide your own error handling with Mezzio 2.0. Error handling middleware will typically introduce a try/catch block: function ( ServerRequestInterface $request, ResponseInterface $response, callable $next ) { try { $response = $next($request, $response); return $response; } catch (\\Throwable $exception) { // caught PHP 7 throwable } catch (\\Exception $exception) { // caught PHP 5 exception } // ... // do something with $exception and generate a response // ... return $response; } Additionally, you will need middleware registered as your innermost layer that is guaranteed to return a response. Generally, if you hit that layer, no other middleware is capable of handling the request, indicating a 400 (Bad Request) or 404 (Not Found) HTTP status. With the combination of an error handler at the outermost layer, and a \"not found\" handler at the innermost layer, you can handle any error in your application. Stratigility 1.3 and 2.0 provide an error handler implementation via Laminas\\Stratigility\\Middleware\\ErrorHandler . In addition to the try/catch block, it also sets up a PHP error handler that will catch any PHP error types in the current error_reporting mask; the error handler will raise exceptions of the type ErrorException with the PHP error details. ErrorHandler allows injection of an \"error response generator\", which allows you to alter how the error response is generated based on the current environment. Error response generators are callables with the signature: function ( Throwable|Exception $e, ServerRequestInterface $request, ResponseInterface $response ) : ResponseInterface Mezzio 2.0 provides the following functionality to assist with your error handling needs: Mezzio\\Middleware\\ErrorResponseGenerator will output a canned plain/text message, or use a supplied template renderer to generate content for the response. It accepts the following arguments to its constructor: $isDevelopmentMode = false : whether or not the application is in development mode. If so, it will output stack traces when no template renderer is used (see below), or supply the exception to the template via the error variable if a renderer is present. Mezzio\\Template\\TemplateRendererInterface $renderer : if supplied, the results of rendering a template will be injected into the response. Templates are passed the following variables: response : the response at the time of rendering request : the request at the time of rendering uri : the URI at the time of rendering status : the response status code reason : the response reason phrase error : the exception; this is only provided when in development mode. $template = 'error::error' : the template to render, with a default value if none is provided. Mezzio\\Container\\ErrorResponseGeneratorFactory can create an instance of the ErrorResponseGenerator using the following: The debug top-level configuration value is used to set the $isDevelopmentMode flag. If a Mezzio\\Template\\TemplateRendererInterface service is registered, it will be provided to the constructor. The value of mezzio.error_handler.template_error , if present, will be used to seed the $template argument. Mezzio\\Middleware\\WhoopsErrorResponseGenerator uses Whoops to generate the error response. Its constructor takes a single argument, a Whoops\\Run instance. If a Whoops\\Handler\\PrettyPageHandler is registered with the instance, it will add a data table with request details derived from the ServerRequestInterface instance. Mezzio\\Container\\WhoopsErrorResponseGeneratorFactory can create an instance, and will use the Mezzio\\Whoops service to seed the Whoops\\Run argument. Mezzio\\Middleware\\NotFoundHandler can be used as the innermost layer of your pipeline in order to return a 404 response. (Typically, if you get to the innermost layer, no middleware was able to handle the request, indicating a 404.) By default, it will produce a canned plaintext response. However, you can also provide an optional TemplateRendererInterface instance and $template in order to provide templated content. The constructor arguments are: - `ResponseInterface $responsePrototype`: this is an empty response on which to set the 404 status and inject the 404 content. - `TemplateRendererInterface $renderer`: optionally, you may provide a renderer to use in order to provide templated response content. - $template = 'error::404'`: optionally, you may provide a template to render; if none is provided, a sane default is used. Mezzio\\Container\\NotFoundHandlerFactory can create an instance of the NotFoundHandler for you, and will use the following to do so: The Mezzio\\Template\\TemplateRendererInterface service, if available. The mezzio.error_handler.template_404 configuration value, if available, will be used for the $template . Mezzio\\Container\\ErrorHandlerFactory will create an instance of Laminas\\Stratigility\\Middleware\\ErrorHandler , and use the Laminas\\Stratigility\\Middleware\\ErrorResponseGenerator service to seed it. As such, register one of the following as a factory for the Laminas\\Stratigility\\Middleware\\ErrorResponseGenerator service: - Mezzio\\Container\\ErrorResponseGeneratorFactory - Mezzio\\Container\\WhoopsErrorResponseGeneratorFactory Error handler configuration example If you are using configuration-driven middleware, your middleware pipeline configuration may look like this in order to make use of the new error handling facilities: // config/autoload/middleware-pipeline.global.php use Mezzio\\Application; use Mezzio\\Container; use Mezzio\\Helper; use Mezzio\\Middleware; use Laminas\\Stratigility\\Middleware\\ErrorHandler; use Laminas\\Stratigility\\Middleware\\OriginalMessages; return [ // Add the following section to enable the new error handling: 'mezzio' =&gt; [ 'raise_throwables' =&gt; true, ], 'dependencies' =&gt; [ 'invokables' =&gt; [ // See above section on \"Original messages\": OriginalMessages::class =&gt; OriginalMessages::class, ], 'factories' =&gt; [ Helper\\ServerUrlMiddleware::class =&gt; Helper\\ServerUrlMiddlewareFactory::class, Helper\\UrlHelperMiddleware::class =&gt; Helper\\UrlHelperMiddlewareFactory::class, // Add the following three entries: ErrorHandler::class =&gt; Container\\ErrorHandlerFactory::class, Middleware\\ErrorResponseGenerator::class =&gt; Container\\ErrorResponseGeneratorFactory::class, Middleware\\NotFoundHandler::class =&gt; Container\\NotFoundHandlerFactory::class, ], ], 'middleware_pipeline' =&gt; [ 'always' =&gt; [ 'middleware' =&gt; [ OriginalMessages::class, Helper\\ServerUrlMiddleware::class, ErrorHandler::class, /* ... */ ], 'priority' =&gt; 10000, ], 'routing' =&gt; [ 'middleware' =&gt; [ Application::ROUTING_MIDDLEWARE, Helper\\UrlHelperMiddleware::class, Application::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], 'not-found' =&gt; [ 'middleware' =&gt; Middleware\\NotFoundHandler::class, 'priority' =&gt; 0, ], // Remove the section \"error\"\" ], ]; If you are defining a programmatic pipeline (see more below on this), the pipeline might look like: $app-&gt;pipe(OriginalMessages::class); $app-&gt;pipe(Helper\\ServerUrlMiddleware::class); $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipe(Helper\\UrlHelperMiddleware::class); $app-&gt;pipeDispatchMiddleware(); $app-&gt;pipe(Middleware\\NotFoundHandler::class); Error handling and PHP errors As noted above, Laminas\\Stratigility\\Middleware\\ErrorHandler also creates a PHP error handler that casts PHP errors to ErrorException instances. More specifically, it uses the current error_reporting value to determine which errors it should cast this way. This can be problematic when deprecation errors are triggered. If they are cast to exceptions, code that would normally run will now result in error pages. We recommend adding the following line to your public/index.php towards the top of the file: error_reporting(error_reporting() &amp; ~E_USER_DEPRECATED); This will prevent the error handler from casting deprecation notices to exceptions, while keeping the rest of your error reporting mask intact. Removing legacy error middleware Stratigility version 1-style error middleware (middleware implementing Laminas\\Stratigility\\ErrorMiddlewareInterface , or duck-typing its signature, which included an $error argument as the first argument to the middleware) is no longer supported with Stratigility version 2 and Mezzio 2.0. You will need to find any instances of them in your application, or cases where your middleware invokes error middleware via the third argument to $next() . We provide a tool to assist you with that via the package mezzio/mezzio-tooling : vendor/bin/mezzio-scan-for-error-middleware . Run the command from your project root, optionally passing the help , --help , or -h commands for usage. The tool will detect each of these for you, flagging them for you to update or remove. Final handlers become default delegates One ramification of supporting http-interop middleware is that the concept of \"final handlers\" changes. In Stratigility 1.X and Mezzio 1.X, a \"final handler\" was invoked when the middleware pipeline was exhausted; however, due to how Stratigility caught exceptions, this also meant that the final handler often acted as the application error handler, reporting errors to end users. With the error handling changes noted above , error handling is moved to dedicated middleware. However, there is still a need to have something that can execute once the middleware pipeline is exhausted. Such a situation typically indicates no middleware was able to handle the request, or that the request was somehow malformed. In Mezzio 2.0, we have removed final handlers, and replaced them with the concept of \"default delegates\". Delegates are Interop\\Http\\ServerMiddleware\\DelegateInterface instances, which are invoked by middleware when they wish to delegate processing of the request to something else. Internally, Stratigility 2.0 and Mezzio 2.0 use a delegate to iterate through the middleware pipeline. For Mezzio 2.0, a default delegate is a delegate executed when the application's internal middleware pipeline is exhausted. The ramifications for end users are as follows: The $finalHandler argument to Application 's constructor, which previously was a callable , is now called $defaultDelegate , and needs to be a DelegateInterface instance. getFinalHandler() no longer exists; we have added getDefaultDelegate() . The service Mezzio\\FinalHandler is no longer used. A new service, Mezzio\\Delegate\\DefaultDelegate , is used by ApplicationFactory , and, if present, will be used to inject the $defaultDelegate argument of the Application constructor. We have removed the following classes, which either provided final handlers, or acted as factories for them: Mezzio\\TemplatedErrorHandler Mezzio\\WhoopsErrorHandler Mezzio\\Container\\TemplatedErrorHandlerFactory Mezzio\\Container\\WhoopsErrorHandlerFactory If you use the vendor/bin/mezzio-pipeline-from-config tool to migrate your application to programmatic pipelines, as described below, the DefaultDelegate service will be mapped to Mezzio\\Container\\NotFoundDelegateFactory , which will provide an instance of Mezzio\\Delegate\\NotFoundDelegate . This new class will produce a 404 response, using a template if the Mezzio\\Template\\TemplateRendererInterface service is present, but otherwise producing a plain text response. Application's built using the 2.0 version of the skeleton application will have these features enabled by default. NotFoundDelegate and NotFoundHandler Mezzio\\Middleware\\NotFoundHandler , which is intended as innermost middleware for producing a 404 response, composes and proxies to a NotFoundDelegate instance to produce its response. Programmatic middleware pipelines Starting with Mezzio 1.1, we recommended programmatic creation of pipelines and routing ; the Mezzio 1.1 migration guide provides more detail. With Mezzio 2.0, this is now the default option shipped in the skeleton. If you are upgrading from version 1 and are not currently using programmatic pipelines, we provide a migration tool that will convert your application to do so. The tool is available via the package mezzio/mezzio-tooling . You may install this package in one of the following ways: Via the vendor binary ./vendor/bin/mezzio-tooling : $ ./vendor/bin/mezzio-tooling # install $ ./vendor/bin/mezzio-tooling remove # uninstall Using Composer: $ composer require --dev mezzio/mezzio-tooling # install $ composer remove --dev mezzio/mezzio-tooling # uninstall Once installed, you will use the vendor/bin/mezzio-pipeline-from-config command. This command does the following: Reads your middleware_pipeline configuration, and generates a programmatic pipeline for you, which is then stored in config/pipeline.php . The generated pipeline contains the following additions: The first middleware in the pipeline is Laminas\\Stratigility\\Middleware\\OriginalMessages , which injects the incoming request, URI, and response as the request attributes originalRequest , originalUri , and originalResponse , respectively. (This can aid URI generation in nested middleware later.) The second middleware in the pipeline is Laminas\\Stratigility\\Middleware\\ErrorHandler . The last middleware in the pipeline is Mezzio\\Middleware\\NotFoundHandler . Reads your routes configuration, and generates a programmatic routing table for you, which is then stored in config/routes.php . Adds a new configuration file, config/autoload/programmatic-pipeline.global.php , which enables the programmatic_pipelines configuration flag. Additionally, it adds dependency configuration for the new error handlers. Inserts two lines before the $app-&gt;run() statement of your public/index.php , one each to require config/pipeline.php and config/routes.php . Your middleware_pipeline and routes configuration are not removed at this time, to allow you to test and verify your application first; however, due to the configuration in config/autoload/programmatic-pipeline.global.php , these are now ignored. If you wish to use Whoops in your development environment, you may add the following to a local configuration file (e.g., config/autoload/local.php ): use Mezzio\\Container\\WhoopsErrorResponseGeneratorFactory; use Mezzio\\Middleware\\ErrorResponseGenerator; return [ 'dependencies' =&gt; [ 'factories' =&gt; [ ErrorResponseGenerator::class =&gt; WhoopsErrorResponseGeneratorFactory::class, ], ], ]; Other things you may want to do: The ErrorHandler entry could potentially be moved inwards a few layers. As an example, the ServerUrlMiddleware has no possibility of raising an exception or error, and could be moved outwards; you could do similarly for any middleware that only injects additional response headers. Remove any Stratigility-style error middleware (middleware expecting an error as the first argument). If any specialized error handling should occur, add additional middleware into the pipeline that can catch exceptions, and have that middleware re-throw for exceptions it cannot handle. (Use the vendor/bin/mezzio-scan-for-error-middleware command from mezzio/mezzio-tooling to assist in this.) Consider providing your own Laminas\\Stratigility\\NoopFinalHandler implementation; this will now only be invoked if the queue is exhausted, and could return a generic 404 page, raise an exception, etc. Handling HEAD and OPTIONS requests Prior to 2.0, it was possible to route middleware that could not handle HEAD and/or OPTIONS requests. Per RFC 7231, section 4.1 , \"all general-purpose servers MUST support the methods GET and HEAD. All other methods are OPTIONAL.\" Additionally, most servers and implementors agree that OPTIONS should be supported for any given resource, so that consumers can determine what methods are allowed for the given resource. To make this happen, the Mezzio project implemented several features. First, mezzio-router 1.3.0 introduced several features in both Mezzio\\Router\\Route and Mezzio\\Router\\RouteResult to help consumers implement support for HEAD and OPTIONS in an automated way. The Route class now has two new methods, implicitHead() and implicitOptions() ; these each return a boolean true value if support for those methods is implicit — i.e., not defined explicitly for the route. The RouteResult class now introduces a new factory method, fromRoute() , that will create an instance from a Route instance; this then allows consumers of a RouteResult to query the Route to see if a matched HEAD or OPTIONS request needs automated handling. Each of the supported router implementations were updated to use this method, as well as to return a successful routing result if HEAD and/or OPTIONS requests are submitted, but the route does not explicitly support the method. Within Mezzio itself, we now offer two new middleware to provide this automation: Mezzio\\Middleware\\ImplicitHeadMiddleware Mezzio\\Middleware\\ImplicitOptionsMiddleware If you want to support these methods automatically, each of these should be enabled between the routing and dispatch middleware. If you use the mezzio-pipeline-from-config tool as documented in the programmatic pipeline migration section , entries for each will be injected into your generated pipeline. Please see the chapter on the implicit methods middleware for more information on each. Router interface changes Mezzio 2.0 uses mezzio/mezzio-router 2.1+. Version 2.0 of that package introduced a change to the Mezzio\\Router\\RouterInterface::generateUri() method; it now accepts an additional, optional, third argument, array $options = [] , which can be used to pass router-specific options when generating a URI. As an example, the implementation that uses laminas/laminas-router might use these options to pass a translator instance in order to translate a path segment to the currently selected locale. For consumers, his represents no backwards-incompatible change; consumers may opt-in to the new argument at will. For those implementing the interface, upgrading will require updating your router implementation's signature to match the new interface: public function generateUri( string $name, array $substitutions = [], array $options = [] ) : string URL helper changes Mezzio 2.0 uses mezzio/mezzio-helpers version 3.0+. This new version updates the signature of the Mezzio\\Helper\\UrlHelper from: function ( $routeName, array $routeParams = [] ) : string to: function ( $routeName, array $routeParams = [], $queryParams = [], $fragmentIdentifier = null, array $options = [] ) : string For consumers, this should represent a widening of features, and will not require any changes, unless you wish to opt-in to the new arguments. See the UrlHelper documentation for information on each argument. For any users who were extending the class, you will need to update your extension accordingly. laminas-view renderer changes Mezzio 2.0 will use mezzio-laminasviewrenderer 1.3+ if that renderer is chosen. Starting with 1.3.0 of that renderer, you may now pass a boolean false value for the layout variable when calling either addDefaultParam() or render() on the renderer instance in order to disable the layout. Twig renderer changes Mezzio 2.0 will use mezzio-twigrenderer 1.3+ if that renderer is chosen. Starting with 1.3.0 of that renderer, Twig 2.1+ is now supported. Adopting a modular architecture Mezzio 2.0 ships with support for modular architectures from the outset, as detailed in the chapter on modules . If you wish to update your application to use these features, you will need to install the following packages: laminas/laminas-config-aggregator laminas/laminas-component-installer As an example: $ composer require laminas/laminas-config-aggregator \\ &gt; laminas/laminas-component-installer Once installed, you should update your config/config.php file to read as follows: &lt;?php use Laminas\\ConfigAggregator\\ArrayProvider; use Laminas\\ConfigAggregator\\ConfigAggregator; use Laminas\\ConfigAggregator\\PhpFileProvider; // To enable or disable caching, set the `ConfigAggregator::ENABLE_CACHE` boolean in // `config/autoload/local.php`. $cacheConfig = [ 'config_cache_path' =&gt; 'data/config-cache.php', ]; $aggregator = new ConfigAggregator([ // Include cache configuration new ArrayProvider($cacheConfig), // Default App module config App\\ConfigProvider::class, // Load application config in a pre-defined order in such a way that local settings // overwrite global settings. (Loaded as first to last): // - `global.php` // - `*.global.php` // - `local.php` // - `*.local.php` new PhpFileProvider('config/autoload/{{,*.}global,{,*.}local}.php'), // Load development config if it exists new PhpFileProvider('config/development.config.php'), ], $cacheConfig['config_cache_path']); return $aggregator-&gt;getMergedConfig(); The above should mimic what you already had in place; if it does not, check to see if there are additional paths you were globbing previously.","title":"To version 2"},{"location":"v2/reference/migration/#migration-to-mezzio-20","text":"Mezzio 2.0 should not result in many upgrade problems for users. However, starting in this version, we offer a few changes affecting the following that you should be aware of, and potentially update your application to adopt: Signature changes Removed functionality Deprecated functionality PSR-11 support Usage of http-interop middleware Original request and response messages Error handling Final handlers become default delegates Programmatic middleware pipelines Implicit handling of HEAD and OPTIONS requests RouterInterface changes URL helper changes laminas-view renderer changes Twig renderer changes Adopting a modular architecture","title":"Migration to Mezzio 2.0"},{"location":"v2/reference/migration/#signature-changes","text":"The following signature changes were made that could affect class extensions : Mezzio\\Application::__call($method, array $args) : previously, the $args argument was not typehinted; it now is. If you are extending this class and overriding that method, you will need to update your method signature accordingly. Additionally, a number of signatures change due to updating Mezzio to support PSR-11 instead of container-interop (which was the basis for PSR-11). Essentially, these were a matter of updating typehints on Interop\\Container\\ContainerInterface to Psr\\Container\\ContainerInterface . Signatures affected include: Mezzio\\AppFactory::create() Mezzio\\Application::__construct() Mezzio\\Container\\ApplicationFactory::__invoke() Mezzio\\Container\\ErrorHandlerFactory::__invoke() Mezzio\\Container\\ErrorResponseGeneratorFactory::__invoke() Mezzio\\Container\\NotFoundDelegateFactory::__invoke() Mezzio\\Container\\NotFoundHandlerFactory::__invoke() Mezzio\\Container\\WhoopsErrorResponseGeneratorFactory::__invoke() Mezzio\\Container\\WhoopsFactory::__invoke() Mezzio\\Container\\WhoopsPageHandlerFactory::__invoke() In each of the above cases, updating your import statements from Interop\\Container\\ContainerInterface to Psr\\Container\\ContainerInterface will make your code work again. The following exceptions now implement PSR-11 exception interfaces instead of container-interop variants: Mezzio\\Container\\Exception\\InvalidServiceException In the above case, if you were previously catching the container-interop exception on which it was based, your code should still work so long as you have container-interop installed. You should likely update it to catch the more general Psr\\Container\\ContainerExceptionInterface instead, however.","title":"Signature changes"},{"location":"v2/reference/migration/#removed-functionality","text":"The following classes and/or methods were removed for the Mezzio 2.0 release: Mezzio\\Application::pipeErrorHandler() . Stratigility 2.0 dropped its ErrorMiddlewareInterface and the concept of error middleware (middleware supporting an additional $error argument in its signature); this method was thus no longer relevant. Mezzio\\Application::routeMiddleware() . Routing middleware was extracted to the class Mezzio\\Middleware\\RouteMiddleware . Mezzio\\Application::dispatchMiddleware() . Dispatch middleware was extracted to the class Mezzio\\Middleware\\DispatchMiddleware . Mezzio\\Application::getFinalHandler() . Stratigility 2 supports the http-interop/http-middleware project, and now uses delegates . This method was renamed to getDefaultDelegate() , and now returns an Interop\\Http\\ServerMiddleware\\DelegateInterface instance. Mezzio\\Container\\Exception\\InvalidArgumentException . This exception was thrown by Mezzio\\Container\\ApplicationFactory previously; that class now throws Mezzio\\Exception\\InvalidArgumentException instead. Mezzio\\Container\\Exception\\NotFoundException . This exception type was never used internally. Mezzio\\ErrorMiddlewarePipe . With the removal of Stratigility 1 error middleware, this specialized MiddlewarePipe no longer has any use. Mezzio\\Container\\TemplatedErrorHandlerFactory . See the section on final handler changes for more information. Mezzio\\Container\\WhoopsErrorHandlerFactory . See the section on final handler changes for more information. Mezzio\\TemplatedErrorHandler . See the section on final handler changes for more information. Mezzio\\WhoopsErrorHandler . See the section on final handler changes for more information.","title":"Removed functionality"},{"location":"v2/reference/migration/#deprecated-functionality","text":"Mezzio\\Application::raiseThrowables() . Stratigility 2.0 makes the method a no-op, as exceptions are no longer caught by the middleware dispatcher. As such, the raise_throwables configuration argument now is no longer used, either.","title":"Deprecated functionality"},{"location":"v2/reference/migration/#psr-11-support","text":"In previous versions of Mezzio, we consumed container-interop , which provides Interop\\Container\\ContainerInterface , a shared interface for dependency injection containers. container-interop served as a working group for the PSR-11 specification. In the weeks prior to the Mezzio 2.0 release, PSR-11 was formally accepted, and the package psr/container was released. As such, we have updated Mezzio to consume the interfaces PSR-11 exposes. No supported implementations currently directly implement PSR-11, however. Fortunately, the container-interop 1.2.0 release acts as a forwards-compatibility measure by altering every interface it exposes to extend those from PSR-11, making existing container-interop implementations de facto PSR-11 implementations! The result is a (mostly) transparent upgrade for users of Mezzio. As newer versions of container implementations are released supporting PSR-11 directly, you will be able to upgrade immediately; we will also periodically update the skeleton to pick up these new versions when present. (The one caveat to upgrading is signature changes within Mezzio classes based on the new psr/container interface names.) As long as you have container-interop 1.2.0 installed, your existing factories that typehint against its interface will continue to work. However, we recommend updating them to instead typehint against PSR-11, which will allow you to drop the container-interop requirement once your chosen container implementation no longer requires it.","title":"PSR-11 support"},{"location":"v2/reference/migration/#http-interop","text":"Stratigility 2.0 provides the ability to work with http-interop middleware 0.4.1 . This specification, which is being developed as the basis of PSR-15 , defines what is known as lambda or single-pass middleware, vs the double-pass middleware traditionally used by Stratigility and Mezzio. Double-pass refers to the fact that two arguments are passed to the delegation function $next : the request and response. Lambda or single-pass middleware only pass a single argument, the request. Stratigility 2.0 provides support for dispatching either style of middleware. Specifically, your middleware can now implement: Interop\\Http\\ServerMiddleware\\MiddlewareInterface , which defines a single method, process(Psr\\Http\\Message\\ServerRequestInterface $request, Interop\\Http\\ServerMiddleware\\DelegateInterface $delegate) . Callable middleware that follows the above signature (the typehint for the request argument is optional). Both styles of middleware may be piped directly to the middleware pipeline or as routed middleware within Mezzio. In each case, you can invoke the next middleware layer using $delegate-&gt;process($request) . In Mezzio 2.0, Application will continue to accept the legacy double-pass signature, but will require that you either: Provide a $responsePrototype (a ResponseInterface instance) to the Application instance prior to piping or routing such middleware. Decorate the middleware in a Laminas\\Stratigility\\Middleware\\CallableMiddlewareWrapper instance (which also requires a $responsePrototype ). If you use Mezzio\\Container\\ApplicationFactory to create your Application instance, a response prototype will be injected for you from the outset. We recommend that you begin writing middleware to follow the http-interop standard at this time. As an example: namespace App\\Middleware; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Interop\\Http\\ServerMiddleware\\MiddlewareInterface; use Psr\\Http\\Message\\ServerRequestInterface; class XClacksOverheadMiddleware implements MiddlewareInterface { /** * {@inheritDoc} */ public function process(ServerRequestInterface $request, DelegateInterface $delegate) { $response = $delegate-&gt;process($request); return $response-&gt;withHeader('X-Clacks-Overhead', 'GNU Terry Pratchett'); } } Alternately, you can write this as a callable: namespace App\\Middleware; use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; class XClacksOverheadMiddleware { /** * @param ServerRequestInterface $request * @param DelegateInterface $delegate * @return ResponseInterface */ public function __invoke(ServerRequestInterface $request, DelegateInterface $delegate) { $response = $delegate-&gt;process($request); return $response-&gt;withHeader('X-Clacks-Overhead', 'GNU Terry Pratchett'); } }","title":"http-interop"},{"location":"v2/reference/migration/#original-messages","text":"In the migration to version 1.1 guide , we detail the fact that Stratigility 1.3 deprecated its internal request and response decorators. Stratigility 2.0, on which Mezzio 2.0 is based, removes them entirely. If your code relied on the various getOriginal*() methods those decorators exposed, you will need to update your code in two ways: You will need to add Laminas\\Stratigility\\Middleware\\OriginalMessages to your middleware pipeline, as the outermost (or close to outermost) layer. You will need to update your code to call on the request instance's getAttribute() method with one of originalRequest , originalUri , or originalResponse to retrieve the values. To address the first point, see the Mezzio 1.1 migration documentation , which details how to update your configuration or programmatic pipeline. For the second point, we provide a tool via the mezzio/mezzio-tooling package which will help you in this latter part of the migration. Install it as a development requirement via composer: $ composer require --dev mezzio/mezzio-tooling And then execute it via: $ ./vendor/bin/mezzio-migrate-original-messages This tool will update calls to getOriginalRequest() and getOriginalUri() to instead use the new request attributes that the OriginalMessages middleware injects: getOriginalRequest() becomes getAttribute('originalRequest', $request) getOriginalUri() becomes getAttribute('originalUri', $request-&gt;getUri()) In both cases, $request will be replaced with whatever variable name you used for the request instance. For getOriginalResponse() calls, which happen on the response instance, the tool will instead tell you what files had such calls, and detail how you can update those calls to use the originalResponse request attribute.","title":"Original messages"},{"location":"v2/reference/migration/#error-handling","text":"As noted in the Mezzio 1.1 migration docs , Stratigility 1.3 introduced the ability to tell it to no longer catch exceptions internally, paving the way for middleware-based error handling. Additionally, it deprecated its own ErrorMiddlewareInterface and duck-typed implementations of the interface in favor of middleware-based error handling. Finally, it deprecated the $e / $error argument to \"final handlers\", as that argument would be used only when attempting to invoke ErrorMiddlewareInterface instances. Stratigility 2.0, on which Mezzio 2.0 is based, no longer catches exceptions internally, removes the ErrorMiddlewareInterface entirely, and thus the $e / $error argument to final handlers. As such, you MUST provide your own error handling with Mezzio 2.0. Error handling middleware will typically introduce a try/catch block: function ( ServerRequestInterface $request, ResponseInterface $response, callable $next ) { try { $response = $next($request, $response); return $response; } catch (\\Throwable $exception) { // caught PHP 7 throwable } catch (\\Exception $exception) { // caught PHP 5 exception } // ... // do something with $exception and generate a response // ... return $response; } Additionally, you will need middleware registered as your innermost layer that is guaranteed to return a response. Generally, if you hit that layer, no other middleware is capable of handling the request, indicating a 400 (Bad Request) or 404 (Not Found) HTTP status. With the combination of an error handler at the outermost layer, and a \"not found\" handler at the innermost layer, you can handle any error in your application. Stratigility 1.3 and 2.0 provide an error handler implementation via Laminas\\Stratigility\\Middleware\\ErrorHandler . In addition to the try/catch block, it also sets up a PHP error handler that will catch any PHP error types in the current error_reporting mask; the error handler will raise exceptions of the type ErrorException with the PHP error details. ErrorHandler allows injection of an \"error response generator\", which allows you to alter how the error response is generated based on the current environment. Error response generators are callables with the signature: function ( Throwable|Exception $e, ServerRequestInterface $request, ResponseInterface $response ) : ResponseInterface Mezzio 2.0 provides the following functionality to assist with your error handling needs: Mezzio\\Middleware\\ErrorResponseGenerator will output a canned plain/text message, or use a supplied template renderer to generate content for the response. It accepts the following arguments to its constructor: $isDevelopmentMode = false : whether or not the application is in development mode. If so, it will output stack traces when no template renderer is used (see below), or supply the exception to the template via the error variable if a renderer is present. Mezzio\\Template\\TemplateRendererInterface $renderer : if supplied, the results of rendering a template will be injected into the response. Templates are passed the following variables: response : the response at the time of rendering request : the request at the time of rendering uri : the URI at the time of rendering status : the response status code reason : the response reason phrase error : the exception; this is only provided when in development mode. $template = 'error::error' : the template to render, with a default value if none is provided. Mezzio\\Container\\ErrorResponseGeneratorFactory can create an instance of the ErrorResponseGenerator using the following: The debug top-level configuration value is used to set the $isDevelopmentMode flag. If a Mezzio\\Template\\TemplateRendererInterface service is registered, it will be provided to the constructor. The value of mezzio.error_handler.template_error , if present, will be used to seed the $template argument. Mezzio\\Middleware\\WhoopsErrorResponseGenerator uses Whoops to generate the error response. Its constructor takes a single argument, a Whoops\\Run instance. If a Whoops\\Handler\\PrettyPageHandler is registered with the instance, it will add a data table with request details derived from the ServerRequestInterface instance. Mezzio\\Container\\WhoopsErrorResponseGeneratorFactory can create an instance, and will use the Mezzio\\Whoops service to seed the Whoops\\Run argument. Mezzio\\Middleware\\NotFoundHandler can be used as the innermost layer of your pipeline in order to return a 404 response. (Typically, if you get to the innermost layer, no middleware was able to handle the request, indicating a 404.) By default, it will produce a canned plaintext response. However, you can also provide an optional TemplateRendererInterface instance and $template in order to provide templated content. The constructor arguments are: - `ResponseInterface $responsePrototype`: this is an empty response on which to set the 404 status and inject the 404 content. - `TemplateRendererInterface $renderer`: optionally, you may provide a renderer to use in order to provide templated response content. - $template = 'error::404'`: optionally, you may provide a template to render; if none is provided, a sane default is used. Mezzio\\Container\\NotFoundHandlerFactory can create an instance of the NotFoundHandler for you, and will use the following to do so: The Mezzio\\Template\\TemplateRendererInterface service, if available. The mezzio.error_handler.template_404 configuration value, if available, will be used for the $template . Mezzio\\Container\\ErrorHandlerFactory will create an instance of Laminas\\Stratigility\\Middleware\\ErrorHandler , and use the Laminas\\Stratigility\\Middleware\\ErrorResponseGenerator service to seed it. As such, register one of the following as a factory for the Laminas\\Stratigility\\Middleware\\ErrorResponseGenerator service: - Mezzio\\Container\\ErrorResponseGeneratorFactory - Mezzio\\Container\\WhoopsErrorResponseGeneratorFactory","title":"Error handling"},{"location":"v2/reference/migration/#final-handlers-become-default-delegates","text":"One ramification of supporting http-interop middleware is that the concept of \"final handlers\" changes. In Stratigility 1.X and Mezzio 1.X, a \"final handler\" was invoked when the middleware pipeline was exhausted; however, due to how Stratigility caught exceptions, this also meant that the final handler often acted as the application error handler, reporting errors to end users. With the error handling changes noted above , error handling is moved to dedicated middleware. However, there is still a need to have something that can execute once the middleware pipeline is exhausted. Such a situation typically indicates no middleware was able to handle the request, or that the request was somehow malformed. In Mezzio 2.0, we have removed final handlers, and replaced them with the concept of \"default delegates\". Delegates are Interop\\Http\\ServerMiddleware\\DelegateInterface instances, which are invoked by middleware when they wish to delegate processing of the request to something else. Internally, Stratigility 2.0 and Mezzio 2.0 use a delegate to iterate through the middleware pipeline. For Mezzio 2.0, a default delegate is a delegate executed when the application's internal middleware pipeline is exhausted. The ramifications for end users are as follows: The $finalHandler argument to Application 's constructor, which previously was a callable , is now called $defaultDelegate , and needs to be a DelegateInterface instance. getFinalHandler() no longer exists; we have added getDefaultDelegate() . The service Mezzio\\FinalHandler is no longer used. A new service, Mezzio\\Delegate\\DefaultDelegate , is used by ApplicationFactory , and, if present, will be used to inject the $defaultDelegate argument of the Application constructor. We have removed the following classes, which either provided final handlers, or acted as factories for them: Mezzio\\TemplatedErrorHandler Mezzio\\WhoopsErrorHandler Mezzio\\Container\\TemplatedErrorHandlerFactory Mezzio\\Container\\WhoopsErrorHandlerFactory If you use the vendor/bin/mezzio-pipeline-from-config tool to migrate your application to programmatic pipelines, as described below, the DefaultDelegate service will be mapped to Mezzio\\Container\\NotFoundDelegateFactory , which will provide an instance of Mezzio\\Delegate\\NotFoundDelegate . This new class will produce a 404 response, using a template if the Mezzio\\Template\\TemplateRendererInterface service is present, but otherwise producing a plain text response. Application's built using the 2.0 version of the skeleton application will have these features enabled by default.","title":"Final handlers become default delegates"},{"location":"v2/reference/migration/#programmatic-middleware-pipelines","text":"Starting with Mezzio 1.1, we recommended programmatic creation of pipelines and routing ; the Mezzio 1.1 migration guide provides more detail. With Mezzio 2.0, this is now the default option shipped in the skeleton. If you are upgrading from version 1 and are not currently using programmatic pipelines, we provide a migration tool that will convert your application to do so. The tool is available via the package mezzio/mezzio-tooling . You may install this package in one of the following ways: Via the vendor binary ./vendor/bin/mezzio-tooling : $ ./vendor/bin/mezzio-tooling # install $ ./vendor/bin/mezzio-tooling remove # uninstall Using Composer: $ composer require --dev mezzio/mezzio-tooling # install $ composer remove --dev mezzio/mezzio-tooling # uninstall Once installed, you will use the vendor/bin/mezzio-pipeline-from-config command. This command does the following: Reads your middleware_pipeline configuration, and generates a programmatic pipeline for you, which is then stored in config/pipeline.php . The generated pipeline contains the following additions: The first middleware in the pipeline is Laminas\\Stratigility\\Middleware\\OriginalMessages , which injects the incoming request, URI, and response as the request attributes originalRequest , originalUri , and originalResponse , respectively. (This can aid URI generation in nested middleware later.) The second middleware in the pipeline is Laminas\\Stratigility\\Middleware\\ErrorHandler . The last middleware in the pipeline is Mezzio\\Middleware\\NotFoundHandler . Reads your routes configuration, and generates a programmatic routing table for you, which is then stored in config/routes.php . Adds a new configuration file, config/autoload/programmatic-pipeline.global.php , which enables the programmatic_pipelines configuration flag. Additionally, it adds dependency configuration for the new error handlers. Inserts two lines before the $app-&gt;run() statement of your public/index.php , one each to require config/pipeline.php and config/routes.php . Your middleware_pipeline and routes configuration are not removed at this time, to allow you to test and verify your application first; however, due to the configuration in config/autoload/programmatic-pipeline.global.php , these are now ignored. If you wish to use Whoops in your development environment, you may add the following to a local configuration file (e.g., config/autoload/local.php ): use Mezzio\\Container\\WhoopsErrorResponseGeneratorFactory; use Mezzio\\Middleware\\ErrorResponseGenerator; return [ 'dependencies' =&gt; [ 'factories' =&gt; [ ErrorResponseGenerator::class =&gt; WhoopsErrorResponseGeneratorFactory::class, ], ], ]; Other things you may want to do: The ErrorHandler entry could potentially be moved inwards a few layers. As an example, the ServerUrlMiddleware has no possibility of raising an exception or error, and could be moved outwards; you could do similarly for any middleware that only injects additional response headers. Remove any Stratigility-style error middleware (middleware expecting an error as the first argument). If any specialized error handling should occur, add additional middleware into the pipeline that can catch exceptions, and have that middleware re-throw for exceptions it cannot handle. (Use the vendor/bin/mezzio-scan-for-error-middleware command from mezzio/mezzio-tooling to assist in this.) Consider providing your own Laminas\\Stratigility\\NoopFinalHandler implementation; this will now only be invoked if the queue is exhausted, and could return a generic 404 page, raise an exception, etc.","title":"Programmatic middleware pipelines"},{"location":"v2/reference/migration/#handling-head-and-options-requests","text":"Prior to 2.0, it was possible to route middleware that could not handle HEAD and/or OPTIONS requests. Per RFC 7231, section 4.1 , \"all general-purpose servers MUST support the methods GET and HEAD. All other methods are OPTIONAL.\" Additionally, most servers and implementors agree that OPTIONS should be supported for any given resource, so that consumers can determine what methods are allowed for the given resource. To make this happen, the Mezzio project implemented several features. First, mezzio-router 1.3.0 introduced several features in both Mezzio\\Router\\Route and Mezzio\\Router\\RouteResult to help consumers implement support for HEAD and OPTIONS in an automated way. The Route class now has two new methods, implicitHead() and implicitOptions() ; these each return a boolean true value if support for those methods is implicit — i.e., not defined explicitly for the route. The RouteResult class now introduces a new factory method, fromRoute() , that will create an instance from a Route instance; this then allows consumers of a RouteResult to query the Route to see if a matched HEAD or OPTIONS request needs automated handling. Each of the supported router implementations were updated to use this method, as well as to return a successful routing result if HEAD and/or OPTIONS requests are submitted, but the route does not explicitly support the method. Within Mezzio itself, we now offer two new middleware to provide this automation: Mezzio\\Middleware\\ImplicitHeadMiddleware Mezzio\\Middleware\\ImplicitOptionsMiddleware If you want to support these methods automatically, each of these should be enabled between the routing and dispatch middleware. If you use the mezzio-pipeline-from-config tool as documented in the programmatic pipeline migration section , entries for each will be injected into your generated pipeline. Please see the chapter on the implicit methods middleware for more information on each.","title":"Handling HEAD and OPTIONS requests"},{"location":"v2/reference/migration/#router-interface-changes","text":"Mezzio 2.0 uses mezzio/mezzio-router 2.1+. Version 2.0 of that package introduced a change to the Mezzio\\Router\\RouterInterface::generateUri() method; it now accepts an additional, optional, third argument, array $options = [] , which can be used to pass router-specific options when generating a URI. As an example, the implementation that uses laminas/laminas-router might use these options to pass a translator instance in order to translate a path segment to the currently selected locale. For consumers, his represents no backwards-incompatible change; consumers may opt-in to the new argument at will. For those implementing the interface, upgrading will require updating your router implementation's signature to match the new interface: public function generateUri( string $name, array $substitutions = [], array $options = [] ) : string","title":"Router interface changes"},{"location":"v2/reference/migration/#url-helper-changes","text":"Mezzio 2.0 uses mezzio/mezzio-helpers version 3.0+. This new version updates the signature of the Mezzio\\Helper\\UrlHelper from: function ( $routeName, array $routeParams = [] ) : string to: function ( $routeName, array $routeParams = [], $queryParams = [], $fragmentIdentifier = null, array $options = [] ) : string For consumers, this should represent a widening of features, and will not require any changes, unless you wish to opt-in to the new arguments. See the UrlHelper documentation for information on each argument. For any users who were extending the class, you will need to update your extension accordingly.","title":"URL helper changes"},{"location":"v2/reference/migration/#laminas-view-renderer-changes","text":"Mezzio 2.0 will use mezzio-laminasviewrenderer 1.3+ if that renderer is chosen. Starting with 1.3.0 of that renderer, you may now pass a boolean false value for the layout variable when calling either addDefaultParam() or render() on the renderer instance in order to disable the layout.","title":"laminas-view renderer changes"},{"location":"v2/reference/migration/#twig-renderer-changes","text":"Mezzio 2.0 will use mezzio-twigrenderer 1.3+ if that renderer is chosen. Starting with 1.3.0 of that renderer, Twig 2.1+ is now supported.","title":"Twig renderer changes"},{"location":"v2/reference/migration/#adopting-a-modular-architecture","text":"Mezzio 2.0 ships with support for modular architectures from the outset, as detailed in the chapter on modules . If you wish to update your application to use these features, you will need to install the following packages: laminas/laminas-config-aggregator laminas/laminas-component-installer As an example: $ composer require laminas/laminas-config-aggregator \\ &gt; laminas/laminas-component-installer Once installed, you should update your config/config.php file to read as follows: &lt;?php use Laminas\\ConfigAggregator\\ArrayProvider; use Laminas\\ConfigAggregator\\ConfigAggregator; use Laminas\\ConfigAggregator\\PhpFileProvider; // To enable or disable caching, set the `ConfigAggregator::ENABLE_CACHE` boolean in // `config/autoload/local.php`. $cacheConfig = [ 'config_cache_path' =&gt; 'data/config-cache.php', ]; $aggregator = new ConfigAggregator([ // Include cache configuration new ArrayProvider($cacheConfig), // Default App module config App\\ConfigProvider::class, // Load application config in a pre-defined order in such a way that local settings // overwrite global settings. (Loaded as first to last): // - `global.php` // - `*.global.php` // - `local.php` // - `*.local.php` new PhpFileProvider('config/autoload/{{,*.}global,{,*.}local}.php'), // Load development config if it exists new PhpFileProvider('config/development.config.php'), ], $cacheConfig['config_cache_path']); return $aggregator-&gt;getMergedConfig(); The above should mimic what you already had in place; if it does not, check to see if there are additional paths you were globbing previously.","title":"Adopting a modular architecture"},{"location":"v2/reference/usage-examples/","text":"Usage Examples Below are several usage examples, covering a variety of ways of creating and managing an application. In all examples, the assumption is the following directory structure: . ├── config ├── data ├── composer.json ├── public │ └── index.php ├── src └── vendor We assume also that: You have installed mezzio per the installation instructions . public/ will be the document root of your application. Your own classes are under src/ with the top-level namespace App , and you have configured autoloading in your composer.json for those classes (this should be done for you during installation). Using the built-in web server You can use the built-in web server to run the examples. Run: $ php -S 0.0.0.0:8080 -t public from the application root to start up a web server running on port 8080, and then browse to http://localhost:8080/. If you used the Mezzio installer, the following is equivalent: $ composer run --timeout=0 serve Setting up autoloading for the Application namespace In your composer.json file, place the following: \"autoload\": { \"psr-4\": { \"Application\\\\\": \"src/\" } }, Once done, run: $ composer dump-autoload Routing As noted in the Application documentation , routing is abstracted and can be accomplished by calling any of the following methods: route($path, $middleware, array $methods = null, $name = null) to route to a path and match any HTTP method, multiple HTTP methods, or custom HTTP methods. get($path, $middleware, $name = null) to route to a path that will only respond to the GET HTTP method. post($path, $middleware, $name = null) to route to a path that will only respond to the POST HTTP method. put($path, $middleware, $name = null) to route to a path that will only respond to the PUT HTTP method. patch($path, $middleware, $name = null) to route to a path that will only respond to the PATCH HTTP method. delete($path, $middleware, $name = null) to route to a path that will only respond to the DELETE HTTP method. All methods return a Mezzio\\Router\\Route method, which allows you to specify additional options to associate with the route (e.g., for specifying criteria, default values to match, etc.). As examples: // GET // This demonstrates passing a middleware instance (assuming $helloWorld is // valid middleware) $app-&gt;get('/', $helloWorld); // POST // This example specifies the middleware as a service name instead of as // actual executable middleware. $app-&gt;post('/trackback', 'TrackBack'); // PUT // This example shows operating on the returned route. In this case, it's adding // regex tokens to restrict what values for {id} will match. (The tokens feature // is specific to Aura.Router.) $app-&gt;put('/post/{id}', 'ReplacePost') -&gt;setOptions([ 'tokens' =&gt; ['id' =&gt; '\\d+'], ]); // PATCH // This example builds on the one above. Mezzio allows you to specify // the same path for a route matching on a different HTTP method, and // corresponding to different middleware. $app-&gt;patch('/post/{id}', 'UpdatePost') -&gt;setOptions([ 'tokens' =&gt; ['id' =&gt; '\\d+'], ]); // DELETE $app-&gt;delete('/post/{id}', 'DeletePost') -&gt;setOptions([ 'tokens' =&gt; ['id' =&gt; '\\d+'], ]); // Matching ALL HTTP methods // If the underlying router supports matching any HTTP method, the following // will do so. Note: FastRoute *requires* you to specify the HTTP methods // allowed explicitly, and does not support wildcard routes. As such, the // following example maps to the combination of HEAD, OPTIONS, GET, POST, PATCH, // PUT, TRACE, and DELETE. // Just like the previous examples, it returns a Route instance that you can // further manipulate. $app-&gt;route('/post/{id}', 'HandlePost') -&gt;setOptions([ 'tokens' =&gt; ['id' =&gt; '\\d+'], ]); // Matching multiple HTTP methods // You can pass an array of HTTP methods as a third argument to route(); in such // cases, routing will match if any of the specified HTTP methods are provided. $app-&gt;route('/post', 'HandlePostCollection', ['GET', 'POST']); // Matching NO HTTP methods // Pass an empty array to the HTTP methods. HEAD and OPTIONS will still be // honored. (In FastRoute, GET is also honored.) $app-&gt;route('/post', 'WillThisHandlePost', []); Finally, if desired, you can create a Mezzio\\Router\\Route instance manually and pass it to route() as the sole argument: $route = new Route('/post', 'HandlePost', ['GET', 'POST']); $route-&gt;setOptions($options); $app-&gt;route($route); Hello World using a Container Mezzio works with PSR-11 Containers , though it's an optional feature. By default, if you use the AppFactory , it will use laminas-servicemanager so long as that package is installed. In the following example, we'll populate the container with our middleware, and the application will pull it from there when matched. Edit your public/index.php to read as follows: use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Laminas\\Diactoros\\Response\\JsonResponse; use Laminas\\Diactoros\\Response\\TextResponse; use Mezzio\\AppFactory; use Laminas\\ServiceManager\\ServiceManager; require __DIR__ . '/../vendor/autoload.php'; $container = new ServiceManager(); $container-&gt;setFactory('HelloWorld', function ($container) { return function ($request, DelegateInterface $delegate) { return new TextResponse('Hello, world!'); }; }); $container-&gt;setFactory('Ping', function ($container) { return function ($request, DelegateInterface $delegate) { return new JsonResponse(['ack' =&gt; time()]); }; }); $app = AppFactory::create($container); $app-&gt;get('/', 'HelloWorld'); $app-&gt;get('/ping', 'Ping'); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); $app-&gt;run(); In the example above, we pass our container to AppFactory . We could have also done this instead: $app = AppFactory::create(); $container = $app-&gt;getContainer(); and then added our service definitions. We recommend passing the container to the factory instead; if we ever change which container we use by default, your code might not work! The following two lines are the ones of interest: $app-&gt;get('/', 'HelloWorld'); $app-&gt;get('/ping', 'Ping'); These map the two paths to service names instead of callables. When routing matches a path, it does the following: If the middleware provided when defining the route is callable, it uses it directly. If the middleware is a valid service name in the container, it pulls it from the container. This is what happens in this example . Finally, if no container is available, or the service name is not found in the container, it checks to see if it's a valid class name; if so, it instantiates and returns the class instance. If you fire up your web server, you'll find that the / and /ping paths continue to work. One other approach you could take would be to define the application itself in the container, and then pull it from there: $container-&gt;setFactory('Mezzio\\Application', function ($container) { $app = AppFactory::create($container); $app-&gt;get('/', 'HelloWorld'); $app-&gt;get('/ping', 'Ping'); return $app; }); $app = $container-&gt;get('Mezzio\\Application'); $app-&gt;run(); This is a nice way to encapsulate the application creation. You could then potentially move all service configuration to another file! (We already document an ApplicationFactory for exactly this scenario. ) Hello World using a Configuration-Driven Container In the above example, we configured our middleware as services, and then passed our service container to the application. At the end, we hinted that you could potentially define the application itself as a service. Mezzio already provides a service factory for the application instance to provide fine-grained control over your application. In this example, we'll leverage it, defining our routes via configuration. First, we're going to leverage laminas-config to merge configuration files. This is important, as it allows us to define local, environment-specific configuration in files that we then can exclude from our repository. This practice ensures that things like credentials are not accidentally published in a public repository, and also provides a mechanism for slip-streaming in configuration based on our environment (you might use different settings in development than in production, after all!). First, install laminas-config and laminas-stdlib: $ composer require laminas/laminas-config laminas/laminas-stdlib Now we can start creating our configuration files and container factories. In config/config.php , place the following: &lt;?php use Laminas\\Stdlib\\ArrayUtils; use Laminas\\Stdlib\\Glob; $config = []; // Load configuration from autoload path foreach (Glob::glob('config/autoload/{{,*.}global,{,*.}local}.php', Glob::GLOB_BRACE) as $file) { $config = ArrayUtils::merge($config, include $file); } // Return an ArrayObject so we can inject the config as a service in Aura.Di // and still use array checks like ``is_array``. return new ArrayObject($config, ArrayObject::ARRAY_AS_PROPS); In config/container.php , place the following: &lt;?php use Laminas\\ServiceManager\\Config; use Laminas\\ServiceManager\\ServiceManager; // Load configuration $config = require __DIR__.'/config.php'; // Build container $container = new ServiceManager(); (new Config($config['dependencies']))-&gt;configureServiceManager($container); // Inject config $container-&gt;setService('config', $config); return $container; In config/autoload/dependencies.global.php , place the following: &lt;?php use Laminas\\ServiceManager\\Factory\\InvokableFactory; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ \\Application\\HelloWorldAction::class =&gt; InvokableFactory::class, \\Application\\PingAction::class =&gt; InvokableFactory::class, ], 'factories' =&gt; [ \\Mezzio\\Application::class =&gt; \\Mezzio\\Container\\ApplicationFactory::class, ], ], ]; In config/autoload/routes.global.php , place the following: &lt;?php return [ 'routes' =&gt; [ [ 'path' =&gt; '/', 'middleware' =&gt; \\Application\\HelloWorldAction::class, 'allowed_methods' =&gt; ['GET'], ], [ 'path' =&gt; '/ping', 'middleware' =&gt; \\Application\\PingAction::class, 'allowed_methods' =&gt; ['GET'], ], ], ]; In src/Application/HelloWorld.php , place the following: &lt;?php namespace Application; class HelloWorld { public function __invoke($req, $res, $next) { $res-&gt;getBody()-&gt;write('Hello, world!'); return $res; } } In src/Application/Ping.php , place the following: &lt;?php namespace Application; use Laminas\\Diactoros\\Response\\JsonResponse; class Ping { public function __invoke($req, $res, $next) { return new JsonResponse(['ack' =&gt; time()]); } } After that’s done run: $ composer dump-autoload Finally, in public/index.php , place the following: &lt;?php // Change to the project root, to simplify resolving paths chdir(dirname(__DIR__)); // Setup autoloading require 'vendor/autoload.php'; $container = include 'config/container.php'; $app = $container-&gt;get(Mezzio\\Application::class); $app-&gt;run(); Notice that our index file now doesn't have any code related to setting up the application any longer! All it does is set up autoloading, retrieve our service container, pull the application from it, and run it. Our choices for container, router, etc. are all abstracted, and if we change our mind later, this code will continue to work. Firing up the web server, you'll see the same responses as the previous examples. Hybrid Container and Programmatic Creation The above example may look a little daunting at first. By making everything configuration-driven, you sometimes lose a sense for how the code all fits together. Fortunately, you can mix the two. Building on the example above, we'll add a new route and middleware. Between pulling the application from the container and calling $app-&gt;run() , add the following in your public/index.php : $app-&gt;post('/post', function ($request, \\Interop\\Http\\ServerMiddleware\\DelegateInterface $delegate) { return new \\Laminas\\Diactoros\\Response\\TextResponse('IN POST!'); }); Note that we're using post() here; that means you'll have to use cURL, HTTPie, Postman, or some other tool to test making a POST request to the path: $ curl -X POST http://localhost:8080/post You should see IN POST! for the response! Using this approach, you can build re-usable applications that are container-driven, and add one-off routes and middleware as needed. Using the container to register middleware If you use a container to fetch your application instance, you have an additional option for specifying middleware for the pipeline: configuration: &lt;?php return [ 'routes' =&gt; [ [ 'path' =&gt; '/path/to/match', 'middleware' =&gt; 'Middleware Service Name or Callable', 'allowed_methods' =&gt; ['GET', 'POST', 'PATCH'], 'options' =&gt; [ 'stuff' =&gt; 'to', 'pass' =&gt; 'to', 'the' =&gt; 'underlying router', ], ], // etc. ], 'middleware_pipeline' =&gt; [ // See specification below ], ]; The key to note is middleware_pipeline , which is an array of middlewares to register in the pipeline; each will each be pipe() 'd to the Application in the order specified. Each middleware specified must be in the following form: [ // required: 'middleware' =&gt; 'Name of middleware service, or a callable', // optional: 'path' =&gt; '/path/to/match', 'priority' =&gt; 1, // Integer ] Priority should be an integer, and follows the semantics of SplPriorityQueue : higher numbers indicate higher priority (top of the queue; executed earliest), while lower numbers indicated lower priority (bottom of the queue, executed last); negative values are low priority . Items of the same priority are executed in the order in which they are attached. The default priority is 1, and this priority is used by the routing and dispatch middleware. To indicate that middleware should execute before these, use a priority higher than 1. The above specification can be used for all middleware, with one exception: registration of the routing and/or dispatch middleware that Mezzio provides. In these cases, use the following constants, which will be caught by the factory and expanded: Mezzio\\Application::ROUTING_MIDDLEWARE for the routing middleware; this should always come before the dispatch middleware. Mezzio\\Application::DISPATCH_MIDDLEWARE for the dispatch middleware. As an example: return [ 'middleware_pipeline' =&gt; [ [ /* ... */ ], Mezzio\\Application::ROUTING_MIDDLEWARE, Mezzio\\Application::DISPATCH_MIDDLEWARE, [ /* ... */ ], ], ]; Place routing middleware correctly If you are defining routes and defining other middleware for the pipeline, you must add the routing middleware. When you do so, make sure you put it at the appropriate location in the pipeline. Typically, you will place any middleware you want to execute on all requests prior to the routing middleware. This includes utilities for bootstrapping the application (such as injection of the ServerUrlHelper ), utilities for injecting common response headers (such as CORS support), etc. Make sure these middleware specifications include the priority key, and that the value of this key is greater than 1. Use priority to shape the specific workflow you want for your middleware. Middleware items may be any valid middleware , including arrays of middleware, which indicate a nested middleware pipeline; these may even contain the routing and dispatch middleware constants: return [ 'middleware_pipeline' =&gt; [ [ /* ... */ ], 'routing' =&gt; [ 'middleware' =&gt; [ Mezzio\\Application::ROUTING_MIDDLEWARE, /* ... middleware that introspects routing results ... */ Mezzio\\Application::DISPATCH_MIDDLEWARE, ], 'priority' =&gt; 1, ], [ /* ... */ ], ], ]; Pipeline keys are ignored Keys in a middleware_pipeline specification are ignored. However, they can be useful when merging several configurations; if multiple configuration files specify the same key, then those entries will be merged. Be aware, however, that the middleware entry for each, since it is an indexed array, will merge arrays by appending; in other words, order will not be guaranteed within that array after merging. If order is critical, define a middleware spec with priority keys. The path, if specified, can only be a literal path to match, and is typically used for segregating middleware applications or applying rules to subsets of an application that match a common path root. Segregating your application to a subpath One benefit of a middleware-based application is the ability to compose middleware and segregate them by paths. Mezzio\\Application is itself middleware, allowing you to do exactly that if desired. In the following example, we'll assume that $api and $blog are Mezzio\\Application instances, and compose them into a Laminas\\Stratigility\\MiddlewarePipe . use Laminas\\Diactoros\\Server; use Laminas\\Diactoros\\ServerRequestFactory; use Laminas\\Stratigility\\MiddlewarePipe; require __DIR__ . '/../vendor/autoload.php'; $app = new MiddlewarePipe(); $app-&gt;pipe('/blog', $blog); $app-&gt;pipe('/api', $api); $server = Server::createServerFromRequest( $app, ServerRequestFactory::fromGlobals() ); $server-&gt;listen(); You could also compose them in an Application instance, and utilize run() : $app = AppFactory::create(); $app-&gt;pipe('/blog', $blog); $app-&gt;pipe('/api', $api); $app-&gt;run(); This approach allows you to develop discrete applications and compose them together to create a website.","title":"Examples"},{"location":"v2/reference/usage-examples/#usage-examples","text":"Below are several usage examples, covering a variety of ways of creating and managing an application. In all examples, the assumption is the following directory structure: . ├── config ├── data ├── composer.json ├── public │ └── index.php ├── src └── vendor We assume also that: You have installed mezzio per the installation instructions . public/ will be the document root of your application. Your own classes are under src/ with the top-level namespace App , and you have configured autoloading in your composer.json for those classes (this should be done for you during installation).","title":"Usage Examples"},{"location":"v2/reference/usage-examples/#hello-world-using-a-container","text":"Mezzio works with PSR-11 Containers , though it's an optional feature. By default, if you use the AppFactory , it will use laminas-servicemanager so long as that package is installed. In the following example, we'll populate the container with our middleware, and the application will pull it from there when matched. Edit your public/index.php to read as follows: use Interop\\Http\\ServerMiddleware\\DelegateInterface; use Laminas\\Diactoros\\Response\\JsonResponse; use Laminas\\Diactoros\\Response\\TextResponse; use Mezzio\\AppFactory; use Laminas\\ServiceManager\\ServiceManager; require __DIR__ . '/../vendor/autoload.php'; $container = new ServiceManager(); $container-&gt;setFactory('HelloWorld', function ($container) { return function ($request, DelegateInterface $delegate) { return new TextResponse('Hello, world!'); }; }); $container-&gt;setFactory('Ping', function ($container) { return function ($request, DelegateInterface $delegate) { return new JsonResponse(['ack' =&gt; time()]); }; }); $app = AppFactory::create($container); $app-&gt;get('/', 'HelloWorld'); $app-&gt;get('/ping', 'Ping'); $app-&gt;pipeRoutingMiddleware(); $app-&gt;pipeDispatchMiddleware(); $app-&gt;run(); In the example above, we pass our container to AppFactory . We could have also done this instead: $app = AppFactory::create(); $container = $app-&gt;getContainer(); and then added our service definitions. We recommend passing the container to the factory instead; if we ever change which container we use by default, your code might not work! The following two lines are the ones of interest: $app-&gt;get('/', 'HelloWorld'); $app-&gt;get('/ping', 'Ping'); These map the two paths to service names instead of callables. When routing matches a path, it does the following: If the middleware provided when defining the route is callable, it uses it directly. If the middleware is a valid service name in the container, it pulls it from the container. This is what happens in this example . Finally, if no container is available, or the service name is not found in the container, it checks to see if it's a valid class name; if so, it instantiates and returns the class instance. If you fire up your web server, you'll find that the / and /ping paths continue to work. One other approach you could take would be to define the application itself in the container, and then pull it from there: $container-&gt;setFactory('Mezzio\\Application', function ($container) { $app = AppFactory::create($container); $app-&gt;get('/', 'HelloWorld'); $app-&gt;get('/ping', 'Ping'); return $app; }); $app = $container-&gt;get('Mezzio\\Application'); $app-&gt;run(); This is a nice way to encapsulate the application creation. You could then potentially move all service configuration to another file! (We already document an ApplicationFactory for exactly this scenario. )","title":"Hello World using a Container"},{"location":"v2/reference/usage-examples/#hello-world-using-a-configuration-driven-container","text":"In the above example, we configured our middleware as services, and then passed our service container to the application. At the end, we hinted that you could potentially define the application itself as a service. Mezzio already provides a service factory for the application instance to provide fine-grained control over your application. In this example, we'll leverage it, defining our routes via configuration. First, we're going to leverage laminas-config to merge configuration files. This is important, as it allows us to define local, environment-specific configuration in files that we then can exclude from our repository. This practice ensures that things like credentials are not accidentally published in a public repository, and also provides a mechanism for slip-streaming in configuration based on our environment (you might use different settings in development than in production, after all!). First, install laminas-config and laminas-stdlib: $ composer require laminas/laminas-config laminas/laminas-stdlib Now we can start creating our configuration files and container factories. In config/config.php , place the following: &lt;?php use Laminas\\Stdlib\\ArrayUtils; use Laminas\\Stdlib\\Glob; $config = []; // Load configuration from autoload path foreach (Glob::glob('config/autoload/{{,*.}global,{,*.}local}.php', Glob::GLOB_BRACE) as $file) { $config = ArrayUtils::merge($config, include $file); } // Return an ArrayObject so we can inject the config as a service in Aura.Di // and still use array checks like ``is_array``. return new ArrayObject($config, ArrayObject::ARRAY_AS_PROPS); In config/container.php , place the following: &lt;?php use Laminas\\ServiceManager\\Config; use Laminas\\ServiceManager\\ServiceManager; // Load configuration $config = require __DIR__.'/config.php'; // Build container $container = new ServiceManager(); (new Config($config['dependencies']))-&gt;configureServiceManager($container); // Inject config $container-&gt;setService('config', $config); return $container; In config/autoload/dependencies.global.php , place the following: &lt;?php use Laminas\\ServiceManager\\Factory\\InvokableFactory; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ \\Application\\HelloWorldAction::class =&gt; InvokableFactory::class, \\Application\\PingAction::class =&gt; InvokableFactory::class, ], 'factories' =&gt; [ \\Mezzio\\Application::class =&gt; \\Mezzio\\Container\\ApplicationFactory::class, ], ], ]; In config/autoload/routes.global.php , place the following: &lt;?php return [ 'routes' =&gt; [ [ 'path' =&gt; '/', 'middleware' =&gt; \\Application\\HelloWorldAction::class, 'allowed_methods' =&gt; ['GET'], ], [ 'path' =&gt; '/ping', 'middleware' =&gt; \\Application\\PingAction::class, 'allowed_methods' =&gt; ['GET'], ], ], ]; In src/Application/HelloWorld.php , place the following: &lt;?php namespace Application; class HelloWorld { public function __invoke($req, $res, $next) { $res-&gt;getBody()-&gt;write('Hello, world!'); return $res; } } In src/Application/Ping.php , place the following: &lt;?php namespace Application; use Laminas\\Diactoros\\Response\\JsonResponse; class Ping { public function __invoke($req, $res, $next) { return new JsonResponse(['ack' =&gt; time()]); } } After that’s done run: $ composer dump-autoload Finally, in public/index.php , place the following: &lt;?php // Change to the project root, to simplify resolving paths chdir(dirname(__DIR__)); // Setup autoloading require 'vendor/autoload.php'; $container = include 'config/container.php'; $app = $container-&gt;get(Mezzio\\Application::class); $app-&gt;run(); Notice that our index file now doesn't have any code related to setting up the application any longer! All it does is set up autoloading, retrieve our service container, pull the application from it, and run it. Our choices for container, router, etc. are all abstracted, and if we change our mind later, this code will continue to work. Firing up the web server, you'll see the same responses as the previous examples.","title":"Hello World using a Configuration-Driven Container"},{"location":"v2/reference/usage-examples/#hybrid-container-and-programmatic-creation","text":"The above example may look a little daunting at first. By making everything configuration-driven, you sometimes lose a sense for how the code all fits together. Fortunately, you can mix the two. Building on the example above, we'll add a new route and middleware. Between pulling the application from the container and calling $app-&gt;run() , add the following in your public/index.php : $app-&gt;post('/post', function ($request, \\Interop\\Http\\ServerMiddleware\\DelegateInterface $delegate) { return new \\Laminas\\Diactoros\\Response\\TextResponse('IN POST!'); }); Note that we're using post() here; that means you'll have to use cURL, HTTPie, Postman, or some other tool to test making a POST request to the path: $ curl -X POST http://localhost:8080/post You should see IN POST! for the response! Using this approach, you can build re-usable applications that are container-driven, and add one-off routes and middleware as needed.","title":"Hybrid Container and Programmatic Creation"},{"location":"v2/reference/usage-examples/#segregating-your-application-to-a-subpath","text":"One benefit of a middleware-based application is the ability to compose middleware and segregate them by paths. Mezzio\\Application is itself middleware, allowing you to do exactly that if desired. In the following example, we'll assume that $api and $blog are Mezzio\\Application instances, and compose them into a Laminas\\Stratigility\\MiddlewarePipe . use Laminas\\Diactoros\\Server; use Laminas\\Diactoros\\ServerRequestFactory; use Laminas\\Stratigility\\MiddlewarePipe; require __DIR__ . '/../vendor/autoload.php'; $app = new MiddlewarePipe(); $app-&gt;pipe('/blog', $blog); $app-&gt;pipe('/api', $api); $server = Server::createServerFromRequest( $app, ServerRequestFactory::fromGlobals() ); $server-&gt;listen(); You could also compose them in an Application instance, and utilize run() : $app = AppFactory::create(); $app-&gt;pipe('/blog', $blog); $app-&gt;pipe('/api', $api); $app-&gt;run(); This approach allows you to develop discrete applications and compose them together to create a website.","title":"Segregating your application to a subpath"},{"location":"v3/","text":"Introduction Mezzio builds on Stratigility to provide a minimalist PSR-15 middleware framework for PHP, with the following features: Routing. Choose your own router; we support: Aura.Router FastRoute laminas-router DI Containers, via PSR-11 Container . All middleware composed in Mezzio may be retrieved from the composed container. Optionally, templating. We support: Plates Twig laminas-view's PhpRenderer Error handling. Create templated error pages, or use tools like whoops for debugging purposes. Nested middleware applications. Write an application, and compose it later in another, optionally under a separate subpath. Simplified installation . Our custom Composer -based installer prompts you for your initial stack choices, giving you exactly the base you want to start from. Essentially, Mezzio allows you to develop using the tools you prefer, and provides minimal structure and facilities to ease your development. Should I choose it over laminas-mvc? That’s a good question. Here’s what we recommend. If you’re keen to get started, then keep reading and get started writing your first middleware application today!","title":"Introduction"},{"location":"v3/#introduction","text":"Mezzio builds on Stratigility to provide a minimalist PSR-15 middleware framework for PHP, with the following features: Routing. Choose your own router; we support: Aura.Router FastRoute laminas-router DI Containers, via PSR-11 Container . All middleware composed in Mezzio may be retrieved from the composed container. Optionally, templating. We support: Plates Twig laminas-view's PhpRenderer Error handling. Create templated error pages, or use tools like whoops for debugging purposes. Nested middleware applications. Write an application, and compose it later in another, optionally under a separate subpath. Simplified installation . Our custom Composer -based installer prompts you for your initial stack choices, giving you exactly the base you want to start from. Essentially, Mezzio allows you to develop using the tools you prefer, and provides minimal structure and facilities to ease your development. Should I choose it over laminas-mvc? That’s a good question. Here’s what we recommend. If you’re keen to get started, then keep reading and get started writing your first middleware application today!","title":"Introduction"},{"location":"v3/why-mezzio/","text":"Should You Choose mezzio Over laminas-mvc? We recommend that you choose Mezzio for any new project — if the choice is yours to make . Why Use laminas-mvc? laminas-mvc is a proven platform, with more than half a decade of development behind it. It is stable and battle-tested in production platforms. Because it is opinionated about project structure and architecture, fewer decisions need be made up front; developers know where new code goes, and how it will wire into the overall application. Additionally, a number of training courses exist, including offerings by Zend , allowing you or your team to fully learn the framework and take advantage of all its features. Finally, laminas-mvc has a lively module ecosystem , allowing you to add features and capabilities to your application without needing to develop them from scratch. We Recommend Mezzio laminas-mvc has many preconceptions about how things work, yet they're very broad and general. What’s more, it also has several pre-wired structures in place that may either aid you — or get in your way. As a result, you are required to know a lot of what those things are — if you want to use it optimally. And to acquire that depth of knowledge, you’re going to need to spend a lot of time digging deep into laminas-mvc’s internals before you begin to get the most out of it. To quote Laminas project lead, Matthew Weier O’Phinney : The problem is that laminas-mvc is anything but beginner-friendly at this point. You're required to deep dive into the event manager, service manager, and module system — right from the outset; And to do this you need more than a passing understanding of object-oriented programming and a range of design patterns. Mezzio (specifically applications based on the Mezzio Skeleton Installer ) on the other hand, comes with barely any of these assumptions and requirements. It provides a very minimalist structure. Essentially all you have to become familiar with are five core components. These are: A DI container. A router. An error handler for development. A template engine (if you’re not creating an API). PSR-7 messages and PSR-15 middleware and request handlers. In many cases, these are provided for you by the skeleton, and do not require any additional knowledge on your part. Given that, you can quickly get up to speed with the framework and begin creating the application that you need. We believe that this approach — in contrast to the laminas-mvc approach — is more flexible and accommodating. What’s more, you can mix and match the types of applications that you create. Do you just need an API? Great; you can do that quite quickly. Do you want an HTML-based front-end? That’s available too. When building applications with Mezzio, you can make use of the various Laminas components, or any third-party components or middleware. You can pick and choose what you need, as and when you need it. You’re not bound by many, if any, constraints and design decisions. In Conclusion For what it’s worth, we’re not saying that laminas-mvc is a poor choice! What we are saying is: The learning curve, from getting started to building the first application, is significantly lower with Mezzio The ways in which you can create applications, whether through multiple pieces of middleware or by combining multiple Mezzio apps, into one larger one, is a much more efficient and fluid way to work Ultimately, the choice is always up to you, your team, and your project’s needs. We just want to ensure that you’ve got all the information you need, to make an informed decision.","title":"Why choose Mezzio?"},{"location":"v3/why-mezzio/#should-you-choose-mezzio-over-laminas-mvc","text":"We recommend that you choose Mezzio for any new project — if the choice is yours to make .","title":"Should You Choose mezzio Over laminas-mvc?"},{"location":"v3/why-mezzio/#why-use-laminas-mvc","text":"laminas-mvc is a proven platform, with more than half a decade of development behind it. It is stable and battle-tested in production platforms. Because it is opinionated about project structure and architecture, fewer decisions need be made up front; developers know where new code goes, and how it will wire into the overall application. Additionally, a number of training courses exist, including offerings by Zend , allowing you or your team to fully learn the framework and take advantage of all its features. Finally, laminas-mvc has a lively module ecosystem , allowing you to add features and capabilities to your application without needing to develop them from scratch.","title":"Why Use laminas-mvc?"},{"location":"v3/why-mezzio/#we-recommend-mezzio","text":"laminas-mvc has many preconceptions about how things work, yet they're very broad and general. What’s more, it also has several pre-wired structures in place that may either aid you — or get in your way. As a result, you are required to know a lot of what those things are — if you want to use it optimally. And to acquire that depth of knowledge, you’re going to need to spend a lot of time digging deep into laminas-mvc’s internals before you begin to get the most out of it. To quote Laminas project lead, Matthew Weier O’Phinney : The problem is that laminas-mvc is anything but beginner-friendly at this point. You're required to deep dive into the event manager, service manager, and module system — right from the outset; And to do this you need more than a passing understanding of object-oriented programming and a range of design patterns. Mezzio (specifically applications based on the Mezzio Skeleton Installer ) on the other hand, comes with barely any of these assumptions and requirements. It provides a very minimalist structure. Essentially all you have to become familiar with are five core components. These are: A DI container. A router. An error handler for development. A template engine (if you’re not creating an API). PSR-7 messages and PSR-15 middleware and request handlers. In many cases, these are provided for you by the skeleton, and do not require any additional knowledge on your part. Given that, you can quickly get up to speed with the framework and begin creating the application that you need. We believe that this approach — in contrast to the laminas-mvc approach — is more flexible and accommodating. What’s more, you can mix and match the types of applications that you create. Do you just need an API? Great; you can do that quite quickly. Do you want an HTML-based front-end? That’s available too. When building applications with Mezzio, you can make use of the various Laminas components, or any third-party components or middleware. You can pick and choose what you need, as and when you need it. You’re not bound by many, if any, constraints and design decisions.","title":"We Recommend Mezzio"},{"location":"v3/why-mezzio/#in-conclusion","text":"For what it’s worth, we’re not saying that laminas-mvc is a poor choice! What we are saying is: The learning curve, from getting started to building the first application, is significantly lower with Mezzio The ways in which you can create applications, whether through multiple pieces of middleware or by combining multiple Mezzio apps, into one larger one, is a much more efficient and fluid way to work Ultimately, the choice is always up to you, your team, and your project’s needs. We just want to ensure that you’ve got all the information you need, to make an informed decision.","title":"In Conclusion"},{"location":"v3/cookbook/access-common-data-in-templates/","text":"How Can I Access Common Data In Templates? Templates often need access to common request data, such as request attributes, the current route name, the currently authenticated user, and more. Wrangling all of that data in every single handler, however, often leads to code duplication, and the possibility of accidentally omitting some of that data. How can you make such data available to all templates? The approach detailed in this recipe involves creating a middleware that calls on the template renderer's addDefaultParam() method. The following is an example that injects the current user, the matched route name, and all flash messages via a single middleware. // In src/App/Middleware/TemplateDefaultsMiddleware.php (flat structure), or // in src/App/src/Middleware/TemplateDefaultsMiddleware.php (modular structure): &lt;?php declare(strict_types=1); namespace App\\Middleware; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; use Mezzio\\Router\\RouteResult; use Mezzio\\Authentication\\UserInterface; use Mezzio\\Flash\\FlashMessagesInterface; use Mezzio\\Flash\\FlashMessageMiddleware; use Mezzio\\Template\\TemplateRendererInterface; class TemplateDefaultsMiddleware implements MiddlewareInterface { /** @var TemplateRendererInterface */ private $templateRenderer; public function __construct(TemplateRendererInterface $templateRenderer) { $this-&gt;templateRenderer = $templateRenderer; } public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { // Inject the current user, or null if there isn't one. $this-&gt;templateRenderer-&gt;addDefaultParam( TemplateRendererInterface::TEMPLATE_ALL, 'security', // This is named security so it will not interfere with your user admin pages $request-&gt;getAttribute(UserInterface::class) ); // Inject the currently matched route name. $routeResult = $request-&gt;getAttribute(RouteResult::class); $this-&gt;templateRenderer-&gt;addDefaultParam( TemplateRendererInterface::TEMPLATE_ALL, 'matchedRouteName', $routeResult ? $routeResult-&gt;getMatchedRouteName() : null ); // Inject all flash messages /** @var FlashMessagesInterface $flashMessages */ $flashMessages = $request-&gt;getAttribute(FlashMessageMiddleware::FLASH_ATTRIBUTE); $this-&gt;templateRenderer-&gt;addDefaultParam( TemplateRendererInterface::TEMPLATE_ALL, 'notifications', $flashMessages ? $flashMessages-&gt;getFlashes() : [] ); // Inject any other data you always need in all your templates... return $handler-&gt;handle($request); } } Next you need to create a factory for this middleware and register it with the DI container; mezzio-tooling provides functionality for doing so: $ ./vendor/bin/mezzio factory:create \"App\\Middleware\\TemplateDefaultsMiddleware\" Once the factory is created, you can add this to any route that may generate a template: // In config/routes.php: $app-&gt;get('/some/resource/{id}', [ App\\Middleware\\TemplateDefaultsMiddleware::class, SomeResourceHandler::class, ]); Alternately, if you want it to apply to any handler, place it in your application pipeline immediately before the DispatchMiddleware : // In config/pipeline.php: $app-&gt;pipe(App\\Middleware\\TemplateDefaultsMiddleware::class); $app-&gt;pipe(DispatchMiddleware::class); Be aware, however, that if authentication is performed in per-handler pipelines, you will need to use the first approach to ensure that the authenticated user has been discovered.","title":"Provide Access to Common Data In Templates"},{"location":"v3/cookbook/access-common-data-in-templates/#how-can-i-access-common-data-in-templates","text":"Templates often need access to common request data, such as request attributes, the current route name, the currently authenticated user, and more. Wrangling all of that data in every single handler, however, often leads to code duplication, and the possibility of accidentally omitting some of that data. How can you make such data available to all templates? The approach detailed in this recipe involves creating a middleware that calls on the template renderer's addDefaultParam() method. The following is an example that injects the current user, the matched route name, and all flash messages via a single middleware. // In src/App/Middleware/TemplateDefaultsMiddleware.php (flat structure), or // in src/App/src/Middleware/TemplateDefaultsMiddleware.php (modular structure): &lt;?php declare(strict_types=1); namespace App\\Middleware; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; use Mezzio\\Router\\RouteResult; use Mezzio\\Authentication\\UserInterface; use Mezzio\\Flash\\FlashMessagesInterface; use Mezzio\\Flash\\FlashMessageMiddleware; use Mezzio\\Template\\TemplateRendererInterface; class TemplateDefaultsMiddleware implements MiddlewareInterface { /** @var TemplateRendererInterface */ private $templateRenderer; public function __construct(TemplateRendererInterface $templateRenderer) { $this-&gt;templateRenderer = $templateRenderer; } public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { // Inject the current user, or null if there isn't one. $this-&gt;templateRenderer-&gt;addDefaultParam( TemplateRendererInterface::TEMPLATE_ALL, 'security', // This is named security so it will not interfere with your user admin pages $request-&gt;getAttribute(UserInterface::class) ); // Inject the currently matched route name. $routeResult = $request-&gt;getAttribute(RouteResult::class); $this-&gt;templateRenderer-&gt;addDefaultParam( TemplateRendererInterface::TEMPLATE_ALL, 'matchedRouteName', $routeResult ? $routeResult-&gt;getMatchedRouteName() : null ); // Inject all flash messages /** @var FlashMessagesInterface $flashMessages */ $flashMessages = $request-&gt;getAttribute(FlashMessageMiddleware::FLASH_ATTRIBUTE); $this-&gt;templateRenderer-&gt;addDefaultParam( TemplateRendererInterface::TEMPLATE_ALL, 'notifications', $flashMessages ? $flashMessages-&gt;getFlashes() : [] ); // Inject any other data you always need in all your templates... return $handler-&gt;handle($request); } } Next you need to create a factory for this middleware and register it with the DI container; mezzio-tooling provides functionality for doing so: $ ./vendor/bin/mezzio factory:create \"App\\Middleware\\TemplateDefaultsMiddleware\" Once the factory is created, you can add this to any route that may generate a template: // In config/routes.php: $app-&gt;get('/some/resource/{id}', [ App\\Middleware\\TemplateDefaultsMiddleware::class, SomeResourceHandler::class, ]); Alternately, if you want it to apply to any handler, place it in your application pipeline immediately before the DispatchMiddleware : // In config/pipeline.php: $app-&gt;pipe(App\\Middleware\\TemplateDefaultsMiddleware::class); $app-&gt;pipe(DispatchMiddleware::class); Be aware, however, that if authentication is performed in per-handler pipelines, you will need to use the first approach to ensure that the authenticated user has been discovered.","title":"How Can I Access Common Data In Templates?"},{"location":"v3/cookbook/autowiring-routes-and-pipelines/","text":"How can I autowire routes and pipelines? Sometimes you may find you'd like to keep route definitions close to the handlers and middleware they will invoke. This is particularly important if you want to re-use a module or library in another project. In this recipe, we'll demonstrate two mechanisms for doing so. One is a built-in delegator factory , and the other is a custom delegator factory. ApplicationConfigInjectionDelegator Mezzio ships with the class Mezzio\\Container\\ApplicationConfigInjectionDelegator , which can be used as a delegator factory for the Mezzio\\Application class in order to automate piping of pipeline middleware and routing to request handlers and middleware. The delegator factory looks for configuration that looks like the following: return [ 'middleware_pipeline' =&gt; [ [ // required: 'middleware' =&gt; 'Middleware service or pipeline', // optional: 'path' =&gt; '/path/to/match', // for path-segregated middleware 'priority' =&gt; 1, // integer; to ensure specific order ], ], 'routes' =&gt; [ [ 'path' =&gt; '/path/to/match', 'middleware' =&gt; 'Middleware service or pipeline', 'allowed_methods' =&gt; ['GET', 'POST', 'PATCH'], 'name' =&gt; 'route.name', 'options' =&gt; [ 'stuff' =&gt; 'to', 'pass' =&gt; 'to', 'the' =&gt; 'underlying router', ], ], 'another.route.name' =&gt; [ 'path' =&gt; '/another/path/to/match', 'middleware' =&gt; 'Middleware service or pipeline', 'allowed_methods' =&gt; ['GET', 'POST'], 'options' =&gt; [ 'more' =&gt; 'router', 'options' =&gt; 'here', ], ], ], ]; This configuration may be placed at the application level, in a file under config/autoload/ , or within a module's ConfigProvider class. For details on what values are accepted, see below. In order to enable the delegator factory, you will need to define the following service configuration somewhere, either at the application level in a config/autoload/ file, or within a module-specific ConfigProvider class: return [ 'dependencies' =&gt; [ 'delegators' =&gt; [ \\Mezzio\\Application::class =&gt; [ \\Mezzio\\Container\\ApplicationConfigInjectionDelegator::class, ], ], ], ]; Pipeline middleware Pipeline middleware are each described as an associative array, with the following keys: middleware ( required , string or array): the value should be a middleware service name, or an array of service names (in which case a MiddlewarePipe will be created and piped). path (optional, string): if you wish to path-segregate the middleware, provide a literal path prefix that must be matched in order to dispatch the given middleware. priority (optional, integer): The elements in the middleware_pipeline section are piped to the application in the order in which they are discovered — which could have ramifications if multiple components and/or modules provide pipeline middleware. If you wish to force a certain order, you may use the priority to do so. Higher value integers are piped first, lower value (including negative values), last. If two middleware use the same priority, they will be piped in the order discovered. Routed middleware Routed middleware are also each described as an associative array, using the following keys: path ( required , string): the path specification to match; this will be dependent on the router implementation you use. middleware ( required , string or array): the value should be a middleware service name, or an array of service names (in which case a MiddlewarePipe will be created and piped). allowed_methods (optional, array or value of `Mezzio\\Route\\HTTP_METHOD_ANY): the HTTP methods allowed for the route. If this is omitted, the assumption is any method is allowed. name (optional, string): the name of the route, if any; this can be used later to generate a URI based on the route, and must be unique. The name may also be set using a string key in the routes configuration array. If both are set the name assigned in the spec will be used. options (optional, array): any options to provide to the generated route. These might be default values or constraints, depending on the router implementation. Custom delegator factories As outlined in the introduction to this recipe, we can also create our own custom delegator factories in order to inject pipeline or routed middleware. Unlike the above solution, the solution we will outline here will exercise the Mezzio\\Application API in order to populate it. First, we'll create the class App\\Factory\\PipelineAndRoutesDelegator , with the following contents: &lt;?php namespace App\\Factory; use App\\Handler; use Laminas\\Stratigility\\Middleware\\ErrorHandler; use Mezzio\\Application; use Mezzio\\Handler\\NotFoundHandler; use Mezzio\\Helper\\ServerUrlMiddleware; use Mezzio\\Helper\\UrlHelperMiddleware; use Mezzio\\Router\\Middleware\\DispatchMiddleware; use Mezzio\\Router\\Middleware\\ImplicitHeadMiddleware; use Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware; use Mezzio\\Router\\Middleware\\MethodNotAllowedMiddleware; use Mezzio\\Router\\Middleware\\RouteMiddleware; use Psr\\Container\\ContainerInterface; class PipelineAndRoutesDelegator { public function __invoke( ContainerInterface $container, string $serviceName, callable $callback ) : Application { /** @var $app Application */ $app = $callback(); // Setup pipeline: $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipe(ServerUrlMiddleware::class); $app-&gt;pipe(RouteMiddleware::class); $app-&gt;pipe(ImplicitHeadMiddleware::class); $app-&gt;pipe(ImplicitOptionsMiddleware::class); $app-&gt;pipe(MethodNotAllowedMiddleware::class); $app-&gt;pipe(UrlHelperMiddleware::class); $app-&gt;pipe(DispatchMiddleware::class); $app-&gt;pipe(NotFoundHandler::class); // Setup routes: $app-&gt;get('/', Handler\\HomePageHandler::class, 'home'); $app-&gt;get('/api/ping', Handler\\PingHandler::class, 'api.ping'); return $app; } } Where to put the factory You will place the factory class in one of the following locations: src/App/Factory/PipelineAndRoutesDelegator.php if using the default, flat, application structure. src/App/src/Factory/PipelineAndRoutesDelegator.php if using the recommended, modular, application structure. Once you've created this, edit the class App\\ConfigProvider ; in it, we'll update the getDependencies() method to add the delegator factory: public function getDependencies() { return [ /* . . . */ 'delegators' =&gt; [ \\Mezzio\\Application::class =&gt; [ Factory\\PipelineAndRoutesDelegator::class, ], ], ]; } Where is the ConfigProvider class? The ConfigProvider class is in one of the following locations: src/App/ConfigProvider.php if using the default, flat, application structure. src/App/src/ConfigProvider.php using the recommended, modular, application structure. Why is an array assigned? As noted above in the description of delegator factories, since each delegator factory returns an instance, you can nest multiple delegator factories in order to shape initialization of a service. As such, they are assigned as an array to the service. If you're paying careful attention to this example, it essentially replaces both config/pipeline.php and config/routes.php ! If you were to update those files to remove the default pipeline and routes, you should find that reloading your application returns the exact same results! Caution: pipelines Using delegator factories is a nice way to keep your routing and pipeline configuration close to the modules in which they are defined. However, there is a caveat: you likely should not register pipeline middleware in a delegator factory other than within your root application module . The reason for this is simple: pipelines are linear, and specific to your application. If one module pipes in middleware, there's no guarantee it will be piped before or after your main pipeline, and no way to pipe the middleware at a position in the middle of the pipeline! As such: Use a config/pipeline.php file for your pipeline, OR Ensure you only define the pipeline in a single delegator factory on your Application instance. Caution: third-party, distributed modules If you are developing a module to distribute as a package via Composer , you should not autowire any delegator factories that inject pipeline middleware or routes in the Application . Why? As noted in the above section, pipelines should be created exactly once, at the application level. Registering pipeline middleware within a distributable package will very likely not have the intended consequences. If you ship with pipeline middleware, we suggest that you: Document the middleware, and where you anticipate it being used in the middleware pipeline. Document how to add the middleware service to dependency configuration, or provide the dependency configuration via your module's ConfigProvider . With regards to routes, there are other considerations: Routes defined by the package might conflict with the application, or with other packages used by the application. Routing definitions are typically highly specific to the router implementation in use. As an example, each of the currently supported router implementations has a different syntax for placeholders: /user/:id + \"constraints\" configuration to define constraints (laminas-router) /user/{id} + \"tokens\" configuration to define constraints (Aura.Router) /user/{id:\\d+} (FastRoute) Your application may have specific routing considerations or design. You could, of course, detect what router is in use, and provide routing for each known, supported router implementation within your delegator factory. We even recommend doing exactly that. However, we note that such an approach does not solve the other two points above. However, we still recommend shipping a delegator factory that would register your routes, since routes are often a part of module design; just do not autowire that delegator factory. This way, end-users who can use the defaults do not need to cut-and-paste routing definitions from your documentation into their own applications; they will instead opt-in to your delegator factory by wiring it into their own configuration. Synopsis We recommend using delegator factories for the purpose of autowiring routes, and, with caveats, pipeline middleware: The pipeline should be created exactly once, so calls to pipe() should occur in exactly one delegator factory. Distributable packages should create a delegator factory for routes only , but should not register the delegator factory by default.","title":"Autowiring routes and pipeline middleware"},{"location":"v3/cookbook/autowiring-routes-and-pipelines/#how-can-i-autowire-routes-and-pipelines","text":"Sometimes you may find you'd like to keep route definitions close to the handlers and middleware they will invoke. This is particularly important if you want to re-use a module or library in another project. In this recipe, we'll demonstrate two mechanisms for doing so. One is a built-in delegator factory , and the other is a custom delegator factory.","title":"How can I autowire routes and pipelines?"},{"location":"v3/cookbook/autowiring-routes-and-pipelines/#applicationconfiginjectiondelegator","text":"Mezzio ships with the class Mezzio\\Container\\ApplicationConfigInjectionDelegator , which can be used as a delegator factory for the Mezzio\\Application class in order to automate piping of pipeline middleware and routing to request handlers and middleware. The delegator factory looks for configuration that looks like the following: return [ 'middleware_pipeline' =&gt; [ [ // required: 'middleware' =&gt; 'Middleware service or pipeline', // optional: 'path' =&gt; '/path/to/match', // for path-segregated middleware 'priority' =&gt; 1, // integer; to ensure specific order ], ], 'routes' =&gt; [ [ 'path' =&gt; '/path/to/match', 'middleware' =&gt; 'Middleware service or pipeline', 'allowed_methods' =&gt; ['GET', 'POST', 'PATCH'], 'name' =&gt; 'route.name', 'options' =&gt; [ 'stuff' =&gt; 'to', 'pass' =&gt; 'to', 'the' =&gt; 'underlying router', ], ], 'another.route.name' =&gt; [ 'path' =&gt; '/another/path/to/match', 'middleware' =&gt; 'Middleware service or pipeline', 'allowed_methods' =&gt; ['GET', 'POST'], 'options' =&gt; [ 'more' =&gt; 'router', 'options' =&gt; 'here', ], ], ], ]; This configuration may be placed at the application level, in a file under config/autoload/ , or within a module's ConfigProvider class. For details on what values are accepted, see below. In order to enable the delegator factory, you will need to define the following service configuration somewhere, either at the application level in a config/autoload/ file, or within a module-specific ConfigProvider class: return [ 'dependencies' =&gt; [ 'delegators' =&gt; [ \\Mezzio\\Application::class =&gt; [ \\Mezzio\\Container\\ApplicationConfigInjectionDelegator::class, ], ], ], ];","title":"ApplicationConfigInjectionDelegator"},{"location":"v3/cookbook/autowiring-routes-and-pipelines/#custom-delegator-factories","text":"As outlined in the introduction to this recipe, we can also create our own custom delegator factories in order to inject pipeline or routed middleware. Unlike the above solution, the solution we will outline here will exercise the Mezzio\\Application API in order to populate it. First, we'll create the class App\\Factory\\PipelineAndRoutesDelegator , with the following contents: &lt;?php namespace App\\Factory; use App\\Handler; use Laminas\\Stratigility\\Middleware\\ErrorHandler; use Mezzio\\Application; use Mezzio\\Handler\\NotFoundHandler; use Mezzio\\Helper\\ServerUrlMiddleware; use Mezzio\\Helper\\UrlHelperMiddleware; use Mezzio\\Router\\Middleware\\DispatchMiddleware; use Mezzio\\Router\\Middleware\\ImplicitHeadMiddleware; use Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware; use Mezzio\\Router\\Middleware\\MethodNotAllowedMiddleware; use Mezzio\\Router\\Middleware\\RouteMiddleware; use Psr\\Container\\ContainerInterface; class PipelineAndRoutesDelegator { public function __invoke( ContainerInterface $container, string $serviceName, callable $callback ) : Application { /** @var $app Application */ $app = $callback(); // Setup pipeline: $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipe(ServerUrlMiddleware::class); $app-&gt;pipe(RouteMiddleware::class); $app-&gt;pipe(ImplicitHeadMiddleware::class); $app-&gt;pipe(ImplicitOptionsMiddleware::class); $app-&gt;pipe(MethodNotAllowedMiddleware::class); $app-&gt;pipe(UrlHelperMiddleware::class); $app-&gt;pipe(DispatchMiddleware::class); $app-&gt;pipe(NotFoundHandler::class); // Setup routes: $app-&gt;get('/', Handler\\HomePageHandler::class, 'home'); $app-&gt;get('/api/ping', Handler\\PingHandler::class, 'api.ping'); return $app; } }","title":"Custom delegator factories"},{"location":"v3/cookbook/autowiring-routes-and-pipelines/#caution-pipelines","text":"Using delegator factories is a nice way to keep your routing and pipeline configuration close to the modules in which they are defined. However, there is a caveat: you likely should not register pipeline middleware in a delegator factory other than within your root application module . The reason for this is simple: pipelines are linear, and specific to your application. If one module pipes in middleware, there's no guarantee it will be piped before or after your main pipeline, and no way to pipe the middleware at a position in the middle of the pipeline! As such: Use a config/pipeline.php file for your pipeline, OR Ensure you only define the pipeline in a single delegator factory on your Application instance.","title":"Caution: pipelines"},{"location":"v3/cookbook/autowiring-routes-and-pipelines/#caution-third-party-distributed-modules","text":"If you are developing a module to distribute as a package via Composer , you should not autowire any delegator factories that inject pipeline middleware or routes in the Application . Why? As noted in the above section, pipelines should be created exactly once, at the application level. Registering pipeline middleware within a distributable package will very likely not have the intended consequences. If you ship with pipeline middleware, we suggest that you: Document the middleware, and where you anticipate it being used in the middleware pipeline. Document how to add the middleware service to dependency configuration, or provide the dependency configuration via your module's ConfigProvider . With regards to routes, there are other considerations: Routes defined by the package might conflict with the application, or with other packages used by the application. Routing definitions are typically highly specific to the router implementation in use. As an example, each of the currently supported router implementations has a different syntax for placeholders: /user/:id + \"constraints\" configuration to define constraints (laminas-router) /user/{id} + \"tokens\" configuration to define constraints (Aura.Router) /user/{id:\\d+} (FastRoute) Your application may have specific routing considerations or design. You could, of course, detect what router is in use, and provide routing for each known, supported router implementation within your delegator factory. We even recommend doing exactly that. However, we note that such an approach does not solve the other two points above. However, we still recommend shipping a delegator factory that would register your routes, since routes are often a part of module design; just do not autowire that delegator factory. This way, end-users who can use the defaults do not need to cut-and-paste routing definitions from your documentation into their own applications; they will instead opt-in to your delegator factory by wiring it into their own configuration.","title":"Caution: third-party, distributed modules"},{"location":"v3/cookbook/autowiring-routes-and-pipelines/#synopsis","text":"We recommend using delegator factories for the purpose of autowiring routes, and, with caveats, pipeline middleware: The pipeline should be created exactly once, so calls to pipe() should occur in exactly one delegator factory. Distributable packages should create a delegator factory for routes only , but should not register the delegator factory by default.","title":"Synopsis"},{"location":"v3/cookbook/common-prefix-for-routes/","text":"How can I prepend a common path to all my routes? You may have multiple middleware in your project, each providing their own functionality: $app-&gt;pipe(UserMiddleware::class); $app-&gt;pipe(ProjectMiddleware::class); Let's assume the above represents an API. As your application progresses, you may have a mixture of different content, and now want to have the above segregated under the path /api . To accomplish it, we will pipe an array of middleware under a path , /api . When we pipe an array of middleware, internally, Mezzio\\Application creates a new Laminas\\Stratigility\\MiddlewarePipe instance, and pipes each middleware item to it. When we specify a path, the middleware is decorated with a Laminas\\Stratigility\\Middleware\\PathMiddlewareDecorator . This middleware will compare the request path against the path with which it was created; if they match, it passes processing on to its middleware. The following example assumes you are using the structure of config/pipeline.php as shipped with the skeleton application. use Psr\\Container\\ContainerInterface; use Mezzio\\Application; use Mezzio\\MiddlewareFactory; /** * Setup middleware pipeline: */ return function (Application $app, MiddlewareFactory $factory, ContainerInterface $container) : void { // . . . $app-&gt;pipe('/api', [ UserMiddleware::class, ProjectMiddleware::class, ]); // . . . } Alternately, you can perform the path decoration manually: use Psr\\Container\\ContainerInterface; use Mezzio\\Application; use Mezzio\\MiddlewareFactory; use function Laminas\\Stratigility\\path; /** * Setup middleware pipeline: */ return function (Application $app, MiddlewareFactory $factory, ContainerInterface $container) : void { // . . . $app-&gt;pipe(path('/api', $factory-&gt;pipeline( UserMiddleware::class, ProjectMiddleware::class ))); // . . . } (Calling $factory-&gt;pipeline() is necessary here to ensure that we create the MiddlewarePipe instance, and so that each item in the specified pipeline will be decorated as Mezzio\\Middleware\\LazyLoadingMiddleware .)","title":"Prepending a common path to all routes"},{"location":"v3/cookbook/common-prefix-for-routes/#how-can-i-prepend-a-common-path-to-all-my-routes","text":"You may have multiple middleware in your project, each providing their own functionality: $app-&gt;pipe(UserMiddleware::class); $app-&gt;pipe(ProjectMiddleware::class); Let's assume the above represents an API. As your application progresses, you may have a mixture of different content, and now want to have the above segregated under the path /api . To accomplish it, we will pipe an array of middleware under a path , /api . When we pipe an array of middleware, internally, Mezzio\\Application creates a new Laminas\\Stratigility\\MiddlewarePipe instance, and pipes each middleware item to it. When we specify a path, the middleware is decorated with a Laminas\\Stratigility\\Middleware\\PathMiddlewareDecorator . This middleware will compare the request path against the path with which it was created; if they match, it passes processing on to its middleware. The following example assumes you are using the structure of config/pipeline.php as shipped with the skeleton application. use Psr\\Container\\ContainerInterface; use Mezzio\\Application; use Mezzio\\MiddlewareFactory; /** * Setup middleware pipeline: */ return function (Application $app, MiddlewareFactory $factory, ContainerInterface $container) : void { // . . . $app-&gt;pipe('/api', [ UserMiddleware::class, ProjectMiddleware::class, ]); // . . . } Alternately, you can perform the path decoration manually: use Psr\\Container\\ContainerInterface; use Mezzio\\Application; use Mezzio\\MiddlewareFactory; use function Laminas\\Stratigility\\path; /** * Setup middleware pipeline: */ return function (Application $app, MiddlewareFactory $factory, ContainerInterface $container) : void { // . . . $app-&gt;pipe(path('/api', $factory-&gt;pipeline( UserMiddleware::class, ProjectMiddleware::class ))); // . . . } (Calling $factory-&gt;pipeline() is necessary here to ensure that we create the MiddlewarePipe instance, and so that each item in the specified pipeline will be decorated as Mezzio\\Middleware\\LazyLoadingMiddleware .)","title":"How can I prepend a common path to all my routes?"},{"location":"v3/cookbook/debug-toolbars/","text":"How can I get a debug toolbar for my Mezzio application? Many modern frameworks and applications provide debug toolbars: in-browser toolbars to provide profiling information of the request executed. These can provide invaluable details into application objects, database queries, and more. As a Mezzio user, how can you get similar functionality? Zend Server Z-Ray Zend Server ships with a tool called Z-Ray , which provides both a debug toolbar and debug console (for API debugging). Z-Ray is also currently available as a standalone technology preview , and can be added as an extension to an existing PHP installation. When using Zend Server or the standalone Z-Ray, you do not need to make any changes to your application whatsoever to benefit from it; you simply need to make sure Z-Ray is enabled and/or that you've set up a security token to selectively enable it on-demand. See the Z-Ray documentation for full usage details. php-middleware/php-debug-bar php-middleware/php-debug-bar provides a PSR-15 middleware wrapper around maximebf/php-debugbar , a popular framework-agnostic debug bar for PHP projects. First, install the middleware in your application: $ composer require php-middleware/php-debug-bar This package supplies a config provider, which could be added to your config/config.php when using laminas-config-aggregator or mezzio-config-manager. However, because it should only be enabled in development, we recommend creating a \"local\" configuration file (e.g., config/autoload/php-debugbar.local.php ) when you need to enable it, with the following contents: &lt;?php use DebugBar\\DataCollector\\ConfigCollector; use DebugBar\\DebugBar; use DebugBar\\JavascriptRenderer; use PhpMiddleware\\PhpDebugBar\\ConfigCollectorFactory; use PhpMiddleware\\PhpDebugBar\\ConfigProvider; use PhpMiddleware\\PhpDebugBar\\JavascriptRendererFactory; use PhpMiddleware\\PhpDebugBar\\PhpDebugBarMiddleware; use PhpMiddleware\\PhpDebugBar\\PhpDebugBarMiddlewareFactory; use PhpMiddleware\\PhpDebugBar\\StandardDebugBarFactory; use Psr\\Container\\ContainerInterface; return array_merge(ConfigProvider::getConfig(), [ 'dependencies' =&gt; [ 'factories' =&gt; [ PhpDebugBarMiddleware::class =&gt; PhpDebugBarMiddlewareFactory::class, ConfigCollector::class =&gt; ConfigCollectorFactory::class, ConfigProvider::class =&gt; function(ContainerInterface $container) { return $container-&gt;get('config'); }, DebugBar::class =&gt; StandardDebugBarFactory::class, JavascriptRenderer::class =&gt; JavascriptRendererFactory::class, ] ] ]); In addition, ensure the PSR-17 HTTP message factory interfaces are registered in your container. For example, when using Diactoros as your PSR-7 HTTP message interfaces implementation, you can define the following: use Laminas\\Diactoros\\ResponseFactory; use Laminas\\Diactoros\\StreamFactory; use Psr\\Http\\Message\\ResponseFactoryInterface; use Psr\\Http\\Message\\StreamFactoryInterface; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ ResponseFactoryInterface::class =&gt; ResponseFactory::class, StreamFactoryInterface::class =&gt; StreamFactory::class ], // ... ]; Starting with Diactoros 2.3.0, you can register the above PSR-17 services by adding an entry for \\Laminas\\Diactoros\\ConfigProvider::class to your config/config.php file, if it is not added for you during installation. Finally, add the PhpDebugBarMiddleware class to the pipeline in config/pipeline.php after piping the ErrorHandler class: if (! empty($container-&gt;get('config')['debug'])) { $app-&gt;pipe(PhpDebugBarMiddleware::class); } Usage in a Request Handler You can add messages to the debug bar within request handlers and middleware. As an example, in your src/App/Handler/HomePageHandler.php , you might do the following: namespace App\\Handler; use Psr\\Http\\Server\\RequestHandlerInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Message\\ResponseInterface; use Mezzio\\Template\\TemplateRendererInterface; use Laminas\\Diactoros\\Response\\HtmlResponse; use DebugBar\\DebugBar; class HomePageHandler implements RequestHandlerInterface { /** @var TemplateRendererInterface */ public $template; /** @var DebugBar */ public $debugBar; public function __construct(TemplateRendererInterface $template, DebugBar $debugBar) { $this-&gt;template = $template; $this-&gt;debugBar = $debugBar; } public function handle(ServerRequestInterface $request) : ResponseInterface { $this-&gt;debugBar['messages']-&gt;addMessage('Hello World!'); return new HtmlResponse($this-&gt;template-&gt;render('user::home-page')); } } Only use in development Remember to enable PhpMiddleware\\PhpDebugBar\\ConfigProvider only in your development environments, and to remove references to the DebugBar class in production!","title":"Enabling debug toolbars"},{"location":"v3/cookbook/debug-toolbars/#how-can-i-get-a-debug-toolbar-for-my-mezzio-application","text":"Many modern frameworks and applications provide debug toolbars: in-browser toolbars to provide profiling information of the request executed. These can provide invaluable details into application objects, database queries, and more. As a Mezzio user, how can you get similar functionality?","title":"How can I get a debug toolbar for my Mezzio application?"},{"location":"v3/cookbook/debug-toolbars/#zend-server-z-ray","text":"Zend Server ships with a tool called Z-Ray , which provides both a debug toolbar and debug console (for API debugging). Z-Ray is also currently available as a standalone technology preview , and can be added as an extension to an existing PHP installation. When using Zend Server or the standalone Z-Ray, you do not need to make any changes to your application whatsoever to benefit from it; you simply need to make sure Z-Ray is enabled and/or that you've set up a security token to selectively enable it on-demand. See the Z-Ray documentation for full usage details.","title":"Zend Server Z-Ray"},{"location":"v3/cookbook/debug-toolbars/#php-middlewarephp-debug-bar","text":"php-middleware/php-debug-bar provides a PSR-15 middleware wrapper around maximebf/php-debugbar , a popular framework-agnostic debug bar for PHP projects. First, install the middleware in your application: $ composer require php-middleware/php-debug-bar This package supplies a config provider, which could be added to your config/config.php when using laminas-config-aggregator or mezzio-config-manager. However, because it should only be enabled in development, we recommend creating a \"local\" configuration file (e.g., config/autoload/php-debugbar.local.php ) when you need to enable it, with the following contents: &lt;?php use DebugBar\\DataCollector\\ConfigCollector; use DebugBar\\DebugBar; use DebugBar\\JavascriptRenderer; use PhpMiddleware\\PhpDebugBar\\ConfigCollectorFactory; use PhpMiddleware\\PhpDebugBar\\ConfigProvider; use PhpMiddleware\\PhpDebugBar\\JavascriptRendererFactory; use PhpMiddleware\\PhpDebugBar\\PhpDebugBarMiddleware; use PhpMiddleware\\PhpDebugBar\\PhpDebugBarMiddlewareFactory; use PhpMiddleware\\PhpDebugBar\\StandardDebugBarFactory; use Psr\\Container\\ContainerInterface; return array_merge(ConfigProvider::getConfig(), [ 'dependencies' =&gt; [ 'factories' =&gt; [ PhpDebugBarMiddleware::class =&gt; PhpDebugBarMiddlewareFactory::class, ConfigCollector::class =&gt; ConfigCollectorFactory::class, ConfigProvider::class =&gt; function(ContainerInterface $container) { return $container-&gt;get('config'); }, DebugBar::class =&gt; StandardDebugBarFactory::class, JavascriptRenderer::class =&gt; JavascriptRendererFactory::class, ] ] ]); In addition, ensure the PSR-17 HTTP message factory interfaces are registered in your container. For example, when using Diactoros as your PSR-7 HTTP message interfaces implementation, you can define the following: use Laminas\\Diactoros\\ResponseFactory; use Laminas\\Diactoros\\StreamFactory; use Psr\\Http\\Message\\ResponseFactoryInterface; use Psr\\Http\\Message\\StreamFactoryInterface; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ ResponseFactoryInterface::class =&gt; ResponseFactory::class, StreamFactoryInterface::class =&gt; StreamFactory::class ], // ... ]; Starting with Diactoros 2.3.0, you can register the above PSR-17 services by adding an entry for \\Laminas\\Diactoros\\ConfigProvider::class to your config/config.php file, if it is not added for you during installation. Finally, add the PhpDebugBarMiddleware class to the pipeline in config/pipeline.php after piping the ErrorHandler class: if (! empty($container-&gt;get('config')['debug'])) { $app-&gt;pipe(PhpDebugBarMiddleware::class); }","title":"php-middleware/php-debug-bar"},{"location":"v3/cookbook/double-pass-middleware/","text":"Using Double-Pass Middleware Mezzio uses PSR-15 middleware and request handlers exclusively as of version 3. In previous releases, however, we supported \"double-pass\" middleware, and a number of third-party packages provided double-pass middleware. How can you use this middleware with Mezzio 3? What is Double-Pass Middleware? Double pass middleware receives both the request and a response in addition to the handler, and passes both the request and response to the handler when invoking it: function (ServerRequestInterface $request, ResponseInterface $response, callable $next) { $response = $next($request, $response); return $response-&gt;withHeader('X-Test', time()); } It is termed \"double pass\" because you pass both the request and response when delegating to the next layer. doublePassMiddleware function laminas-stratigility v2.2 and v3.0 ship a utility function, Laminas\\Stratigility\\doublePassMiddleware() , that will decorate a callable double-pass middleware using a Laminas\\Stratigility\\Middleware\\DoublePassMiddlewareDecorator instance; this latter is a PSR-15 implementation, and can thus be used in your middleware pipelines. The function (and class) also expects a PSR-7 ResponseInterface instance as a second argument; this is then passed as the $response argument to the double-pass middleware. The following examples demonstrate both piping and routing to double pass middleware using this technique, and using laminas-diactoros to provide the response instance. use Laminas\\Diactoros\\Response; use function Laminas\\Stratigility\\doublePassMiddleware; $app-&gt;pipe(doublePassMiddleware(function ($request, $response, $next) { $response = $next($request, $response); return $response-&gt;withHeader('X-Clacks-Overhead', 'GNU Terry Pratchett'); }, new Response())); // &lt;-- note the response $app-&gt;get('/api/ping', doublePassMiddleware(function ($request, $response, $next) { return new Response\\JsonResponse([ 'ack' =&gt; time(), ]); }, new Response())); // &lt;-- note the response Double-Pass Middleware Services What if you're piping or routing to a service — for instance, a class provided by a third-party implementation? In this case, you have one of two options: Decorate the middleware before returning it from the factory that creates it. Use a delegator factory to decorate the middleware. Decorating via factory If you have control of the factory that creates the double-pass middleware you will be using in your application, you can use the strategy outlined above to decorate your middleware before returning it, with one minor change: you can pull a response factory from the container as well. To demonstrate: use Psr\\Container\\ContainerInterface; use Psr\\Http\\Message\\ResponseInterface; use function Laminas\\Stratigility\\doublePassMiddleware; class SomeDoublePassMiddlewareFactory { public function __invoke(ContainerInterface $container) { // Create the middleware instance somehow. This example // assumes it is in `$middleware` when done. return doublePassMiddleware( $middleware, ($container-&gt;get(ResponseInterface::class))() ); } } That last line may look a little strange. The Psr\\Http\\Response\\ResponseInterface service returns a callable factory for producing response instances, and not a response instance itself. As such, we pull it, and then invoke it to produce the response instance for our double-pass middleware. This approach will work, but it means code duplication everywhere you have double-pass middleware. Let's look at the delegator factory solution. Decorating via delegator factory Delegator factories can be re-used for multiple services. In our case, we'll re-use it to decorate double-pass middleware. The delegator factory would look like this: use Psr\\Container\\ContainerInterface; use Psr\\Http\\Message\\ResponseInterface; use function Laminas\\Stratigility\\doublePassMiddleware; class DoublePassMiddlewareDelegator { public function __invoke(Container $container, string $serviceName, callable $callback) { return doublePassMiddleware( $callback(), ($container-&gt;get(ResponseInterface::class))() ); } } This looks similar to our previous solution, but is self-contained; we rely on the $callback argument to produce the middleware we want to decorate. Then, for each service we have that represents double-pass middleware, we can provide configuration like the following: return [ 'dependencies' =&gt; [ 'delegators' =&gt; [ SomeDoublePassMiddleware::class =&gt; [ DoublePassMiddlewareDelegator::class, ], ], ], ]; This approach has a couple of benefits: We do not need to change existing factories. We do not need to extend factories from third-party services. We can see explicitly in our configuration all services we consume that are double-pass middleware. This will help us identify projects we want to contribute PSR-15 patches to, or potentially migrate away from, or middleware of our own we need to refactor. Extending the MiddlewareContainer Another possibility is to extend Mezzio\\MiddlewareContainer to add awareness of double-pass middleware, and have it auto-decorate them for you. A contributor has created such a library: https://github.com/Moln/expressive-callable-middleware-compat You can install it using composer require moln/mezzio-callable-middleware-compat . Once installed, add its Moln\\MezzioCallableCompat\\ConfigProvider as an entry in your config/config.php after the Mezzio\\ConfigProvider entry. This last point is particularly important: providers are merged in the order presented, with later entries having precedence; you need to ensure the new package overrides the MiddlewareContainer service provided by mezzio! When you use this approach, it will automatically detect double-pass middleware and decorate it for you. The main drawback with such an approach is that it will not help you identify double-pass middleware in your system.","title":"Using double-pass middleware"},{"location":"v3/cookbook/double-pass-middleware/#using-double-pass-middleware","text":"Mezzio uses PSR-15 middleware and request handlers exclusively as of version 3. In previous releases, however, we supported \"double-pass\" middleware, and a number of third-party packages provided double-pass middleware. How can you use this middleware with Mezzio 3?","title":"Using Double-Pass Middleware"},{"location":"v3/cookbook/double-pass-middleware/#doublepassmiddleware-function","text":"laminas-stratigility v2.2 and v3.0 ship a utility function, Laminas\\Stratigility\\doublePassMiddleware() , that will decorate a callable double-pass middleware using a Laminas\\Stratigility\\Middleware\\DoublePassMiddlewareDecorator instance; this latter is a PSR-15 implementation, and can thus be used in your middleware pipelines. The function (and class) also expects a PSR-7 ResponseInterface instance as a second argument; this is then passed as the $response argument to the double-pass middleware. The following examples demonstrate both piping and routing to double pass middleware using this technique, and using laminas-diactoros to provide the response instance. use Laminas\\Diactoros\\Response; use function Laminas\\Stratigility\\doublePassMiddleware; $app-&gt;pipe(doublePassMiddleware(function ($request, $response, $next) { $response = $next($request, $response); return $response-&gt;withHeader('X-Clacks-Overhead', 'GNU Terry Pratchett'); }, new Response())); // &lt;-- note the response $app-&gt;get('/api/ping', doublePassMiddleware(function ($request, $response, $next) { return new Response\\JsonResponse([ 'ack' =&gt; time(), ]); }, new Response())); // &lt;-- note the response","title":"doublePassMiddleware function"},{"location":"v3/cookbook/double-pass-middleware/#double-pass-middleware-services","text":"What if you're piping or routing to a service — for instance, a class provided by a third-party implementation? In this case, you have one of two options: Decorate the middleware before returning it from the factory that creates it. Use a delegator factory to decorate the middleware.","title":"Double-Pass Middleware Services"},{"location":"v3/cookbook/flash-messengers/","text":"How Can I Implement Flash Messages? Flash messages are used to display one-time messages to a user. A typical use case is for setting and later displaying a successful submission via a Post/Redirect/Get (PRG) workflow, where the flash message would be set during the POST request, but displayed during the GET request. (PRG is used to prevent double-submission of forms.) As such, flash messages usually are session-based; the message is set in one request, and accessed and cleared in another. Mezzio does not provide native session facilities out-of-the-box, which means you will need: Session functionality. Flash message functionality, for handling message expiry from the session after first access. A number of flash message libraries already exist that can be integrated via middleware, and these typically either use PHP's ext/session functionality or have a dependency on a session library. Two such libraries are: mezzio/mezzio-flash slim/flash mezzio/mezzio-flash mezzio-flash is a new offering from Laminas. Using it requires a session persistence engine as well, and Laminas provides that as well. Install the component using the following: $ composer require mezzio/mezzio-flash mezzio/mezzio-session-ext Once installed, you will need to pipe the middleware, along with the mezzio-session middleware, in your pipeline. This can be done at the application level: $app-&gt;pipe(\\Mezzio\\Session\\SessionMiddleware::class); $app-&gt;pipe(\\Mezzio\\Flash\\FlashMessageMiddleware::class); or within a routed middleware pipeline: $app-&gt;post('/user/login', [ \\Mezzio\\Session\\SessionMiddleware::class, \\Mezzio\\Flash\\FlashMessageMiddleware::class, LoginHandler::class, ]); Once this is in place, the flash message container will be registered as a request attribute, which you can then pull and manipulate: $flashMessages = $request-&gt;getAttribute(FlashMessageMiddleware::FLASH_ATTRIBUTE); // or $flashMessages = $request-&gt;getAttribute('flash'); // Create a flash message for the next request: $flashMessages-&gt;flash($messageName, $messageValue); // Or retrieve them: $message = $flashMessages-&gt;getFlash($messageName); The component has functionality for specifying the number of hops the message will be valid for, as well as accessing messages created in the current request; read more in the documentation . slim/flash Slim's Flash messages service provider can be used in Mezzio. It uses PHP's native session support. First, you'll need to add it to your application: $ composer require slim/flash Second, create middleware that will add the flash message provider to the request: &lt;?php namespace App; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; use Slim\\Flash\\Messages; class SlimFlashMiddleware implements MiddlewareInterface { public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { // Start the session whenever we use this! session_start(); return $handler-&gt;handle( $request-&gt;withAttribute('flash', new Messages()) ); } } Third, we will register the new middleware with our container as an invokable. Edit either the file config/autoload/dependencies.global.php or config/autoload/middleware-pipeline.global.php to add the following: return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ App\\SlimFlashMiddleware::class =&gt; App\\SlimFlashMiddleware::class, /* ... */ ], /* ... */ ], ]; Finally, let's register it with our middleware pipeline. For programmatic pipelines, pipe the middleware somewhere, generally before the routing middleware: $app-&gt;pipe(App\\SlimFlashMiddleware::class); Or as part of a routed middleware pipeline: $app-&gt;post('/form/handler', [ App\\SlimFlashMiddleware::class, FormHandlerMiddleware::class, ]); If using configuration-driven pipelines, edit config/autoload/middleware-pipeline.global.php to make the following additions: return [ 'middleware_pipeline' =&gt; [ 'always' =&gt; [ 'middleware' =&gt; [ 'App\\SlimFlashMiddleware', /* ... */ ], 'priority' =&gt; 10000, ], /* ... */ ], ]; Where to register the flash middleware Sessions can sometimes be expensive. As such, you may not want the flash middleware enabled for every request. If this is the case, add the flash middleware as part of a route-specific pipeline instead, as demonstrated in the programmatic pipelines above. From here, you can add and read messages by accessing the request's flash attribute. As an example, middleware generating messages might read as follows: use Psr\\Http\\Server\\RequestHandlerInterface; use Laminas\\Diactoros\\Response\\RedirectResponse; function($request, RequestHandlerInterface $handler) { $flash = $request-&gt;getAttribute('flash'); $flash-&gt;addMessage('message', 'Hello World!'); return new RedirectResponse('/other-middleware'); } And middleware consuming the message might read: use Psr\\Http\\Server\\RequestHandlerInterface; function($request, RequestHandlerInterface $handler) { $flash = $request-&gt;getAttribute('flash'); $messages = $flash-&gt;getMessages(); // ... } From there, it's a matter of providing the flash messages to your template.","title":"Flash Messengers"},{"location":"v3/cookbook/flash-messengers/#how-can-i-implement-flash-messages","text":"Flash messages are used to display one-time messages to a user. A typical use case is for setting and later displaying a successful submission via a Post/Redirect/Get (PRG) workflow, where the flash message would be set during the POST request, but displayed during the GET request. (PRG is used to prevent double-submission of forms.) As such, flash messages usually are session-based; the message is set in one request, and accessed and cleared in another. Mezzio does not provide native session facilities out-of-the-box, which means you will need: Session functionality. Flash message functionality, for handling message expiry from the session after first access. A number of flash message libraries already exist that can be integrated via middleware, and these typically either use PHP's ext/session functionality or have a dependency on a session library. Two such libraries are: mezzio/mezzio-flash slim/flash","title":"How Can I Implement Flash Messages?"},{"location":"v3/cookbook/flash-messengers/#mezziomezzio-flash","text":"mezzio-flash is a new offering from Laminas. Using it requires a session persistence engine as well, and Laminas provides that as well. Install the component using the following: $ composer require mezzio/mezzio-flash mezzio/mezzio-session-ext Once installed, you will need to pipe the middleware, along with the mezzio-session middleware, in your pipeline. This can be done at the application level: $app-&gt;pipe(\\Mezzio\\Session\\SessionMiddleware::class); $app-&gt;pipe(\\Mezzio\\Flash\\FlashMessageMiddleware::class); or within a routed middleware pipeline: $app-&gt;post('/user/login', [ \\Mezzio\\Session\\SessionMiddleware::class, \\Mezzio\\Flash\\FlashMessageMiddleware::class, LoginHandler::class, ]); Once this is in place, the flash message container will be registered as a request attribute, which you can then pull and manipulate: $flashMessages = $request-&gt;getAttribute(FlashMessageMiddleware::FLASH_ATTRIBUTE); // or $flashMessages = $request-&gt;getAttribute('flash'); // Create a flash message for the next request: $flashMessages-&gt;flash($messageName, $messageValue); // Or retrieve them: $message = $flashMessages-&gt;getFlash($messageName); The component has functionality for specifying the number of hops the message will be valid for, as well as accessing messages created in the current request; read more in the documentation .","title":"mezzio/mezzio-flash"},{"location":"v3/cookbook/flash-messengers/#slimflash","text":"Slim's Flash messages service provider can be used in Mezzio. It uses PHP's native session support. First, you'll need to add it to your application: $ composer require slim/flash Second, create middleware that will add the flash message provider to the request: &lt;?php namespace App; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; use Slim\\Flash\\Messages; class SlimFlashMiddleware implements MiddlewareInterface { public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { // Start the session whenever we use this! session_start(); return $handler-&gt;handle( $request-&gt;withAttribute('flash', new Messages()) ); } } Third, we will register the new middleware with our container as an invokable. Edit either the file config/autoload/dependencies.global.php or config/autoload/middleware-pipeline.global.php to add the following: return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ App\\SlimFlashMiddleware::class =&gt; App\\SlimFlashMiddleware::class, /* ... */ ], /* ... */ ], ]; Finally, let's register it with our middleware pipeline. For programmatic pipelines, pipe the middleware somewhere, generally before the routing middleware: $app-&gt;pipe(App\\SlimFlashMiddleware::class); Or as part of a routed middleware pipeline: $app-&gt;post('/form/handler', [ App\\SlimFlashMiddleware::class, FormHandlerMiddleware::class, ]); If using configuration-driven pipelines, edit config/autoload/middleware-pipeline.global.php to make the following additions: return [ 'middleware_pipeline' =&gt; [ 'always' =&gt; [ 'middleware' =&gt; [ 'App\\SlimFlashMiddleware', /* ... */ ], 'priority' =&gt; 10000, ], /* ... */ ], ];","title":"slim/flash"},{"location":"v3/cookbook/host-segregated-middleware/","text":"How does one segregate middleware by host? If your application is being re-used to respond to multiple host domains, how can you segregate middleware to work only in response to a specific host request? As an example, perhaps you have an \"admin\" area of your application you only want to expose via the host name \"admin.example.org\"; how can you do this? The host function Stratigility provides a function, Laminas\\Stratigility\\host() that can be used to decorate middleware in a Laminas\\Stratigility\\Middleware\\HostMiddlewareDecorator instance. These expect the string name of a host, and the middleware that should only trigger when that host is matched in the request. As a simple example: // in config/pipeline.php: use function Laminas\\Stratigility\\host; $app-&gt;pipe(host('admin.example.org', $adminMiddleware)); However, you'll note that the above uses an already instantiated middleware instance; how can you lazy-load a named service instead? Lazy-loading host-segregated middleware The config/pipeline.php file defines and returns a callable that accepts three arguments: a Mezzio\\Application $app instance a Mezzio\\MiddlewareFactory $factory instance a Psr\\Container\\ContainerInterface $container instance We can use the second of these to help us. We will use the lazy() method to specify a middleware service name to lazy-load: $app-&gt;pipe(host('admin.example.org', $factory-&gt;lazy(AdminMiddleware::class))); What about specifying a pipeline of middleware? For that, we can use the pipeline() method of the factory: $app-&gt;pipe(host('admin.example.org', $factory-&gt;pipeline( SessionMiddleware::class, AuthenticationMiddleware::class, AuthorizationMiddleware::class, AdminHandler::class ))); Alternately, either of the above examples could use the prepare() method: // lazy example: $app-&gt;pipe(host('admin.example.org', $factory-&gt;prepare(AdminMiddleware::class))); // pipeline example: $app-&gt;pipe(host('admin.example.org', $factory-&gt;prepare([ SessionMiddleware::class, AuthenticationMiddleware::class, AuthorizationMiddleware::class, AdminHandler::class, ]))); For more information on the MiddlewareFactory , read its documentation .","title":"Segregating middleware by host"},{"location":"v3/cookbook/host-segregated-middleware/#how-does-one-segregate-middleware-by-host","text":"If your application is being re-used to respond to multiple host domains, how can you segregate middleware to work only in response to a specific host request? As an example, perhaps you have an \"admin\" area of your application you only want to expose via the host name \"admin.example.org\"; how can you do this?","title":"How does one segregate middleware by host?"},{"location":"v3/cookbook/host-segregated-middleware/#the-host-function","text":"Stratigility provides a function, Laminas\\Stratigility\\host() that can be used to decorate middleware in a Laminas\\Stratigility\\Middleware\\HostMiddlewareDecorator instance. These expect the string name of a host, and the middleware that should only trigger when that host is matched in the request. As a simple example: // in config/pipeline.php: use function Laminas\\Stratigility\\host; $app-&gt;pipe(host('admin.example.org', $adminMiddleware)); However, you'll note that the above uses an already instantiated middleware instance; how can you lazy-load a named service instead?","title":"The host function"},{"location":"v3/cookbook/host-segregated-middleware/#lazy-loading-host-segregated-middleware","text":"The config/pipeline.php file defines and returns a callable that accepts three arguments: a Mezzio\\Application $app instance a Mezzio\\MiddlewareFactory $factory instance a Psr\\Container\\ContainerInterface $container instance We can use the second of these to help us. We will use the lazy() method to specify a middleware service name to lazy-load: $app-&gt;pipe(host('admin.example.org', $factory-&gt;lazy(AdminMiddleware::class))); What about specifying a pipeline of middleware? For that, we can use the pipeline() method of the factory: $app-&gt;pipe(host('admin.example.org', $factory-&gt;pipeline( SessionMiddleware::class, AuthenticationMiddleware::class, AuthorizationMiddleware::class, AdminHandler::class ))); Alternately, either of the above examples could use the prepare() method: // lazy example: $app-&gt;pipe(host('admin.example.org', $factory-&gt;prepare(AdminMiddleware::class))); // pipeline example: $app-&gt;pipe(host('admin.example.org', $factory-&gt;prepare([ SessionMiddleware::class, AuthenticationMiddleware::class, AuthorizationMiddleware::class, AdminHandler::class, ]))); For more information on the MiddlewareFactory , read its documentation .","title":"Lazy-loading host-segregated middleware"},{"location":"v3/cookbook/passing-data-between-middleware/","text":"Passing Data Between Middleware A frequently asked question is how to pass data between middleware. The answer is present in every middleware: via request object attributes. Middleware is always executed in the order in which it is piped to the application. This way you can ensure the request object in middleware receiving data contains an attribute containing data passed by outer middleware. In the following example, PassingDataMiddleware prepares data to pass as a request attribute to nested middleware. We use the fully qualified class name for the attribute name to ensure uniqueness, but you can name it anything you want. namespace App\\Middleware; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class PassingDataMiddleware implements MiddlewareInterface { // ... public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { // Step 1: Do something first $data = [ 'foo' =&gt; 'bar', ]; // Step 2: Inject data into the request, call the next middleware and wait for the response $response = $handler-&gt;handle($request-&gt;withAttribute(self::class, $data)); // Step 3: Optionally, do something (with the response) before returning the response // Step 4: Return the response return $response; } } Later, ReceivingDataMiddleware grabs the data and processes it: namespace App\\Middleware; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class ReceivingDataMiddleware implements MiddlewareInterface { // ... public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { // Step 1: Grab the data from the request and use it $data = $request-&gt;getAttribute(PassingDataMiddleware::class); // Step 2: Call the next middleware and wait for the response $response = $handler-&gt;handle($request); // Step 3: Optionally, do something (with the response) before returning the response // Step 4: Return the response return $response; } } Of course, you could also use the data in routed middleware, which is usually at the innermost layer of your application. The ExampleHandler below takes that information and passes it to the template renderer to create an HtmlResponse : namespace App\\Handler; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; use Laminas\\Diactoros\\Response\\HtmlResponse; class ExampleHandler implements RequestHandlerInterface { // ... public function handle(ServerRequestInterface $request) : ResponseInterface { // Step 1: Grab the data from the request $data = $request-&gt;getAttribute(PassingDataMiddleware::class); $id = $request-&gt;getAttribute('id'); // Step 2: Do some more stuff // Step 3: Return a Response return new HtmlResponse( $this-&gt;templateRenderer-&gt;render('blog::entry', [ 'data' =&gt; $data, 'id' =&gt; $id, ]) ); } }","title":"Passing data between middleware"},{"location":"v3/cookbook/passing-data-between-middleware/#passing-data-between-middleware","text":"A frequently asked question is how to pass data between middleware. The answer is present in every middleware: via request object attributes. Middleware is always executed in the order in which it is piped to the application. This way you can ensure the request object in middleware receiving data contains an attribute containing data passed by outer middleware. In the following example, PassingDataMiddleware prepares data to pass as a request attribute to nested middleware. We use the fully qualified class name for the attribute name to ensure uniqueness, but you can name it anything you want. namespace App\\Middleware; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class PassingDataMiddleware implements MiddlewareInterface { // ... public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { // Step 1: Do something first $data = [ 'foo' =&gt; 'bar', ]; // Step 2: Inject data into the request, call the next middleware and wait for the response $response = $handler-&gt;handle($request-&gt;withAttribute(self::class, $data)); // Step 3: Optionally, do something (with the response) before returning the response // Step 4: Return the response return $response; } } Later, ReceivingDataMiddleware grabs the data and processes it: namespace App\\Middleware; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class ReceivingDataMiddleware implements MiddlewareInterface { // ... public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { // Step 1: Grab the data from the request and use it $data = $request-&gt;getAttribute(PassingDataMiddleware::class); // Step 2: Call the next middleware and wait for the response $response = $handler-&gt;handle($request); // Step 3: Optionally, do something (with the response) before returning the response // Step 4: Return the response return $response; } } Of course, you could also use the data in routed middleware, which is usually at the innermost layer of your application. The ExampleHandler below takes that information and passes it to the template renderer to create an HtmlResponse : namespace App\\Handler; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; use Laminas\\Diactoros\\Response\\HtmlResponse; class ExampleHandler implements RequestHandlerInterface { // ... public function handle(ServerRequestInterface $request) : ResponseInterface { // Step 1: Grab the data from the request $data = $request-&gt;getAttribute(PassingDataMiddleware::class); $id = $request-&gt;getAttribute('id'); // Step 2: Do some more stuff // Step 3: Return a Response return new HtmlResponse( $this-&gt;templateRenderer-&gt;render('blog::entry', [ 'data' =&gt; $data, 'id' =&gt; $id, ]) ); } }","title":"Passing Data Between Middleware"},{"location":"v3/cookbook/path-segregated-routing/","text":"Path-segregated routing Since mezzio-router 3.1.0, mezzio-helpers 5.1.0, and mezzio-hal 1.1.0. You may want to develop a self-contained module that you can then drop in to an existing application; you may even want to path-segregate it. In such cases, you will want to use a different router instance, which has a huge number of ramifications: You'll need separate routing middleware. You'll need a separate UrlHelper instance, as well as its related middleware, if you are generating URIs. If you are generating HAL , you'll need: a separate URL generator for HAL that consumes the separate UrlHelper instance. a separate LinkGenerator for HAL that consumes the separate URL generator. a separate ResourceGenerator for HAL that consumes the separate LinkGenerator . These tasks can be accomplished by writing your own factories, but that means a lot of extra code, and the potential for the factories to go out-of-sync with the official factories for these services. What should you do? We provide details on how to accomplish these scenarios elsewhere: For modules not using HAL For modules using HAL","title":"Path-segregated routing"},{"location":"v3/cookbook/path-segregated-routing/#path-segregated-routing","text":"Since mezzio-router 3.1.0, mezzio-helpers 5.1.0, and mezzio-hal 1.1.0. You may want to develop a self-contained module that you can then drop in to an existing application; you may even want to path-segregate it. In such cases, you will want to use a different router instance, which has a huge number of ramifications: You'll need separate routing middleware. You'll need a separate UrlHelper instance, as well as its related middleware, if you are generating URIs. If you are generating HAL , you'll need: a separate URL generator for HAL that consumes the separate UrlHelper instance. a separate LinkGenerator for HAL that consumes the separate URL generator. a separate ResourceGenerator for HAL that consumes the separate LinkGenerator . These tasks can be accomplished by writing your own factories, but that means a lot of extra code, and the potential for the factories to go out-of-sync with the official factories for these services. What should you do? We provide details on how to accomplish these scenarios elsewhere: For modules not using HAL For modules using HAL","title":"Path-segregated routing"},{"location":"v3/cookbook/route-specific-pipeline/","text":"How can I specify a route-specific middleware pipeline? Sometimes you may want to use a middleware pipeline only if a particular route is matched. As an example, for an API resource, you might want to: check for authentication credentials check for authorization for the selected action parse the incoming body validate the parsed body parameters before you actually execute the selected middleware. The above might each be encapsulated as discrete middleware, but should be executed within the routed middleware's context. You can accomplish this in one of two ways: Have your middleware service resolve to a MiddlewarePipe instance that composes the various middlewares. Specify an array of middlewares (either as actual instances, or as container service names); this effectively creates and returns a MiddlewarePipe . Resolving to a MiddlewarePipe You can do this programmatically within a container factory, assuming you are using a container that supports factories. use Psr\\Container\\ContainerInterface; use Mezzio\\MiddlewareFactory; use Laminas\\Stratigility\\MiddlewarePipe; class ApiResourcePipelineFactory { public function __invoke(ContainerInterface $container) { $factory = $container-&gt;get(MiddlewareFactory::class); $pipeline = new MiddlewarePipe(); // These correspond to the bullet points above $pipeline-&gt;pipe($factory-&gt;prepare(AuthenticationMiddleware::class)); $pipeline-&gt;pipe($factory-&gt;prepare(AuthorizationMiddleware::class)); $pipeline-&gt;pipe($factory-&gt;prepare(BodyParsingMiddleware::class)); $pipeline-&gt;pipe($factory-&gt;prepare(ValidationMiddleware::class)); // This is the actual handler you're routing to: $pipeline-&gt;pipe($factory-&gt;prepare(ApiResource::class)); return $pipeline; } } $factory-&gt;prepare() is used here to allow lazy-loading each middleware and handler. If we instead pulled each class from the container directly, each would be created, even if it was not ultimately executed. This gives you full control over the creation of the pipeline. You would, however, need to ensure that you map the middleware to the pipeline factory when setting up your container configuration. One alternative when using laminas-servicemanager is to use a delegator factory . Delegator factories allow you to decorate the primary factory used to create the middleware in order to change the instance or return an alternate instance. In this case, we'd do the latter. The following is an example: use Psr\\Container\\ContainerInterface; use Mezzio\\MiddlewareFactory; use Laminas\\ServiceManager\\DelegatorFactoryInterface; use Laminas\\ServiceManager\\ServiceLocatorInterface; use Laminas\\Stratigility\\MiddlewarePipe; class ApiResourcePipelineDelegatorFactory implements DelegatorFactoryInterface { public function __invoke( ContainerInterface $container, $name, callable $callback, array $options = null ) : MiddlewarePipe { $factory = $container-&gt;get(MiddlewareFactory::class); $pipeline = new MiddlewarePipe(); // These correspond to the bullet points above $pipeline-&gt;pipe($factory-&gt;prepare(AuthenticationMiddleware::class)); $pipeline-&gt;pipe($factory-&gt;prepare(AuthorizationMiddleware::class)); $pipeline-&gt;pipe($factory-&gt;prepare(BodyParsingMiddleware::class)); $pipeline-&gt;pipe($factory-&gt;prepare(ValidationMiddleware::class)); // This is the actual handler you're routing to. $pipeline-&gt;pipe($callback()); return $pipeline; } } When configuring the container, you'd do something like the following: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ AuthenticationMiddleware::class =&gt; '...', AuthorizationMiddleware::class =&gt; '...', BodyParsingMiddleware::class =&gt; '...', ValidationMiddleware::class =&gt; '...', ApiResource::class =&gt; '...', ], 'delegators' =&gt; [ ApiResource::class =&gt; [ ApiResourcePipelineDelegatorFactory::class, ], ], ], ]; This approach allows you to cleanly separate the factory for your middleware from the pipeline you want to compose it in, and allows you to re-use the pipeline creation across multiple middleware if desired. Middleware Arrays If you'd rather not create a factory for each such middleware, the other option is to use arrays of middlewares when routing. $app-&gt;route('/api/resource[/{id:[a-f0-9]{32}}]', [ AuthenticationMiddleware::class, AuthorizationMiddleware::class, BodyParsingMiddleware::class, ValidationMiddleware::class, ApiResource::class, ], ['GET', 'POST', 'PATCH', 'DELETE'], 'api-resource'); When either of these approaches are used, the individual middleware listed MUST be one of the following: an instance of Psr\\Http\\Middleware\\MiddlewareInterface ; a callable middleware (will be decorated using Laminas\\Stratigility\\middleware() ); a service name of middleware available in the container; a fully qualified class name of a directly instantiable (no constructor arguments) middleware class. This approach is essentially equivalent to creating a factory that returns a middleware pipeline.","title":"Route-specific middleware pipelines"},{"location":"v3/cookbook/route-specific-pipeline/#how-can-i-specify-a-route-specific-middleware-pipeline","text":"Sometimes you may want to use a middleware pipeline only if a particular route is matched. As an example, for an API resource, you might want to: check for authentication credentials check for authorization for the selected action parse the incoming body validate the parsed body parameters before you actually execute the selected middleware. The above might each be encapsulated as discrete middleware, but should be executed within the routed middleware's context. You can accomplish this in one of two ways: Have your middleware service resolve to a MiddlewarePipe instance that composes the various middlewares. Specify an array of middlewares (either as actual instances, or as container service names); this effectively creates and returns a MiddlewarePipe .","title":"How can I specify a route-specific middleware pipeline?"},{"location":"v3/cookbook/route-specific-pipeline/#resolving-to-a-middlewarepipe","text":"You can do this programmatically within a container factory, assuming you are using a container that supports factories. use Psr\\Container\\ContainerInterface; use Mezzio\\MiddlewareFactory; use Laminas\\Stratigility\\MiddlewarePipe; class ApiResourcePipelineFactory { public function __invoke(ContainerInterface $container) { $factory = $container-&gt;get(MiddlewareFactory::class); $pipeline = new MiddlewarePipe(); // These correspond to the bullet points above $pipeline-&gt;pipe($factory-&gt;prepare(AuthenticationMiddleware::class)); $pipeline-&gt;pipe($factory-&gt;prepare(AuthorizationMiddleware::class)); $pipeline-&gt;pipe($factory-&gt;prepare(BodyParsingMiddleware::class)); $pipeline-&gt;pipe($factory-&gt;prepare(ValidationMiddleware::class)); // This is the actual handler you're routing to: $pipeline-&gt;pipe($factory-&gt;prepare(ApiResource::class)); return $pipeline; } } $factory-&gt;prepare() is used here to allow lazy-loading each middleware and handler. If we instead pulled each class from the container directly, each would be created, even if it was not ultimately executed. This gives you full control over the creation of the pipeline. You would, however, need to ensure that you map the middleware to the pipeline factory when setting up your container configuration. One alternative when using laminas-servicemanager is to use a delegator factory . Delegator factories allow you to decorate the primary factory used to create the middleware in order to change the instance or return an alternate instance. In this case, we'd do the latter. The following is an example: use Psr\\Container\\ContainerInterface; use Mezzio\\MiddlewareFactory; use Laminas\\ServiceManager\\DelegatorFactoryInterface; use Laminas\\ServiceManager\\ServiceLocatorInterface; use Laminas\\Stratigility\\MiddlewarePipe; class ApiResourcePipelineDelegatorFactory implements DelegatorFactoryInterface { public function __invoke( ContainerInterface $container, $name, callable $callback, array $options = null ) : MiddlewarePipe { $factory = $container-&gt;get(MiddlewareFactory::class); $pipeline = new MiddlewarePipe(); // These correspond to the bullet points above $pipeline-&gt;pipe($factory-&gt;prepare(AuthenticationMiddleware::class)); $pipeline-&gt;pipe($factory-&gt;prepare(AuthorizationMiddleware::class)); $pipeline-&gt;pipe($factory-&gt;prepare(BodyParsingMiddleware::class)); $pipeline-&gt;pipe($factory-&gt;prepare(ValidationMiddleware::class)); // This is the actual handler you're routing to. $pipeline-&gt;pipe($callback()); return $pipeline; } } When configuring the container, you'd do something like the following: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ AuthenticationMiddleware::class =&gt; '...', AuthorizationMiddleware::class =&gt; '...', BodyParsingMiddleware::class =&gt; '...', ValidationMiddleware::class =&gt; '...', ApiResource::class =&gt; '...', ], 'delegators' =&gt; [ ApiResource::class =&gt; [ ApiResourcePipelineDelegatorFactory::class, ], ], ], ]; This approach allows you to cleanly separate the factory for your middleware from the pipeline you want to compose it in, and allows you to re-use the pipeline creation across multiple middleware if desired.","title":"Resolving to a MiddlewarePipe"},{"location":"v3/cookbook/route-specific-pipeline/#middleware-arrays","text":"If you'd rather not create a factory for each such middleware, the other option is to use arrays of middlewares when routing. $app-&gt;route('/api/resource[/{id:[a-f0-9]{32}}]', [ AuthenticationMiddleware::class, AuthorizationMiddleware::class, BodyParsingMiddleware::class, ValidationMiddleware::class, ApiResource::class, ], ['GET', 'POST', 'PATCH', 'DELETE'], 'api-resource'); When either of these approaches are used, the individual middleware listed MUST be one of the following: an instance of Psr\\Http\\Middleware\\MiddlewareInterface ; a callable middleware (will be decorated using Laminas\\Stratigility\\middleware() ); a service name of middleware available in the container; a fully qualified class name of a directly instantiable (no constructor arguments) middleware class. This approach is essentially equivalent to creating a factory that returns a middleware pipeline.","title":"Middleware Arrays"},{"location":"v3/cookbook/setting-locale-depending-routing-parameter/","text":"How can I set up the locale depending on a routing parameter? Localized web applications often set the locale (and therefor the language) based on a routing parameter, the session, or a specialized sub-domain. In this recipe we will concentrate on using a routing parameter. Routing parameters Using the approach in this chapter requires that you add a /:locale (or similar) segment to each and every route that can be localized, and, depending on the router used, may also require additional options for specifying constraints. If the majority of your routes are localized, this will become tedious quickly. In such a case, you may want to look at the related recipe on setting the locale without routing parameters . Setting up the route If you want to set the locale depending on a routing parameter, you first have to add a locale parameter to each route that requires localization. In the following examples, we use the locale parameter, which should consist of two lowercase alphabetical characters. Dependency configuration The examples assume the following middleware dependency configuration: use App\\Handler; return [ 'dependencies' =&gt; [ 'factories' =&gt; [ Handler\\HomePageHandler::class =&gt; Handler\\HomePageHandlerFactory::class, Handler\\ContactPageHandler::class =&gt; Handler\\ContactPageFactory::class, ], ], ]; Programmatic routes The following describes routing configuration for use when using a programmatic application. use App\\Handler\\ContactPageHandler; use App\\Handler\\HomePageHandler; $localeOptions = ['locale' =&gt; '[a-z]{2,3}([-_][a-zA-Z]{2}|)']; $app-&gt;get('/:locale', HomePageHandler::class, 'home') -&gt;setOptions($localeOptions); $app-&gt;get('/:locale/contact', ContactPageHandler::class, 'contact') -&gt;setOptions($localeOptions); Note: Routing may differ based on router The routing examples in this recipe use syntax for the laminas-mvc router, and, as such, may not work in your application. For Aura.Router, the 'home' route as listed above would read: $app-&gt;get('/{locale}', HomePageHandler::class, 'home') -&gt;setOptions([ 'tokens' =&gt; [ 'locale' =&gt; '[a-z]{2,3}([-_][a-zA-Z]{2}|)', ], ]); For FastRoute: $app-&gt;get( '/{locale:[a-z]{2,3}([-_][a-zA-Z]{2}|)}', HomePageHandler::class, 'home' ); As such, be aware as you read the examples that you might not be able to simply cut-and-paste them without modification. Create a route result middleware class for localization To make sure that you can set up the locale after the routing has been processed, you need to implement localization middleware that acts on the route result, and registered in the pipeline immediately following the routing middleware. Such a LocalizationMiddleware class could look similar to this: &lt;?php namespace App\\I18n; use Locale; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class LocalizationMiddleware implements MiddlewareInterface { public const LOCALIZATION_ATTRIBUTE = 'locale'; public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { // Get locale from route, fallback to the user's browser preference $locale = $request-&gt;getAttribute( 'locale', Locale::acceptFromHttp( $request-&gt;getServerParams()['HTTP_ACCEPT_LANGUAGE'] ?? 'en_US' ) ); // Store the locale as a request attribute return $handler-&gt;handle($request-&gt;withAttribute(self::LOCALIZATION_ATTRIBUTE, $locale)); } } Locale::setDefault is unsafe Do not use Locale::setDefault($locale) to set a global static locale. PSR-15 apps may run in async processes, which could lead to another process overwriting the value, and thus lead to unexpected results for your users. Use a request parameter as detailed above instead, as the request is created specific to each process. Register this new middleware in either config/autoload/middleware-pipeline.global.php or config/autoload/dependencies.global.php : return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ LocalizationMiddleware::class =&gt; LocalizationMiddleware::class, /* ... */ ], /* ... */ ], ]; Pipe it immediately after your routing middleware: use App\\I18n\\LocalizationMiddleware; /* ... */ $app-&gt;pipe(RouteMiddleware::class); $app-&gt;pipe(LocalizationMiddleware::class); /* ... */","title":"Setting a locale based on a routing parameter"},{"location":"v3/cookbook/setting-locale-depending-routing-parameter/#how-can-i-set-up-the-locale-depending-on-a-routing-parameter","text":"Localized web applications often set the locale (and therefor the language) based on a routing parameter, the session, or a specialized sub-domain. In this recipe we will concentrate on using a routing parameter.","title":"How can I set up the locale depending on a routing parameter?"},{"location":"v3/cookbook/setting-locale-depending-routing-parameter/#setting-up-the-route","text":"If you want to set the locale depending on a routing parameter, you first have to add a locale parameter to each route that requires localization. In the following examples, we use the locale parameter, which should consist of two lowercase alphabetical characters.","title":"Setting up the route"},{"location":"v3/cookbook/setting-locale-depending-routing-parameter/#create-a-route-result-middleware-class-for-localization","text":"To make sure that you can set up the locale after the routing has been processed, you need to implement localization middleware that acts on the route result, and registered in the pipeline immediately following the routing middleware. Such a LocalizationMiddleware class could look similar to this: &lt;?php namespace App\\I18n; use Locale; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class LocalizationMiddleware implements MiddlewareInterface { public const LOCALIZATION_ATTRIBUTE = 'locale'; public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { // Get locale from route, fallback to the user's browser preference $locale = $request-&gt;getAttribute( 'locale', Locale::acceptFromHttp( $request-&gt;getServerParams()['HTTP_ACCEPT_LANGUAGE'] ?? 'en_US' ) ); // Store the locale as a request attribute return $handler-&gt;handle($request-&gt;withAttribute(self::LOCALIZATION_ATTRIBUTE, $locale)); } }","title":"Create a route result middleware class for localization"},{"location":"v3/cookbook/setting-locale-without-routing-parameter/","text":"How can I set up the locale without routing parameters? Localized web applications often set the locale (and therefore the language) based on a routing parameter, the session, or a specialized sub-domain. In this recipe we will concentrate on introspecting the URI path via middleware, which allows you to have a global mechanism for detecting the locale without requiring any changes to existing routes. Distinguishing between routes that require localization If your application has a mixture of routes that require localization, and those that do not, the solution in this recipe may lead to multiple URIs that resolve to the identical action, which may be undesirable. In such cases, you may want to prefix the specific routes that require localization with a required routing parameter; this approach is described in the \"Setting a locale based on a routing parameter\" recipe . Set up a middleware to extract the locale from the URI First, we need to set up middleware that extracts the locale param directly from the request URI's path. If it doesn't find one, it sets a default. If it does find one, it uses the value to set up the locale. It also: amends the request with a truncated path (removing the locale segment). adds the locale segment as the base path of the UrlHelper . &lt;?php namespace App\\I18n; use Locale; use Mezzio\\Helper\\UrlHelper; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class SetLocaleMiddleware implements MiddlewareInterface { private $helper; private $defaultLocale; private $fallbackLocale = 'en_US'; const REGEX_LOCALE = '#^/(?P&lt;locale&gt;[a-z]{2,3}|[a-z]{2}[-_][a-zA-Z]{2})(?:/|$)#'; public function __construct(UrlHelper $helper, string $defaultLocale = null) { $this-&gt;helper = $helper; if ($defaultLocale) { $this-&gt;defaultLocale = $defaultLocale; } } public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { $uri = $request-&gt;getUri(); $path = $uri-&gt;getPath(); if (! preg_match(self::REGEX_LOCALE, $path, $matches)) { Locale::setDefault($this-&gt;defaultLocale ?: $this-&gt;fallbackLocale); return $handler-&gt;handle($request); } $locale = $matches['locale']; Locale::setDefault(Locale::canonicalize($locale)); $this-&gt;helper-&gt;setBasePath($locale); $path = substr($path, strlen($locale) + 1); return $handler-&gt;handle($request-&gt;withUri( $uri-&gt;withPath($path ?: '/') )); } } Then you will need a factory for the SetLocaleMiddleware to inject the UrlHelper instance. &lt;?php namespace App\\I18n; use Mezzio\\Helper\\UrlHelper; use Psr\\Container\\ContainerInterface; /** * Configuration for setting a default locale should look like the following: * * &lt;code&gt; * 'i18n' =&gt; [ * 'default_locale' =&gt; 'de_DE', * ] * &lt;/code&gt; */ class SetLocaleMiddlewareFactory { public function __invoke(ContainerInterface $container) { $config = $container-&gt;has('config') ? $container-&gt;get('config') : []; return new SetLocaleMiddleware( $container-&gt;get(UrlHelper::class), $config['i18n']['default_locale'] ?? null ); } } Next, map the middleware to its factory in either /config/autoload/dependencies.global.php or /config/autoload/middleware-pipeline.global.php : use App\\I18n\\SetLocaleMiddleware; use App\\I18n\\SetLocaleMiddlewareFactory; return [ 'dependencies' =&gt; [ /* ... */ 'factories' =&gt; [ SetLocaleMiddleware::class =&gt; SetLocaleMiddlewareFactory::class, /* ... */ ], ], ]; Finally, you will need to configure your middleware pipeline to ensure this middleware is executed on every request. Pipe the middleware early in your application, before routing is performed: use App\\I18n\\SetLocaleMiddleware; /* ... */ $app-&gt;pipe(SetLocaleMiddleware::class); /* ... */ $app-&gt;pipe(RouteMiddleware::class); /* ... */ $app-&gt;pipe(DispatchMiddleware::class); /* ... */ Url generation in the view Since the UrlHelper has the locale set as a base path, you don't need to worry about generating URLs within your view. Just use the helper to generate a URL and it will do the rest. &lt;?= $this-&gt;url('your-route') ?&gt; Helpers differ between template renderers The above example is specific to laminas-view; syntax will differ for Twig and Plates. Redirecting within your request handlers If you want to add the locale parameter when creating URIs within your request handlers, you just need to inject the UrlHelper into your handler and use it for URL generation: &lt;?php namespace App\\Handler; use Laminas\\Diactoros\\Response\\RedirectResponse; use Mezzio\\Helper\\UrlHelper; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class RedirectHandler implements RequestHandlerInterface { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } public function handle(ServerRequestInterface $request) : ResponseInterface { $routeParams = [ /* ... */ ]; return new RedirectResponse( $this-&gt;helper-&gt;generate('your-route', $routeParams) ); } } Injecting the UrlHelper into your request handler will also require that the handler have a factory that manages the injection. As an example, the following would work for the above middleware: namespace App\\Handler; use Psr\\Container\\ContainerInterface; use Mezzio\\Helper\\UrlHelper; class RedirectHandlerFactory { public function __invoke(ContainerInterface $container) { return new RedirectHandler( $container-&gt;get(UrlHelper::class) ); } }","title":"Setting a locale without a routing parameter"},{"location":"v3/cookbook/setting-locale-without-routing-parameter/#how-can-i-set-up-the-locale-without-routing-parameters","text":"Localized web applications often set the locale (and therefore the language) based on a routing parameter, the session, or a specialized sub-domain. In this recipe we will concentrate on introspecting the URI path via middleware, which allows you to have a global mechanism for detecting the locale without requiring any changes to existing routes.","title":"How can I set up the locale without routing parameters?"},{"location":"v3/cookbook/setting-locale-without-routing-parameter/#set-up-a-middleware-to-extract-the-locale-from-the-uri","text":"First, we need to set up middleware that extracts the locale param directly from the request URI's path. If it doesn't find one, it sets a default. If it does find one, it uses the value to set up the locale. It also: amends the request with a truncated path (removing the locale segment). adds the locale segment as the base path of the UrlHelper . &lt;?php namespace App\\I18n; use Locale; use Mezzio\\Helper\\UrlHelper; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class SetLocaleMiddleware implements MiddlewareInterface { private $helper; private $defaultLocale; private $fallbackLocale = 'en_US'; const REGEX_LOCALE = '#^/(?P&lt;locale&gt;[a-z]{2,3}|[a-z]{2}[-_][a-zA-Z]{2})(?:/|$)#'; public function __construct(UrlHelper $helper, string $defaultLocale = null) { $this-&gt;helper = $helper; if ($defaultLocale) { $this-&gt;defaultLocale = $defaultLocale; } } public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { $uri = $request-&gt;getUri(); $path = $uri-&gt;getPath(); if (! preg_match(self::REGEX_LOCALE, $path, $matches)) { Locale::setDefault($this-&gt;defaultLocale ?: $this-&gt;fallbackLocale); return $handler-&gt;handle($request); } $locale = $matches['locale']; Locale::setDefault(Locale::canonicalize($locale)); $this-&gt;helper-&gt;setBasePath($locale); $path = substr($path, strlen($locale) + 1); return $handler-&gt;handle($request-&gt;withUri( $uri-&gt;withPath($path ?: '/') )); } } Then you will need a factory for the SetLocaleMiddleware to inject the UrlHelper instance. &lt;?php namespace App\\I18n; use Mezzio\\Helper\\UrlHelper; use Psr\\Container\\ContainerInterface; /** * Configuration for setting a default locale should look like the following: * * &lt;code&gt; * 'i18n' =&gt; [ * 'default_locale' =&gt; 'de_DE', * ] * &lt;/code&gt; */ class SetLocaleMiddlewareFactory { public function __invoke(ContainerInterface $container) { $config = $container-&gt;has('config') ? $container-&gt;get('config') : []; return new SetLocaleMiddleware( $container-&gt;get(UrlHelper::class), $config['i18n']['default_locale'] ?? null ); } } Next, map the middleware to its factory in either /config/autoload/dependencies.global.php or /config/autoload/middleware-pipeline.global.php : use App\\I18n\\SetLocaleMiddleware; use App\\I18n\\SetLocaleMiddlewareFactory; return [ 'dependencies' =&gt; [ /* ... */ 'factories' =&gt; [ SetLocaleMiddleware::class =&gt; SetLocaleMiddlewareFactory::class, /* ... */ ], ], ]; Finally, you will need to configure your middleware pipeline to ensure this middleware is executed on every request. Pipe the middleware early in your application, before routing is performed: use App\\I18n\\SetLocaleMiddleware; /* ... */ $app-&gt;pipe(SetLocaleMiddleware::class); /* ... */ $app-&gt;pipe(RouteMiddleware::class); /* ... */ $app-&gt;pipe(DispatchMiddleware::class); /* ... */","title":"Set up a middleware to extract the locale from the URI"},{"location":"v3/cookbook/setting-locale-without-routing-parameter/#url-generation-in-the-view","text":"Since the UrlHelper has the locale set as a base path, you don't need to worry about generating URLs within your view. Just use the helper to generate a URL and it will do the rest. &lt;?= $this-&gt;url('your-route') ?&gt;","title":"Url generation in the view"},{"location":"v3/cookbook/setting-locale-without-routing-parameter/#redirecting-within-your-request-handlers","text":"If you want to add the locale parameter when creating URIs within your request handlers, you just need to inject the UrlHelper into your handler and use it for URL generation: &lt;?php namespace App\\Handler; use Laminas\\Diactoros\\Response\\RedirectResponse; use Mezzio\\Helper\\UrlHelper; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class RedirectHandler implements RequestHandlerInterface { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } public function handle(ServerRequestInterface $request) : ResponseInterface { $routeParams = [ /* ... */ ]; return new RedirectResponse( $this-&gt;helper-&gt;generate('your-route', $routeParams) ); } } Injecting the UrlHelper into your request handler will also require that the handler have a factory that manages the injection. As an example, the following would work for the above middleware: namespace App\\Handler; use Psr\\Container\\ContainerInterface; use Mezzio\\Helper\\UrlHelper; class RedirectHandlerFactory { public function __invoke(ContainerInterface $container) { return new RedirectHandler( $container-&gt;get(UrlHelper::class) ); } }","title":"Redirecting within your request handlers"},{"location":"v3/cookbook/using-a-base-path/","text":"How can I tell my application about a base path? In some environments, your application may be running in a subdirectory of your web root. For example: var/ |- www/ | |- wordpress/ | |- mezzio/ | | |- public/ | | | |- index.php where /var/www is the web root, and your Mezzio application is in the mezzio/ subdirectory. How can you make your application work correctly in this environment? Configure Web Server Using Apache If you are using Apache, your first step is to add an .htaccess file to your application root, with directives for rewriting to the public/ directory: RewriteEngine On RewriteRule (.*) ./public/$1 Using Nginx If you are using Nginx, add a named location block to rewrite to the Mezzio web root directory within the server context. server { root /var/www/; location / { try_files $uri /index.php @mezzio; } location @mezzio { rewrite /(.*)$ /mezzio/public/index.php?/$1 last; } location ~ \\.php { fastcgi_pass 127.0.0.1:9000; fastcgi_split_path_info ^(.+\\.php)(/.*)$; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name; fastcgi_param DOCUMENT_ROOT $realpath_root; internal; } } More detail is provided on this in the official Nginx documentation . Using other web servers If you are using a web-server other than Apache or Nginx, and know how to do a similar rewrite, we'd love to know! Please submit ideas/instructions to our issue tracker ! Use middleware to rewrite the path The above step ensures that clients can hit the website. Now we need to ensure that the application can route to middleware! To do this, we will add pipeline middleware to intercept the request, and rewrite the URL accordingly. At the time of writing, we have two suggestions: los/basepath provides the basic mechanics of rewriting the URL. mtymek/blast-base-url provides the URL rewriting mechanics, as well as utilities for generating URIs that retain the base path. los/basepath To use los/basepath , install it via Composer, copy the configuration files to your application, and then edit the configuration. To install and copy the configuration: $ composer require los/basepath $ cp vendor/los/basepath/config/los-basepath.global.php.dist config/autoload/los-basepath.global.php We recommend copying the global configuration to a local configuration file as well; this allows you to have the production settings in your global configuration, and development settings in a local configuration (which is excluded from git by default): $ cp config/autoload/los-basepath.global.php config/autoload/los-basepath.local.php Then edit one or both, to change the los_basepath settings: return [ 'los_basepath' =&gt; '&lt;base path here&gt;', /* ... */ ]; The base path should be the portion of the web root leading up to the index.php of your application. In the above example, this would be /mezzio . mtymek/blast-base-url To use mtymek/blast-base-url , install it via Composer, and register some configuration. To install it: $ composer require mtymek/blast-base-url If you are using laminas-component-installer , you will be prompted to configure this package automatically. If you don't choose to do so, you please refer to Blast\\BaseUrl\\ConfigProvider class to see how to wire it manually. If using programmatic pipelines, pipe the middleware early in your pipeline (before routing): $app-&gt;pipe(\\Blast\\BaseUrl\\BaseUrlMiddleware::class); For configuration-driven pipelines, add an entry in your config/autoload/middleware-pipeline.global.php file: 'middleware_pipeline' =&gt; [ ['middleware' =&gt; [Blast\\BaseUrl\\BaseUrlMiddleware::class], 'priority' =&gt; 1000], /* ... */ ], At this point, the middleware will take care of the rewriting for you. No configuration is necessary, as it does auto-detection of the base path based on the request URI and the operating system path to the application. The primary advantage of mtymek/blast-base-url is in its additional features: it injects Mezzio\\Helper\\UrlHelper with the base path, allowing you to create relative route-based URLs. it provides a new helper, Blast\\BaseUrl\\BasePathHelper , which allows you to create URLs relative to the base path; this is particularly useful for assets. If you are using laminas-view as your templating engine, this view helper will be available out of the box. Usage of the BasePath helper is as follows: // where $basePathHelper is an instance of Blast\\BaseUrl\\BasePathHelper // as pulled from your container: echo $basePathHelper('/icons/favicon.ico'); // or, from laminas-view's PhpRenderer: echo $this-&gt;basePath('/icons/favicon.ico');","title":"Using Mezzio from a subdirectory"},{"location":"v3/cookbook/using-a-base-path/#how-can-i-tell-my-application-about-a-base-path","text":"In some environments, your application may be running in a subdirectory of your web root. For example: var/ |- www/ | |- wordpress/ | |- mezzio/ | | |- public/ | | | |- index.php where /var/www is the web root, and your Mezzio application is in the mezzio/ subdirectory. How can you make your application work correctly in this environment?","title":"How can I tell my application about a base path?"},{"location":"v3/cookbook/using-a-base-path/#configure-web-server","text":"","title":"Configure Web Server"},{"location":"v3/cookbook/using-a-base-path/#use-middleware-to-rewrite-the-path","text":"The above step ensures that clients can hit the website. Now we need to ensure that the application can route to middleware! To do this, we will add pipeline middleware to intercept the request, and rewrite the URL accordingly. At the time of writing, we have two suggestions: los/basepath provides the basic mechanics of rewriting the URL. mtymek/blast-base-url provides the URL rewriting mechanics, as well as utilities for generating URIs that retain the base path.","title":"Use middleware to rewrite the path"},{"location":"v3/cookbook/using-custom-view-helpers/","text":"How do you register custom view helpers when using laminas-view? If you've selected laminas-view as your preferred template renderer, you may want to define and use custom view helpers. How can you use them? Assuming you've used the Mezzio skeleton to start your application, you will already have a factory defined for Laminas\\View\\HelperPluginManager , and it will be injected into the PhpRenderer instance used. Since the HelperPluginManager is available, we can configure it. Open the file config/autoload/templates.global.php . In that file, you'll see three top-level keys: return [ 'dependencies' =&gt; [ /* ... */ ], 'templates' =&gt; [ /* ... */ ], 'view_helpers' =&gt; [ /* ... */ ], ]; The last is the one you want. In this, you can define service mappings, including aliases, invokables, factories, and abstract factories to define how helpers are named and created. See the laminas-view custom helpers documentation for information on how to populate this configuration.","title":"Registering custom view helpers when using laminas-view"},{"location":"v3/cookbook/using-custom-view-helpers/#how-do-you-register-custom-view-helpers-when-using-laminas-view","text":"If you've selected laminas-view as your preferred template renderer, you may want to define and use custom view helpers. How can you use them? Assuming you've used the Mezzio skeleton to start your application, you will already have a factory defined for Laminas\\View\\HelperPluginManager , and it will be injected into the PhpRenderer instance used. Since the HelperPluginManager is available, we can configure it. Open the file config/autoload/templates.global.php . In that file, you'll see three top-level keys: return [ 'dependencies' =&gt; [ /* ... */ ], 'templates' =&gt; [ /* ... */ ], 'view_helpers' =&gt; [ /* ... */ ], ]; The last is the one you want. In this, you can define service mappings, including aliases, invokables, factories, and abstract factories to define how helpers are named and created. See the laminas-view custom helpers documentation for information on how to populate this configuration.","title":"How do you register custom view helpers when using laminas-view?"},{"location":"v3/cookbook/using-laminas-form-view-helpers/","text":"How can I use laminas-form view helpers? If you've selected laminas-view as your preferred template renderer, you'll likely want to use the various view helpers available in other components, such as: laminas-form laminas-i18n laminas-navigation By default, only the view helpers directly available in laminas-view are available; how can you add the others? ConfigProvider When you install laminas-form, Composer should prompt you if you want to inject one or more ConfigProvider classes, including those from laminas-hydrator, laminas-inputfilter, and several others. Always answer \"yes\" to these; when you do, a Composer plugin will add entries for their ConfigProvider classes to your config/config.php file. If for some reason you are not prompted, or chose \"no\" when answering the prompts, you can add them manually. Add the following entries in the array used to create your ConfigAggregator instance within config/config.php : \\Laminas\\Form\\ConfigProvider::class, \\Laminas\\InputFilter\\ConfigProvider::class, \\Laminas\\Filter\\ConfigProvider::class, \\Laminas\\Validator\\ConfigProvider::class, \\Laminas\\Hydrator\\ConfigProvider::class, If you installed Mezzio via the skeleton, the service Laminas\\View\\HelperPluginManager is registered for you, and represents the helper plugin manager injected into the PhpRenderer instance. This instance gets its helper configuration from the view_helpers top-level configuration key — which the laminas-form ConfigProvider helps to populate! At this point, all view helpers provided by laminas-form are registered and ready to use.","title":"Using laminas-form view helpers"},{"location":"v3/cookbook/using-laminas-form-view-helpers/#how-can-i-use-laminas-form-view-helpers","text":"If you've selected laminas-view as your preferred template renderer, you'll likely want to use the various view helpers available in other components, such as: laminas-form laminas-i18n laminas-navigation By default, only the view helpers directly available in laminas-view are available; how can you add the others?","title":"How can I use laminas-form view helpers?"},{"location":"v3/cookbook/using-laminas-form-view-helpers/#configprovider","text":"When you install laminas-form, Composer should prompt you if you want to inject one or more ConfigProvider classes, including those from laminas-hydrator, laminas-inputfilter, and several others. Always answer \"yes\" to these; when you do, a Composer plugin will add entries for their ConfigProvider classes to your config/config.php file. If for some reason you are not prompted, or chose \"no\" when answering the prompts, you can add them manually. Add the following entries in the array used to create your ConfigAggregator instance within config/config.php : \\Laminas\\Form\\ConfigProvider::class, \\Laminas\\InputFilter\\ConfigProvider::class, \\Laminas\\Filter\\ConfigProvider::class, \\Laminas\\Validator\\ConfigProvider::class, \\Laminas\\Hydrator\\ConfigProvider::class, If you installed Mezzio via the skeleton, the service Laminas\\View\\HelperPluginManager is registered for you, and represents the helper plugin manager injected into the PhpRenderer instance. This instance gets its helper configuration from the view_helpers top-level configuration key — which the laminas-form ConfigProvider helps to populate! At this point, all view helpers provided by laminas-form are registered and ready to use.","title":"ConfigProvider"},{"location":"v3/features/application/","text":"Applications In mezzio, you define a Mezzio\\Application instance and execute it. The Application instance is itself middleware that composes: a Mezzio\\MiddlewareFactory instance, used to prepare middleware arguments to pipe into: a Laminas\\Stratigility\\MiddlewarePipe instance, representing the application middleware pipeline. a Mezzio\\Router\\RouteCollector instance, used to create Mezzio\\Router\\Route instances based on a combination of paths and HTTP methods, and which also injects created instances into the application's router. a Laminas\\HttpHandlerRunner\\RequestHandlerRunner instance which will ultimately be responsible for marshaling the incoming request, passing it to the MiddlewarePipe , and emitting the response. You can define the Application instance in two ways: Direct instantiation, which requires providing several dependencies. Via a dependency injection container; we provide a factory for setting up all aspects of the instance via configuration and other defined services. Regardless of how you set up the instance, there are several methods you will likely interact with at some point or another. Instantiation Constructor If you wish to manually instantiate the Application instance, it has the following constructor: public function __construct( Mezzio\\MiddlewareFactory $factory, Laminas\\Stratigility\\MiddlewarePipeInterface $pipeline, Mezzio\\Router\\RouteCollectorInterface $routes, Laminas\\HttpHandlerRunner\\RequestHandlerRunner $runner ) { Container factory We also provide a factory that can be consumed by a PSR-11 dependency injection container; see the container factories documentation for details. Adding routable middleware We discuss routing vs piping elsewhere ; routing is the act of dynamically matching an incoming request against criteria, and it is one of the primary features of mezzio. Regardless of which router implementation you use, you can use the following Application methods to provide routable middleware: route() route() has the following signature: public function route( string $path, $middleware, array $methods = null, string $name = null ) : Mezzio\\Router\\Route where: $path must be a string path to match. $middleware must be: a service name that resolves to valid middleware in the container; a fully qualified class name of a constructor-less class that represents a PSR-15 MiddlewareInterface or RequestHandlerInterface instance; an array of any of the above; these will be composed in order into a Laminas\\Stratigility\\MiddlewarePipe instance. $methods must be an array of HTTP methods valid for the given path and middleware. If null, it assumes any method is valid. $name is the optional name for the route, and is used when generating a URI from known routes. See the section on route naming for details. This method is typically only used if you want a single middleware to handle multiple HTTP request methods. get(), post(), put(), patch(), delete(), any() Each of the methods get() , post() , put() , patch() , delete() , and any() proxies to route() and has the signature: function ( string $path, $middleware, string $name = null ) : Mezzio\\Router\\Route Essentially, each calls route() and specifies an array consisting solely of the corresponding HTTP method for the $methods argument. Piping Because mezzio builds on laminas-stratigility , and, more specifically, its MiddlewarePipe definition, you can also pipe (queue) middleware to the application. This is useful for adding middleware that should execute on each request, defining error handlers, and/or segregating applications by subpath. The signature of pipe() is: public function pipe($middlewareOrPath, $middleware = null) where: $middlewareOrPath is either a string URI path (for path segregation), PSR-15 MiddlewareInterface or RequestHandlerInterface , or the service name for a middleware or request handler to fetch from the composed container. $middleware is required if $middlewareOrPath is a string URI path. It can be one of: a service name that resolves to valid middleware in the container; a fully qualified class name of a constructor-less class that represents a PSR-15 MiddlewareInterface or RequestHandlerInterface instance; an array of any of the above; these will be composed in order into a Laminas\\Stratigility\\MiddlewarePipe instance. Unlike Laminas\\Stratigility\\MiddlewarePipe , Application::pipe() allows fetching middleware and request handlers by service name . This facility allows lazy-loading of middleware only when it is invoked. Internally, it wraps the call to fetch and dispatch the middleware inside a Mezzio\\Middleware\\LazyLoadingMiddleware instance. Read the section on piping vs routing for more information. Registering routing and dispatch middleware Routing and dispatch middleware must be piped to the application like any other middleware. You can do so using the following: $app-&gt;pipe(Mezzio\\Router\\Middleware\\RouteMiddleware::class); $app-&gt;pipe(Mezzio\\Router\\Middleware\\DispatchMiddleware::class); We recommend piping the following middleware between the two as well: $app-&gt;pipe(Mezzio\\Router\\Middleware\\ImplicitHeadMiddleware::class); $app-&gt;pipe(Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware::class); $app-&gt;pipe(Mezzio\\Router\\Middleware\\MethodNotAllowedMiddleware::class); These allow your application to return: HEAD requests for handlers that do not specifically allow HEAD ; these will return with a 200 status, and any headers normally returned with a GET request. OPTIONS requests for handlers that do not specifically allow OPTIONS ; these will return with a 200 status, and an Allow header indicating all allowed HTTP methods for the given route match. 405 statuses when the route matches, but not the HTTP method; these will also include an Allow header indicating all allowed HTTP methods. See the section on piping to see how you can register non-routed middleware and create layered middleware applications. Executing the application: run() When the application is completely setup, you can execute it with the run() method. The method proxies to the underlying RequestHandlerRunner , which will create a PSR-7 server request instance, pass it to the composed middleware pipeline, and then emit the response returned.","title":"Applications"},{"location":"v3/features/application/#applications","text":"In mezzio, you define a Mezzio\\Application instance and execute it. The Application instance is itself middleware that composes: a Mezzio\\MiddlewareFactory instance, used to prepare middleware arguments to pipe into: a Laminas\\Stratigility\\MiddlewarePipe instance, representing the application middleware pipeline. a Mezzio\\Router\\RouteCollector instance, used to create Mezzio\\Router\\Route instances based on a combination of paths and HTTP methods, and which also injects created instances into the application's router. a Laminas\\HttpHandlerRunner\\RequestHandlerRunner instance which will ultimately be responsible for marshaling the incoming request, passing it to the MiddlewarePipe , and emitting the response. You can define the Application instance in two ways: Direct instantiation, which requires providing several dependencies. Via a dependency injection container; we provide a factory for setting up all aspects of the instance via configuration and other defined services. Regardless of how you set up the instance, there are several methods you will likely interact with at some point or another.","title":"Applications"},{"location":"v3/features/application/#instantiation","text":"","title":"Instantiation"},{"location":"v3/features/application/#adding-routable-middleware","text":"We discuss routing vs piping elsewhere ; routing is the act of dynamically matching an incoming request against criteria, and it is one of the primary features of mezzio. Regardless of which router implementation you use, you can use the following Application methods to provide routable middleware:","title":"Adding routable middleware"},{"location":"v3/features/application/#executing-the-application-run","text":"When the application is completely setup, you can execute it with the run() method. The method proxies to the underlying RequestHandlerRunner , which will create a PSR-7 server request instance, pass it to the composed middleware pipeline, and then emit the response returned.","title":"Executing the application: run()"},{"location":"v3/features/emitters/","text":"Emitters To simplify the usage of Mezzio, we added the run() method, which handles the incoming request, and emits a response. The latter aspect, emitting the response, is the responsibility of an emitter . An emitter accepts a response instance, and then does something with it, usually sending the response back to a browser. The laminas/laminas-httphandlerrunner package defines an EmitterInterface , and three emitter implementations. Two of these, Laminas\\HttpHandlerRunner\\Emitter\\SapiEmitter and Laminas\\HttpHandlerRunner\\Emitter\\SapiStreamEmitter , send headers and output using PHP's standard SAPI mechanisms (the header() method and the output buffer). We recognize that there are times when you may want to use alternate emitter implementations; for example, if you use React , the SAPI emitter will likely not work for you. To facilitate alternate emitters, we offer two facilities: First, a Laminas\\HttpHandlerRunner\\RequestHandlerRunner instance is composed in the Application instance, and you can specify an alternate emitter during instantiation, or via the Laminas\\HttpHandlerRunner\\Emitter\\EmitterInterface service when using the container factory. Second, we provide Laminas\\HttpHandlerRunner\\Emitter\\EmitterStack , which allows you to compose multiple emitter strategies; the first to return a boolean true will cause execution of the stack to short-circuit. The RequestHandlerRunner service composes an EmitterStack by default, with an SapiEmitter composed at the bottom of the stack.","title":"Emitters"},{"location":"v3/features/emitters/#emitters","text":"To simplify the usage of Mezzio, we added the run() method, which handles the incoming request, and emits a response. The latter aspect, emitting the response, is the responsibility of an emitter . An emitter accepts a response instance, and then does something with it, usually sending the response back to a browser. The laminas/laminas-httphandlerrunner package defines an EmitterInterface , and three emitter implementations. Two of these, Laminas\\HttpHandlerRunner\\Emitter\\SapiEmitter and Laminas\\HttpHandlerRunner\\Emitter\\SapiStreamEmitter , send headers and output using PHP's standard SAPI mechanisms (the header() method and the output buffer). We recognize that there are times when you may want to use alternate emitter implementations; for example, if you use React , the SAPI emitter will likely not work for you. To facilitate alternate emitters, we offer two facilities: First, a Laminas\\HttpHandlerRunner\\RequestHandlerRunner instance is composed in the Application instance, and you can specify an alternate emitter during instantiation, or via the Laminas\\HttpHandlerRunner\\Emitter\\EmitterInterface service when using the container factory. Second, we provide Laminas\\HttpHandlerRunner\\Emitter\\EmitterStack , which allows you to compose multiple emitter strategies; the first to return a boolean true will cause execution of the stack to short-circuit. The RequestHandlerRunner service composes an EmitterStack by default, with an SapiEmitter composed at the bottom of the stack.","title":"Emitters"},{"location":"v3/features/error-handling/","text":"Error Handling We recommend that your code raise exceptions for conditions where it cannot gracefully recover. Additionally, we recommend that you have a reasonable PHP error_reporting setting that includes warnings and fatal errors: error_reporting(E_ALL &amp; ~E_USER_DEPRECATED &amp; ~E_DEPRECATED &amp; ~E_STRICT &amp; ~E_NOTICE); If you follow these guidelines, you can then write or use middleware that does the following: sets an error handler that converts PHP errors to ErrorException instances. wraps execution of the handler ( $handler-&gt;handle() ) with a try/catch block. As an example: function (ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { set_error_handler(function ($errno, $errstr, $errfile, $errline) { if (! (error_reporting() &amp; $errno)) { // Error is not in mask return; } throw new ErrorException($errstr, 0, $errno, $errfile, $errline); }); try { $response = $handler-&gt;handle($request); return $response; } catch (Throwable $e) { } restore_error_handler(); $response = new TextResponse(sprintf( \"[%d] %s\\n\\n%s\", $e-&gt;getCode(), $e-&gt;getMessage(), $e-&gt;getTraceAsString() ), 500); } You would then pipe this as the outermost (or close to outermost) layer of your application: $app-&gt;pipe($errorMiddleware); There Is an Easier Way So that you do not need to do this, we provide an error handler for you, via laminas-stratigility: Laminas\\Stratigility\\Middleware\\ErrorHandler . This implementation allows you to both: provide a response generator, invoked when an error is caught; and register listeners to trigger when errors are caught. We provide the factory Mezzio\\Container\\ErrorHandlerFactory for generating the instance; it should be mapped to the service Laminas\\Stratigility\\Middleware\\ErrorHandler . We provide two error response generators for you: Mezzio\\Middleware\\ErrorResponseGenerator , which optionally will accept a Mezzio\\Template\\TemplateRendererInterface instance, and a template name. When present, these will be used to generate response content; otherwise, a plain text response is generated that notes the request method and URI. Since version 3.1.0, it also accepts a layout name, if you want to use one other than layout::default . Mezzio\\Middleware\\WhoopsErrorResponseGenerator , which uses whoops to present detailed exception and request information; this implementation is intended for development purposes. Each also has an accompanying factory for generating the instance: Mezzio\\Container\\ErrorResponseGeneratorFactory Mezzio\\Container\\WhoopsErrorResponseGeneratorFactory Map the service Mezzio\\Middleware\\ErrorResponseGenerator to one of these two factories in your configuration: use Laminas\\Stratigility\\Middleware\\ErrorHandler; use Mezzio\\Container; use Mezzio\\Middleware; return [ 'dependencies' =&gt; [ 'factories' =&gt; [ ErrorHandler::class =&gt; Container\\ErrorHandlerFactory::class, Middleware\\ErrorResponseGenerator::class =&gt; Container\\ErrorResponseGeneratorFactory::class, ], ], ]; Use development mode configuration to enable whoops You can specify the above in one of your config/autoload/*.global.php files, to ensure you have a production-capable error response generator. If you are using laminas-development-mode in your application (which is provided by default in the skeleton application), you can toggle usage of whoops by adding configuration to the file config/autoload/development.local.php.dist : use Mezzio\\Container; use Mezzio\\Middleware; return [ 'dependencies' =&gt; [ 'factories' =&gt; [ Middleware\\WhoopsErrorResponseGenerator::class =&gt; Container\\WhoopsErrorResponseGeneratorFactory::class, ], ], ]; When you enable development mode, whoops will then be enabled; when you disable development mode, you'll be using your production generator. If you are not using laminas-development-mode, you can define a config/autoload/*.local.php file with the above configuration whenever you want to enable whoops. Listening for errors When errors occur, you may want to listen for them in order to provide features such as logging. Laminas\\Stratigility\\Middleware\\ErrorHandler provides the ability to do so via its attachListener() method. This method accepts a callable with the following signature: function ( Throwable $error, ServerRequestInterface $request, ResponseInterface $response ) : void The response provided is the response returned by your error response generator, allowing the listener the ability to introspect the generated response as well. As an example, you could create a logging listener as follows: &lt;?php namespace Acme; use Exception; use Psr\\Log\\LoggerInterface; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Throwable; class LoggingErrorListener { /** * Log format for messages: * * STATUS [METHOD] path: message */ const LOG_FORMAT = '%d [%s] %s: %s'; private $logger; public function __construct(LoggerInterface $logger) { $this-&gt;logger = $logger; } public function __invoke(Throwable $error, ServerRequestInterface $request, ResponseInterface $response) { $this-&gt;logger-&gt;error(sprintf( self::LOG_FORMAT, $response-&gt;getStatusCode(), $request-&gt;getMethod(), (string) $request-&gt;getUri(), $error-&gt;getMessage() )); } } You could then use a delegator factory to create your logger listener and attach it to your error handler: &lt;?php namespace Acme; use Psr\\Container\\ContainerInterface; use Psr\\Log\\LoggerInterface; use Laminas\\Stratigility\\Middleware\\ErrorHandler; class LoggingErrorListenerDelegatorFactory { public function __invoke(ContainerInterface $container, string $name, callable $callback) : ErrorHandler { $listener = new LoggingErrorListener($container-&gt;get(LoggerInterface::class)); $errorHandler = $callback(); $errorHandler-&gt;attachListener($listener); return $errorHandler; } } Then, enable the delegator factory in your application, such as by adding the following to the getDependencies() function in your app or module’s ConfigProvider.php file. public function getDependencies(): array { return [ 'factories' =&gt; [ // … ], 'delegators' =&gt; [ ErrorHandler::class =&gt; [ LoggingErrorListenerDelegatorFactory::class, ], ], ]; } ## Handling more specific error types You could also write more specific error handlers. As an example, you might want to catch `UnauthorizedException` instances specifically, and display a login page: ```php function (ServerRequestInterface $request, RequestHandlerInterface $handler) use ($renderer) : ResponseInterface { try { $response = $handler-&gt;handle($request); return $response; } catch (UnauthorizedException $e) { } return new HtmlResponse( $renderer-&gt;render('error::unauthorized'), 401 ); } You could then push this into a middleware pipe only when it's needed: $app-&gt;get('/dashboard', [ $unauthorizedHandlerMiddleware, $middlewareThatChecksForAuthorization, $middlewareBehindAuthorizationWall, ], 'dashboard'); Page not found Error handlers work at the outermost layer, and are used to catch exceptions and errors in your application. At the innermost layer of your application, you should ensure you have middleware that is guaranteed to return a response; this prevents errors in your application in the event that the application exhausts the middleware queue. This in turn allows you to fully craft what sort of response is returned in such conditions. Generally speaking, reaching the innermost middleware layer indicates that no middleware was capable of handling the request, and thus an HTTP 404 Not Found condition. To simplify such responses, we provide Mezzio\\Handler\\NotFoundHandler . It will report a 404 response, optionally using a composed template renderer to do so. We provide a factory, Mezzio\\Container\\NotFoundHandlerFactory , for creating an instance, which we detail elsewhere . You should pipe it as the innermost layer of your application: // A basic application: $app-&gt;pipe(ErrorHandler::class); // . . . $app-&gt;pipe(RouteMiddleware::class); // . . . $app-&gt;pipe(DispatchMiddleware::class); $app-&gt;pipe(NotFoundHandler::class); If you wish to provide an alternate response status or use a canned response, you should provide your own handler and pipe it to your application.","title":"Error Handling"},{"location":"v3/features/error-handling/#error-handling","text":"We recommend that your code raise exceptions for conditions where it cannot gracefully recover. Additionally, we recommend that you have a reasonable PHP error_reporting setting that includes warnings and fatal errors: error_reporting(E_ALL &amp; ~E_USER_DEPRECATED &amp; ~E_DEPRECATED &amp; ~E_STRICT &amp; ~E_NOTICE); If you follow these guidelines, you can then write or use middleware that does the following: sets an error handler that converts PHP errors to ErrorException instances. wraps execution of the handler ( $handler-&gt;handle() ) with a try/catch block. As an example: function (ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { set_error_handler(function ($errno, $errstr, $errfile, $errline) { if (! (error_reporting() &amp; $errno)) { // Error is not in mask return; } throw new ErrorException($errstr, 0, $errno, $errfile, $errline); }); try { $response = $handler-&gt;handle($request); return $response; } catch (Throwable $e) { } restore_error_handler(); $response = new TextResponse(sprintf( \"[%d] %s\\n\\n%s\", $e-&gt;getCode(), $e-&gt;getMessage(), $e-&gt;getTraceAsString() ), 500); } You would then pipe this as the outermost (or close to outermost) layer of your application: $app-&gt;pipe($errorMiddleware);","title":"Error Handling"},{"location":"v3/features/error-handling/#there-is-an-easier-way","text":"So that you do not need to do this, we provide an error handler for you, via laminas-stratigility: Laminas\\Stratigility\\Middleware\\ErrorHandler . This implementation allows you to both: provide a response generator, invoked when an error is caught; and register listeners to trigger when errors are caught. We provide the factory Mezzio\\Container\\ErrorHandlerFactory for generating the instance; it should be mapped to the service Laminas\\Stratigility\\Middleware\\ErrorHandler . We provide two error response generators for you: Mezzio\\Middleware\\ErrorResponseGenerator , which optionally will accept a Mezzio\\Template\\TemplateRendererInterface instance, and a template name. When present, these will be used to generate response content; otherwise, a plain text response is generated that notes the request method and URI. Since version 3.1.0, it also accepts a layout name, if you want to use one other than layout::default . Mezzio\\Middleware\\WhoopsErrorResponseGenerator , which uses whoops to present detailed exception and request information; this implementation is intended for development purposes. Each also has an accompanying factory for generating the instance: Mezzio\\Container\\ErrorResponseGeneratorFactory Mezzio\\Container\\WhoopsErrorResponseGeneratorFactory Map the service Mezzio\\Middleware\\ErrorResponseGenerator to one of these two factories in your configuration: use Laminas\\Stratigility\\Middleware\\ErrorHandler; use Mezzio\\Container; use Mezzio\\Middleware; return [ 'dependencies' =&gt; [ 'factories' =&gt; [ ErrorHandler::class =&gt; Container\\ErrorHandlerFactory::class, Middleware\\ErrorResponseGenerator::class =&gt; Container\\ErrorResponseGeneratorFactory::class, ], ], ];","title":"There Is an Easier Way"},{"location":"v3/features/error-handling/#listening-for-errors","text":"When errors occur, you may want to listen for them in order to provide features such as logging. Laminas\\Stratigility\\Middleware\\ErrorHandler provides the ability to do so via its attachListener() method. This method accepts a callable with the following signature: function ( Throwable $error, ServerRequestInterface $request, ResponseInterface $response ) : void The response provided is the response returned by your error response generator, allowing the listener the ability to introspect the generated response as well. As an example, you could create a logging listener as follows: &lt;?php namespace Acme; use Exception; use Psr\\Log\\LoggerInterface; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Throwable; class LoggingErrorListener { /** * Log format for messages: * * STATUS [METHOD] path: message */ const LOG_FORMAT = '%d [%s] %s: %s'; private $logger; public function __construct(LoggerInterface $logger) { $this-&gt;logger = $logger; } public function __invoke(Throwable $error, ServerRequestInterface $request, ResponseInterface $response) { $this-&gt;logger-&gt;error(sprintf( self::LOG_FORMAT, $response-&gt;getStatusCode(), $request-&gt;getMethod(), (string) $request-&gt;getUri(), $error-&gt;getMessage() )); } } You could then use a delegator factory to create your logger listener and attach it to your error handler: &lt;?php namespace Acme; use Psr\\Container\\ContainerInterface; use Psr\\Log\\LoggerInterface; use Laminas\\Stratigility\\Middleware\\ErrorHandler; class LoggingErrorListenerDelegatorFactory { public function __invoke(ContainerInterface $container, string $name, callable $callback) : ErrorHandler { $listener = new LoggingErrorListener($container-&gt;get(LoggerInterface::class)); $errorHandler = $callback(); $errorHandler-&gt;attachListener($listener); return $errorHandler; } } Then, enable the delegator factory in your application, such as by adding the following to the getDependencies() function in your app or module’s ConfigProvider.php file. public function getDependencies(): array { return [ 'factories' =&gt; [ // … ], 'delegators' =&gt; [ ErrorHandler::class =&gt; [ LoggingErrorListenerDelegatorFactory::class, ], ], ]; } ## Handling more specific error types You could also write more specific error handlers. As an example, you might want to catch `UnauthorizedException` instances specifically, and display a login page: ```php function (ServerRequestInterface $request, RequestHandlerInterface $handler) use ($renderer) : ResponseInterface { try { $response = $handler-&gt;handle($request); return $response; } catch (UnauthorizedException $e) { } return new HtmlResponse( $renderer-&gt;render('error::unauthorized'), 401 ); } You could then push this into a middleware pipe only when it's needed: $app-&gt;get('/dashboard', [ $unauthorizedHandlerMiddleware, $middlewareThatChecksForAuthorization, $middlewareBehindAuthorizationWall, ], 'dashboard');","title":"Listening for errors"},{"location":"v3/features/error-handling/#page-not-found","text":"Error handlers work at the outermost layer, and are used to catch exceptions and errors in your application. At the innermost layer of your application, you should ensure you have middleware that is guaranteed to return a response; this prevents errors in your application in the event that the application exhausts the middleware queue. This in turn allows you to fully craft what sort of response is returned in such conditions. Generally speaking, reaching the innermost middleware layer indicates that no middleware was capable of handling the request, and thus an HTTP 404 Not Found condition. To simplify such responses, we provide Mezzio\\Handler\\NotFoundHandler . It will report a 404 response, optionally using a composed template renderer to do so. We provide a factory, Mezzio\\Container\\NotFoundHandlerFactory , for creating an instance, which we detail elsewhere . You should pipe it as the innermost layer of your application: // A basic application: $app-&gt;pipe(ErrorHandler::class); // . . . $app-&gt;pipe(RouteMiddleware::class); // . . . $app-&gt;pipe(DispatchMiddleware::class); $app-&gt;pipe(NotFoundHandler::class); If you wish to provide an alternate response status or use a canned response, you should provide your own handler and pipe it to your application.","title":"Page not found"},{"location":"v3/features/middleware-types/","text":"Middleware Types Mezzio allows you to compose applications out of pipeline and routed middleware. Pipeline middleware is middleware that defines the workflow of your application. These generally run on every execution of the application, and include such aspects as: Error handling Locale detection Session setup Authentication and authorization Routed middleware is middleware that responds only to specific URI paths and HTTP methods. As an example, you might want middleware that only responds to HTTP POST requests to the path /users . Mezzio allows you to define middleware using any of the following: PSR-15 middleware instances. PSR-15 request handler instances. Service names resolving to one of the above middleware types. Callable middleware that implements the PSR-15 MiddlewareInterface signature. Middleware pipelines expressed as arrays of the above middleware types. PSR-15 middleware The PSR-15 specification covers HTTP server middleware and request handlers that consume PSR-7 HTTP messages. Mezzio accepts both middleware that implements the MiddlewareInterface and request handlers that implement RequestHandlerInterface . As an example: use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; class SomeMiddleware implements MiddlewareInterface { public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { // do something and return a response, or // delegate to another request handler capable // of returning a response via: // // return $handler-&gt;handle($request); } } You could also implement such middleware via an anonymous class. Callable middleware Sometimes you may not want to create a class for one-off middleware. As such, Mezzio allows you to provide a PHP callable that uses the same signature as Psr\\Http\\Server\\MiddlewareInterface : use Psr\\Http\\Server\\RequestHandlerInterface; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; function (ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { // do something and return a response, or // delegate to another request handler capable // of returning a response via: // // return $handler-&gt;handle($request); } One note: neither argument require a typehint, and examples throughout the manual will omit the typehints when demonstrating callable middleware. Service-based middleware We encourage the use of a dependency injection container for providing your middleware. As such, Mezzio also allows you to use service names for both pipeline and routed middleware. Generally, service names will be the specific middleware class names, but can be any valid string that resolves to a service. When Mezzio is provided a service name for middleware, it internally decorates the middleware in a Mezzio\\Middleware\\LazyLoadingMiddleware instance, allowing it to be loaded only when dispatched. Middleware pipelines Mezzio allows any pipeline or routed middleware to be self-contained middleware pipelines . To prevent the need for instantiating a Laminas\\Stratigility\\MiddlewarePipe instance when defining the pipeline, Mezzio allows you to provide an array of middleware: // Pipeline middleware: $app-&gt;pipe([ FirstMiddleware::class, SecondMiddleware::class, ]); // Routed middleware: $app-&gt;get('/foo', [ FirstMiddleware::class, SecondMiddleware::class, ]); The values in these arrays may be any valid middleware type as defined in this chapter.","title":"Middleware Types"},{"location":"v3/features/middleware-types/#middleware-types","text":"Mezzio allows you to compose applications out of pipeline and routed middleware. Pipeline middleware is middleware that defines the workflow of your application. These generally run on every execution of the application, and include such aspects as: Error handling Locale detection Session setup Authentication and authorization Routed middleware is middleware that responds only to specific URI paths and HTTP methods. As an example, you might want middleware that only responds to HTTP POST requests to the path /users . Mezzio allows you to define middleware using any of the following: PSR-15 middleware instances. PSR-15 request handler instances. Service names resolving to one of the above middleware types. Callable middleware that implements the PSR-15 MiddlewareInterface signature. Middleware pipelines expressed as arrays of the above middleware types.","title":"Middleware Types"},{"location":"v3/features/middleware-types/#psr-15-middleware","text":"The PSR-15 specification covers HTTP server middleware and request handlers that consume PSR-7 HTTP messages. Mezzio accepts both middleware that implements the MiddlewareInterface and request handlers that implement RequestHandlerInterface . As an example: use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; class SomeMiddleware implements MiddlewareInterface { public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { // do something and return a response, or // delegate to another request handler capable // of returning a response via: // // return $handler-&gt;handle($request); } } You could also implement such middleware via an anonymous class.","title":"PSR-15 middleware"},{"location":"v3/features/middleware-types/#callable-middleware","text":"Sometimes you may not want to create a class for one-off middleware. As such, Mezzio allows you to provide a PHP callable that uses the same signature as Psr\\Http\\Server\\MiddlewareInterface : use Psr\\Http\\Server\\RequestHandlerInterface; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; function (ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { // do something and return a response, or // delegate to another request handler capable // of returning a response via: // // return $handler-&gt;handle($request); } One note: neither argument require a typehint, and examples throughout the manual will omit the typehints when demonstrating callable middleware.","title":"Callable middleware"},{"location":"v3/features/middleware-types/#service-based-middleware","text":"We encourage the use of a dependency injection container for providing your middleware. As such, Mezzio also allows you to use service names for both pipeline and routed middleware. Generally, service names will be the specific middleware class names, but can be any valid string that resolves to a service. When Mezzio is provided a service name for middleware, it internally decorates the middleware in a Mezzio\\Middleware\\LazyLoadingMiddleware instance, allowing it to be loaded only when dispatched.","title":"Service-based middleware"},{"location":"v3/features/middleware-types/#middleware-pipelines","text":"Mezzio allows any pipeline or routed middleware to be self-contained middleware pipelines . To prevent the need for instantiating a Laminas\\Stratigility\\MiddlewarePipe instance when defining the pipeline, Mezzio allows you to provide an array of middleware: // Pipeline middleware: $app-&gt;pipe([ FirstMiddleware::class, SecondMiddleware::class, ]); // Routed middleware: $app-&gt;get('/foo', [ FirstMiddleware::class, SecondMiddleware::class, ]); The values in these arrays may be any valid middleware type as defined in this chapter.","title":"Middleware pipelines"},{"location":"v3/features/modular-applications/","text":"Modular applications Laminas+ applications have a concept of modules , independent units that can provide configuration, services, and hooks into its MVC lifecycle. This functionality is provided by laminas-modulemanager. Mezzio provides similar functionality by incorporating two packages within the default skeleton application: laminas/laminas-config-aggregator , which provides features for aggregating configuration from a variety of sources, including: PHP files globbed from the filesystem that return an array of configuration. laminas-config -compatible configuration files globbed from the filesystem. Configuration provider classes; these are invokable classes which return an array of configuration. laminas/laminas-component-installer , a Composer plugin that looks for an extra.laminas.config-provider entry in a package to install, and, if found, adds an entry for that provider to the config/config.php file (if it uses laminas-config-aggregator). These features allow you to install packages via composer and expose their configuration — which may include dependency information — to your application. Making your application modular When using the Mezzio installer via the skeleton application, the first question asked is the installation type, which includes the options: Minimal (no default middleware, templates, or assets; configuration only) Flat (flat source code structure; default selection) Modular (modular source code structure; recommended) We recommend choosing the \"Modular\" option from the outset. If you do not, you can still create and use modules in your application; however, the initial \"App\" module will not be modular. Module structure Mezzio does not force you to use any particular structure for your module; its only requirement is to expose default configuration using a \"config provider\", which is simply an invokable class that returns a configuration array. We generally recommend that a module have a PSR-4 structure, and that the module contain a src/ directory at the minimum, along with directories for other module-specific content, such as templates, tests, and assets: src/ Acme/ src/ ConfigProvider.php Helper/ AuthorizationHelper.php Middleware/ VerifyUser.php VerifyUserFactory.php templates/ verify-user.php test/ Helper/ AuthorizationHelperTest.php Middleware/ VerifyUserTest.php If you use the above structure, you would then add an entry in your composer.json file to provide autoloading: \"autoload\": { \"psr-4\": { \"Acme\\\\\": \"src/Acme/src/\" } } Don't forget to execute composer dump-autoload after making the change! Creating and enabling a module The only requirement for creating a module is that you define a \"config provider\", which is simply an invokable class that returns a configuration array. Generally, a config provider will return dependency information, and module-specific configuration: namespace Acme; class ConfigProvider { public function __invoke() { return [ 'dependencies' =&gt; $this-&gt;getDependencies(), 'acme' =&gt; [ 'some-setting' =&gt; 'default value', ], 'templates' =&gt; [ 'paths' =&gt; [ 'acme' =&gt; [__DIR__ . '/../templates'], ], ], ]; } public function getDependencies() { return [ 'invokables' =&gt; [ Helper\\AuthorizationHelper::class =&gt; Helper\\AuthorizationHelper::class, ], 'factories' =&gt; [ Middleware\\VerifyUser::class =&gt; Container\\VerifyUserFactory::class, ], ]; } } You would then add the config provider to the top (or towards the top) of your config/config.php : $aggregator = new ConfigAggregator([ Acme\\ConfigProvider::class, /* ... */ This approach allows your config/autoload/* files to take precedence over the module configuration, allowing you to override the values. Caching configuration In order to provide configuration caching, two things must occur: First, you must define a config_cache_enabled key in your configuration somewhere. Second, you must pass a second argument to the ConfigManager , the location of the cache file to use. The config_cache_enabled key can be defined in any of your configuration providers, including the autoloaded configuration files. We recommend defining them in two locations: config/autoload/global.php should define the value to true , as the production setting. config/autoload/local.php should also define the setting, and use a value appropriate to the current environment. In development, for instance, this would be false . // config/autoload/global.php return [ 'config_cache_enabled' =&gt; true, /* ... */ ]; // config/autoload/local.php return [ 'config_cache_enabled' =&gt; false, // &lt;- development! /* ... */ ]; You would then alter your config/config.php file to add the second argument. The following example builds on the previous, and demonstrates having the AppConfig entry enabled. The configuration will be cached to data/config-cache.php in the application root: $configManager = new ConfigManager([ App\\AppConfig::class, new PhpFileProvider('config/autoload/{{,*.}global,{,*.}local}.php'), ], 'data/config-cache.php'); When the configuration cache path is present, if the config_cache_enabled flag is enabled, then configuration will be read from the cached configuration, instead of parsing and merging the various configuration sources. Tooling support The skeleton ships with mezzio-tooling by default, which allows you to execute the following command in order to create a module skeleton, add and enable autoloading rules for it, and register it with your application: $ composer mezzio module:create {ModuleName} We recommend using this tool when creating new modules. Final notes This approach may look simple, but it is flexible and powerful: You pass a list of config providers to the ConfigAggregator constructor. Configuration is merged in the same order as it is passed, with later entries having precedence. You can override module configuration using *.global.php and *.local.php files. If cached config is found, ConfigAggregator does not iterate over provider list. For more details, please refer to the laminas-config-aggregator documentation .","title":"Modular Applications"},{"location":"v3/features/modular-applications/#modular-applications","text":"Laminas+ applications have a concept of modules , independent units that can provide configuration, services, and hooks into its MVC lifecycle. This functionality is provided by laminas-modulemanager. Mezzio provides similar functionality by incorporating two packages within the default skeleton application: laminas/laminas-config-aggregator , which provides features for aggregating configuration from a variety of sources, including: PHP files globbed from the filesystem that return an array of configuration. laminas-config -compatible configuration files globbed from the filesystem. Configuration provider classes; these are invokable classes which return an array of configuration. laminas/laminas-component-installer , a Composer plugin that looks for an extra.laminas.config-provider entry in a package to install, and, if found, adds an entry for that provider to the config/config.php file (if it uses laminas-config-aggregator). These features allow you to install packages via composer and expose their configuration — which may include dependency information — to your application.","title":"Modular applications"},{"location":"v3/features/modular-applications/#making-your-application-modular","text":"When using the Mezzio installer via the skeleton application, the first question asked is the installation type, which includes the options: Minimal (no default middleware, templates, or assets; configuration only) Flat (flat source code structure; default selection) Modular (modular source code structure; recommended) We recommend choosing the \"Modular\" option from the outset. If you do not, you can still create and use modules in your application; however, the initial \"App\" module will not be modular.","title":"Making your application modular"},{"location":"v3/features/modular-applications/#module-structure","text":"Mezzio does not force you to use any particular structure for your module; its only requirement is to expose default configuration using a \"config provider\", which is simply an invokable class that returns a configuration array. We generally recommend that a module have a PSR-4 structure, and that the module contain a src/ directory at the minimum, along with directories for other module-specific content, such as templates, tests, and assets: src/ Acme/ src/ ConfigProvider.php Helper/ AuthorizationHelper.php Middleware/ VerifyUser.php VerifyUserFactory.php templates/ verify-user.php test/ Helper/ AuthorizationHelperTest.php Middleware/ VerifyUserTest.php If you use the above structure, you would then add an entry in your composer.json file to provide autoloading: \"autoload\": { \"psr-4\": { \"Acme\\\\\": \"src/Acme/src/\" } } Don't forget to execute composer dump-autoload after making the change!","title":"Module structure"},{"location":"v3/features/modular-applications/#creating-and-enabling-a-module","text":"The only requirement for creating a module is that you define a \"config provider\", which is simply an invokable class that returns a configuration array. Generally, a config provider will return dependency information, and module-specific configuration: namespace Acme; class ConfigProvider { public function __invoke() { return [ 'dependencies' =&gt; $this-&gt;getDependencies(), 'acme' =&gt; [ 'some-setting' =&gt; 'default value', ], 'templates' =&gt; [ 'paths' =&gt; [ 'acme' =&gt; [__DIR__ . '/../templates'], ], ], ]; } public function getDependencies() { return [ 'invokables' =&gt; [ Helper\\AuthorizationHelper::class =&gt; Helper\\AuthorizationHelper::class, ], 'factories' =&gt; [ Middleware\\VerifyUser::class =&gt; Container\\VerifyUserFactory::class, ], ]; } } You would then add the config provider to the top (or towards the top) of your config/config.php : $aggregator = new ConfigAggregator([ Acme\\ConfigProvider::class, /* ... */ This approach allows your config/autoload/* files to take precedence over the module configuration, allowing you to override the values.","title":"Creating and enabling a module"},{"location":"v3/features/modular-applications/#caching-configuration","text":"In order to provide configuration caching, two things must occur: First, you must define a config_cache_enabled key in your configuration somewhere. Second, you must pass a second argument to the ConfigManager , the location of the cache file to use. The config_cache_enabled key can be defined in any of your configuration providers, including the autoloaded configuration files. We recommend defining them in two locations: config/autoload/global.php should define the value to true , as the production setting. config/autoload/local.php should also define the setting, and use a value appropriate to the current environment. In development, for instance, this would be false . // config/autoload/global.php return [ 'config_cache_enabled' =&gt; true, /* ... */ ]; // config/autoload/local.php return [ 'config_cache_enabled' =&gt; false, // &lt;- development! /* ... */ ]; You would then alter your config/config.php file to add the second argument. The following example builds on the previous, and demonstrates having the AppConfig entry enabled. The configuration will be cached to data/config-cache.php in the application root: $configManager = new ConfigManager([ App\\AppConfig::class, new PhpFileProvider('config/autoload/{{,*.}global,{,*.}local}.php'), ], 'data/config-cache.php'); When the configuration cache path is present, if the config_cache_enabled flag is enabled, then configuration will be read from the cached configuration, instead of parsing and merging the various configuration sources.","title":"Caching configuration"},{"location":"v3/features/modular-applications/#tooling-support","text":"The skeleton ships with mezzio-tooling by default, which allows you to execute the following command in order to create a module skeleton, add and enable autoloading rules for it, and register it with your application: $ composer mezzio module:create {ModuleName} We recommend using this tool when creating new modules.","title":"Tooling support"},{"location":"v3/features/modular-applications/#final-notes","text":"This approach may look simple, but it is flexible and powerful: You pass a list of config providers to the ConfigAggregator constructor. Configuration is merged in the same order as it is passed, with later entries having precedence. You can override module configuration using *.global.php and *.local.php files. If cached config is found, ConfigAggregator does not iterate over provider list. For more details, please refer to the laminas-config-aggregator documentation .","title":"Final notes"},{"location":"v3/features/container/aura-di/","text":"Using Aura.Di Aura.Di provides a serializable dependency injection container with the following features: constructor and setter injection. inheritance of constructor parameter and setter method values from parent classes. inheritance of setter method values from interfaces and traits. lazy-loaded instances, services, includes/requires, and values. instance factories. optional auto-resolution of typehinted constructor parameter values. Installing Aura.Di Aura.Di implements PSR-11 as of version 3. To use Aura.Di as a dependency injection container, we recommend using laminas/laminas-auradi-config , which helps you to configure its container. First, install the package: $ composer require laminas/laminas-auradi-config Configuration To configure Aura.Di, create the file config/container.php with the following contents: &lt;?php use Laminas\\AuraDi\\Config\\Config; use Laminas\\AuraDi\\Config\\ContainerFactory; $config = require __DIR__ . '/config.php'; $factory = new ContainerFactory(); return $factory(new Config($config)); Your bootstrap (typically public/index.php ) will then look like this: chdir(dirname(__DIR__)); require 'vendor/autoload.php'; $container = require 'config/container.php'; $app = $container-&gt;get(Mezzio\\Application::class); require 'config/pipeline.php'; require 'config/routes.php'; $app-&gt;run(); For more information, please see the laminas-auradi-config documentation","title":"Using Aura.Di"},{"location":"v3/features/container/aura-di/#using-auradi","text":"Aura.Di provides a serializable dependency injection container with the following features: constructor and setter injection. inheritance of constructor parameter and setter method values from parent classes. inheritance of setter method values from interfaces and traits. lazy-loaded instances, services, includes/requires, and values. instance factories. optional auto-resolution of typehinted constructor parameter values.","title":"Using Aura.Di"},{"location":"v3/features/container/aura-di/#installing-auradi","text":"Aura.Di implements PSR-11 as of version 3. To use Aura.Di as a dependency injection container, we recommend using laminas/laminas-auradi-config , which helps you to configure its container. First, install the package: $ composer require laminas/laminas-auradi-config","title":"Installing Aura.Di"},{"location":"v3/features/container/aura-di/#configuration","text":"To configure Aura.Di, create the file config/container.php with the following contents: &lt;?php use Laminas\\AuraDi\\Config\\Config; use Laminas\\AuraDi\\Config\\ContainerFactory; $config = require __DIR__ . '/config.php'; $factory = new ContainerFactory(); return $factory(new Config($config)); Your bootstrap (typically public/index.php ) will then look like this: chdir(dirname(__DIR__)); require 'vendor/autoload.php'; $container = require 'config/container.php'; $app = $container-&gt;get(Mezzio\\Application::class); require 'config/pipeline.php'; require 'config/routes.php'; $app-&gt;run(); For more information, please see the laminas-auradi-config documentation","title":"Configuration"},{"location":"v3/features/container/config/","text":"Container configuration This chapter is primarily written for container providers, so that they know what configuration features must be compatible, and what compatibility ultimately means within the project. PSR-11 defines an interface for dependency injection containers, and that interface is geared towards consumption of the container — not population of it. Mezzio consumes a PSR-11 container, but also provides configuration for a container: it defines what services it needs, and how to create them. As such, any container consumed by Mezzio must also understand its configuration format, and deliver consistent understanding of that format when providing services based on it. This document describes the configuration format, and details expectations for implementations. The format Container configuration is provided within the dependencies key of configuration. That key is structured as follows: return [ 'dependencies' =&gt; [ 'services' =&gt; [ // name =&gt; instance pairs 'config' =&gt; $config, ], 'aliases' =&gt; [ // alias =&gt; target pairs 'page-handler' =&gt; SomePageHandler::class, ], 'factories' =&gt; [ // service =&gt; factory pairs SomePageHandler::class =&gt; SomePageHandlerFactory::class, ], 'invokables' =&gt; [ // service =&gt; instantiable class pairs SomeInstantiableClass::class =&gt; SomeInstantiableClass::class, 'an-alias-for' =&gt; SomeInstantiableClass::class, ], 'delegators' =&gt; [ // service =&gt; array of delegator factory pairs SomeInstantiableClass::class =&gt; [ InjectListenersDelegator::class, InjectLoggerDelegator::class, ], ], ], ]; Services Services are actual instances you want to retrieve later from the container. These are generally provided at initial creation; the config service is populated in this way. When retrieving a service mapped in this way, you will always receive the initial instance. Aliases Aliases map a service alias to another service, and are provided as key/value pairs. As an example: 'aliases' =&gt; [ 'Mezzio\\Delegate\\DefaultDelegate' =&gt; \\Mezzio\\Handler\\NotFoundHandler::class, ], In this case, if the service named \"Mezzio\\Delegate\\DefaultDelegate\" is requested, the container should resolve that to the service Mezzio\\Handler\\NotFoundHandler and return that instead. Aliases may reference any other service defined in the container. These include services defined under the keys: services factories invokables or even other aliases When returning an aliased service, the container MUST return the same instance as if the target service were retrieved. When aliases may reference other aliases, the rule applies to the final resolved service, and not any intermediary aliases. Factories Factories map a service name to the factory capable of producing the instance. A factory is any PHP callable capable of producing the instance: Function names Closures Class instances that define the method __invoke() Callable references to static methods Array callables referencing static or instance methods They may also be the class name of a directly instantiable class (no constructor arguments) that defines __invoke() . Generally, this latter convention is used, as class names are serializable, while closures, objects, and array callables often are not. Factories are guaranteed to receive the PSR-11 container as an argument, allowing you to pull other services from the container as necessary to fulfill dependencies of the class being created and returned. Additionally, containers SHOULD pass the service name requested as the second argument; factories can determine whether that argument is necessary. A typical factory will generally ignore the second argument: use Psr\\Container\\ContainerInterface; use Mezzio\\Template\\TemplateRendererInterface; class SomePageHandlerFactory { public function __invoke(ContainerInterface $container) { return new SomePageHandler( $container-&gt;get(TemplateRendererInterface::class) ); } } You can, however, re-use a factory for multiple services by accepting the second argument and varying creation based on it: use Psr\\Container\\ContainerInterface; use Mezzio\\Template\\TemplateRendererInterface; class PageFactory { public function __invoke(ContainerInterface $container, string $serviceName) { $name = strtolower($serviceName); return new PageHandler( $container-&gt;get(TemplateRendererInterface::class), $name ); }; } The above could be mapped for several services: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ 'hello-world' =&gt; PageFactory::class, 'about' =&gt; PageFactory::class, ], ], ]; In general, services should be cached by the container after initial creation; factories should only be called once for any given service name. Invokables Invokables refer to any class that may be instantiated without any constructor arguments. In other words, one should be able to create an instance solely be calling new $className() . Configuration for invokables looks verbose; it's a map of the service name to the class name to instantiate, and, generally, these are the same values. However, you can also provide a different service name. In those situations, containers MUST treat the service name as an alias to the final class name, and allow retrieving the service by EITHER the alias OR the class name. As an example, given the following configuration: 'dependencies' =&gt; [ 'invokables' =&gt; [ 'HelloWorld' =&gt; PageAction::class, ], ], the container should allow retrieval of both the services \"HelloWorld\" as well as the \"PageAction\" class. Delegator Factories Delegator factories are factories that may be used to decorate or manipulate a service before returning it from the container. They are covered in detail in another chapter , and delegator factories have the following signature: use Psr\\Container\\ContainerInterface; function ( ContainerInterface $container, string $serviceName, callable $callback ) Configuration for delegator factories is using the \"delegators\" sub-key of the \"dependencies\" configuration. Each entry is a service name pointing to an array of delegator factories. Delegator factories are called in the order they appear in configuration. For the first delegator factory, the $callback argument will be essentially the return value of $container-&gt;get() for the given service if there were no delegator factories attached to it ; in other words, it would be the invokable or service returned by a factory , after alias resolution. Delegators DO NOT operate on items in the services configuration! All items in the services configuration are considered complete, and will always be served as-is. Each delegator then returns a value, and that value will be what $callback returns for the next delegator. If the delegator is the last in the list, then what it returns becomes the final value for the service in the container; subsequent calls to $container-&gt;get() for that service will return that value. Delegators MUST return a value! For container implementors, delegators MUST only be called when initially creating the service, and not each time a service is retrieved. Common use cases for delegators include: Decorating an instance so that it may be used in another context (e.g., decorating a PHP callable to be used as PSR-15 middleware). Injecting collaborators (e.g., adding listeners to the ErrorHandler ). Conditionally replacing an instance based on configuration (e.g., swapping debug-enabled middleware for production middleware). Other capabilities Selection of a dependency injection container should be based on capabilities that implementation provides. This may be performance, or it may be additional features beyond those specified here. We encourage application developers to make full use of the container they select. The only caveat is that the above features MUST be supported by implementations for compatibility purposes, and the above are the only features package providers may count on when providing container configuration. Examples of how the above capabilities may be implemented include: laminas/laminas-auradi-config laminas/laminas-pimple-config jsoumelidis/zend-sf-di-config","title":"Container configuration"},{"location":"v3/features/container/config/#container-configuration","text":"This chapter is primarily written for container providers, so that they know what configuration features must be compatible, and what compatibility ultimately means within the project. PSR-11 defines an interface for dependency injection containers, and that interface is geared towards consumption of the container — not population of it. Mezzio consumes a PSR-11 container, but also provides configuration for a container: it defines what services it needs, and how to create them. As such, any container consumed by Mezzio must also understand its configuration format, and deliver consistent understanding of that format when providing services based on it. This document describes the configuration format, and details expectations for implementations.","title":"Container configuration"},{"location":"v3/features/container/config/#the-format","text":"Container configuration is provided within the dependencies key of configuration. That key is structured as follows: return [ 'dependencies' =&gt; [ 'services' =&gt; [ // name =&gt; instance pairs 'config' =&gt; $config, ], 'aliases' =&gt; [ // alias =&gt; target pairs 'page-handler' =&gt; SomePageHandler::class, ], 'factories' =&gt; [ // service =&gt; factory pairs SomePageHandler::class =&gt; SomePageHandlerFactory::class, ], 'invokables' =&gt; [ // service =&gt; instantiable class pairs SomeInstantiableClass::class =&gt; SomeInstantiableClass::class, 'an-alias-for' =&gt; SomeInstantiableClass::class, ], 'delegators' =&gt; [ // service =&gt; array of delegator factory pairs SomeInstantiableClass::class =&gt; [ InjectListenersDelegator::class, InjectLoggerDelegator::class, ], ], ], ];","title":"The format"},{"location":"v3/features/container/config/#services","text":"Services are actual instances you want to retrieve later from the container. These are generally provided at initial creation; the config service is populated in this way. When retrieving a service mapped in this way, you will always receive the initial instance.","title":"Services"},{"location":"v3/features/container/config/#aliases","text":"Aliases map a service alias to another service, and are provided as key/value pairs. As an example: 'aliases' =&gt; [ 'Mezzio\\Delegate\\DefaultDelegate' =&gt; \\Mezzio\\Handler\\NotFoundHandler::class, ], In this case, if the service named \"Mezzio\\Delegate\\DefaultDelegate\" is requested, the container should resolve that to the service Mezzio\\Handler\\NotFoundHandler and return that instead. Aliases may reference any other service defined in the container. These include services defined under the keys: services factories invokables or even other aliases When returning an aliased service, the container MUST return the same instance as if the target service were retrieved. When aliases may reference other aliases, the rule applies to the final resolved service, and not any intermediary aliases.","title":"Aliases"},{"location":"v3/features/container/config/#factories","text":"Factories map a service name to the factory capable of producing the instance. A factory is any PHP callable capable of producing the instance: Function names Closures Class instances that define the method __invoke() Callable references to static methods Array callables referencing static or instance methods They may also be the class name of a directly instantiable class (no constructor arguments) that defines __invoke() . Generally, this latter convention is used, as class names are serializable, while closures, objects, and array callables often are not. Factories are guaranteed to receive the PSR-11 container as an argument, allowing you to pull other services from the container as necessary to fulfill dependencies of the class being created and returned. Additionally, containers SHOULD pass the service name requested as the second argument; factories can determine whether that argument is necessary. A typical factory will generally ignore the second argument: use Psr\\Container\\ContainerInterface; use Mezzio\\Template\\TemplateRendererInterface; class SomePageHandlerFactory { public function __invoke(ContainerInterface $container) { return new SomePageHandler( $container-&gt;get(TemplateRendererInterface::class) ); } } You can, however, re-use a factory for multiple services by accepting the second argument and varying creation based on it: use Psr\\Container\\ContainerInterface; use Mezzio\\Template\\TemplateRendererInterface; class PageFactory { public function __invoke(ContainerInterface $container, string $serviceName) { $name = strtolower($serviceName); return new PageHandler( $container-&gt;get(TemplateRendererInterface::class), $name ); }; } The above could be mapped for several services: return [ 'dependencies' =&gt; [ 'factories' =&gt; [ 'hello-world' =&gt; PageFactory::class, 'about' =&gt; PageFactory::class, ], ], ]; In general, services should be cached by the container after initial creation; factories should only be called once for any given service name.","title":"Factories"},{"location":"v3/features/container/config/#invokables","text":"Invokables refer to any class that may be instantiated without any constructor arguments. In other words, one should be able to create an instance solely be calling new $className() . Configuration for invokables looks verbose; it's a map of the service name to the class name to instantiate, and, generally, these are the same values. However, you can also provide a different service name. In those situations, containers MUST treat the service name as an alias to the final class name, and allow retrieving the service by EITHER the alias OR the class name. As an example, given the following configuration: 'dependencies' =&gt; [ 'invokables' =&gt; [ 'HelloWorld' =&gt; PageAction::class, ], ], the container should allow retrieval of both the services \"HelloWorld\" as well as the \"PageAction\" class.","title":"Invokables"},{"location":"v3/features/container/config/#delegator-factories","text":"Delegator factories are factories that may be used to decorate or manipulate a service before returning it from the container. They are covered in detail in another chapter , and delegator factories have the following signature: use Psr\\Container\\ContainerInterface; function ( ContainerInterface $container, string $serviceName, callable $callback ) Configuration for delegator factories is using the \"delegators\" sub-key of the \"dependencies\" configuration. Each entry is a service name pointing to an array of delegator factories. Delegator factories are called in the order they appear in configuration. For the first delegator factory, the $callback argument will be essentially the return value of $container-&gt;get() for the given service if there were no delegator factories attached to it ; in other words, it would be the invokable or service returned by a factory , after alias resolution. Delegators DO NOT operate on items in the services configuration! All items in the services configuration are considered complete, and will always be served as-is. Each delegator then returns a value, and that value will be what $callback returns for the next delegator. If the delegator is the last in the list, then what it returns becomes the final value for the service in the container; subsequent calls to $container-&gt;get() for that service will return that value. Delegators MUST return a value! For container implementors, delegators MUST only be called when initially creating the service, and not each time a service is retrieved. Common use cases for delegators include: Decorating an instance so that it may be used in another context (e.g., decorating a PHP callable to be used as PSR-15 middleware). Injecting collaborators (e.g., adding listeners to the ErrorHandler ). Conditionally replacing an instance based on configuration (e.g., swapping debug-enabled middleware for production middleware).","title":"Delegator Factories"},{"location":"v3/features/container/config/#other-capabilities","text":"Selection of a dependency injection container should be based on capabilities that implementation provides. This may be performance, or it may be additional features beyond those specified here. We encourage application developers to make full use of the container they select. The only caveat is that the above features MUST be supported by implementations for compatibility purposes, and the above are the only features package providers may count on when providing container configuration. Examples of how the above capabilities may be implemented include: laminas/laminas-auradi-config laminas/laminas-pimple-config jsoumelidis/zend-sf-di-config","title":"Other capabilities"},{"location":"v3/features/container/delegator-factories/","text":"Delegator Factories Mezzio supports the concept of delegator factories , which allow decoration of services created by your dependency injection container, across all dependency injection containers supported by Mezzio. Delegator factories accept the following arguments: The container itself; The name of the service whose creation is being decorated; A callback that will produce the service being decorated. As an example, let's say we have a UserRepository class that composes some sort of event manager. We might want to attach listeners to that event manager, but not wish to alter the basic creation logic for the repository itself. As such, we might write a delegator factory as follows: namespace Acme; use Psr\\Container\\ContainerInterface; use Psr\\Log\\LoggerInterface; class UserRepositoryListenerDelegatorFactory { public function __invoke(ContainerInterface $container, string $name, callable $callback) : UserRepository { $listener = new LoggerListener($container-&gt;get(LoggerInterface::class)); $repository = $callback(); $repository-&gt;getEventManager()-&gt;attach($listener); return $repository; } } To notify the container about this delegator factory, we would add the following configuration to our application: 'dependencies' =&gt; [ 'delegators' =&gt; [ Acme\\UserRepository::class =&gt; [ Acme\\UserRepositoryListenerDelegatorFactory::class, ], ], ], Note that you specify delegator factories using the service name being decorated as the key, with an array of delegator factories as a value. You may attach multiple delegator factories to any given service , which can be a very powerful feature. At the time of writing, this feature works for each of the Aura.Di, Pimple, and laminas-servicemanager container implementations.","title":"Delegator Factories"},{"location":"v3/features/container/delegator-factories/#delegator-factories","text":"Mezzio supports the concept of delegator factories , which allow decoration of services created by your dependency injection container, across all dependency injection containers supported by Mezzio. Delegator factories accept the following arguments: The container itself; The name of the service whose creation is being decorated; A callback that will produce the service being decorated. As an example, let's say we have a UserRepository class that composes some sort of event manager. We might want to attach listeners to that event manager, but not wish to alter the basic creation logic for the repository itself. As such, we might write a delegator factory as follows: namespace Acme; use Psr\\Container\\ContainerInterface; use Psr\\Log\\LoggerInterface; class UserRepositoryListenerDelegatorFactory { public function __invoke(ContainerInterface $container, string $name, callable $callback) : UserRepository { $listener = new LoggerListener($container-&gt;get(LoggerInterface::class)); $repository = $callback(); $repository-&gt;getEventManager()-&gt;attach($listener); return $repository; } } To notify the container about this delegator factory, we would add the following configuration to our application: 'dependencies' =&gt; [ 'delegators' =&gt; [ Acme\\UserRepository::class =&gt; [ Acme\\UserRepositoryListenerDelegatorFactory::class, ], ], ], Note that you specify delegator factories using the service name being decorated as the key, with an array of delegator factories as a value. You may attach multiple delegator factories to any given service , which can be a very powerful feature. At the time of writing, this feature works for each of the Aura.Di, Pimple, and laminas-servicemanager container implementations.","title":"Delegator Factories"},{"location":"v3/features/container/factories/","text":"Provided Factories Mezzio provides several factories compatible with PSR-11 Container to facilitate setting up common dependencies. The following is a list of provided factories, what they will create, the suggested service name, and any additional dependencies they may require. mezzio The mezzio package ships Mezzio\\ConfigProvider , which defines configuration that references each of these factories, using the suggested names; this provider is registered by default when using the skeleton application. All factories, unless noted otherwise, are in the Mezzio\\Container namespace, and define an __invoke() method that accepts an Psr\\Container\\ContainerInterface instance as the sole argument. ApplicationFactory Provides : Mezzio\\Application Suggested Name : Mezzio\\Application Requires : Mezzio\\MiddlewareFactory Mezzio\\ApplicationPipeline , which should resolve to a Laminas\\Stratigility\\MiddlewarePipe instance. Mezzio\\Router\\RouteCollector Laminas\\HttpHandlerRunner\\RequestHandlerRunner Optional : no optional services are used. ApplicationPipelineFactory Provides : a Laminas\\Stratigility\\MiddlewarePipe for use with the Application instance. Suggested Name : Mezzio\\ApplicationPipeline Requires : no additional services are required. Optional : no optional services are used. EmitterFactory Provides : Laminas\\HttpHandlerRunner\\Emitter\\EmitterInterface Suggested Name : Laminas\\HttpHandlerRunner\\Emitter\\EmitterInterface Requires : no additional services are required. Optional : no optional services are used. This factory creates an instance of Laminas\\HttpHandlerRunner\\Emitter\\EmitterStack , pushing a Laminas\\HttpHandlerRunner\\Emitter\\SapiEmitter to it. ErrorHandlerFactory Provides : Laminas\\Stratigility\\Middleware\\ErrorHandler Suggested Name : Laminas\\Stratigility\\Middleware\\ErrorHandler Requires : Psr\\Http\\Message\\ResponseInterface , which should resolve to a callable capable of producing a ResponseInterface instance (and not directly to an instance itself) Optional : Mezzio\\Middleware\\ErrorResponseGenerator . If not provided, the error handler will not compose an error response generator, making it largely useless other than to provide an empty response. ErrorResponseGeneratorFactory Provides : Mezzio\\Middleware\\ErrorResponseGenerator Suggested Name : Mezzio\\Middleware\\ErrorResponseGenerator Requires : no additional services are required. Optional : config , an array or ArrayAccess instance. This will be used to seed the ErrorResponseGenerator instance with a template name to use for errors (see more below), and/or a \"debug\" flag value. Mezzio\\Template\\TemplateRendererInterface . If not provided, the error response generator will provide a plain text response instead of a templated one. When the config service is present, the factory can utilize two values: debug , a flag indicating whether or not to provide debug information when creating an error response. mezzio.error_handler.template_error , a name of an alternate template to use (instead of the default represented in the Mezzio\\Middleware\\ErrorResponseGenerator::TEMPLATE_DEFAULT constant, which evaluates to error::error ). Since 3.1.0 : mezzio.error_handler.layout , a name of an alternate layout to use (instead of the default represented in the Mezzio\\Middleware\\ErrorResponseGenerator::LAYOUT_DEFAULT constant, which evaluates to layout::default ). As an example: 'debug' =&gt; true, 'mezzio' =&gt; [ 'error_handler' =&gt; [ 'template_error' =&gt; 'name of error template', 'layout' =&gt; 'layout::alternate', ], ], MiddlewareContainerFactory Provides : a Mezzio\\MiddlewareContainer Suggested Name : Mezzio\\MiddlewareContainer Requires : no additional services are required. Optional : no optional services are used. This factory returns an instance of Mezzio\\MiddlewareContainer injected with the container instance itself. The MiddlewareContainer is a PSR-11 container itself, but ensures that instances pulled are PSR-15 MiddlewareInterface instances: It decorates PSR-15 RequestHandlerInterface instances using Laminas\\Stratigility\\RequestHandlerMiddleware . If a requested service is not in the underlying PSR-11 container, but the class exists, it will attempt to instantiate it directly. Any service retrieved that is not a MiddlewareInterface instance will result in an exception, ensuring that nothing invalid is piped or routed. MiddlewareFactoryFactory Provides : a Mezzio\\MiddlewareFactory Suggested Name : Mezzio\\MiddlewareFactory Requires : Mezzio\\MiddlewareContainer Optional : no optional services are used. The MiddlewareFactory is used by Mezzio\\Application to prepare $middleware arguments to pipe() , route() , et al, ensuring they are MiddlewareInterface implementations. It handles the following types: MiddlewareInterface types are considered valid always. RequestHandlerInterface types are decorated using Laminas\\Stratigility\\Middleware\\RequestHandlerMiddleware . callable types are decorated using Laminas\\Stratigility\\middleware() . string types are decorated using a Mezzio\\Middleware\\LazyLoadingMiddleware instance (which will also receive the MiddlewareContainer. ) Or an array of any of the above types. NotFoundHandlerFactory Provides : Mezzio\\Handler\\NotFoundHandler Suggested Name : Mezzio\\Handler\\NotFoundHandler Requires : Psr\\Http\\Message\\ResponseInterface , which should resolve to a callable capable of producing a ResponseInterface instance (and not directly to an instance itself) Optional : config , an array or ArrayAccess instance. This will be used to seed the NotFoundHandler instance with a template name to use. Mezzio\\Template\\TemplateRendererInterface . If not provided, the handler will provide a plain text response instead of a templated one. When the config service is present, the factory can utilize two values: mezzio.error_handler.template_404 , a name of an alternate template to use (instead of the default represented in the Mezzio\\Delegate\\NotFoundDelegate::TEMPLATE_DEFAULT constant, which evaluates to error::404 ). mezzio.error_handler.layout , a name of an alternate template to use (instead of the default represented in the Mezzio\\Delegate\\NotFoundDelegate::TEMPLATE_DEFAULT constant, which evaluates to layout::default ). As an example: 'mezzio' =&gt; [ 'error_handler' =&gt; [ 'template_404' =&gt; 'name of 404 template', 'layout' =&gt; 'layout::alternate', ], ], RequestHandlerRunnerFactory Provides : Laminas\\HttpHandler\\RequestHandlerRunner Suggested Name : Laminas\\HttpHandler\\RequestHandlerRunner Requires : Mezzio\\ApplicationPipeline , which should resolve to the Laminas\\Stratigility\\MiddlewarePipe instance the Application will use. Laminas\\HttpHandlerRunner\\Emitter\\EmitterInterface Psr\\Http\\Message\\ServerRequestInterface , which should resolve to a callable capable of producing a ServerRequestInterface instance (and not directly to an instance itself) Mezzio\\Response\\ServerRequestErrorResponseGenerator Optional : no optional services are used. This factory generates the RequestHandlerRunner instance used by the Application instance to \"run\" the application. It marshals a request instance, passes it to the application pipeline to handle, and emits the returned response. If an error occurs during request generation, it uses the ServerRequestErrorResponseGenerator to generate the response to emit. ResponseFactoryFactory Provides : a PHP callable capable of producing Psr\\Http\\Message\\ResponseInterface instances. Suggested Name : Psr\\Http\\Message\\ResponseInterface Requires : no additional services are required. Optional : no optional services are used. By default, this uses laminas-diactoros to produce a response, and will raise an exception if that package is not installed. You can provide an alternate factory if you want to use an alternate PSR-7 implementation. ServerRequestErrorResponseGeneratorFactory Provides : Mezzio\\Response\\ServerRequestErrorResponseGenerator Suggested Name : Mezzio\\Response\\ServerRequestErrorResponseGenerator Requires : Psr\\Http\\Message\\ResponseInterface , which should resolve to a callable capable of producing a ResponseInterface instance (and not directly to an instance itself) Optional : config , an array or ArrayAccess instance. This will be used to seed the ErrorResponseGenerator instance with a template name to use for errors (see more below), and/or a \"debug\" flag value. Mezzio\\Template\\TemplateRendererInterface . If not provided, the error response generator will provide a plain text response instead of a templated one. When the config service is present, the factory can utilize two values: debug , a flag indicating whether or not to provide debug information when creating an error response. mezzio.error_handler.template_error , a name of an alternate template to use (instead of the default represented in the Mezzio\\Middleware\\ErrorResponseGenerator::TEMPLATE_DEFAULT constant). As an example: 'debug' =&gt; true, 'mezzio' =&gt; [ 'error_handler' =&gt; [ 'template_error' =&gt; 'name of error template', ], ], ServerRequestFactoryFactory Provides : a PHP callable capable of producing Psr\\Http\\Message\\ServerRequestInterface instances. Suggested Name : Psr\\Http\\Message\\ServerRequestInterface Requires : no additional services are required. Optional : no optional services are used. By default, this uses laminas-diactoros to produce a request, and will raise an exception if that package is not installed. You can provide an alternate factory if you want to use an alternate PSR-7 implementation. Also by default, this factory will consume the service Laminas\\Diactoros\\ServerRequestFilter\\FilterServerRequestInterface , if defined. If you want to limit the proxy servers you trust (or supply one or more subnets), or which X-Forwarded-* headers are trusted, you should define the Laminas\\Diactoros\\ServerRequestFilter\\FilterServerRequestInterface service; one option is to use the shipped FilterUsingXForwardedHeadersFactory described below . Alternately, if you want to disable usage of proxy headers entirely, alias the FilterServerRequestInterface as an invokable to the Laminas\\Diactoros\\ServerRequestFilter\\DoNotFilter class: 'dependencies' =&gt; [ 'invokables' =&gt; [ Laminas\\Diactoros\\ServerRequestFilter\\FilterServerRequestInterface::class =&gt; Laminas\\Diactoros\\ServerRequestFilter\\DoNotFilter::class, ], ], If you have a custom implementation, you may map the service to anything producing your custom implementation. StreamFactoryFactory Provides : a PHP callable capable of producing Psr\\Http\\Message\\StreamInterface instances. Suggested Name : Psr\\Http\\Message\\StreamInterface Requires : no additional services are required. Optional : no optional services are used. By default, this uses laminas-diactoros to produce a stream, and will raise an exception if that package is not installed. You can provide an alternate factory if you want to use an alternate PSR-7 implementation. WhoopsErrorResponseGeneratorFactory Provides : Mezzio\\Middleware\\WhoopsErrorResponseGenerator Suggested Name : Mezzio\\Middleware\\ErrorResponseGenerator Requires : Mezzio\\Whoops (see WhoopsFactory , below) WhoopsFactory Provides : Whoops\\Run Suggested Name : Mezzio\\Whoops Requires : Mezzio\\WhoopsPageHandler Optional : config , an array or ArrayAccess instance. This will be used to seed additional page handlers, specifically the JsonResponseHandler (see more below). This factory creates and configures a Whoops\\Run instance so that it will work properly with Mezzio\\Application ; this includes disabling immediate write-to-output, disabling immediate quit, etc. The PrettyPageHandler returned for the Mezzio\\WhoopsPageHandler service will be injected. It consumes the following config structure: 'whoops' =&gt; [ 'json_exceptions' =&gt; [ 'display' =&gt; true, 'show_trace' =&gt; true, 'ajax_only' =&gt; true, ], ], If no whoops top-level key is present in the configuration, a default instance with no JsonResponseHandler composed will be created. WhoopsPageHandlerFactory Provides : Whoops\\Handler\\PrettyPageHandler Suggested Name : Mezzio\\WhoopsPageHandler Optional : config , an array or ArrayAccess instance. This will be used to further configure the PrettyPageHandler instance, specifically with editor configuration (for linking files such that they open in the configured editor). It consumes the following config structure: 'whoops' =&gt; [ 'editor' =&gt; 'editor name, editor service name, or callable', ], The editor value must be a known editor name (see the Whoops documentation for pre-configured editor types), a callable, or a service name to use. mezzio-router The mezzio-router package ships Mezzio\\Router\\ConfigProvider , which defines configuration that references each of these factories, using the suggested names; this provider is registered by default when using the skeleton application. Individual router implementation packages are expected to provide the Mezzio\\Router\\RouterInterface service. All factories listed below are under the Mezzio\\Router\\Middleware namespace (unless otherwise specified), and define an __invoke() method that accepts a Psr\\Container\\ContainerInterface instance as the sole argument. DispatchMiddlewareFactory Provides : Mezzio\\Router\\Middleware\\DispatchMiddleware Suggested Name : Mezzio\\Router\\Middleware\\DispatchMiddleware Requires : no additional services are required. Optional : no optional services are used. ImplicitHeadMiddlewareFactory Provides : Mezzio\\Router\\Middleware\\ImplicitHeadMiddleware Suggested Name : Mezzio\\Router\\Middleware\\ImplicitHeadMiddleware Requires : Mezzio\\Router\\RouterInterface Psr\\Http\\Message\\StreamInterface , which should resolve to a callable capable of producing a StreamInterface instance (and not directly to an instance itself) Optional : no optional services are used. ImplicitOptionsMiddlewareFactory Provides : Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware Suggested Name : Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware Requires : Psr\\Http\\Message\\ResponseInterface , which should resolve to a callable capable of producing a ResponseInterface instance (and not directly to an instance itself) Optional : no optional services are used. MethodNotAllowedMiddlewareFactory Provides : Mezzio\\Router\\Middleware\\MethodNotAllowedMiddleware Suggested Name : Mezzio\\Router\\Middleware\\MethodNotAllowedMiddleware Requires : Psr\\Http\\Message\\ResponseInterface , which should resolve to a callable capable of producing a ResponseInterface instance (and not directly to an instance itself) Optional : no optional services are used. RouteCollectorFactory Provides : Mezzio\\Router\\RouteCollector Suggested Name : Mezzio\\Router\\RouteCollector Requires : Mezzio\\Router\\RouterInterface Optional : no optional services are used. RouteMiddlewareFactory Provides : Mezzio\\Router\\Middleware\\RouteMiddleware Suggested Name : Mezzio\\Router\\Middleware\\RouteMiddleware Requires : Mezzio\\Router\\RouterInterface Optional : no optional services are used. Factories provided by template engine packages The following factories are provided by individual template engine packages. Generally speaking, these will be provided to your container configuration during installation. PlatesRendererFactory Provides : Mezzio\\Plates\\PlatesRenderer FactoryName : Mezzio\\Plates\\PlatesRendererFactory Suggested Name : Mezzio\\Template\\TemplateRendererInterface Requires : no additional services are required. Optional : config , an array or ArrayAccess instance. This will be used to further configure the Plates instance, specifically with the filename extension to use, and paths to inject. It consumes the following config structure: 'templates' =&gt; [ 'extension' =&gt; 'file extension used by templates; defaults to html', 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ] One note: Due to a limitation in the Plates engine, you can only map one path per namespace when using Plates. TwigRendererFactory Provides : Mezzio\\Twig\\TwigRenderer FactoryName : Mezzio\\Twig\\TwigRendererFactory Suggested Name : Mezzio\\Template\\TemplateRendererInterface Requires : no additional services are required. Optional : Mezzio\\Router\\RouterInterface ; if found, it will be used to seed a Mezzio\\Twig\\TwigExtension instance for purposes of rendering application URLs. config , an array or ArrayAccess instance. This will be used to further configure the Twig instance, specifically with the filename extension, paths to assets (and default asset version to use), and template paths to inject. It consumes the following config structure: 'debug' =&gt; boolean, 'templates' =&gt; [ 'cache_dir' =&gt; 'path to cached templates', 'assets_url' =&gt; 'base URL for assets', 'assets_version' =&gt; 'base version for assets', 'extension' =&gt; 'file extension used by templates; defaults to html.twig', 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ] When debug is true, it disables caching, enables debug mode, enables strict variables, and enables auto reloading. The assets_* values are used to seed the TwigExtension instance (assuming the router was found). LaminasViewRendererFactory Provides : Mezzio\\LaminasView\\LaminasViewRenderer FactoryName : Mezzio\\LaminasView\\LaminasViewRendererFactory Suggested Name : Mezzio\\Template\\TemplateRendererInterface Requires : no additional services are required. Optional : config , an array or ArrayAccess instance. This will be used to further configure the LaminasView instance, specifically with the layout template name, entries for a TemplateMapResolver , and template paths to inject. Laminas\\View\\Renderer\\PhpRenderer , in order to allow providing custom extensions and/or re-using an existing configuration; otherwise, a default instance is created. Laminas\\View\\HelperPluginManager ; if present, will be used to inject the PhpRenderer instance; otherwise, a default instance is created. Mezzio\\Helper\\UrlHelper , in order to provide a URL helper compatible with mezzio-router. If you will not be generating URLs, this can be omitted. Mezzio\\Helper\\ServerUrlHelper , in order to provide a server URL helper (which provides the scheme and authority for a generated URL) compatible with mezzio-router. If you will not be generating URLs, this can be omitted. It consumes the following config structure: 'templates' =&gt; [ 'layout' =&gt; 'name of layout view to use, if any', 'map' =&gt; [ // template =&gt; filename pairs ], 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ] When creating the PhpRenderer instance, it will inject it with a Laminas\\View\\HelperPluginManager instance (either pulled from the container, or instantiated directly). It injects the helper plugin manager with custom url and serverurl helpers, Mezzio\\LaminasView\\UrlHelper and Mezzio\\LaminasView\\ServerUrlHelper , respectively. FilterUsingXForwardedHeadersFactory Diactoros also ships with a factory for generating a customized Laminas\\Diactoros\\ServerRequestFilter\\FilterUsingXForwardedHeaders instance via the Laminas\\Diactoros\\ServerRequestFilter\\FilterUsingXForwardedHeadersFactory class. This factory looks for the following configuration in order to generate an instance: $config = [ 'laminas-diactoros' =&gt; [ 'server-request-filter' =&gt; [ 'x-forwarded-headers' =&gt; [ 'trusted-proxies' =&gt; list&lt;string&gt;, 'trusted-headers' =&gt; list&lt;string&gt;, ], ], ], ]; The trusted-proxies value may be one of the following: The string \"*\". This indicates that all originating addresses are trusted. A string IP address or CIDR notation value indicating a trusted proxy server or subnet. An array of string IP addresses or CIDR notation values. The trusted-headers array should consist of one or more of the X-Forwarded-Host , X-Forwarded-Port , or X-Forwarded-Proto header names; the values are case insensitive. When the configuration is omitted, , the assumption is to honor all X-Forwarded-* headers for trusted proxies. If the configuration is an empty array, the assumption is no X-Forwarded-* headers are trusted. Register the factory using the Laminas\\Diactoros\\ServerRequestFilter\\FilterServerRequestInterface key: $config = [ 'dependencies' =&gt; [ 'factories' =&gt; [ \\Laminas\\Diactoros\\ServerRequestFilter\\FilterServerRequestInterface::class =&gt; \\Mezzio\\Container\\FilterUsingXForwardedHeadersFactory::class, ], ], ];","title":"Container Factories"},{"location":"v3/features/container/factories/#provided-factories","text":"Mezzio provides several factories compatible with PSR-11 Container to facilitate setting up common dependencies. The following is a list of provided factories, what they will create, the suggested service name, and any additional dependencies they may require.","title":"Provided Factories"},{"location":"v3/features/container/factories/#mezzio","text":"The mezzio package ships Mezzio\\ConfigProvider , which defines configuration that references each of these factories, using the suggested names; this provider is registered by default when using the skeleton application. All factories, unless noted otherwise, are in the Mezzio\\Container namespace, and define an __invoke() method that accepts an Psr\\Container\\ContainerInterface instance as the sole argument.","title":"mezzio"},{"location":"v3/features/container/factories/#mezzio-router","text":"The mezzio-router package ships Mezzio\\Router\\ConfigProvider , which defines configuration that references each of these factories, using the suggested names; this provider is registered by default when using the skeleton application. Individual router implementation packages are expected to provide the Mezzio\\Router\\RouterInterface service. All factories listed below are under the Mezzio\\Router\\Middleware namespace (unless otherwise specified), and define an __invoke() method that accepts a Psr\\Container\\ContainerInterface instance as the sole argument.","title":"mezzio-router"},{"location":"v3/features/container/factories/#factories-provided-by-template-engine-packages","text":"The following factories are provided by individual template engine packages. Generally speaking, these will be provided to your container configuration during installation.","title":"Factories provided by template engine packages"},{"location":"v3/features/container/intro/","text":"Containers Mezzio promotes and advocates the usage of Dependency Injection / Inversion of Control (also referred to as DI — or DIC — and IoC, respectively) containers when writing your applications. These should be used for the following: Defining application dependencies: routers, template engines, error handlers, even the Application instance itself. Defining middleware and related dependencies. The application skeleton wires together dependency configuration, which is then used to create a container. This in turn is used to seed a Mezzio\\MiddlewareContainer for purposes of retrieving middleware for the Application instance (via another intermediary, Mezzio\\MiddlewareFactory ). When the application is ready to execute middleware or a handler, it will fetch it from the container. This approach encourages the idea of defining middleware-specific dependencies, and factories for ensuring they are injected. To facilitate this and allow you as a developer to choose the container you prefer, mezzio typehints against PSR-11 Container , and throughout this manual, we attempt to show using a variety of containers in examples. At this time, we document support for the following specific containers: laminas-servicemanager pimple-interop aura.di Service Names We recommend using fully-qualified class names whenever possible as service names, with one exception: in cases where a service provides an implementation of an interface used for typehints, use the interface name. Following these practices encourages the following: Consumers have a reasonable idea of what the service should return. Using interface names as service names promotes re-use and substitution. In a few cases, we define \"virtual service\" names. These are cases where there is no clear typehint to follow. For example, we may want to imply specific configuration is necessary; Whoops requires specific configuration to work correctly with Mezzio, and thus we do not want a generic service name for it. We try to keep these to a minimum, however.","title":"Introduction"},{"location":"v3/features/container/intro/#containers","text":"Mezzio promotes and advocates the usage of Dependency Injection / Inversion of Control (also referred to as DI — or DIC — and IoC, respectively) containers when writing your applications. These should be used for the following: Defining application dependencies: routers, template engines, error handlers, even the Application instance itself. Defining middleware and related dependencies. The application skeleton wires together dependency configuration, which is then used to create a container. This in turn is used to seed a Mezzio\\MiddlewareContainer for purposes of retrieving middleware for the Application instance (via another intermediary, Mezzio\\MiddlewareFactory ). When the application is ready to execute middleware or a handler, it will fetch it from the container. This approach encourages the idea of defining middleware-specific dependencies, and factories for ensuring they are injected. To facilitate this and allow you as a developer to choose the container you prefer, mezzio typehints against PSR-11 Container , and throughout this manual, we attempt to show using a variety of containers in examples. At this time, we document support for the following specific containers: laminas-servicemanager pimple-interop aura.di","title":"Containers"},{"location":"v3/features/container/laminas-servicemanager/","text":"Using laminas-servicemanager laminas-servicemanager is a code-driven dependency injection container provided as a standalone component by Laminas. It features: lazy-loading of invokable (constructor-less) classes. ability to define factories for specific classes. ability to define generalized factories for classes with identical construction patterns (aka abstract factories ). ability to create lazy-loading proxies. ability to intercept before or after instantiation to alter the construction workflow (aka delegator factories ). interface injection (via initializers ). laminas-servicemanager may either be created and populated programmatically, or via configuration. Configuration uses the following structure: [ 'services' =&gt; [ 'service name' =&gt; $serviceInstance, ], 'invokables' =&gt; [ 'service name' =&gt; 'class to instantiate', ], 'factories' =&gt; [ 'service name' =&gt; 'callable, Laminas\\ServiceManager\\FactoryInterface instance, or name of factory class returning the service', ], 'abstract_factories' =&gt; [ 'class name of Laminas\\ServiceManager\\AbstractFactoryInterface implementation', ], 'delegators' =&gt; [ 'service name' =&gt; [ 'class name of Laminas\\ServiceManager\\DelegatorFactoryInterface implementation', ], ], 'lazy_services' =&gt; [ 'class_map' =&gt; [ 'service name' =&gt; 'Class\\Name\\Of\\Service', ], ], 'initializers' =&gt; [ 'callable, Laminas\\ServiceManager\\InitializerInterface implementation, or name of initializer class', ], ] Read more about laminas-servicemanager in its documentation . Installing laminas-servicemanager To use laminas-servicemanager with mezzio, you can install it via composer: $ composer require laminas/laminas-servicemanager Configuring laminas-servicemanager You can configure laminas-servicemanager either programmatically or via configuration. We'll show you both methods. Programmatically To use laminas-servicemanager programatically, you'll need to create a Laminas\\ServiceManager\\ServiceManager instance, and then start populating it. For this example, we'll assume your application configuration (used by several factories to configure instances) is in config/config.php , and that that file returns an array. We'll create a config/container.php file that creates and returns a Laminas\\ServiceManager\\ServiceManager instance as follows: use Laminas\\ServiceManager\\ServiceManager; $container = new ServiceManager(); // Application and configuration $container-&gt;setService('config', include 'config/config.php'); $container-&gt;setFactory( Mezzio\\Application::class, Mezzio\\Container\\ApplicationFactory::class ); // Routing // In most cases, you can instantiate the router you want to use without using a // factory: $container-&gt;setInvokableClass( Mezzio\\Router\\RouterInterface::class, Mezzio\\Router\\AuraRouter::class ); // Templating // In most cases, you can instantiate the template renderer you want to use // without using a factory: $container-&gt;setInvokableClass( Mezzio\\Template\\TemplateRendererInterface::class, Mezzio\\Plates\\PlatesRenderer::class ); // These next two can be added in any environment; they won't be used unless // you add the WhoopsErrorResponseGenerator as the ErrorResponseGenerator // implementation: $container-&gt;setFactory( 'Mezzio\\Whoops', Mezzio\\Container\\WhoopsFactory::class ); $container-&gt;setFactory( 'Mezzio\\WhoopsPageHandler', Mezzio\\Container\\WhoopsPageHandlerFactory::class ); // Error Handling // All environments: $container-&gt;setFactory( Mezzio\\Middleware\\ErrorHandler::class, Mezzio\\Container\\ErrorHandlerFactory::class ); // If in development: $container-&gt;setFactory( Mezzio\\Middleware\\ErrorResponseGenerator::class, Mezzio\\Container\\WhoopsErrorResponseGeneratorFactory::class ); // If in production: $container-&gt;setFactory( Mezzio\\Middleware\\ErrorResponseGenerator::class, Mezzio\\Container\\ErrorResponseGeneratorFactory::class ); return $container; Your bootstrap (typically public/index.php ) will then look like this: chdir(dirname(__DIR__)); require 'vendor/autoload.php'; $container = require 'config/container.php'; $app = $container-&gt;get(\\Mezzio\\Application::class); require 'config/pipeline.php'; require 'config/routes.php'; // All versions: $app-&gt;run(); Configuration-Driven Container Alternately, you can use a configuration file to define the container. As before, we'll define our configuration in config/config.php , and our config/container.php file will still return our service manager instance; we'll define the service configuration in config/dependencies.php : return [ 'services' =&gt; [ 'config' =&gt; include __DIR__ . '/config.php', ], 'aliases' =&gt; [ 'Mezzio\\Delegate\\DefaultDelegate' =&gt; 'Mezzio\\Delegate\\NotFoundDelegate', ], 'invokables' =&gt; [ Mezzio\\Router\\RouterInterface::class =&gt; Mezzio\\Router\\AuraRouter::class, Mezzio\\Template\\TemplateRendererInterface::class =&gt; Mezzio\\Plates\\PlatesRenderer::class ], 'factories' =&gt; [ Mezzio\\Application::class =&gt; Mezzio\\Container\\ApplicationFactory::class, 'Mezzio\\Whoops' =&gt; Mezzio\\Container\\WhoopsFactory::class, 'Mezzio\\WhoopsPageHandler' =&gt; Mezzio\\Container\\WhoopsPageHandlerFactory::class, Laminas\\Stratigility\\Middleware\\ErrorHandler::class =&gt; Mezzio\\Container\\ErrorHandlerFactory::class, Mezzio\\Delegate\\NotFoundDelegate::class =&gt; Mezzio\\Container\\NotFoundDelegateFactory::class, Mezzio\\Middleware\\NotFoundHandler::class =&gt; Mezzio\\Container\\NotFoundHandlerFactory::class, ], ]; config/container.php becomes: use Laminas\\ServiceManager\\Config; use Laminas\\ServiceManager\\ServiceManager; return new ServiceManager(new Config(include 'config/dependencies.php')); There is one problem, however: you may want to vary error handling strategies based on whether or not you're in production: You have two choices on how to approach this: Selectively inject the factory in the bootstrap. Define the final handler service in an environment specific file and use file globbing to merge files. In the first case, you would change the config/container.php example to look like this: use Laminas\\ServiceManager\\Config; use Laminas\\ServiceManager\\ServiceManager; $container = new ServiceManager(new Config(include 'config/container.php')); switch ($variableOrConstantIndicatingEnvironment) { case 'development': $container-&gt;setFactory( Mezzio\\Middleware\\ErrorResponseGenerator::class, Mezzio\\Container\\WhoopsErrorResponseGeneratorFactory::class ); break; case 'production': default: $container-&gt;setFactory( Mezzio\\Middleware\\ErrorResponseGenerator::class, Mezzio\\Container\\ErrorResponseGeneratorFactory::class ); } return $container; In the second case, you will need to install laminas-config: $ composer require laminas/laminas-config Then, create the directory config/autoload/ , and create two files, dependencies.global.php and dependencies.local.php . In your .gitignore , add an entry for config/autoload/*local.php to ensure \"local\" (environment-specific) files are excluded from the repository. config/dependencies.php will look like this: use Laminas\\Config\\Factory as ConfigFactory; return ConfigFactory::fromFiles( glob('config/autoload/dependencies.{global,local}.php', GLOB_BRACE) ); config/autoload/dependencies.global.php will look like this: return [ 'services' =&gt; [ 'config' =&gt; include __DIR__ . '/config.php', ], 'aliases' =&gt; [ 'Mezzio\\Delegate\\DefaultDelegate' =&gt; Mezzio\\Delegate\\NotFoundDelegate::class, ], 'invokables' =&gt; [ Mezzio\\Router\\RouterInterface::class =&gt; Mezzio\\Router\\AuraRouter::class, Mezzio\\Template\\TemplateRendererInterface::class =&gt; Mezzio\\Plates\\PlatesRenderer::class ], 'factories' =&gt; [ Mezzio\\Application::class =&gt; Mezzio\\Container\\ApplicationFactory::class, 'Mezzio\\Whoops' =&gt; Mezzio\\Container\\WhoopsFactory::class, 'Mezzio\\WhoopsPageHandler' =&gt; Mezzio\\Container\\WhoopsPageHandlerFactory::class, Mezzio\\Middleware\\ErrorResponseGenerator::class =&gt; Mezzio\\Container\\ErrorResponseGeneratorFactory::class, Laminas\\Stratigility\\Middleware\\ErrorHandler::class =&gt; Mezzio\\Container\\ErrorHandlerFactory::class, 'Mezzio\\Delegate\\NotFoundDelegate' =&gt; Mezzio\\Container\\NotFoundDelegateFactory::class, Mezzio\\Middleware\\NotFoundHandler::class =&gt; Mezzio\\Container\\NotFoundHandlerFactory::class, ], ]; config/autoload/dependencies.local.php on your development machine can look like this: return [ 'factories' =&gt; [ 'Mezzio\\Whoops' =&gt; Mezzio\\Container\\WhoopsFactory::class, 'Mezzio\\WhoopsPageHandler' =&gt; Mezzio\\Container\\WhoopsPageHandlerFactory::class, Mezzio\\Middleware\\ErrorResponseGenerator::class =&gt; Mezzio\\Container\\WhoopsErrorResponseGeneratorFactory::class, ], ]; Using the above approach allows you to keep the bootstrap file minimal and agnostic of environment. (Note: you can take a similar approach with the application configuration.)","title":"Using laminas-servicemanager"},{"location":"v3/features/container/laminas-servicemanager/#using-laminas-servicemanager","text":"laminas-servicemanager is a code-driven dependency injection container provided as a standalone component by Laminas. It features: lazy-loading of invokable (constructor-less) classes. ability to define factories for specific classes. ability to define generalized factories for classes with identical construction patterns (aka abstract factories ). ability to create lazy-loading proxies. ability to intercept before or after instantiation to alter the construction workflow (aka delegator factories ). interface injection (via initializers ). laminas-servicemanager may either be created and populated programmatically, or via configuration. Configuration uses the following structure: [ 'services' =&gt; [ 'service name' =&gt; $serviceInstance, ], 'invokables' =&gt; [ 'service name' =&gt; 'class to instantiate', ], 'factories' =&gt; [ 'service name' =&gt; 'callable, Laminas\\ServiceManager\\FactoryInterface instance, or name of factory class returning the service', ], 'abstract_factories' =&gt; [ 'class name of Laminas\\ServiceManager\\AbstractFactoryInterface implementation', ], 'delegators' =&gt; [ 'service name' =&gt; [ 'class name of Laminas\\ServiceManager\\DelegatorFactoryInterface implementation', ], ], 'lazy_services' =&gt; [ 'class_map' =&gt; [ 'service name' =&gt; 'Class\\Name\\Of\\Service', ], ], 'initializers' =&gt; [ 'callable, Laminas\\ServiceManager\\InitializerInterface implementation, or name of initializer class', ], ] Read more about laminas-servicemanager in its documentation .","title":"Using laminas-servicemanager"},{"location":"v3/features/container/laminas-servicemanager/#installing-laminas-servicemanager","text":"To use laminas-servicemanager with mezzio, you can install it via composer: $ composer require laminas/laminas-servicemanager","title":"Installing laminas-servicemanager"},{"location":"v3/features/container/laminas-servicemanager/#configuring-laminas-servicemanager","text":"You can configure laminas-servicemanager either programmatically or via configuration. We'll show you both methods.","title":"Configuring laminas-servicemanager"},{"location":"v3/features/container/middleware-container/","text":"The Middleware Container While the skeleton creates a general PSR-11 container in which to map all of your dependencies, this can pose problems when you are attempting to pull middleware and request handlers; you could potentially, accidentally, pull something of a different type entirely, which may not work in either context! To prevent this from happening, we provide Mezzio\\MiddlewareContainer . It decorates your application container, and adds the following behavior: has() will return true if a service does not exist in the container, but is a class that exists. get() : will instantiate a class directly if the service does not exist, but is a class that exists. decorate PSR-15 RequestHandlerInterface implementations using Laminas\\Stratigility\\RequestHandlerMiddleware . raise an exception if the instance to return is not a PSR-15 MiddlewareInterface implementation. Internally, this class is used by the MiddlewareFactory and the Mezzio\\Middleware\\LazyLoadingMiddleware class; you should never need to interact with it directly, unless the above features are of interest to you.","title":"The Middleware Container"},{"location":"v3/features/container/middleware-container/#the-middleware-container","text":"While the skeleton creates a general PSR-11 container in which to map all of your dependencies, this can pose problems when you are attempting to pull middleware and request handlers; you could potentially, accidentally, pull something of a different type entirely, which may not work in either context! To prevent this from happening, we provide Mezzio\\MiddlewareContainer . It decorates your application container, and adds the following behavior: has() will return true if a service does not exist in the container, but is a class that exists. get() : will instantiate a class directly if the service does not exist, but is a class that exists. decorate PSR-15 RequestHandlerInterface implementations using Laminas\\Stratigility\\RequestHandlerMiddleware . raise an exception if the instance to return is not a PSR-15 MiddlewareInterface implementation. Internally, this class is used by the MiddlewareFactory and the Mezzio\\Middleware\\LazyLoadingMiddleware class; you should never need to interact with it directly, unless the above features are of interest to you.","title":"The Middleware Container"},{"location":"v3/features/container/middleware-factory/","text":"The Middleware Factory With version 3, we made a conscious choice to use strong type-hinting wherever possible. However, we also recognize that doing so can sometimes be an inconvenience to the user and lead to an explosion in code verbosity. One area in particular that concerned us was the Application instance itself, and the various methods it exposes for piping and routing middleware. If we made each of these strictly typed, users would be forced to write code that looks like the following: use Psr\\Container\\ContainerInterface; use Mezzio\\Application; use Mezzio\\Middleware\\LazyLoadingMiddleware; use Laminas\\Stratigility\\MiddlewarePipe; use function Laminas\\Stratigility\\middleware; use function Laminas\\Stratigility\\path; return function (Application $app, ContainerInterface $container) : void { $app-&gt;pipe(path( '/foo', new LazyLoadingMiddleware(App\\FooMiddleware::class, $container) )); $app-&gt;pipe(middleware(function ($request, $handler) { // ... })); $booksPipeline = new MiddlewarePipe(); $booksPipeline-&gt;pipe(new LazyLoadingMiddleware( Mezzio\\ProblemDetails\\ProblemDetailsMiddleware::class, $container )); $booksPipeline-&gt;pipe(new LazyLoadingMiddleware( App\\SessionMiddleware::class, $container )); $booksPipeline-&gt;pipe(new LazyLoadingMiddleware( App\\AuthenticationMiddleware::class, $container )); $booksPipeline-&gt;pipe(new LazyLoadingMiddleware( App\\AuthorizationMiddleware::class, $container )); $booksPipeline-&gt;pipe(new LazyLoadingMiddleware( Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware::class $container )); $booksPipeline-&gt;pipe(new LazyLoadingMiddleware( App\\ValidationMiddleware::class $container )); $booksPipeline-&gt;pipe(new LazyLoadingMiddleware( App\\Handler\\CreateBookHandler::class $container )); $app-&gt;post('/books/{id:\\d+}', $booksPipeline); }; Additionally, this would pose an enormous burden when migrating to version 3. For these reasons, we developed the class Mezzio\\MiddlewareFactory . It composes a MiddlewareContainer in order to back the following operations. callable $middleware = $factory-&gt;callable(function ($request, $handler) { }); This method takes a callable middleware, and decorates it as a Laminas\\Stratigility\\Middleware\\CallableMiddlewareDecorator instance. handler $middleware = $factory-&gt;handler($requestHandler); This method takes a PSR-15 request handler instance and decorates it as a Laminas\\Stratigility\\Middleware\\RequestHandlerMiddleware instance. lazy $middleware = $factory-&gt;lazy(App\\Middleware\\FooMiddleware::class); This method decorates the service name using Mezzio\\Middlware\\LazyLoadingMiddleware , passing the composed MiddlewareContainer to the instance during instantiation. pipeline $pipeline = $factory-&gt;pipeline( $middlewareInstance, 'MiddlewareServiceName', function ($request, $handler) { }, $requestHandlerInstance ); Creates and returns a Laminas\\Stratigility\\MiddlewarePipe , after passing each argument to prepare() first. (You may pass an array of values instead of individual arguments as well.) prepare $middleware = $factory-&gt;prepare($middleware); Inspects the provided middleware argument, with the following behavior: MiddlewareInterface instances are returned verbatim. RequestHandlerInterface instances are decorated using handler() . callable arguments are decorated using callable() . string arguments are decorated using lazy() . array arguments are decorated using pipeline() . Usage in bootstrapping The skeleton defines two files config/pipeline.php and config/routes.php . These are expected to return a callable with the following signature: use Psr\\Container\\ContainerInterface; use Mezzio\\Application; use Mezzio\\MiddlewareFactory; return function (Application $app, MiddlewareFactory $factory, ContainerInterface $container) : void { }; Note that the MiddlewareFactory is passed to these callables; this gives you the ability to use it for more complex piping and routing needs, including creating nested pipelines. As an example, we'll rewrite our initial example to use the MiddlewareFactory : use Psr\\Container\\ContainerInterface; use Mezzio\\Application; use Mezzio\\MiddlewareFactory; use function Laminas\\Stratigility\\path; return function (Application $app, MiddlewareFactory $factory, ContainerInterface $container) : void { $app-&gt;pipe(path('/foo', $factory-&gt;prepare(App\\FooMiddleware::class))); $app-&gt;pipe($factory-&gt;prepare(function ($request, $handler) { // ... })); $app-&gt;post('/books/{id:\\d+}', $factory-&gt;pipeline( ProblemDetailsMiddleware::class, App\\SessionMiddleware::class, App\\AuthenticationMiddleware::class, App\\AuthorizationMiddleware::class, Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware::class, App\\ValidationMiddleware::class, App\\Handler\\CreateBookHandler::class )); }; Further simplifications Internally, Application 's pipe() and various routing methods make use of the MiddlewareFactory already; pipe() also already makes use of path() as well. As such, usage of the MiddlewareFactory is not strictly necessary in the above example; it is used for illustrative purposes only.","title":"The Middleware Factory"},{"location":"v3/features/container/middleware-factory/#the-middleware-factory","text":"With version 3, we made a conscious choice to use strong type-hinting wherever possible. However, we also recognize that doing so can sometimes be an inconvenience to the user and lead to an explosion in code verbosity. One area in particular that concerned us was the Application instance itself, and the various methods it exposes for piping and routing middleware. If we made each of these strictly typed, users would be forced to write code that looks like the following: use Psr\\Container\\ContainerInterface; use Mezzio\\Application; use Mezzio\\Middleware\\LazyLoadingMiddleware; use Laminas\\Stratigility\\MiddlewarePipe; use function Laminas\\Stratigility\\middleware; use function Laminas\\Stratigility\\path; return function (Application $app, ContainerInterface $container) : void { $app-&gt;pipe(path( '/foo', new LazyLoadingMiddleware(App\\FooMiddleware::class, $container) )); $app-&gt;pipe(middleware(function ($request, $handler) { // ... })); $booksPipeline = new MiddlewarePipe(); $booksPipeline-&gt;pipe(new LazyLoadingMiddleware( Mezzio\\ProblemDetails\\ProblemDetailsMiddleware::class, $container )); $booksPipeline-&gt;pipe(new LazyLoadingMiddleware( App\\SessionMiddleware::class, $container )); $booksPipeline-&gt;pipe(new LazyLoadingMiddleware( App\\AuthenticationMiddleware::class, $container )); $booksPipeline-&gt;pipe(new LazyLoadingMiddleware( App\\AuthorizationMiddleware::class, $container )); $booksPipeline-&gt;pipe(new LazyLoadingMiddleware( Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware::class $container )); $booksPipeline-&gt;pipe(new LazyLoadingMiddleware( App\\ValidationMiddleware::class $container )); $booksPipeline-&gt;pipe(new LazyLoadingMiddleware( App\\Handler\\CreateBookHandler::class $container )); $app-&gt;post('/books/{id:\\d+}', $booksPipeline); }; Additionally, this would pose an enormous burden when migrating to version 3. For these reasons, we developed the class Mezzio\\MiddlewareFactory . It composes a MiddlewareContainer in order to back the following operations.","title":"The Middleware Factory"},{"location":"v3/features/container/middleware-factory/#callable","text":"$middleware = $factory-&gt;callable(function ($request, $handler) { }); This method takes a callable middleware, and decorates it as a Laminas\\Stratigility\\Middleware\\CallableMiddlewareDecorator instance.","title":"callable"},{"location":"v3/features/container/middleware-factory/#handler","text":"$middleware = $factory-&gt;handler($requestHandler); This method takes a PSR-15 request handler instance and decorates it as a Laminas\\Stratigility\\Middleware\\RequestHandlerMiddleware instance.","title":"handler"},{"location":"v3/features/container/middleware-factory/#lazy","text":"$middleware = $factory-&gt;lazy(App\\Middleware\\FooMiddleware::class); This method decorates the service name using Mezzio\\Middlware\\LazyLoadingMiddleware , passing the composed MiddlewareContainer to the instance during instantiation.","title":"lazy"},{"location":"v3/features/container/middleware-factory/#pipeline","text":"$pipeline = $factory-&gt;pipeline( $middlewareInstance, 'MiddlewareServiceName', function ($request, $handler) { }, $requestHandlerInstance ); Creates and returns a Laminas\\Stratigility\\MiddlewarePipe , after passing each argument to prepare() first. (You may pass an array of values instead of individual arguments as well.)","title":"pipeline"},{"location":"v3/features/container/middleware-factory/#prepare","text":"$middleware = $factory-&gt;prepare($middleware); Inspects the provided middleware argument, with the following behavior: MiddlewareInterface instances are returned verbatim. RequestHandlerInterface instances are decorated using handler() . callable arguments are decorated using callable() . string arguments are decorated using lazy() . array arguments are decorated using pipeline() .","title":"prepare"},{"location":"v3/features/container/middleware-factory/#usage-in-bootstrapping","text":"The skeleton defines two files config/pipeline.php and config/routes.php . These are expected to return a callable with the following signature: use Psr\\Container\\ContainerInterface; use Mezzio\\Application; use Mezzio\\MiddlewareFactory; return function (Application $app, MiddlewareFactory $factory, ContainerInterface $container) : void { }; Note that the MiddlewareFactory is passed to these callables; this gives you the ability to use it for more complex piping and routing needs, including creating nested pipelines. As an example, we'll rewrite our initial example to use the MiddlewareFactory : use Psr\\Container\\ContainerInterface; use Mezzio\\Application; use Mezzio\\MiddlewareFactory; use function Laminas\\Stratigility\\path; return function (Application $app, MiddlewareFactory $factory, ContainerInterface $container) : void { $app-&gt;pipe(path('/foo', $factory-&gt;prepare(App\\FooMiddleware::class))); $app-&gt;pipe($factory-&gt;prepare(function ($request, $handler) { // ... })); $app-&gt;post('/books/{id:\\d+}', $factory-&gt;pipeline( ProblemDetailsMiddleware::class, App\\SessionMiddleware::class, App\\AuthenticationMiddleware::class, App\\AuthorizationMiddleware::class, Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware::class, App\\ValidationMiddleware::class, App\\Handler\\CreateBookHandler::class )); };","title":"Usage in bootstrapping"},{"location":"v3/features/container/pimple/","text":"Using Pimple Pimple is a widely used, code-driven, dependency injection container provided as a standalone component by SensioLabs. It features: combined parameter and service storage. ability to define factories for specific classes. lazy-loading via factories. Pimple only supports programmatic creation at this time. Installing and configuring Pimple Pimple implements PSR-11 Container as of version 3.2. To use Pimple as a dependency injection container, we recommend using laminas/laminas-pimple-config , which helps you to configure the PSR-11 container. First install the package: $ composer require laminas/laminas-pimple-config Now, create the file config/container.php with the following contents: &lt;?php use Laminas\\Pimple\\Config\\Config; use Laminas\\Pimple\\Config\\ContainerFactory; $config = require __DIR__ . '/config.php'; $factory = new ContainerFactory(); return $factory(new Config($config)); For more information, please see the laminas-pimple-config documentation . Your bootstrap (typically public/index.php ) will then look like this: chdir(dirname(__DIR__)); require 'vendor/autoload.php'; $container = require 'config/container.php'; $app = $container-&gt;get(Mezzio\\Application::class); require 'config/pipeline.php'; require 'config/routes.php'; $app-&gt;run();","title":"Using Pimple"},{"location":"v3/features/container/pimple/#using-pimple","text":"Pimple is a widely used, code-driven, dependency injection container provided as a standalone component by SensioLabs. It features: combined parameter and service storage. ability to define factories for specific classes. lazy-loading via factories. Pimple only supports programmatic creation at this time.","title":"Using Pimple"},{"location":"v3/features/container/pimple/#installing-and-configuring-pimple","text":"Pimple implements PSR-11 Container as of version 3.2. To use Pimple as a dependency injection container, we recommend using laminas/laminas-pimple-config , which helps you to configure the PSR-11 container. First install the package: $ composer require laminas/laminas-pimple-config Now, create the file config/container.php with the following contents: &lt;?php use Laminas\\Pimple\\Config\\Config; use Laminas\\Pimple\\Config\\ContainerFactory; $config = require __DIR__ . '/config.php'; $factory = new ContainerFactory(); return $factory(new Config($config)); For more information, please see the laminas-pimple-config documentation . Your bootstrap (typically public/index.php ) will then look like this: chdir(dirname(__DIR__)); require 'vendor/autoload.php'; $container = require 'config/container.php'; $app = $container-&gt;get(Mezzio\\Application::class); require 'config/pipeline.php'; require 'config/routes.php'; $app-&gt;run();","title":"Installing and configuring Pimple"},{"location":"v3/features/helpers/body-params/","text":"Body Params Middleware Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware provides generic PSR-15 middleware for parsing the request body into parameters, and returning a new request instance that composes them. The subcomponent provides a strategy pattern around matching the request Content-Type , and then parsing it, giving you a flexible approach that can grow with your accepted content types. By default, this middleware will detect the following content types: application/x-www-form-urlencoded (standard web-based forms, without file uploads) application/json , application/*+json (JSON payloads) This Middleware Must Be Used for PUT Requests If it is not a part of the middleware pipeline for routes using PUT requests, then calls to ServerRequestInterface::getParsedBody() will return an empty array — even if the request included a body. Registering the middleware You can register it programmatically: $app-&gt;pipe(BodyParamsMiddleware::class); Since body parsing does not necessarily need to happen for every request, you can also choose to incorporate it in route-specific middleware pipelines: $app-&gt;post('/login', [ BodyParamsMiddleware::class, LoginMiddleware::class, ]); Using route-based middleware pipelines has the advantage of ensuring that the body parsing middleware only executes for routes that require the processing. While the middleware has some checks to ensure it only triggers for HTTP methods that accept bodies, those checks are still overhead that you might want to avoid; the above strategy of using the middleware only with specific routes can accomplish that. Strategies If you want to intercept and parse other payload types, you can add strategies to the middleware. Strategies implement Mezzio\\Helper\\BodyParams\\StrategyInterface : namespace Mezzio\\Helper\\BodyParams; use Psr\\Http\\Message\\ServerRequestInterface; interface StrategyInterface { /** * Match the content type to the strategy criteria. */ public function match(string $contentType) : bool; /** * Parse the body content and return a new request. */ public function parse(ServerRequestInterface $request) : ServerRequestInterface; } You then register them with the middleware using the addStrategy() method: $bodyParams-&gt;addStrategy(new MyCustomBodyParamsStrategy()); To automate the registration, we recommend writing a factory for the BodyParamsMiddleware , and replacing the invokables registration with a registration in the factories section of the middleware-pipeline.config.php file: use Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware; class MyCustomBodyParamsStrategyFactory { public function __invoke($container) { $bodyParams = new BodyParamsMiddleware(); $bodyParams-&gt;addStrategy(new MyCustomBodyParamsStrategy()); return $bodyParams; } } // In config/autoload/middleware-pipeline.config.php: use Mezzio\\Helper; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ // Remove this line: Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; Helper\\BodyParams\\BodyParamsMiddleware::class, /* ... */ ], 'factories' =&gt; [ // Add this line: Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; MyCustomBodyParamsStrategyFactory::class, /* ... */ ], ], ]; Alternately, use a delegator factory . Removing the default strategies By default, BodyParamsMiddleware composes the following strategies: Mezzio\\Helper\\BodyParams\\FormUrlEncodedStrategy Mezzio\\Helper\\BodyParams\\JsonStrategy These provide the most basic approaches to parsing the request body. They operate in the order they do to ensure the most common content type — application/x-www-form-urlencoded — matches first, as the middleware delegates parsing to the first match. If you do not want to use these default strategies, you can clear them from the middleware using clearStrategies() : $bodyParamsMiddleware-&gt;clearStrategies(); Note: if you do this, all strategies will be removed! As such, we recommend doing this only immediately before registering any custom strategies you might be using.","title":"Body Params Middleware"},{"location":"v3/features/helpers/body-params/#body-params-middleware","text":"Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware provides generic PSR-15 middleware for parsing the request body into parameters, and returning a new request instance that composes them. The subcomponent provides a strategy pattern around matching the request Content-Type , and then parsing it, giving you a flexible approach that can grow with your accepted content types. By default, this middleware will detect the following content types: application/x-www-form-urlencoded (standard web-based forms, without file uploads) application/json , application/*+json (JSON payloads)","title":"Body Params Middleware"},{"location":"v3/features/helpers/body-params/#registering-the-middleware","text":"You can register it programmatically: $app-&gt;pipe(BodyParamsMiddleware::class); Since body parsing does not necessarily need to happen for every request, you can also choose to incorporate it in route-specific middleware pipelines: $app-&gt;post('/login', [ BodyParamsMiddleware::class, LoginMiddleware::class, ]); Using route-based middleware pipelines has the advantage of ensuring that the body parsing middleware only executes for routes that require the processing. While the middleware has some checks to ensure it only triggers for HTTP methods that accept bodies, those checks are still overhead that you might want to avoid; the above strategy of using the middleware only with specific routes can accomplish that.","title":"Registering the middleware"},{"location":"v3/features/helpers/body-params/#strategies","text":"If you want to intercept and parse other payload types, you can add strategies to the middleware. Strategies implement Mezzio\\Helper\\BodyParams\\StrategyInterface : namespace Mezzio\\Helper\\BodyParams; use Psr\\Http\\Message\\ServerRequestInterface; interface StrategyInterface { /** * Match the content type to the strategy criteria. */ public function match(string $contentType) : bool; /** * Parse the body content and return a new request. */ public function parse(ServerRequestInterface $request) : ServerRequestInterface; } You then register them with the middleware using the addStrategy() method: $bodyParams-&gt;addStrategy(new MyCustomBodyParamsStrategy()); To automate the registration, we recommend writing a factory for the BodyParamsMiddleware , and replacing the invokables registration with a registration in the factories section of the middleware-pipeline.config.php file: use Mezzio\\Helper\\BodyParams\\BodyParamsMiddleware; class MyCustomBodyParamsStrategyFactory { public function __invoke($container) { $bodyParams = new BodyParamsMiddleware(); $bodyParams-&gt;addStrategy(new MyCustomBodyParamsStrategy()); return $bodyParams; } } // In config/autoload/middleware-pipeline.config.php: use Mezzio\\Helper; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ // Remove this line: Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; Helper\\BodyParams\\BodyParamsMiddleware::class, /* ... */ ], 'factories' =&gt; [ // Add this line: Helper\\BodyParams\\BodyParamsMiddleware::class =&gt; MyCustomBodyParamsStrategyFactory::class, /* ... */ ], ], ]; Alternately, use a delegator factory .","title":"Strategies"},{"location":"v3/features/helpers/body-params/#removing-the-default-strategies","text":"By default, BodyParamsMiddleware composes the following strategies: Mezzio\\Helper\\BodyParams\\FormUrlEncodedStrategy Mezzio\\Helper\\BodyParams\\JsonStrategy These provide the most basic approaches to parsing the request body. They operate in the order they do to ensure the most common content type — application/x-www-form-urlencoded — matches first, as the middleware delegates parsing to the first match. If you do not want to use these default strategies, you can clear them from the middleware using clearStrategies() : $bodyParamsMiddleware-&gt;clearStrategies(); Note: if you do this, all strategies will be removed! As such, we recommend doing this only immediately before registering any custom strategies you might be using.","title":"Removing the default strategies"},{"location":"v3/features/helpers/content-length/","text":"Content-Length Middleware In some cases, you may want to include an explicit Content-Length response header, without having to inject it manually. To facilitate this, we provide Mezzio\\Helper\\ContentLengthMiddleware . When to use this middleware In most cases, you do not need to provide an explicit Content-Length value in your responses. While the HTTP/1.1 specification indicates the header SHOULD be provided, most clients will not degrade to HTTP/1.0 if the header is omitted. The one exception that has been reported is when working with New Relic , which requires valid Content-Length headers for some of its analytics; in such cases, enabling this middleware will fix those situations. This middleware delegates the request, and operates on the returned response. It will return a new response with the Content-Length header injected under the following conditions: No Content-Length header is already present AND the body size is non-null. To register it in your application, you will need to do two things: register the middleware with the container, and register the middleware in either your application pipeline, or within routed middleware. To add it to your container, add the following configuration: // In a `config/autoload/*.global.php` file, or a `ConfigProvider` class: use Mezzio\\Helper; return [ 'dependencies' =&gt; [ 'invokables' =&gt; [ Helper\\ContentLengthMiddleware::class =&gt; Helper\\ContentLengthMiddleware::class, ], ], ]; To register it as pipeline middleware to execute on any request: // In `config/pipeline.php`: use Mezzio\\Helper; $app-&gt;pipe(Helper\\ContentLengthMiddleware::class); To register it within a routed middleware pipeline: // In `config/routes.php`: use Mezzio\\Helper; $app-&gt;get('/download/tarball', [ Helper\\ContentLengthMiddleware::class, Download\\Tarball::class, ], 'download-tar'); Caveats One caveat to note is that if you use this middleware, but also write directly to the output buffer (e.g., via a var_dump , or if display_errors is on and an uncaught error or exception occurs), the output will not appear as you expect. Generally in such situations, the contents of the output buffer will appear, up to the specified Content-Length value. This can lead to truncated error content and/or truncated application content. We recommend that if you use this feature, you also use a PHP error and/or exception handler that logs errors in order to prevent truncated output.","title":"Content-Length Middleware"},{"location":"v3/features/helpers/content-length/#content-length-middleware","text":"In some cases, you may want to include an explicit Content-Length response header, without having to inject it manually. To facilitate this, we provide Mezzio\\Helper\\ContentLengthMiddleware .","title":"Content-Length Middleware"},{"location":"v3/features/helpers/content-length/#caveats","text":"One caveat to note is that if you use this middleware, but also write directly to the output buffer (e.g., via a var_dump , or if display_errors is on and an uncaught error or exception occurs), the output will not appear as you expect. Generally in such situations, the contents of the output buffer will appear, up to the specified Content-Length value. This can lead to truncated error content and/or truncated application content. We recommend that if you use this feature, you also use a PHP error and/or exception handler that logs errors in order to prevent truncated output.","title":"Caveats"},{"location":"v3/features/helpers/intro/","text":"Helpers Some tasks and features will be common to many if not all applications. For those, Mezzio provides helpers . These are typically utility classes that may integrate features or simply provide standalone benefits. Currently, these include: Body Params Middleware Content-Length Middleware (since mezzio-helpers 4.1.0) UrlHelper ServerUrlHelper Installation If you started your project using the Mezzio skeleton package, the helpers are already installed. If not, you can install them as follows: $ composer require mezzio/mezzio-helpers","title":"Introduction"},{"location":"v3/features/helpers/intro/#helpers","text":"Some tasks and features will be common to many if not all applications. For those, Mezzio provides helpers . These are typically utility classes that may integrate features or simply provide standalone benefits. Currently, these include: Body Params Middleware Content-Length Middleware (since mezzio-helpers 4.1.0) UrlHelper ServerUrlHelper","title":"Helpers"},{"location":"v3/features/helpers/intro/#installation","text":"If you started your project using the Mezzio skeleton package, the helpers are already installed. If not, you can install them as follows: $ composer require mezzio/mezzio-helpers","title":"Installation"},{"location":"v3/features/helpers/server-url-helper/","text":"ServerUrlHelper Mezzio\\Helper\\ServerUrlHelper provides the ability to generate a full URI by passing only the path to the helper; it will then use that path with the current Psr\\Http\\Message\\UriInterface instance provided to it in order to generate a fully qualified URI. Usage When you have an instance, use either its generate() method, or call the instance as an invokable: // Using the generate() method: $url = $helper-&gt;generate('/foo'); // is equivalent to invocation: $url = $helper('/foo'); The helper is particularly useful when used in conjunction with the UrlHelper , as you can then create fully qualified URIs for use with headers, API hypermedia links, etc.: $url = $serverUrl($url('resource', ['id' =&gt; 'sha1'])); The signature for the ServerUrlHelper generate() and __invoke() methods is: function ($path = null) : string Where: $path , when provided, can be a string path to use to generate a URI. Creating an instance In order to use the helper, you will need to inject it with the current UriInterface from the request instance. To automate this, we provide Mezzio\\Helper\\ServerUrlMiddleware , which composes a ServerUrl instance, and, when invoked, injects it with the URI instance. As such, you will need to register the ServerUrlMiddleware as pipeline middleware, anytime before the routing middleware: use Mezzio\\Helper\\ServerUrlMiddleware; // Programmatically: $app-&gt;pipe(ServerUrlMiddleware::class); $app-&gt;pipe(RouteMiddleware::class); // ... $app-&gt;pipe(DispatchMiddleware::class); Skeleton configures helpers If you started your project using the Mezzio skeleton package, the ServerUrlHelper and ServerUrlMiddleware factories are already registered for you, as is the ServerUrlMiddleware pipeline middleware. Using the helper in middleware Compose the helper in your middleware (or elsewhere), and then use it to generate URI paths: use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterfacel use Psr\\Http\\Server\\RequestHandlerInterface; use Mezzio\\Helper\\ServerUrlHelper; class FooMiddleware implements MiddlewareInterface { private $helper; public function __construct(ServerUrlHelper $helper) { $this-&gt;helper = $helper; } public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { $response = $handler-&gt;handle($request); return $response-&gt;withHeader( 'Link', $this-&gt;helper-&gt;generate() . '; rel=\"self\"' ); } }","title":"ServerUrlHelper"},{"location":"v3/features/helpers/server-url-helper/#serverurlhelper","text":"Mezzio\\Helper\\ServerUrlHelper provides the ability to generate a full URI by passing only the path to the helper; it will then use that path with the current Psr\\Http\\Message\\UriInterface instance provided to it in order to generate a fully qualified URI.","title":"ServerUrlHelper"},{"location":"v3/features/helpers/server-url-helper/#usage","text":"When you have an instance, use either its generate() method, or call the instance as an invokable: // Using the generate() method: $url = $helper-&gt;generate('/foo'); // is equivalent to invocation: $url = $helper('/foo'); The helper is particularly useful when used in conjunction with the UrlHelper , as you can then create fully qualified URIs for use with headers, API hypermedia links, etc.: $url = $serverUrl($url('resource', ['id' =&gt; 'sha1'])); The signature for the ServerUrlHelper generate() and __invoke() methods is: function ($path = null) : string Where: $path , when provided, can be a string path to use to generate a URI.","title":"Usage"},{"location":"v3/features/helpers/server-url-helper/#creating-an-instance","text":"In order to use the helper, you will need to inject it with the current UriInterface from the request instance. To automate this, we provide Mezzio\\Helper\\ServerUrlMiddleware , which composes a ServerUrl instance, and, when invoked, injects it with the URI instance. As such, you will need to register the ServerUrlMiddleware as pipeline middleware, anytime before the routing middleware: use Mezzio\\Helper\\ServerUrlMiddleware; // Programmatically: $app-&gt;pipe(ServerUrlMiddleware::class); $app-&gt;pipe(RouteMiddleware::class); // ... $app-&gt;pipe(DispatchMiddleware::class);","title":"Creating an instance"},{"location":"v3/features/helpers/server-url-helper/#using-the-helper-in-middleware","text":"Compose the helper in your middleware (or elsewhere), and then use it to generate URI paths: use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterfacel use Psr\\Http\\Server\\RequestHandlerInterface; use Mezzio\\Helper\\ServerUrlHelper; class FooMiddleware implements MiddlewareInterface { private $helper; public function __construct(ServerUrlHelper $helper) { $this-&gt;helper = $helper; } public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { $response = $handler-&gt;handle($request); return $response-&gt;withHeader( 'Link', $this-&gt;helper-&gt;generate() . '; rel=\"self\"' ); } }","title":"Using the helper in middleware"},{"location":"v3/features/helpers/template-variable-container/","text":"Template Variable Container Since mezzio-helpers 5.3.0 mezzio-template provides the method Mezzio\\Template\\TemplateRendererInterface::addDefaultParam() for providing template variables that should be available to any template. One common use case for this is to set things such as the current user, current section of the website, currently matched route, etc. Unfortunately, because the method changes the internal state of the renderer, this can cause problems in an async environment, such as Swoole , where those changes will persist for parallel and subsequent requests. To provide a stateless alternative, you can create a Mezzio\\Helper\\Template\\TemplateVariableContainer and persist it as a request attribute. This allows you to set template variables that are pipeline-specific, and later extract and merge them with handler-specific values when rendering. To facilitate this further, we provide Mezzio\\Helper\\Template\\TemplateVariableContainerMiddleware , which will populate the attribute for you if it has not yet been. The container is immutable , and any changes will result in a new instance. As such, any middleware that is providing additional values or removing values must call $request-&gt;withAttribute() to replace the instance, per the examples below. When to use the TemplateVariableContainer If you are calling addDefaultParam() only in your factory for creating your template renderer instance, or within delegator factories on the renderer, you do not need to make any changes. If you are using our Swoole integrations or other async application runners, and either currently or plan to set template parameters withing pipeline middleware you definitely need to use the TemplateVariableContainer in order to prevent state problems. We actually recommend using this approach even if you are not using Swoole or other async application runners, as the approach is more explicit and easily tested, and, as noted, does not depend on state within the renderer itself. Usage As an example, consider the following pipeline: // In config/pipeline.php use Psr\\Container\\ContainerInterface; use Mezzio\\Application; use Mezzio\\Handler\\NotFoundHandler; use Mezzio\\Helper\\ServerUrlMiddleware; use Mezzio\\Helper\\Template\\TemplateVariableContainerMiddleware; use Mezzio\\Helper\\UrlHelperMiddleware; use Mezzio\\MiddlewareFactory; use Mezzio\\Router\\Middleware\\DispatchMiddleware; use Mezzio\\Router\\Middleware\\ImplicitHeadMiddleware; use Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware; use Mezzio\\Router\\Middleware\\MethodNotAllowedMiddleware; use Mezzio\\Router\\Middleware\\RouteMiddleware; use Laminas\\Stratigility\\Middleware\\ErrorHandler; use function Laminas\\Stratigility\\path; return function (Application $app, MiddlewareFactory $factory, ContainerInterface $container) : void { $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipe(ServerUrlMiddleware::class); // The following entry is specific to this example: $app-&gt;pipe(path( '/api/doc', $factory-&gt;lazy(TemplateVariableContainerMiddleware::class) )); $app-&gt;pipe(RouteMiddleware::class); $app-&gt;pipe(ImplicitHeadMiddleware::class); $app-&gt;pipe(ImplicitOptionsMiddleware::class); $app-&gt;pipe(MethodNotAllowedMiddleware::class); $app-&gt;pipe(UrlHelperMiddleware::class); $app-&gt;pipe(DispatchMiddleware::class); $app-&gt;pipe(NotFoundHandler::class); }; Any middleware or handler that responds to a path beginning with /api/doc will now have a Mezzio\\Helper\\Template\\TemplateVariableContainer attribute that contains an instance of that class. Within middleware that responds on that path, you can then do the following: use Mezzio\\Helper\\Template\\TemplateVariableContainer; use Mezzio\\Router\\RouteResult; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class InjectUserAndRouteVariablesMiddleware implements MiddlewareInterface { public function process( ServerRequestInterface $request, RequestHandlerInterface $handler ) : ResponseInterface { $container = $request-&gt;getAttribute( TemplateVariableContainer::class, new TemplateVariableContainer() ); // Since containers are immutable, we re-populate the request: $request = $request-&gt;withAttribute( TemplateVariableContainer::class, $container-&gt;merge([ 'user' =&gt; $user, 'route' =&gt; $request-&gt;getAttribute(RouteResult::class), ]) ); return $handler-&gt;handle($request); } } In a handler, you will call mergeForTemplate() with any local variables you want to use, including those that might override the defaults: use Psr\\Http\\Message\\ResponseFactoryInterface; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\StreamFactoryInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\RequestHandlerInterface; use Mezzio\\Helper\\Template\\TemplateVariableContainer; use Mezzio\\Template\\TemplateRendererInterface; class SomeHandler implements RequestHandlerInterface { private $renderer; private $responseFactory; private $streamFactory; public function __construct( TemplateRendererInterface $renderer, ResponseFactoryInterface $responseFactory, StreamFactoryInterface $streamFactory ) { $this-&gt;renderer = $renderer; $this-&gt;responseFactory = $responseFactory; $this-&gt;streamFactory = $streamFactory; } public function handle(ServerRequestInterface $request) : ResponseInterface { $value = $request-&gt;getParsedBody()['key'] ?? null; $content = $this-&gt;renderer-&gt;render( 'some::template', $request -&gt;getAttribute(TemplateVariableContainer::class) -&gt;mergeForTemplate([ 'local' =&gt; $value, ]) ); $body = $this-&gt;streamFactory()-&gt;createStream($content); return $this-&gt;responseFactory()-&gt;createResponse(200)-&gt;withBody($body); } } The TemplateVariableContainer contains the following methods: count() : int : return a count of variables in the container. get(string $key) : mixed : return the value associated with $key ; if not present, a null is returned. has(string $key) : bool : does the container have an entry associated with $key ? with(string $key, mixed $value) : self : return a new container instance containing the key/value pair provided. without(string $key) : self : return a new container instance that does not contain the given $key . merge(array $values) : self : return a new container that merge the $values provided with those in the original container. This is useful for setting many values at once. mergeForTemplate(array $values) : array : merge $values with any values in the container, and return the result. This method has no side effects, and should be used when preparing variables to pass to the renderer. Route template variable middleware Since mezzio-helpers 5.3.0 Mezzio\\Helper\\Template\\RouteTemplateVariableMiddleware will inject the currently matched route into the template variable container . This middleware relies on the TemplateVariableContainerMiddleware preceding it in the middleware pipeline, or having the TemplateVariableContainer request attribute present; if neither is present, it will generate a new instance. It then populates the container's route parameter using the results of retrieving the Mezzio\\Router\\RouteResult request attribute; the value will be either an instance of that class, or null . Templates rendered using the container can then access that value, and test for routing success/failure status, pull the matched route name, route, and/or parameters from it. This middleware can replace the UrlHelperMiddleware in your pipeline.","title":"Template Variable Container"},{"location":"v3/features/helpers/template-variable-container/#template-variable-container","text":"Since mezzio-helpers 5.3.0 mezzio-template provides the method Mezzio\\Template\\TemplateRendererInterface::addDefaultParam() for providing template variables that should be available to any template. One common use case for this is to set things such as the current user, current section of the website, currently matched route, etc. Unfortunately, because the method changes the internal state of the renderer, this can cause problems in an async environment, such as Swoole , where those changes will persist for parallel and subsequent requests. To provide a stateless alternative, you can create a Mezzio\\Helper\\Template\\TemplateVariableContainer and persist it as a request attribute. This allows you to set template variables that are pipeline-specific, and later extract and merge them with handler-specific values when rendering. To facilitate this further, we provide Mezzio\\Helper\\Template\\TemplateVariableContainerMiddleware , which will populate the attribute for you if it has not yet been. The container is immutable , and any changes will result in a new instance. As such, any middleware that is providing additional values or removing values must call $request-&gt;withAttribute() to replace the instance, per the examples below.","title":"Template Variable Container"},{"location":"v3/features/helpers/template-variable-container/#usage","text":"As an example, consider the following pipeline: // In config/pipeline.php use Psr\\Container\\ContainerInterface; use Mezzio\\Application; use Mezzio\\Handler\\NotFoundHandler; use Mezzio\\Helper\\ServerUrlMiddleware; use Mezzio\\Helper\\Template\\TemplateVariableContainerMiddleware; use Mezzio\\Helper\\UrlHelperMiddleware; use Mezzio\\MiddlewareFactory; use Mezzio\\Router\\Middleware\\DispatchMiddleware; use Mezzio\\Router\\Middleware\\ImplicitHeadMiddleware; use Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware; use Mezzio\\Router\\Middleware\\MethodNotAllowedMiddleware; use Mezzio\\Router\\Middleware\\RouteMiddleware; use Laminas\\Stratigility\\Middleware\\ErrorHandler; use function Laminas\\Stratigility\\path; return function (Application $app, MiddlewareFactory $factory, ContainerInterface $container) : void { $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipe(ServerUrlMiddleware::class); // The following entry is specific to this example: $app-&gt;pipe(path( '/api/doc', $factory-&gt;lazy(TemplateVariableContainerMiddleware::class) )); $app-&gt;pipe(RouteMiddleware::class); $app-&gt;pipe(ImplicitHeadMiddleware::class); $app-&gt;pipe(ImplicitOptionsMiddleware::class); $app-&gt;pipe(MethodNotAllowedMiddleware::class); $app-&gt;pipe(UrlHelperMiddleware::class); $app-&gt;pipe(DispatchMiddleware::class); $app-&gt;pipe(NotFoundHandler::class); }; Any middleware or handler that responds to a path beginning with /api/doc will now have a Mezzio\\Helper\\Template\\TemplateVariableContainer attribute that contains an instance of that class. Within middleware that responds on that path, you can then do the following: use Mezzio\\Helper\\Template\\TemplateVariableContainer; use Mezzio\\Router\\RouteResult; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class InjectUserAndRouteVariablesMiddleware implements MiddlewareInterface { public function process( ServerRequestInterface $request, RequestHandlerInterface $handler ) : ResponseInterface { $container = $request-&gt;getAttribute( TemplateVariableContainer::class, new TemplateVariableContainer() ); // Since containers are immutable, we re-populate the request: $request = $request-&gt;withAttribute( TemplateVariableContainer::class, $container-&gt;merge([ 'user' =&gt; $user, 'route' =&gt; $request-&gt;getAttribute(RouteResult::class), ]) ); return $handler-&gt;handle($request); } } In a handler, you will call mergeForTemplate() with any local variables you want to use, including those that might override the defaults: use Psr\\Http\\Message\\ResponseFactoryInterface; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\StreamFactoryInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\RequestHandlerInterface; use Mezzio\\Helper\\Template\\TemplateVariableContainer; use Mezzio\\Template\\TemplateRendererInterface; class SomeHandler implements RequestHandlerInterface { private $renderer; private $responseFactory; private $streamFactory; public function __construct( TemplateRendererInterface $renderer, ResponseFactoryInterface $responseFactory, StreamFactoryInterface $streamFactory ) { $this-&gt;renderer = $renderer; $this-&gt;responseFactory = $responseFactory; $this-&gt;streamFactory = $streamFactory; } public function handle(ServerRequestInterface $request) : ResponseInterface { $value = $request-&gt;getParsedBody()['key'] ?? null; $content = $this-&gt;renderer-&gt;render( 'some::template', $request -&gt;getAttribute(TemplateVariableContainer::class) -&gt;mergeForTemplate([ 'local' =&gt; $value, ]) ); $body = $this-&gt;streamFactory()-&gt;createStream($content); return $this-&gt;responseFactory()-&gt;createResponse(200)-&gt;withBody($body); } } The TemplateVariableContainer contains the following methods: count() : int : return a count of variables in the container. get(string $key) : mixed : return the value associated with $key ; if not present, a null is returned. has(string $key) : bool : does the container have an entry associated with $key ? with(string $key, mixed $value) : self : return a new container instance containing the key/value pair provided. without(string $key) : self : return a new container instance that does not contain the given $key . merge(array $values) : self : return a new container that merge the $values provided with those in the original container. This is useful for setting many values at once. mergeForTemplate(array $values) : array : merge $values with any values in the container, and return the result. This method has no side effects, and should be used when preparing variables to pass to the renderer.","title":"Usage"},{"location":"v3/features/helpers/template-variable-container/#route-template-variable-middleware","text":"Since mezzio-helpers 5.3.0 Mezzio\\Helper\\Template\\RouteTemplateVariableMiddleware will inject the currently matched route into the template variable container . This middleware relies on the TemplateVariableContainerMiddleware preceding it in the middleware pipeline, or having the TemplateVariableContainer request attribute present; if neither is present, it will generate a new instance. It then populates the container's route parameter using the results of retrieving the Mezzio\\Router\\RouteResult request attribute; the value will be either an instance of that class, or null . Templates rendered using the container can then access that value, and test for routing success/failure status, pull the matched route name, route, and/or parameters from it. This middleware can replace the UrlHelperMiddleware in your pipeline.","title":"Route template variable middleware"},{"location":"v3/features/helpers/url-helper/","text":"UrlHelper Mezzio\\Helper\\UrlHelper provides the ability to generate a URI path based on a given route defined in the Mezzio\\Router\\RouterInterface . If injected with a route result, and the route being used was also the one matched during routing, you can provide a subset of routing parameters, and any not provided will be pulled from those matched. Usage When you have an instance, use either its generate() method, or call the instance as an invokable: // Using the generate() method: $url = $helper-&gt;generate('resource', ['id' =&gt; 'sha1']); // is equivalent to invocation: $url = $helper('resource', ['id' =&gt; 'sha1']); The signature for both is: function ( $routeName, array $routeParams = [], $queryParams = [], $fragmentIdentifier = null, array $options = [] ) : string Where: $routeName is the name of a route defined in the composed router. You may omit this argument if you want to generate the path for the currently matched request. $routeParams is an array of substitutions to use for the provided route, with the following behavior: If a RouteResult is composed in the helper, and the $routeName matches it, the provided $params will be merged with any matched parameters, with those provided taking precedence. If a RouteResult is not composed, or if the composed result does not match the provided $routeName , then only the $params provided will be used for substitutions. If no $params are provided, and the $routeName matches the currently matched route, then any matched parameters found will be used. parameters found will be used. If no $params are provided, and the $routeName does not match the currently matched route, or if no route result is present, then no substitutions will be made. $queryParams is an array of query string arguments to include in the generated URI. $fragmentIdentifier is a string to use as the URI fragment. $options is an array of options to provide to the router for purposes of controlling URI generation. As an example, laminas-router can consume \"translator\" and \"text_domain\" options in order to provide translated URIs. Each method will raise an exception if: No $routeName is provided, and no RouteResult is composed. No $routeName is provided, a RouteResult is composed, but that result represents a matching failure. The given $routeName is not defined in the router. Signature changes The signature listed above is current as of version 3.0.0 of mezzio/mezzio-helpers. Prior to that version, the helper only accepted the route name and route parameters. Other methods available getRouteResult() : ?Mezzio\\Router\\RouteResult (since mezzio-helpers 5.2.0): if you want access to the result of routing — and, consequently, the matched route name, matched route parameters, and matched route — you can use this method. The method returns null if no route result has been injected yet — which typically happens in the UrlHelperMiddleware , discussed in the next section. As an example: $templateParams = []; $routeResult = $this-&gt;urlHelper-&gt;getRouteResult(); if ($routeResult-&gt;isSuccess()) { $templateParams['route'] = $routeResult-&gt;getMatchedRouteName(); $templateParams['route_params'] = $routeResult-&gt;getMatchedParams(); } Registering the pipeline middleware For the UrlHelper to work, you must first register the UrlHelperMiddleware as pipeline middleware following the routing middleware, and before the dispatch middleware: use Mezzio\\Helper\\UrlHelperMiddleware; // Programmatically: $app-&gt;pipe(RouteMiddleware::class); // ... $app-&gt;pipe(UrlHelperMiddleware::class); $app-&gt;pipe(DispatchMiddleware::class); Skeleton configures helpers If you started your project using the Mezzio skeleton package, the UrlHelper and UrlHelperMiddleware factories are already registered for you, as is the UrlHelperMiddleware pipeline middleware. Using the helper in middleware Compose the helper in your middleware (or elsewhere), and then use it to generate URI paths: use Mezzio\\Helper\\UrlHelper; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class FooMiddleware implements MiddlewareInterface { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { $response = $handler-&gt;handle($request); return $response-&gt;withHeader( 'Link', $this-&gt;helper-&gt;generate('resource', ['id' =&gt; 'sha1']) ); } } Base Path support If your application is running under a subdirectory, or if you are running pipeline middleware that is intercepting on a subpath, the paths generated by the router may not reflect the base path , and thus be invalid. To accommodate this, the UrlHelper supports injection of the base path; when present, it will be prepended to the path generated by the router. As an example, perhaps you have middleware running to intercept a language prefix in the URL; this middleware could then inject the UrlHelper with the detected language, before stripping it off the request URI instance to pass on to the router: use Mezzio\\Helper\\UrlHelper; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class LocaleMiddleware implements MiddlewareInterface { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { $uri = $request-&gt;getUri(); $path = $uri-&gt;getPath(); if (! preg_match('#^/(?P&lt;locale&gt;[a-z]{2,3}([-_][a-zA-Z]{2}|))/#', $path, $matches)) { return $handler-&gt;handle($request); } $locale = $matches['locale']; Locale::setDefault(Locale::canonicalize($locale)); $this-&gt;helper-&gt;setBasePath($locale); return $handler-&gt;handle($request-&gt;withUri( $uri-&gt;withPath(substr($path, strlen($locale) + 1)) )); } } (Note: if the base path injected is not prefixed with / , the helper will add the slash.) Paths generated by the UriHelper from this point forward will have the detected language prefix. Router-specific helpers Since mezzio-router 3.1.0 and mezzio-helpers 5.1.0. Occasionally, you may want to provide a different router instance to nested pipeline middleware; in particular, this may occur when you want to segregate a pipeline by path . In such situations, you cannot reuse the UrlHelper instance, as a different router is in play; additionally, it may need to define a base path so that any generated URIs contain the full path information (since path segregation strips the specified path prefix from the request). To facilitate such scenarios, the factories for the UrlHelper and UrlHelperMiddleware allow providing optional arguments to allow varying behavior: UrlHelperFactory allows passing an alternate router service name. UrlHelperMiddlewareFactory allows passing an alternate URL helper service name. As an example, let us consider a module named Auth where we want to define a path-segregated middleware pipeline that has its own router and route middleware. We might define its dependency configuration as follows: namespace Auth; use Mezzio\\Helper\\UrlHelperFactory; use Mezzio\\Helper\\UrlHelperMiddlewareFactory; use Mezzio\\Router\\FastRouteRouter; use Mezzio\\Router\\Middleware\\RouteMiddlewareFactory; return [ 'dependencies' =&gt; [ 'factories' =&gt; [ // module-specific class name =&gt; factory Router::class =&gt; FastRouteRouterFactory::class, RouteMiddleware::class =&gt; new RouteMiddlewareFactory(Router::class), UrlHelper::class =&gt; new UrlHelperFactory('/auth', Router::class), UrlHelperMiddleware::class =&gt; new UrlHelperMiddlewareFactory(UrlHelper::class), ], ], ]; We could then create a path-segregated pipeline like the following: $app-&gt;pipe('/auth', [ \\Auth\\RouteMiddleware::class, // module-specific routing middleware! ImplicitHeadMiddleware::class, ImplicitOptionsMiddleware::class, MethodNotAllowedMiddleware::class, \\Auth\\UrlHelperMiddleware::class, // module-specific URL helper middleware! DispatchMiddleware::class, ]); Any handlers that the module-specific router routes to can then also compose the same UrlHelper instance via their factories: namespace Auth; use Psr\\Container\\ContainerInterface; class SomeHandlerFactory { public function __invoke(ContainerInterface $container) : SomeHandler { return new SomeHandler( $container-&gt;get(UrlHelper::class) // module-specific URL helper! ); } } This instance will then be properly configured to generate links using the module-specific router.","title":"UrlHelper"},{"location":"v3/features/helpers/url-helper/#urlhelper","text":"Mezzio\\Helper\\UrlHelper provides the ability to generate a URI path based on a given route defined in the Mezzio\\Router\\RouterInterface . If injected with a route result, and the route being used was also the one matched during routing, you can provide a subset of routing parameters, and any not provided will be pulled from those matched.","title":"UrlHelper"},{"location":"v3/features/helpers/url-helper/#usage","text":"When you have an instance, use either its generate() method, or call the instance as an invokable: // Using the generate() method: $url = $helper-&gt;generate('resource', ['id' =&gt; 'sha1']); // is equivalent to invocation: $url = $helper('resource', ['id' =&gt; 'sha1']); The signature for both is: function ( $routeName, array $routeParams = [], $queryParams = [], $fragmentIdentifier = null, array $options = [] ) : string Where: $routeName is the name of a route defined in the composed router. You may omit this argument if you want to generate the path for the currently matched request. $routeParams is an array of substitutions to use for the provided route, with the following behavior: If a RouteResult is composed in the helper, and the $routeName matches it, the provided $params will be merged with any matched parameters, with those provided taking precedence. If a RouteResult is not composed, or if the composed result does not match the provided $routeName , then only the $params provided will be used for substitutions. If no $params are provided, and the $routeName matches the currently matched route, then any matched parameters found will be used. parameters found will be used. If no $params are provided, and the $routeName does not match the currently matched route, or if no route result is present, then no substitutions will be made. $queryParams is an array of query string arguments to include in the generated URI. $fragmentIdentifier is a string to use as the URI fragment. $options is an array of options to provide to the router for purposes of controlling URI generation. As an example, laminas-router can consume \"translator\" and \"text_domain\" options in order to provide translated URIs. Each method will raise an exception if: No $routeName is provided, and no RouteResult is composed. No $routeName is provided, a RouteResult is composed, but that result represents a matching failure. The given $routeName is not defined in the router.","title":"Usage"},{"location":"v3/features/helpers/url-helper/#using-the-helper-in-middleware","text":"Compose the helper in your middleware (or elsewhere), and then use it to generate URI paths: use Mezzio\\Helper\\UrlHelper; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class FooMiddleware implements MiddlewareInterface { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { $response = $handler-&gt;handle($request); return $response-&gt;withHeader( 'Link', $this-&gt;helper-&gt;generate('resource', ['id' =&gt; 'sha1']) ); } }","title":"Using the helper in middleware"},{"location":"v3/features/helpers/url-helper/#base-path-support","text":"If your application is running under a subdirectory, or if you are running pipeline middleware that is intercepting on a subpath, the paths generated by the router may not reflect the base path , and thus be invalid. To accommodate this, the UrlHelper supports injection of the base path; when present, it will be prepended to the path generated by the router. As an example, perhaps you have middleware running to intercept a language prefix in the URL; this middleware could then inject the UrlHelper with the detected language, before stripping it off the request URI instance to pass on to the router: use Mezzio\\Helper\\UrlHelper; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class LocaleMiddleware implements MiddlewareInterface { private $helper; public function __construct(UrlHelper $helper) { $this-&gt;helper = $helper; } public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface { $uri = $request-&gt;getUri(); $path = $uri-&gt;getPath(); if (! preg_match('#^/(?P&lt;locale&gt;[a-z]{2,3}([-_][a-zA-Z]{2}|))/#', $path, $matches)) { return $handler-&gt;handle($request); } $locale = $matches['locale']; Locale::setDefault(Locale::canonicalize($locale)); $this-&gt;helper-&gt;setBasePath($locale); return $handler-&gt;handle($request-&gt;withUri( $uri-&gt;withPath(substr($path, strlen($locale) + 1)) )); } } (Note: if the base path injected is not prefixed with / , the helper will add the slash.) Paths generated by the UriHelper from this point forward will have the detected language prefix.","title":"Base Path support"},{"location":"v3/features/helpers/url-helper/#router-specific-helpers","text":"Since mezzio-router 3.1.0 and mezzio-helpers 5.1.0. Occasionally, you may want to provide a different router instance to nested pipeline middleware; in particular, this may occur when you want to segregate a pipeline by path . In such situations, you cannot reuse the UrlHelper instance, as a different router is in play; additionally, it may need to define a base path so that any generated URIs contain the full path information (since path segregation strips the specified path prefix from the request). To facilitate such scenarios, the factories for the UrlHelper and UrlHelperMiddleware allow providing optional arguments to allow varying behavior: UrlHelperFactory allows passing an alternate router service name. UrlHelperMiddlewareFactory allows passing an alternate URL helper service name. As an example, let us consider a module named Auth where we want to define a path-segregated middleware pipeline that has its own router and route middleware. We might define its dependency configuration as follows: namespace Auth; use Mezzio\\Helper\\UrlHelperFactory; use Mezzio\\Helper\\UrlHelperMiddlewareFactory; use Mezzio\\Router\\FastRouteRouter; use Mezzio\\Router\\Middleware\\RouteMiddlewareFactory; return [ 'dependencies' =&gt; [ 'factories' =&gt; [ // module-specific class name =&gt; factory Router::class =&gt; FastRouteRouterFactory::class, RouteMiddleware::class =&gt; new RouteMiddlewareFactory(Router::class), UrlHelper::class =&gt; new UrlHelperFactory('/auth', Router::class), UrlHelperMiddleware::class =&gt; new UrlHelperMiddlewareFactory(UrlHelper::class), ], ], ]; We could then create a path-segregated pipeline like the following: $app-&gt;pipe('/auth', [ \\Auth\\RouteMiddleware::class, // module-specific routing middleware! ImplicitHeadMiddleware::class, ImplicitOptionsMiddleware::class, MethodNotAllowedMiddleware::class, \\Auth\\UrlHelperMiddleware::class, // module-specific URL helper middleware! DispatchMiddleware::class, ]); Any handlers that the module-specific router routes to can then also compose the same UrlHelper instance via their factories: namespace Auth; use Psr\\Container\\ContainerInterface; class SomeHandlerFactory { public function __invoke(ContainerInterface $container) : SomeHandler { return new SomeHandler( $container-&gt;get(UrlHelper::class) // module-specific URL helper! ); } } This instance will then be properly configured to generate links using the module-specific router.","title":"Router-specific helpers"},{"location":"v3/features/middleware/implicit-methods-middleware/","text":"ImplicitHeadMiddleware and ImplicitOptionsMiddleware Mezzio offers middleware for implicitly supporting HEAD and OPTIONS requests. The HTTP/1.1 specifications indicate that all server implementations must support HEAD requests for any given URI, and that they should support OPTIONS requests. To make this possible, we have added features to our routing layer, and middleware that can detect implicit support for these methods (i.e., the route was not registered explicitly with the method). Both middleware detailed here are provided in the mezzio-router package. ImplicitHeadMiddleware Mezzio\\Router\\Middleware\\ImplicitHeadMiddleware provides support for handling HEAD requests to routed middleware when the route does not explicitly allow for the method. It should be registered between the routing and dispatch middleware. The mezzio-router package provides a factory for creating an instance, and registers it by default via its configuration provider. If you want to provide a response instance with additional headers or a custom status code, you will need to provide your own factory. Within your application pipeline, add the middleware between the routing and dispatch middleware, generally immediately following the routing middleware: $app-&gt;pipe(RouteMiddleware::class); $app-&gt;pipe(ImplicitHeadMiddleware::class); // ... $app-&gt;pipe(DispatchMiddleware::class); (Note: if you used the Mezzio skeleton, this middleware is likely already in your pipeline.) When in place, it will do the following: If the request method is HEAD , AND the request composes a RouteResult attribute, AND the route result indicates a routing failure due to HTTP method used, THEN the middleware will return a response. In all other cases, it returns the result of delegating to the next middleware layer. When the middleware decides it can answer the request, one of two things may occur. First, if the route does not support the GET method, then the middleware returns an empty response. However, if GET is supported, it will dispatch the next layer, but with a GET request instead of HEAD ; additionally, it will inject the returned response with an empty response body before returning it. Detecting forwarded requests When the next layer is dispatched, the request will have an additional attribute, Mezzio\\Router\\Middleware\\ImplicitHeadMiddleware::FORWARDED_HTTP_METHOD_ATTRIBUTE , with a value of HEAD . As such, you can check for this value in order to vary the headers returned if desired. ImplicitOptionsMiddleware Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware provides support for handling OPTIONS requests to routed middleware when the route does not explicitly allow for the method. Like the ImplicitHeadMiddleware , it should be registered between the routing and dispatch middleware. The mezzio-router package provides a factory for creating an instance, and registers it by default via its configuration provider. If you want to provide a response instance with additional headers or a custom status code, you will need to provide your own factory. Within your application pipeline, add the middleware between the routing and dispatch middleware, generally immediately following the routing middleware or ImplicitHeadMiddleware : $app-&gt;pipe(RouteMiddleware::class); $app-&gt;pipe(ImplicitOptionsMiddleware::class); // ... $app-&gt;pipe(DispatchMiddleware::class); (Note: if you used the Mezzio skeleton, this middleware is likely already in your pipeline.) When in place, it will do the following: If the request method is OPTIONS , AND the request composes a RouteResult attribute, AND the route result indicates a routing failure due to HTTP method used, THEN the middleware will return a 200 response with an Allow header indicating methods the route allows. In all other cases, it returns the result of delegating to the next middleware layer. One thing to note: the allowed methods reported by the route and/or route result, and returned via the Allow header, may vary based on router implementation. In most cases, it should be an aggregate of all routes using the same path specification; however, it could be only the methods supported explicitly by the matched route.","title":"Implicit HEAD and OPTIONS Middleware"},{"location":"v3/features/middleware/implicit-methods-middleware/#implicitheadmiddleware-and-implicitoptionsmiddleware","text":"Mezzio offers middleware for implicitly supporting HEAD and OPTIONS requests. The HTTP/1.1 specifications indicate that all server implementations must support HEAD requests for any given URI, and that they should support OPTIONS requests. To make this possible, we have added features to our routing layer, and middleware that can detect implicit support for these methods (i.e., the route was not registered explicitly with the method). Both middleware detailed here are provided in the mezzio-router package.","title":"ImplicitHeadMiddleware and ImplicitOptionsMiddleware"},{"location":"v3/features/middleware/implicit-methods-middleware/#implicitheadmiddleware","text":"Mezzio\\Router\\Middleware\\ImplicitHeadMiddleware provides support for handling HEAD requests to routed middleware when the route does not explicitly allow for the method. It should be registered between the routing and dispatch middleware. The mezzio-router package provides a factory for creating an instance, and registers it by default via its configuration provider. If you want to provide a response instance with additional headers or a custom status code, you will need to provide your own factory. Within your application pipeline, add the middleware between the routing and dispatch middleware, generally immediately following the routing middleware: $app-&gt;pipe(RouteMiddleware::class); $app-&gt;pipe(ImplicitHeadMiddleware::class); // ... $app-&gt;pipe(DispatchMiddleware::class); (Note: if you used the Mezzio skeleton, this middleware is likely already in your pipeline.) When in place, it will do the following: If the request method is HEAD , AND the request composes a RouteResult attribute, AND the route result indicates a routing failure due to HTTP method used, THEN the middleware will return a response. In all other cases, it returns the result of delegating to the next middleware layer. When the middleware decides it can answer the request, one of two things may occur. First, if the route does not support the GET method, then the middleware returns an empty response. However, if GET is supported, it will dispatch the next layer, but with a GET request instead of HEAD ; additionally, it will inject the returned response with an empty response body before returning it.","title":"ImplicitHeadMiddleware"},{"location":"v3/features/middleware/implicit-methods-middleware/#implicitoptionsmiddleware","text":"Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware provides support for handling OPTIONS requests to routed middleware when the route does not explicitly allow for the method. Like the ImplicitHeadMiddleware , it should be registered between the routing and dispatch middleware. The mezzio-router package provides a factory for creating an instance, and registers it by default via its configuration provider. If you want to provide a response instance with additional headers or a custom status code, you will need to provide your own factory. Within your application pipeline, add the middleware between the routing and dispatch middleware, generally immediately following the routing middleware or ImplicitHeadMiddleware : $app-&gt;pipe(RouteMiddleware::class); $app-&gt;pipe(ImplicitOptionsMiddleware::class); // ... $app-&gt;pipe(DispatchMiddleware::class); (Note: if you used the Mezzio skeleton, this middleware is likely already in your pipeline.) When in place, it will do the following: If the request method is OPTIONS , AND the request composes a RouteResult attribute, AND the route result indicates a routing failure due to HTTP method used, THEN the middleware will return a 200 response with an Allow header indicating methods the route allows. In all other cases, it returns the result of delegating to the next middleware layer. One thing to note: the allowed methods reported by the route and/or route result, and returned via the Allow header, may vary based on router implementation. In most cases, it should be an aggregate of all routes using the same path specification; however, it could be only the methods supported explicitly by the matched route.","title":"ImplicitOptionsMiddleware"},{"location":"v3/features/middleware/method-not-allowed-middleware/","text":"Returning Method Not Allowed When the path matches, but the HTTP method does not, your application should return a 405 Method Not Allowed status in response. To enable that functionality, we provide Mezzio\\Router\\Middleware\\MethodNotAllowedMiddleware via the mezzio-router package. This middleware triggers when the following conditions occur: The request composes a RouteResult attribute (i.e., routing middleware has completed), AND the route result indicates a routing failure due to HTTP method used (i.e., RouteResult::isMethodFailure() returns true ). When these conditions occur, the middleware will generate a response: with a 405 Method Not Allowed status, AND an Allow header indicating the HTTP methods allowed. Pipe the middleware after the routing middleware; if using one or more of the implicit methods middleware , this middleware must be piped after them, as it will respond for any HTTP method! $app-&gt;pipe(RouteMiddleware::class); $app-&gt;pipe(ImplicitHeadMiddleware::class); $app-&gt;pipe(ImplicitOptionsMiddleware::class); $app-&gt;pipe(MethodNotAllowedMiddleware::class); // ... $app-&gt;pipe(DispatchMiddleware::class); (Note: if you used the Mezzio skeleton, this middleware is likely already in your pipeline.)","title":"Returning Method Not Allowed"},{"location":"v3/features/middleware/method-not-allowed-middleware/#returning-method-not-allowed","text":"When the path matches, but the HTTP method does not, your application should return a 405 Method Not Allowed status in response. To enable that functionality, we provide Mezzio\\Router\\Middleware\\MethodNotAllowedMiddleware via the mezzio-router package. This middleware triggers when the following conditions occur: The request composes a RouteResult attribute (i.e., routing middleware has completed), AND the route result indicates a routing failure due to HTTP method used (i.e., RouteResult::isMethodFailure() returns true ). When these conditions occur, the middleware will generate a response: with a 405 Method Not Allowed status, AND an Allow header indicating the HTTP methods allowed. Pipe the middleware after the routing middleware; if using one or more of the implicit methods middleware , this middleware must be piped after them, as it will respond for any HTTP method! $app-&gt;pipe(RouteMiddleware::class); $app-&gt;pipe(ImplicitHeadMiddleware::class); $app-&gt;pipe(ImplicitOptionsMiddleware::class); $app-&gt;pipe(MethodNotAllowedMiddleware::class); // ... $app-&gt;pipe(DispatchMiddleware::class); (Note: if you used the Mezzio skeleton, this middleware is likely already in your pipeline.)","title":"Returning Method Not Allowed"},{"location":"v3/features/middleware/routing-and-dispatch-middleware/","text":"Routing and Dispatch Middleware Within Mezzio, we differentiate routing from dispatching . Routing is the act of matching a request to middleware; this typically involves inspecting the path and HTTP method used, but may also consider aspects such as headers, protocol, and more. Dispatching occurs after routing; it examines the results of routing, processing the middleware matched. Mezzio goes so far as to separate the two actions into separate middleware . This is done to allow additional middleware to execute between them. For example, as you'll learn in the next two chapters, we can look for routing failures and answer HEAD and OPTIONS requests, or return a 405 Method Not Allowed status without ever hitting the dispatch middleware. When you read about the UrlHelper , you'll discover it has associated middleware that can receive the results of routing in order to facilitate URI generation. Keeping the two actions separated as distinct middleware provides a ton of power and flexibility in building your applications. We provide two middleware around these actions, each in the Mezzio\\Router\\Middleware namespace and provided by the mezzio/mezzio-router package: RouteMiddleware , which consumes a router in order to route a request. DispatchMiddleware , which dispatches the route result. RouteMiddleware Mezzio\\Router\\Middleware\\RouteMiddleware receives a Mezzio\\Router\\RouterInterface instance to its constructor. When it is processed, it passes the request to the router in order to receive a Mezzio\\Router\\RouteResult instance. When the result indicates a match, the middleware creates an updated request instance that includes each of the route match parameters as attributes. Regardless of the result, it will create an updated request instance that includes the result as the attribute Mezzio\\Router\\RouteResult . It then invokes the handler; all later middleware can then access the route result using: $result = $request-&gt;getAttribute(\\Mezzio\\Router\\RouteResult::class); DispatchMiddleware Mezzio\\Router\\Middleware\\DispatchMiddleware defines only the process() method required by the PSR-15 MiddlewareInterface . Internally, it: checks for a RouteResult in the request, AND processes it, passing the request and handler. If there is no RouteResult , it delegates to the handler without doing anything else.","title":"Routing and Dispatch Middleware"},{"location":"v3/features/middleware/routing-and-dispatch-middleware/#routing-and-dispatch-middleware","text":"Within Mezzio, we differentiate routing from dispatching . Routing is the act of matching a request to middleware; this typically involves inspecting the path and HTTP method used, but may also consider aspects such as headers, protocol, and more. Dispatching occurs after routing; it examines the results of routing, processing the middleware matched. Mezzio goes so far as to separate the two actions into separate middleware . This is done to allow additional middleware to execute between them. For example, as you'll learn in the next two chapters, we can look for routing failures and answer HEAD and OPTIONS requests, or return a 405 Method Not Allowed status without ever hitting the dispatch middleware. When you read about the UrlHelper , you'll discover it has associated middleware that can receive the results of routing in order to facilitate URI generation. Keeping the two actions separated as distinct middleware provides a ton of power and flexibility in building your applications. We provide two middleware around these actions, each in the Mezzio\\Router\\Middleware namespace and provided by the mezzio/mezzio-router package: RouteMiddleware , which consumes a router in order to route a request. DispatchMiddleware , which dispatches the route result.","title":"Routing and Dispatch Middleware"},{"location":"v3/features/middleware/routing-and-dispatch-middleware/#routemiddleware","text":"Mezzio\\Router\\Middleware\\RouteMiddleware receives a Mezzio\\Router\\RouterInterface instance to its constructor. When it is processed, it passes the request to the router in order to receive a Mezzio\\Router\\RouteResult instance. When the result indicates a match, the middleware creates an updated request instance that includes each of the route match parameters as attributes. Regardless of the result, it will create an updated request instance that includes the result as the attribute Mezzio\\Router\\RouteResult . It then invokes the handler; all later middleware can then access the route result using: $result = $request-&gt;getAttribute(\\Mezzio\\Router\\RouteResult::class);","title":"RouteMiddleware"},{"location":"v3/features/middleware/routing-and-dispatch-middleware/#dispatchmiddleware","text":"Mezzio\\Router\\Middleware\\DispatchMiddleware defines only the process() method required by the PSR-15 MiddlewareInterface . Internally, it: checks for a RouteResult in the request, AND processes it, passing the request and handler. If there is no RouteResult , it delegates to the handler without doing anything else.","title":"DispatchMiddleware"},{"location":"v3/features/router/aura/","text":"Using Aura.Router Aura.Router provides a plethora of methods for further configuring the router instance. One of the more useful configuration is to provide default specifications: A regular expression that applies the same for a given routing match: // Parameters named \"id\" will only match digits by default: $router-&gt;addTokens([ 'id' =&gt; '\\d+', ]); A default parameter and/or its default value to always provide: // mediatype defaults to \"application/xhtml+xml\" and will be available in all // requests: $router-&gt;addValues([ 'mediatype' =&gt; 'application/xhtml+xml', ]); Only match if secure (i.e., under HTTPS): $router-&gt;setSecure(true); In order to specify these, you need access to the underlying Aura.Router instance, however, and the RouterInterface does not provide an accessor! The answer, then, is to use dependency injection. This can be done in two ways: programmatically, or via a factory to use in conjunction with your container instance. Installing Aura.Router To use Aura.Router, you will first need to install the Aura.Router integration: $ composer require mezzio/mezzio-aurarouter Quick Start At its simplest, you can instantiate a Mezzio\\Router\\AuraRouter instance with no arguments; it will create the underlying Aura.Router objects required and compose them for you: use Mezzio\\Router\\AuraRouter; $router = new AuraRouter(); Programmatic Creation If you need greater control over the Aura.Router setup and configuration, you can create the instances necessary and inject them into Mezzio\\Router\\AuraRouter during instantiation. &lt;?php use Aura\\Router\\RouterFactory; use Mezzio\\AppFactory; use Mezzio\\Router\\AuraRouter as AuraBridge; $auraRouter = (new RouterFactory())-&gt;newInstance(); $auraRouter-&gt;setSecure(true); $auraRouter-&gt;addValues([ 'mediatype' =&gt; 'application/xhtml+xml', ]); $router = new AuraBridge($auraRouter); // First argument is the container to use, if not using the default; // second is the router. $app = AppFactory::create(null, $router); Piping the route middleware As a reminder, you will need to ensure that middleware is piped in the order in which it needs to be executed; please see the section on \"Controlling middleware execution order\" in the piping documentation . This is particularly salient when defining routes before injecting the router in the application instance! Factory-Driven Creation We provide and enable a factory for generating your Aura.Router instance when you install the mezzio-aurarouter package. This will generally serve your needs. If you want to provide custom setup or configuration, you can do so. In this example, we will be defining two factories: A factory to register as and generate an Aura\\Router\\Router instance. A factory registered as Mezzio\\Router\\RouterInterface , which creates and returns a Mezzio\\Router\\AuraRouter instance composing the Aura\\Router\\Router instance. The factory might look like this: // in src/App/Container/AuraRouterFactory.php: namespace App\\Container; use Aura\\Router\\RouterFactory; use Psr\\Container\\ContainerInterface; class AuraRouterFactory { /** * @param ContainerInterface $container * @return \\Aura\\Router\\Router */ public function __invoke(ContainerInterface $container) { $router = (new RouterFactory())-&gt;newInstance(); $router-&gt;setSecure(true); $router-&gt;addValues([ 'mediatype' =&gt; 'application/xhtml+xml', ]); return $router; } } // in src/App/Container/RouterFactory.php namespace App\\Container; use Psr\\Container\\ContainerInterface; use Mezzio\\Router\\AuraRouter as AuraBridge; class RouterFactory { /** * @param ContainerInterface $container * @return AuraBridge */ public function __invoke(ContainerInterface $container) { return new AuraBridge($container-&gt;get('Aura\\Router\\Router')); } } From here, you will need to register your factories with your IoC container: // in a config/autoload/ file, or within a ConfigProvider class: return [ 'factories' =&gt; [ \\Aura\\Router\\Router::class =&gt; \\App\\Container\\AuraRouterFactory::class, \\Mezzio\\Router\\RouterInterface::class =&gt; \\App\\Container\\RouterFactory::class, ], ];","title":"Using Aura"},{"location":"v3/features/router/aura/#using-aurarouter","text":"Aura.Router provides a plethora of methods for further configuring the router instance. One of the more useful configuration is to provide default specifications: A regular expression that applies the same for a given routing match: // Parameters named \"id\" will only match digits by default: $router-&gt;addTokens([ 'id' =&gt; '\\d+', ]); A default parameter and/or its default value to always provide: // mediatype defaults to \"application/xhtml+xml\" and will be available in all // requests: $router-&gt;addValues([ 'mediatype' =&gt; 'application/xhtml+xml', ]); Only match if secure (i.e., under HTTPS): $router-&gt;setSecure(true); In order to specify these, you need access to the underlying Aura.Router instance, however, and the RouterInterface does not provide an accessor! The answer, then, is to use dependency injection. This can be done in two ways: programmatically, or via a factory to use in conjunction with your container instance.","title":"Using Aura.Router"},{"location":"v3/features/router/aura/#installing-aurarouter","text":"To use Aura.Router, you will first need to install the Aura.Router integration: $ composer require mezzio/mezzio-aurarouter","title":"Installing Aura.Router"},{"location":"v3/features/router/aura/#quick-start","text":"At its simplest, you can instantiate a Mezzio\\Router\\AuraRouter instance with no arguments; it will create the underlying Aura.Router objects required and compose them for you: use Mezzio\\Router\\AuraRouter; $router = new AuraRouter();","title":"Quick Start"},{"location":"v3/features/router/aura/#programmatic-creation","text":"If you need greater control over the Aura.Router setup and configuration, you can create the instances necessary and inject them into Mezzio\\Router\\AuraRouter during instantiation. &lt;?php use Aura\\Router\\RouterFactory; use Mezzio\\AppFactory; use Mezzio\\Router\\AuraRouter as AuraBridge; $auraRouter = (new RouterFactory())-&gt;newInstance(); $auraRouter-&gt;setSecure(true); $auraRouter-&gt;addValues([ 'mediatype' =&gt; 'application/xhtml+xml', ]); $router = new AuraBridge($auraRouter); // First argument is the container to use, if not using the default; // second is the router. $app = AppFactory::create(null, $router);","title":"Programmatic Creation"},{"location":"v3/features/router/aura/#factory-driven-creation","text":"We provide and enable a factory for generating your Aura.Router instance when you install the mezzio-aurarouter package. This will generally serve your needs. If you want to provide custom setup or configuration, you can do so. In this example, we will be defining two factories: A factory to register as and generate an Aura\\Router\\Router instance. A factory registered as Mezzio\\Router\\RouterInterface , which creates and returns a Mezzio\\Router\\AuraRouter instance composing the Aura\\Router\\Router instance. The factory might look like this: // in src/App/Container/AuraRouterFactory.php: namespace App\\Container; use Aura\\Router\\RouterFactory; use Psr\\Container\\ContainerInterface; class AuraRouterFactory { /** * @param ContainerInterface $container * @return \\Aura\\Router\\Router */ public function __invoke(ContainerInterface $container) { $router = (new RouterFactory())-&gt;newInstance(); $router-&gt;setSecure(true); $router-&gt;addValues([ 'mediatype' =&gt; 'application/xhtml+xml', ]); return $router; } } // in src/App/Container/RouterFactory.php namespace App\\Container; use Psr\\Container\\ContainerInterface; use Mezzio\\Router\\AuraRouter as AuraBridge; class RouterFactory { /** * @param ContainerInterface $container * @return AuraBridge */ public function __invoke(ContainerInterface $container) { return new AuraBridge($container-&gt;get('Aura\\Router\\Router')); } } From here, you will need to register your factories with your IoC container: // in a config/autoload/ file, or within a ConfigProvider class: return [ 'factories' =&gt; [ \\Aura\\Router\\Router::class =&gt; \\App\\Container\\AuraRouterFactory::class, \\Mezzio\\Router\\RouterInterface::class =&gt; \\App\\Container\\RouterFactory::class, ], ];","title":"Factory-Driven Creation"},{"location":"v3/features/router/fast-route/","text":"Using FastRoute FastRoute provides a number of different combinations for how to both parse routes and match incoming requests against them. Internally, we use the standard route parser ( FastRoute\\RouterParser\\Std ) to parse routes, a RouteCollector to collect them, and the \"Group Count Based\" dispatcher to match incoming requests against routes. If you wish to use a different combination — e.g., to use the Group Position Based route matcher — you will need to create your own instances and inject them into the Mezzio\\Router\\FastRouteRouter class, at instantiation. The FastRouteRouter bridge class accepts two arguments at instantiation: A FastRoute\\RouteCollector instance A callable that will return a FastRoute\\Dispatcher\\RegexBasedAbstract instance. Injection can be done either programmatically or via a factory to use in conjunction with your container instance. Installing FastRoute To use FastRoute, you will first need to install the FastRoute integration: $ composer require mezzio/mezzio-fastroute The package provides a factory for the router, and wires it to your container by default. This will serve the majority of use cases. If you want to provide custom setup or configuration, you can do so. In this example, we will be defining three factories: A factory to register as and generate a FastRoute\\RouteCollector instance. A factory to register as FastRoute\\DispatcherFactory and return a callable factory that returns a RegexBasedAbstract instance. A factory registered as Mezzio\\Router\\RouterInterface , which creates and returns a Mezzio\\Router\\FastRouteRouter instance composing the two services. The factories might look like the following: &lt;?php // in src/App/Container/FastRouteCollectorFactory.php: namespace App\\Container; use FastRoute\\RouteCollector; use FastRoute\\RouteGenerator; use FastRoute\\RouteParser\\Std as RouteParser; use Psr\\Container\\ContainerInterface; class FastRouteCollectorFactory { /** * @param ContainerInterface $container * @return RouteCollector */ public function __invoke(ContainerInterface $container) { return new RouteCollector( new RouteParser(), new RouteGenerator() ); } } // in src/App/Container/FastRouteDispatcherFactory.php: namespace App\\Container; use FastRoute\\Dispatcher\\GroupPosBased as FastRouteDispatcher; use Psr\\Container\\ContainerInterface; class FastRouteDispatcherFactory { /** * @param ContainerInterface $container * @return callable */ public function __invoke(ContainerInterface $container) { return function ($data) { return new FastRouteDispatcher($data); }; } } // in src/App/Container/RouterFactory.php namespace App\\Container; use Mezzio\\Router\\FastRouteRouter as FastRouteBridge; use Psr\\Container\\ContainerInterface; class RouterFactory { /** * @param ContainerInterface $container * @return FastRouteBridge */ public function __invoke(ContainerInterface $container) { return new FastRouteBridge( $container-&gt;get(FastRoute\\RouteCollector::class), $container-&gt;get(FastRoute\\DispatcherFactory::class) ); } } From here, you will need to register your factories with your IoC container. // in a config/autoload/ file, or within a ConfigProvider class: return [ 'factories' =&gt; [ \\FastRoute\\RouteCollector::class =&gt; \\App\\Container\\FastRouteCollectorFactory::class, \\FastRoute\\DispatcherFactory::class =&gt; \\App\\Container\\FastRouteDispatcherFactory::class, \\Mezzio\\Router\\RouterInterface::class =&gt; \\App\\Container\\RouterFactory::class, ], ]; FastRoute caching support mezzio-fastroute comes with support for FastRoute native dispatch data caching. Enabling this feature requires changes to your configuration. Typically, router configuration occurs in config/autoload/routes.global.php ; as such, we will reference that file when indicating configuration changes. The changes required are: You will need to delegate creation of the router instance to a new factory. You will need to add a new configuration entry, $config['router']['fastroute'] . The options in this entry will be used by the factory to build the router instance in order to toggle caching support and to specify a custom cache file. As an example: // File config/autoload/routes.global.php return [ 'dependencies' =&gt; [ //.. 'invokables' =&gt; [ /* ... */ // Comment out or remove the following line: // Mezzio\\Router\\RouterInterface::class =&gt; Mezzio\\Router\\FastRouteRouter::class, /* ... */ ], 'factories' =&gt; [ /* ... */ // Add this line; the specified factory now creates the router instance: Mezzio\\Router\\RouterInterface::class =&gt; Mezzio\\Router\\FastRouteRouterFactory::class, /* ... */ ], ], // Add the following to enable caching support: 'router' =&gt; [ 'fastroute' =&gt; [ // Enable caching support: 'cache_enabled' =&gt; true, // Optional (but recommended) cache file path: 'cache_file' =&gt; 'data/cache/fastroute.php.cache', ], ], 'routes' =&gt; [ /* ... */ ], ]; The FastRoute-specific caching options are as follows: cache_enabled (bool) is used to toggle caching support. It's advisable to enable caching in a production environment and leave it disabled for the development environment. Commenting or omitting this option is equivalent to having it set to false . We recommend enabling it in config/autoload/routes.global.php , and, in development, disabling it within config/autoload/routes.local.php or config/autoload/local.php . cache_file (string) is an optional parameter that represents the path of the dispatch data cache file. It can be provided as an absolute file path or as a path relative to the mezzio working directory. It defaults to data/cache/fastroute.php.cache , where data/cache/ is the cache directory defined within the mezzio skeleton application. An explicit absolute file path is recommended since the php include construct will skip searching the include_path and the current directory. If you choose a custom path, make sure that the directory exists and is writable by the owner of the PHP process. As with any other mezzio cached configuration, you will need to purge this file in order to enable any newly added route when FastRoute caching is enabled.","title":"Using FastRoute"},{"location":"v3/features/router/fast-route/#using-fastroute","text":"FastRoute provides a number of different combinations for how to both parse routes and match incoming requests against them. Internally, we use the standard route parser ( FastRoute\\RouterParser\\Std ) to parse routes, a RouteCollector to collect them, and the \"Group Count Based\" dispatcher to match incoming requests against routes. If you wish to use a different combination — e.g., to use the Group Position Based route matcher — you will need to create your own instances and inject them into the Mezzio\\Router\\FastRouteRouter class, at instantiation. The FastRouteRouter bridge class accepts two arguments at instantiation: A FastRoute\\RouteCollector instance A callable that will return a FastRoute\\Dispatcher\\RegexBasedAbstract instance. Injection can be done either programmatically or via a factory to use in conjunction with your container instance.","title":"Using FastRoute"},{"location":"v3/features/router/fast-route/#installing-fastroute","text":"To use FastRoute, you will first need to install the FastRoute integration: $ composer require mezzio/mezzio-fastroute The package provides a factory for the router, and wires it to your container by default. This will serve the majority of use cases. If you want to provide custom setup or configuration, you can do so. In this example, we will be defining three factories: A factory to register as and generate a FastRoute\\RouteCollector instance. A factory to register as FastRoute\\DispatcherFactory and return a callable factory that returns a RegexBasedAbstract instance. A factory registered as Mezzio\\Router\\RouterInterface , which creates and returns a Mezzio\\Router\\FastRouteRouter instance composing the two services. The factories might look like the following: &lt;?php // in src/App/Container/FastRouteCollectorFactory.php: namespace App\\Container; use FastRoute\\RouteCollector; use FastRoute\\RouteGenerator; use FastRoute\\RouteParser\\Std as RouteParser; use Psr\\Container\\ContainerInterface; class FastRouteCollectorFactory { /** * @param ContainerInterface $container * @return RouteCollector */ public function __invoke(ContainerInterface $container) { return new RouteCollector( new RouteParser(), new RouteGenerator() ); } } // in src/App/Container/FastRouteDispatcherFactory.php: namespace App\\Container; use FastRoute\\Dispatcher\\GroupPosBased as FastRouteDispatcher; use Psr\\Container\\ContainerInterface; class FastRouteDispatcherFactory { /** * @param ContainerInterface $container * @return callable */ public function __invoke(ContainerInterface $container) { return function ($data) { return new FastRouteDispatcher($data); }; } } // in src/App/Container/RouterFactory.php namespace App\\Container; use Mezzio\\Router\\FastRouteRouter as FastRouteBridge; use Psr\\Container\\ContainerInterface; class RouterFactory { /** * @param ContainerInterface $container * @return FastRouteBridge */ public function __invoke(ContainerInterface $container) { return new FastRouteBridge( $container-&gt;get(FastRoute\\RouteCollector::class), $container-&gt;get(FastRoute\\DispatcherFactory::class) ); } } From here, you will need to register your factories with your IoC container. // in a config/autoload/ file, or within a ConfigProvider class: return [ 'factories' =&gt; [ \\FastRoute\\RouteCollector::class =&gt; \\App\\Container\\FastRouteCollectorFactory::class, \\FastRoute\\DispatcherFactory::class =&gt; \\App\\Container\\FastRouteDispatcherFactory::class, \\Mezzio\\Router\\RouterInterface::class =&gt; \\App\\Container\\RouterFactory::class, ], ];","title":"Installing FastRoute"},{"location":"v3/features/router/interface/","text":"Routing Interface Mezzio defines Mezzio\\Router\\RouterInterface , which is used by the Mezzio\\Router\\RouteMiddleware — as well as the Mezzio\\Router\\RouteCollector consumed by Mezzio\\Application — in order to provide dynamic routing capabilities to middleware. The interface serves as an abstraction to allow routers with varying capabilities to be used with an application. The interface is defined as follows: namespace Mezzio\\Router; use Psr\\Http\\Message\\ServerRequestInterface as Request; /** * Interface defining required router capabilities. */ interface RouterInterface { /** * Add a route. * * This method adds a route against which the underlying implementation may * match. Implementations MUST aggregate route instances, but MUST NOT use * the details to inject the underlying router until `match()` and/or * `generateUri()` is called. This is required to allow consumers to * modify route instances before matching (e.g., to provide route options, * inject a name, etc.). * * The method MUST raise Exception\\RuntimeException if called after either `match()` * or `generateUri()` have already been called, to ensure integrity of the * router between invocations of either of those methods. * * @throws Exception\\RuntimeException when called after match() or * generateUri() have been called. */ public function addRoute(Route $route) : void; /** * Match a request against the known routes. * * Implementations will aggregate required information from the provided * request instance, and pass them to the underlying router implementation; * when done, they will then marshal a `RouteResult` instance indicating * the results of the matching operation and return it to the caller. */ public function match(Request $request) : RouteResult; /** * Generate a URI from the named route. * * Takes the named route and any substitutions, and attempts to generate a * URI from it. Additional router-dependent options may be passed. * * The URI generated MUST NOT be escaped. If you wish to escape any part of * the URI, this should be performed afterwards; consider passing the URI * to league/uri to encode it. * * @see https://github.com/auraphp/Aura.Router/blob/3.x/docs/generating-paths.md * @see https://docs.laminas.dev/laminas-router/routing/ * @throws Exception\\RuntimeException if unable to generate the given URI. */ public function generateUri(string $name, array $substitutions = [], array $options = []) : string; } Developers may create and use their own implementations. We recommend registering your implementation as the service Mezzio\\Router\\RouterInterface in your container to ensure other factories provided by mezzio will receive your custom service. Implementors should also read the following sections detailing the Route and RouteResult classes, to ensure that their implementations interoperate correctly. Routes Routes are defined via Mezzio\\Router\\Route , and aggregate the following information: Path to match. Middleware to use when the route is matched. The value must implement Psr\\Http\\Server\\MiddlewareInterface . HTTP methods allowed for the route; if none are provided, all are assumed. Optionally, a name by which to reference the route. The Route class has the following signature: namespace Mezzio\\Router; use Fig\\Http\\Message\\RequestMethodInterface as RequestMethod; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class Route implements MiddlewareInterface { public const HTTP_METHOD_ANY = null; public const HTTP_METHOD_SEPARATOR = ':'; /** * @param string $path Path to match. * @param MiddlewareInterface $middleware Middleware to use when this route is matched. * @param null|string[] $methods Allowed HTTP methods; defaults to HTTP_METHOD_ANY. * @param null|string $name the route name */ public function __construct( string $path, MiddlewareInterface $middleware, array $methods = self::HTTP_METHOD_ANY, string $name = null ); /** * Proxies to the middleware composed during instantiation. */ public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface; public function getPath() : string; /** * Set the route name. */ public function setName(string $name) : void; public function getName() : string; public function getMiddleware() : MiddlewareInterface; /** * @return null|string[] Returns HTTP_METHOD_ANY or array of allowed methods. */ public function getAllowedMethods() : ?array; /** * Indicate whether the specified method is allowed by the route. * * @param string $method HTTP method to test. */ public function allowsMethod(string $method) : bool; public function setOptions(array $options) : void; public function getOptions() : array; } Typically, developers will use the route() method of either Mezzio\\Router\\PathBasedRoutingMiddleware or Mezzio\\Application (or one of the HTTP-specific routing methods of either class) to create routes, and will not need to interact with Route instances. Additionally, when working with RouteResult instances, you may pull the Route instance from that in order to obtain data about the matched route. Matching and RouteResults Internally, routing middleware calls on RouterInterface::match() , passing it the current request instance. This allows implementations to pull what they may need from the request in order to perform their routing logic; for example, they may need the request method, the URI path, the value of the HTTPS server variable, etc. Implementations are expected to return a Mezzio\\Router\\RouteResult instance, which is then injected as a request attribute under the name Mezzio\\Router\\RouteResult when passing processing of the request to the provided handler. Additionally, in the event of success, it will pull any matched parameters from the result and inject them as request attributes as well. Dispatch middleware can then retrieve the route result from the request and process it, passing the route result its own request and handler. The mezzio-router package also provides a number of middleware geared towards handling failed results which can be placed between routing and dispatch middleware: Mezzio\\Router\\Middleware\\MethodNotAllowedMiddleware checks to see if the route failures was due to the HTTP method, and, if so, return a 405 response with an appropriate Allow header. ( read more ) Mezzio\\Router\\Middleware\\ImplicitHeadMiddleware checks to see if a routing failure was due to a route match using a HEAD request, and will then dispatch the appropriate route via GET request, and inject an empty body into the returned response. ( read more ) Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware checks to see if a routing failure was due to a route match using a OPTIONS request; if so, it will return a 200 response with an appropriate Allow header. ( read more ) The RouteResult signature is as follows: namespace Mezzio\\Router; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class RouteResult implements MiddlewareInterface { /** * Create an instance representing a route succes from the matching route. * * @param array $params Parameters associated with the matched route, if any. */ public static function fromRoute(Route $route, array $params = []) : self; /** * Create an instance representing a route failure. * * @param null|array $methods HTTP methods allowed for the current URI, if any. * null is equivalent to allowing any HTTP method; empty array means none. */ public static function fromRouteFailure(?array $methods) : self; /** * Process the result as middleware. * * If the result represents a failure, it passes handling to the handler. * * Otherwise, it processes the composed middleware using the provide request * and handler. */ public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface; /** * Does the result represent successful routing? */ public function isSuccess() : bool; /** * Retrieve the route that resulted in the route match. * * @return false|null|Route false if representing a routing failure; * null if not created via fromRoute(); Route instance otherwise. */ public function getMatchedRoute(); /** * Retrieve the matched route name, if possible. * * If this result represents a failure, return false; otherwise, return the * matched route name. * * @return false|string */ public function getMatchedRouteName(); /** * Returns the matched params. */ public function getMatchedParams() : array; /** * Is this a routing failure result? */ public function isFailure() : bool; /** * Does the result represent failure to route due to HTTP method? */ public function isMethodFailure() : bool; /** * Retrieve the allowed methods for the route failure. * * @return string[] HTTP methods allowed */ public function getAllowedMethods() : array; } Typically, only those implementing routers will interact with this class.","title":"Routing Interface"},{"location":"v3/features/router/interface/#routing-interface","text":"Mezzio defines Mezzio\\Router\\RouterInterface , which is used by the Mezzio\\Router\\RouteMiddleware — as well as the Mezzio\\Router\\RouteCollector consumed by Mezzio\\Application — in order to provide dynamic routing capabilities to middleware. The interface serves as an abstraction to allow routers with varying capabilities to be used with an application. The interface is defined as follows: namespace Mezzio\\Router; use Psr\\Http\\Message\\ServerRequestInterface as Request; /** * Interface defining required router capabilities. */ interface RouterInterface { /** * Add a route. * * This method adds a route against which the underlying implementation may * match. Implementations MUST aggregate route instances, but MUST NOT use * the details to inject the underlying router until `match()` and/or * `generateUri()` is called. This is required to allow consumers to * modify route instances before matching (e.g., to provide route options, * inject a name, etc.). * * The method MUST raise Exception\\RuntimeException if called after either `match()` * or `generateUri()` have already been called, to ensure integrity of the * router between invocations of either of those methods. * * @throws Exception\\RuntimeException when called after match() or * generateUri() have been called. */ public function addRoute(Route $route) : void; /** * Match a request against the known routes. * * Implementations will aggregate required information from the provided * request instance, and pass them to the underlying router implementation; * when done, they will then marshal a `RouteResult` instance indicating * the results of the matching operation and return it to the caller. */ public function match(Request $request) : RouteResult; /** * Generate a URI from the named route. * * Takes the named route and any substitutions, and attempts to generate a * URI from it. Additional router-dependent options may be passed. * * The URI generated MUST NOT be escaped. If you wish to escape any part of * the URI, this should be performed afterwards; consider passing the URI * to league/uri to encode it. * * @see https://github.com/auraphp/Aura.Router/blob/3.x/docs/generating-paths.md * @see https://docs.laminas.dev/laminas-router/routing/ * @throws Exception\\RuntimeException if unable to generate the given URI. */ public function generateUri(string $name, array $substitutions = [], array $options = []) : string; } Developers may create and use their own implementations. We recommend registering your implementation as the service Mezzio\\Router\\RouterInterface in your container to ensure other factories provided by mezzio will receive your custom service. Implementors should also read the following sections detailing the Route and RouteResult classes, to ensure that their implementations interoperate correctly.","title":"Routing Interface"},{"location":"v3/features/router/interface/#routes","text":"Routes are defined via Mezzio\\Router\\Route , and aggregate the following information: Path to match. Middleware to use when the route is matched. The value must implement Psr\\Http\\Server\\MiddlewareInterface . HTTP methods allowed for the route; if none are provided, all are assumed. Optionally, a name by which to reference the route. The Route class has the following signature: namespace Mezzio\\Router; use Fig\\Http\\Message\\RequestMethodInterface as RequestMethod; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class Route implements MiddlewareInterface { public const HTTP_METHOD_ANY = null; public const HTTP_METHOD_SEPARATOR = ':'; /** * @param string $path Path to match. * @param MiddlewareInterface $middleware Middleware to use when this route is matched. * @param null|string[] $methods Allowed HTTP methods; defaults to HTTP_METHOD_ANY. * @param null|string $name the route name */ public function __construct( string $path, MiddlewareInterface $middleware, array $methods = self::HTTP_METHOD_ANY, string $name = null ); /** * Proxies to the middleware composed during instantiation. */ public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface; public function getPath() : string; /** * Set the route name. */ public function setName(string $name) : void; public function getName() : string; public function getMiddleware() : MiddlewareInterface; /** * @return null|string[] Returns HTTP_METHOD_ANY or array of allowed methods. */ public function getAllowedMethods() : ?array; /** * Indicate whether the specified method is allowed by the route. * * @param string $method HTTP method to test. */ public function allowsMethod(string $method) : bool; public function setOptions(array $options) : void; public function getOptions() : array; } Typically, developers will use the route() method of either Mezzio\\Router\\PathBasedRoutingMiddleware or Mezzio\\Application (or one of the HTTP-specific routing methods of either class) to create routes, and will not need to interact with Route instances. Additionally, when working with RouteResult instances, you may pull the Route instance from that in order to obtain data about the matched route.","title":"Routes"},{"location":"v3/features/router/interface/#matching-and-routeresults","text":"Internally, routing middleware calls on RouterInterface::match() , passing it the current request instance. This allows implementations to pull what they may need from the request in order to perform their routing logic; for example, they may need the request method, the URI path, the value of the HTTPS server variable, etc. Implementations are expected to return a Mezzio\\Router\\RouteResult instance, which is then injected as a request attribute under the name Mezzio\\Router\\RouteResult when passing processing of the request to the provided handler. Additionally, in the event of success, it will pull any matched parameters from the result and inject them as request attributes as well. Dispatch middleware can then retrieve the route result from the request and process it, passing the route result its own request and handler. The mezzio-router package also provides a number of middleware geared towards handling failed results which can be placed between routing and dispatch middleware: Mezzio\\Router\\Middleware\\MethodNotAllowedMiddleware checks to see if the route failures was due to the HTTP method, and, if so, return a 405 response with an appropriate Allow header. ( read more ) Mezzio\\Router\\Middleware\\ImplicitHeadMiddleware checks to see if a routing failure was due to a route match using a HEAD request, and will then dispatch the appropriate route via GET request, and inject an empty body into the returned response. ( read more ) Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware checks to see if a routing failure was due to a route match using a OPTIONS request; if so, it will return a 200 response with an appropriate Allow header. ( read more ) The RouteResult signature is as follows: namespace Mezzio\\Router; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; class RouteResult implements MiddlewareInterface { /** * Create an instance representing a route succes from the matching route. * * @param array $params Parameters associated with the matched route, if any. */ public static function fromRoute(Route $route, array $params = []) : self; /** * Create an instance representing a route failure. * * @param null|array $methods HTTP methods allowed for the current URI, if any. * null is equivalent to allowing any HTTP method; empty array means none. */ public static function fromRouteFailure(?array $methods) : self; /** * Process the result as middleware. * * If the result represents a failure, it passes handling to the handler. * * Otherwise, it processes the composed middleware using the provide request * and handler. */ public function process(ServerRequestInterface $request, RequestHandlerInterface $handler) : ResponseInterface; /** * Does the result represent successful routing? */ public function isSuccess() : bool; /** * Retrieve the route that resulted in the route match. * * @return false|null|Route false if representing a routing failure; * null if not created via fromRoute(); Route instance otherwise. */ public function getMatchedRoute(); /** * Retrieve the matched route name, if possible. * * If this result represents a failure, return false; otherwise, return the * matched route name. * * @return false|string */ public function getMatchedRouteName(); /** * Returns the matched params. */ public function getMatchedParams() : array; /** * Is this a routing failure result? */ public function isFailure() : bool; /** * Does the result represent failure to route due to HTTP method? */ public function isMethodFailure() : bool; /** * Retrieve the allowed methods for the route failure. * * @return string[] HTTP methods allowed */ public function getAllowedMethods() : array; } Typically, only those implementing routers will interact with this class.","title":"Matching and RouteResults"},{"location":"v3/features/router/intro/","text":"Routing One fundamental feature of mezzio is that it provides mechanisms for implementing dynamic routing, a feature required in most modern web applications. As an example, you may want to allow matching both a resource, as well as individual items of that resource: /books might return a collection of books /books/mezzio might return the individual book identified by \"mezzio\". Mezzio does not provide routing on its own; you must choose a routing adapter that implements Mezzio\\Router\\RouterInterface . The router is consumed by Mezzio\\Router\\Middleware\\RouteMiddleware as well as Mezzio\\Router\\RouteCollector , the latter of which is composed in the Application instance. This allows you to choose the router with the capabilities that best match your own needs, while still providing a common abstraction for defining and aggregating routes and their related middleware. Retrieving matched parameters Routing enables the ability to match dynamic path segments (or other criteria). Typically, you will want access to the values matched. The routing middleware injects any matched parameters as returned by the underlying router into the request as attributes . In the example above, let's assume the route was defined as /books/:id , where id is the name of the dynamic segment. This means that in the middleware invoked for this route, you can fetch the id attribute to discover what was matched: $id = $request-&gt;getAttribute('id'); Retrieving the matched route When routing is complete, the routing middleware injects a Mezzio\\Router\\RouteResult instance as a request attribute, using that class name as the attribute name. The RouteResult instance provides you access to the following: Matching status via the methods $result-&gt;isSuccess() , $result-&gt;isFailure() , and $result-&gt;isMethodFailure() (indicating a path-based match that did not match an allowed HTTP method). Allowed HTTP methods, via $result-&gt;getAllowedMethods() (for either success or failure). The matched Mezzio\\Router\\Route instance, via $result-&gt;getMatchedRoute() (successful matches only). The matched route name, via $result-&gt;getMatchedRouteName() (or via $result-&gt;getMatchedRoute()-&gt;getName() ; successful matches only). Matched parameters, via $result-&gt;getMatchedParams() (as noted above, these are also each injected as discrete request attributes; successful matches only). As an example, you could use middleware similar to the following to return a 403 response if routing was successful, but no Authorization header is present: use Laminas\\Diactoros\\Response\\EmptyResponse; use Mezzio\\Router\\RouteResult; use Psr\\Http\\Server\\RequestHandlerInterface; function ($request, RequestHandlerInterface $handler) use ($routesRequiringAuthorization, $validator) { if (! ($result = $request-&gt;getAttribute(RouteResult::class, false))) { // No route result present; delegate to next middleware return $handler-&gt;handle($request); } if (! in_array($result-&gt;getMatchedRouteName(), $routesRequiringAuthorization, true)) { // Not a route requiring authorization return $handler-&gt;handle($request); } $header = $request-&gt;getHeaderLine('Authorization'); if (! $validator($header)) { return new EmptyResponse(403); } return $handler-&gt;handle($request); } Note that the first step is to determine if we have a RouteResult ; if we do not have one, we should either delegate to the next middleware, or return some sort of response (generally a 404). In the case of Mezzio, a later middleware will generate the 404 response for us, so we can safely delegate. URI generation Because routers have knowledge of the various paths they can match, they are also typically used within applications to generate URIs to other application resources. Mezzio provides this capability in the RouterInterface , either delegating to the underlying router implementations or providing a compatible implementation of its own. At it's most basic level, you call the generateUri() method with a route name and any substitutions you want to make: $uri = $router-&gt;generateUri('book', ['id' =&gt; 'mezzio']); Some routers may support providing options during URI generation. Starting in mezzio-router 2.0, which ships with Mezzio starting with version 2.0, you may also pass a third argument to generateUri() , an array of router options: $uri = $router-&gt;generateUri('book', ['id' =&gt; 'mezzio'], [ 'translator' =&gt; $translator, 'text_domain' =&gt; $currentLocale, ]); Supported implementations Mezzio currently ships with adapters for the following routers: Aura.Router FastRoute laminas-mvc Router","title":"Introduction"},{"location":"v3/features/router/intro/#routing","text":"One fundamental feature of mezzio is that it provides mechanisms for implementing dynamic routing, a feature required in most modern web applications. As an example, you may want to allow matching both a resource, as well as individual items of that resource: /books might return a collection of books /books/mezzio might return the individual book identified by \"mezzio\". Mezzio does not provide routing on its own; you must choose a routing adapter that implements Mezzio\\Router\\RouterInterface . The router is consumed by Mezzio\\Router\\Middleware\\RouteMiddleware as well as Mezzio\\Router\\RouteCollector , the latter of which is composed in the Application instance. This allows you to choose the router with the capabilities that best match your own needs, while still providing a common abstraction for defining and aggregating routes and their related middleware.","title":"Routing"},{"location":"v3/features/router/intro/#retrieving-matched-parameters","text":"Routing enables the ability to match dynamic path segments (or other criteria). Typically, you will want access to the values matched. The routing middleware injects any matched parameters as returned by the underlying router into the request as attributes . In the example above, let's assume the route was defined as /books/:id , where id is the name of the dynamic segment. This means that in the middleware invoked for this route, you can fetch the id attribute to discover what was matched: $id = $request-&gt;getAttribute('id');","title":"Retrieving matched parameters"},{"location":"v3/features/router/intro/#retrieving-the-matched-route","text":"When routing is complete, the routing middleware injects a Mezzio\\Router\\RouteResult instance as a request attribute, using that class name as the attribute name. The RouteResult instance provides you access to the following: Matching status via the methods $result-&gt;isSuccess() , $result-&gt;isFailure() , and $result-&gt;isMethodFailure() (indicating a path-based match that did not match an allowed HTTP method). Allowed HTTP methods, via $result-&gt;getAllowedMethods() (for either success or failure). The matched Mezzio\\Router\\Route instance, via $result-&gt;getMatchedRoute() (successful matches only). The matched route name, via $result-&gt;getMatchedRouteName() (or via $result-&gt;getMatchedRoute()-&gt;getName() ; successful matches only). Matched parameters, via $result-&gt;getMatchedParams() (as noted above, these are also each injected as discrete request attributes; successful matches only). As an example, you could use middleware similar to the following to return a 403 response if routing was successful, but no Authorization header is present: use Laminas\\Diactoros\\Response\\EmptyResponse; use Mezzio\\Router\\RouteResult; use Psr\\Http\\Server\\RequestHandlerInterface; function ($request, RequestHandlerInterface $handler) use ($routesRequiringAuthorization, $validator) { if (! ($result = $request-&gt;getAttribute(RouteResult::class, false))) { // No route result present; delegate to next middleware return $handler-&gt;handle($request); } if (! in_array($result-&gt;getMatchedRouteName(), $routesRequiringAuthorization, true)) { // Not a route requiring authorization return $handler-&gt;handle($request); } $header = $request-&gt;getHeaderLine('Authorization'); if (! $validator($header)) { return new EmptyResponse(403); } return $handler-&gt;handle($request); } Note that the first step is to determine if we have a RouteResult ; if we do not have one, we should either delegate to the next middleware, or return some sort of response (generally a 404). In the case of Mezzio, a later middleware will generate the 404 response for us, so we can safely delegate.","title":"Retrieving the matched route"},{"location":"v3/features/router/intro/#uri-generation","text":"Because routers have knowledge of the various paths they can match, they are also typically used within applications to generate URIs to other application resources. Mezzio provides this capability in the RouterInterface , either delegating to the underlying router implementations or providing a compatible implementation of its own. At it's most basic level, you call the generateUri() method with a route name and any substitutions you want to make: $uri = $router-&gt;generateUri('book', ['id' =&gt; 'mezzio']); Some routers may support providing options during URI generation. Starting in mezzio-router 2.0, which ships with Mezzio starting with version 2.0, you may also pass a third argument to generateUri() , an array of router options: $uri = $router-&gt;generateUri('book', ['id' =&gt; 'mezzio'], [ 'translator' =&gt; $translator, 'text_domain' =&gt; $currentLocale, ]);","title":"URI generation"},{"location":"v3/features/router/intro/#supported-implementations","text":"Mezzio currently ships with adapters for the following routers: Aura.Router FastRoute laminas-mvc Router","title":"Supported implementations"},{"location":"v3/features/router/laminas-router/","text":"Using laminas-router laminas-router provides several router implementations used for Laminas+ applications; the default is Laminas\\Router\\Http\\TreeRouteStack , which can compose a number of different routes of differing types in order to perform routing. The Laminas bridge we provide, Mezzio\\Router\\LaminasRouter , uses the TreeRouteStack , and injects Segment routes to it; these are in turn injected with Method routes, and a special \"method not allowed\" route at negative priority to enable us to distinguish between failure to match the path and failure to match the HTTP method. The TreeRouteStack offers some unique features: Route \"prototypes\". These are essentially like child routes that must also match in order for a given route to match. These are useful for implementing functionality such as ensuring the request comes in over HTTPS, or over a specific subdomain. Base URL functionality. If a base URL is injected, comparisons will be relative to that URL. This is mostly unnecessary with Stratigility-based middleware, but could solve some edge cases. To specify these, you need access to the underlying TreeRouteStack instance, however, and the RouterInterface does not provide an accessor! The answer, then, is to use dependency injection. This can be done in two ways: programmatically, or via a factory to use in conjunction with your container instance. Installing the Laminas Router To use the Laminas router, you will need to install the laminas-mvc router integration: $ composer require mezzio/mezzio-laminasrouter The package provides both a factory for the router, and a ConfigProvider that wires the router with your application. Advanced configuration If you want to provide custom setup or configuration, you can do so. In this example, we will be defining two factories: A factory to register as and generate an Laminas\\Router\\Http\\TreeRouteStack instance. A factory registered as Mezzio\\Router\\RouterInterface , which creates and returns a Mezzio\\Router\\LaminasRouter instance composing the Laminas\\Mvc\\Router\\Http\\TreeRouteStack instance. The factories might look like the following: // in src/App/Container/TreeRouteStackFactory.php: namespace App\\Container; use Psr\\Container\\ContainerInterface; use Laminas\\Http\\Router\\TreeRouteStack; class TreeRouteStackFactory { /** * @param ContainerInterface $container * @return TreeRouteStack */ public function __invoke(ContainerInterface $container) { $router = new TreeRouteStack(); $router-&gt;addPrototypes(/* ... */); $router-&gt;setBaseUrl(/* ... */); return $router; } } // in src/App/Container/RouterFactory.php namespace App\\Container; use Psr\\Container\\ContainerInterface; use Mezzio\\Router\\LaminasRouter; class RouterFactory { /** * @param ContainerInterface $container * @return LaminasRouter */ public function __invoke(ContainerInterface $container) { return new LaminasRouter($container-&gt;get(Laminas\\Mvc\\Router\\Http\\TreeRouteStack::class)); } } From here, you will need to register your factories with your IoC container. // in a config/autoload/ file, or within a ConfigProvider class: return [ 'factories' =&gt; [ \\Laminas\\Router\\Http\\TreeRouteStack::class =&gt; App\\Container\\TreeRouteStackFactory::class, \\Mezzio\\Router\\RouterInterface::class =&gt; App\\Container\\RouterFactory::class, ], ];","title":"Using laminas-router"},{"location":"v3/features/router/laminas-router/#using-laminas-router","text":"laminas-router provides several router implementations used for Laminas+ applications; the default is Laminas\\Router\\Http\\TreeRouteStack , which can compose a number of different routes of differing types in order to perform routing. The Laminas bridge we provide, Mezzio\\Router\\LaminasRouter , uses the TreeRouteStack , and injects Segment routes to it; these are in turn injected with Method routes, and a special \"method not allowed\" route at negative priority to enable us to distinguish between failure to match the path and failure to match the HTTP method. The TreeRouteStack offers some unique features: Route \"prototypes\". These are essentially like child routes that must also match in order for a given route to match. These are useful for implementing functionality such as ensuring the request comes in over HTTPS, or over a specific subdomain. Base URL functionality. If a base URL is injected, comparisons will be relative to that URL. This is mostly unnecessary with Stratigility-based middleware, but could solve some edge cases. To specify these, you need access to the underlying TreeRouteStack instance, however, and the RouterInterface does not provide an accessor! The answer, then, is to use dependency injection. This can be done in two ways: programmatically, or via a factory to use in conjunction with your container instance.","title":"Using laminas-router"},{"location":"v3/features/router/laminas-router/#installing-the-laminas-router","text":"To use the Laminas router, you will need to install the laminas-mvc router integration: $ composer require mezzio/mezzio-laminasrouter The package provides both a factory for the router, and a ConfigProvider that wires the router with your application.","title":"Installing the Laminas Router"},{"location":"v3/features/router/laminas-router/#advanced-configuration","text":"If you want to provide custom setup or configuration, you can do so. In this example, we will be defining two factories: A factory to register as and generate an Laminas\\Router\\Http\\TreeRouteStack instance. A factory registered as Mezzio\\Router\\RouterInterface , which creates and returns a Mezzio\\Router\\LaminasRouter instance composing the Laminas\\Mvc\\Router\\Http\\TreeRouteStack instance. The factories might look like the following: // in src/App/Container/TreeRouteStackFactory.php: namespace App\\Container; use Psr\\Container\\ContainerInterface; use Laminas\\Http\\Router\\TreeRouteStack; class TreeRouteStackFactory { /** * @param ContainerInterface $container * @return TreeRouteStack */ public function __invoke(ContainerInterface $container) { $router = new TreeRouteStack(); $router-&gt;addPrototypes(/* ... */); $router-&gt;setBaseUrl(/* ... */); return $router; } } // in src/App/Container/RouterFactory.php namespace App\\Container; use Psr\\Container\\ContainerInterface; use Mezzio\\Router\\LaminasRouter; class RouterFactory { /** * @param ContainerInterface $container * @return LaminasRouter */ public function __invoke(ContainerInterface $container) { return new LaminasRouter($container-&gt;get(Laminas\\Mvc\\Router\\Http\\TreeRouteStack::class)); } } From here, you will need to register your factories with your IoC container. // in a config/autoload/ file, or within a ConfigProvider class: return [ 'factories' =&gt; [ \\Laminas\\Router\\Http\\TreeRouteStack::class =&gt; App\\Container\\TreeRouteStackFactory::class, \\Mezzio\\Router\\RouterInterface::class =&gt; App\\Container\\RouterFactory::class, ], ];","title":"Advanced configuration"},{"location":"v3/features/router/piping/","text":"Routing vs Piping Mezzio provides two mechanisms for adding middleware to your application: piping, which is a foundation feature of the underlying laminas-stratigility implementation. routing, which is an additional feature provided by mezzio. Piping laminas-stratigility provides a mechanism termed piping for composing middleware in an application. When you pipe middleware to the application, it is added to a queue, and dequeued in order until a middleware returns a response instance. Mezzio adds the ability to segregate middleware to a specific path; as an example: $app-&gt;pipe('/api', $apiMiddleware); will execute $apiMiddleware only if the path matches /api ; otherwise, it will skip over that middleware. This path segregation, however, is limited: it will only match literal paths. This is done purposefully, to provide excellent baseline performance, and to prevent feature creep in the library. Path segregation Internally, when Application::pipe() detects two arguments, it calls Laminas\\Stratigility\\path() using the two arguments in order to create a Laminas\\Stratigility\\Middleware\\PathMiddlewareDecorator instance; this latter is what performs the actual path checking. Mezzio uses and exposes piping to users, with one addition: middleware may be specified by service name or an array of service names, and mezzio will lazy-load the service only when the middleware is invoked . In order to accomplish the lazy-loading, mezzio wraps the calls to fetch and dispatch the middleware inside a Mezzio\\Middleware\\LazyLoadingMiddleware instance; as such, there is no overhead to utilizing service-based middleware until it is dispatched . Routing Routing is the process of discovering values from the incoming request based on defined criteria. That criteria might look like: /book/:id (Laminas) /book/{id} (Aura.Router) /book/{id:\\d+} (FastRoute) In each of the above, if the router determines that the request matches the criteria, it will indicate: the route that matched the id parameter was matched, and the value matched Most routers allow you to define arbitrarily complex rules, and many even allow you to define: default values for unmatched parameters criteria for evaluating a match (such as a regular expression) additional criteria to meet (such as SSL usage, allowed query string variables, etc.) As such, routing is more powerful than the literal path matching used when piping, but it is also more costly (though routers such as FastRoute largely make such performance issues moot). When to Pipe In Mezzio, we recommend that you pipe middleware in the following circumstances: It should (potentially) run on every execution. Examples for such usage include: Logging requests Performing content negotiation Handling cookies Error handling. Application segregation. You can write re-usable middleware, potentially even based off of Mezzio, that contains its own routing logic, and compose it such that it only executes if it matches a sub-path. When to Route Use routing when: Your middleware is reacting to a given path. You want to use dynamic routing. You want to restrict usage of middleware to specific HTTP methods. You want to be able to generate URIs to your middleware. The above cover most use cases; in other words, most middleware should be added to the application as routed middleware . Controlling middleware execution order As noted in the earlier section on piping, piped middleware is queued , meaning it has a FIFO (\"first in, first out\") execution order. Additionally, mezzio's routing and dispatch capabilities are themselves implemented as piped middleware. To ensure your middleware is piped correctly, keep in mind the following: If middleware should execute on every request , pipe it early. Pipe routing and dispatch middleware using their dedicated application methods (more on this below), optionally with middleware between them to further shape application flow. Pipe middleware guaranteed to return a response (such as a \"not found\" handler or similar) last . As an example: $app-&gt;pipe(OriginalMessages::class); $app-&gt;pipe(ServerUrlMiddleware::class); $app-&gt;pipe(XClacksOverhead::class); $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipe(RouteMiddleware::class); $app-&gt;pipe(ImplicitHeadMiddleware::class); $app-&gt;pipe(ImplicitOptionsMiddleware::class); $app-&gt;pipe(MethodNotAllowedMiddleware::class); $app-&gt;pipe(UrlHelperMiddleware::class); $app-&gt;pipe(AuthorizationCheck::class); $app-&gt;pipe(DispatchMiddleware::class); $app-&gt;pipe(NotFoundHandler::class);","title":"Routing vs Piping"},{"location":"v3/features/router/piping/#routing-vs-piping","text":"Mezzio provides two mechanisms for adding middleware to your application: piping, which is a foundation feature of the underlying laminas-stratigility implementation. routing, which is an additional feature provided by mezzio.","title":"Routing vs Piping"},{"location":"v3/features/router/piping/#piping","text":"laminas-stratigility provides a mechanism termed piping for composing middleware in an application. When you pipe middleware to the application, it is added to a queue, and dequeued in order until a middleware returns a response instance. Mezzio adds the ability to segregate middleware to a specific path; as an example: $app-&gt;pipe('/api', $apiMiddleware); will execute $apiMiddleware only if the path matches /api ; otherwise, it will skip over that middleware. This path segregation, however, is limited: it will only match literal paths. This is done purposefully, to provide excellent baseline performance, and to prevent feature creep in the library.","title":"Piping"},{"location":"v3/features/router/piping/#routing","text":"Routing is the process of discovering values from the incoming request based on defined criteria. That criteria might look like: /book/:id (Laminas) /book/{id} (Aura.Router) /book/{id:\\d+} (FastRoute) In each of the above, if the router determines that the request matches the criteria, it will indicate: the route that matched the id parameter was matched, and the value matched Most routers allow you to define arbitrarily complex rules, and many even allow you to define: default values for unmatched parameters criteria for evaluating a match (such as a regular expression) additional criteria to meet (such as SSL usage, allowed query string variables, etc.) As such, routing is more powerful than the literal path matching used when piping, but it is also more costly (though routers such as FastRoute largely make such performance issues moot).","title":"Routing"},{"location":"v3/features/router/piping/#when-to-pipe","text":"In Mezzio, we recommend that you pipe middleware in the following circumstances: It should (potentially) run on every execution. Examples for such usage include: Logging requests Performing content negotiation Handling cookies Error handling. Application segregation. You can write re-usable middleware, potentially even based off of Mezzio, that contains its own routing logic, and compose it such that it only executes if it matches a sub-path.","title":"When to Pipe"},{"location":"v3/features/router/piping/#when-to-route","text":"Use routing when: Your middleware is reacting to a given path. You want to use dynamic routing. You want to restrict usage of middleware to specific HTTP methods. You want to be able to generate URIs to your middleware. The above cover most use cases; in other words, most middleware should be added to the application as routed middleware .","title":"When to Route"},{"location":"v3/features/router/piping/#controlling-middleware-execution-order","text":"As noted in the earlier section on piping, piped middleware is queued , meaning it has a FIFO (\"first in, first out\") execution order. Additionally, mezzio's routing and dispatch capabilities are themselves implemented as piped middleware. To ensure your middleware is piped correctly, keep in mind the following: If middleware should execute on every request , pipe it early. Pipe routing and dispatch middleware using their dedicated application methods (more on this below), optionally with middleware between them to further shape application flow. Pipe middleware guaranteed to return a response (such as a \"not found\" handler or similar) last . As an example: $app-&gt;pipe(OriginalMessages::class); $app-&gt;pipe(ServerUrlMiddleware::class); $app-&gt;pipe(XClacksOverhead::class); $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipe(RouteMiddleware::class); $app-&gt;pipe(ImplicitHeadMiddleware::class); $app-&gt;pipe(ImplicitOptionsMiddleware::class); $app-&gt;pipe(MethodNotAllowedMiddleware::class); $app-&gt;pipe(UrlHelperMiddleware::class); $app-&gt;pipe(AuthorizationCheck::class); $app-&gt;pipe(DispatchMiddleware::class); $app-&gt;pipe(NotFoundHandler::class);","title":"Controlling middleware execution order"},{"location":"v3/features/router/route-collector/","text":"The Route Collector Mezzio\\Router\\RouteCollector is a class that exists to help you create path-based routes, while simultaneously injecting them into a router instance. It composes a Mezzio\\Router\\RouterInterface instance via its constructor, and provides the following methods: route() any() delete() get() patch() post() put() These methods allow you to add routes to the underlying router. The last five all reference the HTTP method the generated route will answer to, and each have the same signature: public function {method}( string $path, Psr\\Http\\Server\\MiddlewareInterface $middleware, string $name = null ) : Mezzio\\Router\\Route The any() method has the same signature, but indicates that it will answer to any HTTP method. Finally, route() has the following signature: public function route( string $path, Psr\\Http\\Server\\MiddlewareInterface $middleware, array $methods = null, string $name = null ) : Mezzio\\Router\\Route A null value for the $methods indicates any HTTP method is allowed. Mezzio\\Application composes an instance of this class and proxies to it when any of the above methods are called. Mezzio\\Router\\Middleware\\RouteMiddleware , by default, composes the same router instance, allowing it to honor the definitions created.","title":"The Route Collector"},{"location":"v3/features/router/route-collector/#the-route-collector","text":"Mezzio\\Router\\RouteCollector is a class that exists to help you create path-based routes, while simultaneously injecting them into a router instance. It composes a Mezzio\\Router\\RouterInterface instance via its constructor, and provides the following methods: route() any() delete() get() patch() post() put() These methods allow you to add routes to the underlying router. The last five all reference the HTTP method the generated route will answer to, and each have the same signature: public function {method}( string $path, Psr\\Http\\Server\\MiddlewareInterface $middleware, string $name = null ) : Mezzio\\Router\\Route The any() method has the same signature, but indicates that it will answer to any HTTP method. Finally, route() has the following signature: public function route( string $path, Psr\\Http\\Server\\MiddlewareInterface $middleware, array $methods = null, string $name = null ) : Mezzio\\Router\\Route A null value for the $methods indicates any HTTP method is allowed. Mezzio\\Application composes an instance of this class and proxies to it when any of the above methods are called. Mezzio\\Router\\Middleware\\RouteMiddleware , by default, composes the same router instance, allowing it to honor the definitions created.","title":"The Route Collector"},{"location":"v3/features/router/uri-generation/","text":"URI Generation One aspect of the Mezzio\\Router\\RouterInterface is that it provides a generateUri() method. This method accepts a route name, and optionally an associative array of substitutions to use in the generated URI (e.g., if the URI has any named placeholders). You may also pass router-specific options to use during URI generation as a third argument. Naming routes By default, routes use a combination of the path and HTTP methods supported as the name: If you call route() with no HTTP methods, the name is the literal path with no changes. $app-&gt;route('/foo', $middleware); // \"foo\" If you call get() , post() , put() , patch() , or delete() , the name will be the literal path, followed by a caret ( ^ ), followed by the uppercase HTTP method name: $app-&gt;get('/foo', $middleware); // \"foo^GET\" Alternately, these methods return a Route instance, and you can set the name on it: $app-&gt;get('/foo', $middleware)-&gt;setName('foo'); // \"foo\" If you call route() and specify a list of HTTP methods accepted, the name will be the literal path, followed by a caret ( ^ ), followed by a colon ( : )-separated list of the uppercase HTTP method names, in the order in which they were added. $app-&gt;route('/foo', $middleware, ['GET', 'POST']); // \"foo^GET:POST\" Like the HTTP-specific methods, route() also returns a Route instance, and you can set the name on it: $route = $app-&gt;route('/foo', $middleware, ['GET', 'POST']); // \"foo^GET:POST\" $route-&gt;setName('foo'); // \"foo\" Clearly, this can become difficult to remember. As such, Mezzio offers the ability to specify a custom string for the route name as an additional, optional argument to any of the above: $app-&gt;route('/foo', $middleware, 'foo'); // 'foo' $app-&gt;get('/foo/:id', $middleware, 'foo-item'); // 'foo-item' $app-&gt;route('/foo', $middleware, ['GET', 'POST'], 'foo-collection'); // 'foo-collection' As noted above, these methods also return Route instances, allowing you to set the name after-the-fact; this is particularly useful with the route() method, where you may want to omit the HTTP methods if any HTTP method is allowed: $app-&gt;route('/foo', $middleware)-&gt;setName('foo'); // 'foo' We recommend that if you plan on generating URIs for given routes, you provide a custom name. Names must be unique In order for the URI generation functionality to work, routes must be uniquely named. This can be tricky when you use the same route path for multiple routes: $app-&gt;get('/books', ListBooksHandler::class, 'books'); $app-&gt;post('/books', CreateBookHandler::class, 'books'); // oops! You could, of course, name the second route \"create-book\" or similar, but you then have multiple names capable of generating the same URI. Since URIs do not have a concept of HTTP method built in, we recommend naming either the route matching GET or the first route in the sequence: $app-&gt;get('/books', ListBooksHandler::class, 'books'); $app-&gt;post('/books', CreateBookHandler::class); // no name Generating URIs Once you know the name of a URI you wish to generate, you can do so from the router instance: $uri = $router-&gt;generateUri('foo-item', ['id' =&gt; 'bar']); // \"/foo/bar\" You can omit the second argument if no substitutions are necessary. Compose the router For this to work, you'll need to compose the router instance in any class that requires the URI generation facility. Inject the Mezzio\\Router\\RouterInterface service in these situations. Alternately, use the UrlHelper instead.","title":"URI Generation"},{"location":"v3/features/router/uri-generation/#uri-generation","text":"One aspect of the Mezzio\\Router\\RouterInterface is that it provides a generateUri() method. This method accepts a route name, and optionally an associative array of substitutions to use in the generated URI (e.g., if the URI has any named placeholders). You may also pass router-specific options to use during URI generation as a third argument.","title":"URI Generation"},{"location":"v3/features/router/uri-generation/#naming-routes","text":"By default, routes use a combination of the path and HTTP methods supported as the name: If you call route() with no HTTP methods, the name is the literal path with no changes. $app-&gt;route('/foo', $middleware); // \"foo\" If you call get() , post() , put() , patch() , or delete() , the name will be the literal path, followed by a caret ( ^ ), followed by the uppercase HTTP method name: $app-&gt;get('/foo', $middleware); // \"foo^GET\" Alternately, these methods return a Route instance, and you can set the name on it: $app-&gt;get('/foo', $middleware)-&gt;setName('foo'); // \"foo\" If you call route() and specify a list of HTTP methods accepted, the name will be the literal path, followed by a caret ( ^ ), followed by a colon ( : )-separated list of the uppercase HTTP method names, in the order in which they were added. $app-&gt;route('/foo', $middleware, ['GET', 'POST']); // \"foo^GET:POST\" Like the HTTP-specific methods, route() also returns a Route instance, and you can set the name on it: $route = $app-&gt;route('/foo', $middleware, ['GET', 'POST']); // \"foo^GET:POST\" $route-&gt;setName('foo'); // \"foo\" Clearly, this can become difficult to remember. As such, Mezzio offers the ability to specify a custom string for the route name as an additional, optional argument to any of the above: $app-&gt;route('/foo', $middleware, 'foo'); // 'foo' $app-&gt;get('/foo/:id', $middleware, 'foo-item'); // 'foo-item' $app-&gt;route('/foo', $middleware, ['GET', 'POST'], 'foo-collection'); // 'foo-collection' As noted above, these methods also return Route instances, allowing you to set the name after-the-fact; this is particularly useful with the route() method, where you may want to omit the HTTP methods if any HTTP method is allowed: $app-&gt;route('/foo', $middleware)-&gt;setName('foo'); // 'foo' We recommend that if you plan on generating URIs for given routes, you provide a custom name.","title":"Naming routes"},{"location":"v3/features/router/uri-generation/#generating-uris","text":"Once you know the name of a URI you wish to generate, you can do so from the router instance: $uri = $router-&gt;generateUri('foo-item', ['id' =&gt; 'bar']); // \"/foo/bar\" You can omit the second argument if no substitutions are necessary.","title":"Generating URIs"},{"location":"v3/features/template/interface/","text":"The Template Renderer Interface Mezzio defines Mezzio\\Template\\TemplateRendererInterface , which can be injected into middleware in order to create templated response bodies. The interface is defined as follows: namespace Mezzio\\Template; interface TemplateRendererInterface { public const TEMPLATE_ALL = '*'; /** * Render a template, optionally with parameters. * * Implementations MUST support the `namespace::template` naming convention, * and allow omitting the filename extension. * * @param array|object $params */ public function render(string $name, $params = []) : string; /** * Add a template path to the engine. * * Adds a template path, with optional namespace the templates in that path * provide. */ public function addPath(string $path, string $namespace = null) : void; /** * Retrieve configured paths from the engine. * * @return TemplatePath[] */ public function getPaths() : array; /** * Add a default parameter to use with a template. * * Use this method to provide a default parameter to use when a template is * rendered. The parameter may be overridden by providing it when calling * `render()`, or by calling this method again with a null value. * * The parameter will be specific to the template name provided. To make * the parameter available to any template, pass the TEMPLATE_ALL constant * for the template name. * * If the default parameter existed previously, subsequent invocations with * the same template name and parameter name will overwrite. * * @param string $templateName Name of template to which the param applies; * use TEMPLATE_ALL to apply to all templates. * @param mixed $value */ public function addDefaultParam(string $templateName, string $param, $value) : void; } Namespaces Unfortunately, namespace syntax varies between different template engine implementations. As an example: Plates uses the syntax namespace::template . Twig uses the syntax @namespace/template . laminas-view does not natively support namespaces, though custom resolvers can provide the functionality. To make different engines compatible, we require implementations to support the syntax namespace::template (where namespace:: is optional) when rendering. Additionally, we require that engines allow omitting the filename suffix. When using a TemplateRendererInterface implementation, feel free to use namespaced templates, and to omit the filename suffix; this will make your code portable and allow it to use alternate template engines. Paths Most template engines and implementations will require that you specify one or more paths to templates; these are then used when resolving a template name to the actual template. You may use the addPath() method to do so: $renderer-&gt;addPath('templates'); Template engines adapted for mezzio are also required to allow namespacing templates; when adding a path, you specify the template namespace that it fulfills, and the engine will only return a template from that path if the namespace provided matches the namespace for the path. // Resolves to a path registered with the namespace \"error\"; // this example is specific to the Plates engine. $content = $renderer-&gt;render('error::404'); You can provide a namespace when registering a path via an optional second argument: // Registers the \"error\" namespace to the path \"templates/error/\" $renderer-&gt;addPath('templates/error/', 'error'); Rendering To render a template, call the render() method. This method requires the name of a template as the first argument: $content = $renderer-&gt;render('foo'); You can specify a namespaced template using the syntax namespace::template ; the template segment of the template name may use additional directory separators when necessary. One key reason to use templates is to dynamically provide data to inject in the template. You may do so by passing either an associative array or an object as the second argument to render() : $content = $renderer-&gt;render('message', [ 'greeting' =&gt; 'Hello', 'recipient' =&gt; 'World', ]); It is up to the underlying template engine to determine how to perform the injections. Default params The TemplateRendererInterface defines the method addDefaultParam() . This method can be used to specify default parameters to use when rendering a template. The signature is: public function addDefaultParam($templateName, $param, $value) If you want a parameter to be used for every template, you can specify the constant TemplateRendererInterface::TEMPLATE_ALL for the $templateName parameter. When rendering, parameters are considered in the following order, with later items having precedence over earlier ones: Default parameters specified for all templates. Default parameters specified for the template specified at rendering. Parameters specified when rendering. As an example, if we did the following: $renderer-&gt;addDefaultParam($renderer::TEMPLATE_ALL, 'foo', 'bar'); $renderer-&gt;addDefaultParam($renderer::TEMPLATE_ALL, 'bar', 'baz'); $renderer-&gt;addDefaultParam($renderer::TEMPLATE_ALL, 'baz', 'bat'); $renderer-&gt;addDefaultParam('example', 'foo', 'template default foo'); $renderer-&gt;addDefaultParam('example', 'bar', 'template default bar'); $content = $renderer-&gt;render('example', [ 'foo' =&gt; 'override', ]); Then we can expect the following substitutions will occur when rendering: References to the \"foo\" variable will contain \"override\". References to the \"bar\" variable will contain \"template default bar\". References to the \"baz\" variable will contain \"bat\". Support for default params The support for default params will often be renderer-specific. The reason is because the render() signature does not specify a type for $params , in order to allow passing alternative arguments such as view models. In such cases, the implementation will indicate its behavior when default parameters are specified, but a given $params argument does not support it. At the time of writing, each of the Plates, Twig, and laminas-view implementations support the feature.","title":"Template Renderer Interface"},{"location":"v3/features/template/interface/#the-template-renderer-interface","text":"Mezzio defines Mezzio\\Template\\TemplateRendererInterface , which can be injected into middleware in order to create templated response bodies. The interface is defined as follows: namespace Mezzio\\Template; interface TemplateRendererInterface { public const TEMPLATE_ALL = '*'; /** * Render a template, optionally with parameters. * * Implementations MUST support the `namespace::template` naming convention, * and allow omitting the filename extension. * * @param array|object $params */ public function render(string $name, $params = []) : string; /** * Add a template path to the engine. * * Adds a template path, with optional namespace the templates in that path * provide. */ public function addPath(string $path, string $namespace = null) : void; /** * Retrieve configured paths from the engine. * * @return TemplatePath[] */ public function getPaths() : array; /** * Add a default parameter to use with a template. * * Use this method to provide a default parameter to use when a template is * rendered. The parameter may be overridden by providing it when calling * `render()`, or by calling this method again with a null value. * * The parameter will be specific to the template name provided. To make * the parameter available to any template, pass the TEMPLATE_ALL constant * for the template name. * * If the default parameter existed previously, subsequent invocations with * the same template name and parameter name will overwrite. * * @param string $templateName Name of template to which the param applies; * use TEMPLATE_ALL to apply to all templates. * @param mixed $value */ public function addDefaultParam(string $templateName, string $param, $value) : void; }","title":"The Template Renderer Interface"},{"location":"v3/features/template/interface/#paths","text":"Most template engines and implementations will require that you specify one or more paths to templates; these are then used when resolving a template name to the actual template. You may use the addPath() method to do so: $renderer-&gt;addPath('templates'); Template engines adapted for mezzio are also required to allow namespacing templates; when adding a path, you specify the template namespace that it fulfills, and the engine will only return a template from that path if the namespace provided matches the namespace for the path. // Resolves to a path registered with the namespace \"error\"; // this example is specific to the Plates engine. $content = $renderer-&gt;render('error::404'); You can provide a namespace when registering a path via an optional second argument: // Registers the \"error\" namespace to the path \"templates/error/\" $renderer-&gt;addPath('templates/error/', 'error');","title":"Paths"},{"location":"v3/features/template/interface/#rendering","text":"To render a template, call the render() method. This method requires the name of a template as the first argument: $content = $renderer-&gt;render('foo'); You can specify a namespaced template using the syntax namespace::template ; the template segment of the template name may use additional directory separators when necessary. One key reason to use templates is to dynamically provide data to inject in the template. You may do so by passing either an associative array or an object as the second argument to render() : $content = $renderer-&gt;render('message', [ 'greeting' =&gt; 'Hello', 'recipient' =&gt; 'World', ]); It is up to the underlying template engine to determine how to perform the injections.","title":"Rendering"},{"location":"v3/features/template/intro/","text":"Templating By default, no middleware or handlers in Mezzio are templated. We do not even provide a default templating engine, as the choice of templating engine is often very specific to the project and/or organization. We do, however, provide abstraction for templating via the interface Mezzio\\Template\\TemplateRendererInterface , which allows you to write middleware that is engine-agnostic. For Mezzio, this means: All adapters MUST support template namespacing. Namespaces MUST be referenced using the notation namespace::template when rendering. Adapters MUST allow rendering templates that omit the extension; they will, of course, resolve to whatever default extension they require (or as configured). Adapters SHOULD allow passing an extension in the template name, but how that is handled is left up to the adapter. Adapters SHOULD abstract layout capabilities. Many templating systems provide this out of the box, or similar, compatible features such as template inheritance. This should be transparent to end-users; they should be able to simply render a template and assume it has the full content to return. In this documentation, we'll detail the features of this interface, the various implementations we provide, and how you can configure, inject, and consume templating in your middleware. We currently support: Plates Twig laminas-view Each has an associated container factory; details are found in the factories documentation .","title":"Introduction"},{"location":"v3/features/template/intro/#templating","text":"By default, no middleware or handlers in Mezzio are templated. We do not even provide a default templating engine, as the choice of templating engine is often very specific to the project and/or organization. We do, however, provide abstraction for templating via the interface Mezzio\\Template\\TemplateRendererInterface , which allows you to write middleware that is engine-agnostic. For Mezzio, this means: All adapters MUST support template namespacing. Namespaces MUST be referenced using the notation namespace::template when rendering. Adapters MUST allow rendering templates that omit the extension; they will, of course, resolve to whatever default extension they require (or as configured). Adapters SHOULD allow passing an extension in the template name, but how that is handled is left up to the adapter. Adapters SHOULD abstract layout capabilities. Many templating systems provide this out of the box, or similar, compatible features such as template inheritance. This should be transparent to end-users; they should be able to simply render a template and assume it has the full content to return. In this documentation, we'll detail the features of this interface, the various implementations we provide, and how you can configure, inject, and consume templating in your middleware. We currently support: Plates Twig laminas-view Each has an associated container factory; details are found in the factories documentation .","title":"Templating"},{"location":"v3/features/template/laminas-view/","text":"Using laminas-view laminas-view provides a native PHP template system via its PhpRenderer , and is maintained by Laminas. It provides: Layout facilities. Helpers for escaping, and the ability to provide custom helper extensions. We provide a TemplateRendererInterface wrapper for laminas-view's PhpRenderer via Mezzio\\LaminasView\\LaminasViewRenderer . Installing laminas-view To use the laminas-view wrapper, you must first install the laminas-view integration: $ composer require mezzio/mezzio-laminasviewrenderer Using the wrapper If instantiated without arguments, Mezzio\\LaminasView\\LaminasViewRenderer will create an instance of the PhpRenderer , which it will then proxy to. use Mezzio\\LaminasView\\LaminasViewRenderer; $renderer = new LaminasViewRenderer(); Alternately, you can instantiate and configure the engine yourself, and pass it to the Mezzio\\LaminasView\\LaminasViewRenderer constructor: use Laminas\\View\\Renderer\\PhpRenderer; use Laminas\\View\\Resolver; use Mezzio\\LaminasView\\LaminasViewRenderer; // Create the engine instance: $renderer = new PhpRenderer(); // Configure it: $resolver = new Resolver\\AggregateResolver(); $resolver-&gt;attach( new Resolver\\TemplateMapResolver(include 'config/templates.php'), 100 ); $resolver-&gt;attach( (new Resolver\\TemplatePathStack()) -&gt;setPaths(include 'config/template_paths.php') ); $renderer-&gt;setResolver($resolver); // Inject: $renderer = new LaminasViewRenderer($renderer); Namespaced path resolving Mezzio defines a custom laminas-view resolver, Mezzio\\LaminasView\\NamespacedPathStackResolver . This resolver provides the ability to segregate paths by namespace, and later resolve a template according to the namespace, using the namespace::template notation required of TemplateRendererInterface implementations. The LaminasView adapter ensures that: An AggregateResolver is registered with the renderer. If the registered resolver is not an AggregateResolver , it creates one and adds the original resolver to it. A NamespacedPathStackResolver is registered with the AggregateResolver , at a low priority (0), ensuring attempts to resolve hit it later. With resolvers such as the TemplateMapResolver , you can also resolve namespaced templates, mapping them directly to the template on the filesystem that matches; adding such a resolver can be a nice performance boost! Layouts Unlike the other supported template engines, laminas-view does not support layouts out-of-the-box. Mezzio abstracts this fact away, providing two facilities for doing so: You may pass a layout template name or Laminas\\View\\Model\\ModelInterface instance representing the layout as the second argument to the constructor. You may pass a \"layout\" parameter during rendering, with a value of either a layout template name or a Laminas\\View\\Model\\ModelInterface instance representing the layout. Passing a layout this way will override any layout provided to the constructor. In each case, the laminas-view implementation will do a depth-first, recursive render in order to provide content within the selected layout. Since 1.3: You may also pass a boolean false value to either addDefaultParam() or via the template variables for the layout key; doing so will disable the layout. Layout name passed to constructor use Mezzio\\LaminasView\\LaminasViewRenderer; // Create the engine instance with a layout name: $renderer = new LaminasViewRenderer(null, 'layout::layout'); Layout view model passed to constructor use Laminas\\View\\Model\\ViewModel; use Mezzio\\LaminasView\\LaminasViewRenderer; // Create the layout view model: $layout = new ViewModel([ 'encoding' =&gt; 'utf-8', 'cssPath' =&gt; '/css/prod/', ]); $layout-&gt;setTemplate('layout::layout'); // Create the engine instance with the layout: $renderer = new LaminasViewRenderer(null, $layout); Provide a layout name when rendering $content = $renderer-&gt;render('blog/entry', [ 'layout' =&gt; 'layout::blog', 'entry' =&gt; $entry, ]); Provide a layout view model when rendering use Laminas\\View\\Model\\ViewModel; // Create the layout view model: $layout = new ViewModel([ 'encoding' =&gt; 'utf-8', 'cssPath' =&gt; '/css/blog/', ]); $layout-&gt;setTemplate('layout::layout'); $content = $renderer-&gt;render('blog/entry', [ 'layout' =&gt; $layout, 'entry' =&gt; $entry, ]); Helpers Mezzio provides overrides of specific view helpers in order to better integrate with PSR-7 . These include: Mezzio\\LaminasView\\UrlHelper . This helper consumes the application's Mezzio\\Router\\RouterInterface instance in order to generate URIs. Its signature is: url($routeName, array $routeParams = [], array $queryParams = [], $fragmentIdentifier = null, array $options = []) Mezzio\\LaminasView\\ServerUrlHelper . This helper consumes the URI from the application's request in order to provide fully qualified URIs. Its signature is: serverUrl($path = null) . To use this particular helper, you will need to inject it with the request URI somewhere within your application: $serverUrlHelper-&gt;setUri($request-&gt;getUri()); We recommend doing this within a pre-pipeline middleware. Recommendations We recommend the following practices when using the laminas-view adapter: If using a layout, create a factory to return the layout view model as a service; this allows you to inject it into middleware and add variables to it. While we support passing the layout as a rendering parameter, be aware that if you change engines, this may not be supported.","title":"Using laminas-view"},{"location":"v3/features/template/laminas-view/#using-laminas-view","text":"laminas-view provides a native PHP template system via its PhpRenderer , and is maintained by Laminas. It provides: Layout facilities. Helpers for escaping, and the ability to provide custom helper extensions. We provide a TemplateRendererInterface wrapper for laminas-view's PhpRenderer via Mezzio\\LaminasView\\LaminasViewRenderer .","title":"Using laminas-view"},{"location":"v3/features/template/laminas-view/#installing-laminas-view","text":"To use the laminas-view wrapper, you must first install the laminas-view integration: $ composer require mezzio/mezzio-laminasviewrenderer","title":"Installing laminas-view"},{"location":"v3/features/template/laminas-view/#using-the-wrapper","text":"If instantiated without arguments, Mezzio\\LaminasView\\LaminasViewRenderer will create an instance of the PhpRenderer , which it will then proxy to. use Mezzio\\LaminasView\\LaminasViewRenderer; $renderer = new LaminasViewRenderer(); Alternately, you can instantiate and configure the engine yourself, and pass it to the Mezzio\\LaminasView\\LaminasViewRenderer constructor: use Laminas\\View\\Renderer\\PhpRenderer; use Laminas\\View\\Resolver; use Mezzio\\LaminasView\\LaminasViewRenderer; // Create the engine instance: $renderer = new PhpRenderer(); // Configure it: $resolver = new Resolver\\AggregateResolver(); $resolver-&gt;attach( new Resolver\\TemplateMapResolver(include 'config/templates.php'), 100 ); $resolver-&gt;attach( (new Resolver\\TemplatePathStack()) -&gt;setPaths(include 'config/template_paths.php') ); $renderer-&gt;setResolver($resolver); // Inject: $renderer = new LaminasViewRenderer($renderer);","title":"Using the wrapper"},{"location":"v3/features/template/laminas-view/#layouts","text":"Unlike the other supported template engines, laminas-view does not support layouts out-of-the-box. Mezzio abstracts this fact away, providing two facilities for doing so: You may pass a layout template name or Laminas\\View\\Model\\ModelInterface instance representing the layout as the second argument to the constructor. You may pass a \"layout\" parameter during rendering, with a value of either a layout template name or a Laminas\\View\\Model\\ModelInterface instance representing the layout. Passing a layout this way will override any layout provided to the constructor. In each case, the laminas-view implementation will do a depth-first, recursive render in order to provide content within the selected layout. Since 1.3: You may also pass a boolean false value to either addDefaultParam() or via the template variables for the layout key; doing so will disable the layout.","title":"Layouts"},{"location":"v3/features/template/laminas-view/#helpers","text":"Mezzio provides overrides of specific view helpers in order to better integrate with PSR-7 . These include: Mezzio\\LaminasView\\UrlHelper . This helper consumes the application's Mezzio\\Router\\RouterInterface instance in order to generate URIs. Its signature is: url($routeName, array $routeParams = [], array $queryParams = [], $fragmentIdentifier = null, array $options = []) Mezzio\\LaminasView\\ServerUrlHelper . This helper consumes the URI from the application's request in order to provide fully qualified URIs. Its signature is: serverUrl($path = null) . To use this particular helper, you will need to inject it with the request URI somewhere within your application: $serverUrlHelper-&gt;setUri($request-&gt;getUri()); We recommend doing this within a pre-pipeline middleware.","title":"Helpers"},{"location":"v3/features/template/laminas-view/#recommendations","text":"We recommend the following practices when using the laminas-view adapter: If using a layout, create a factory to return the layout view model as a service; this allows you to inject it into middleware and add variables to it. While we support passing the layout as a rendering parameter, be aware that if you change engines, this may not be supported.","title":"Recommendations"},{"location":"v3/features/template/plates/","text":"Using Plates Plates is a native PHP template system maintained by The League of Extraordinary Packages . it provides: Layout facilities. Template inheritance. Helpers for escaping, and the ability to provide custom helper extensions. We provide a TemplateRendererInterface wrapper for Plates via Mezzio\\Plates\\PlatesRenderer . Installing Plates To use the Plates wrapper, you must install the Plates integration: $ composer require mezzio/mezzio-platesrenderer Using the wrapper If instantiated without arguments, Mezzio\\Plates\\PlatesRenderer will create an instance of the Plates engine, which it will then proxy to. use Mezzio\\Plates\\PlatesRenderer; $renderer = new PlatesRenderer(); Alternately, you can instantiate and configure the engine yourself, and pass it to the Mezzio\\Plates\\PlatesRenderer constructor: use League\\Plates\\Engine as PlatesEngine; use Mezzio\\Plates\\PlatesRenderer; // Create the engine instance: $plates = new PlatesEngine(); // Configure it: $plates-&gt;addFolder('error', 'templates/error/'); $plates-&gt;loadExtension(new CustomExtension()); // Inject: $renderer = new PlatesRenderer($plates); Configuration and Factory mezzio-platesrenderer ships with the factory Mezzio\\Plates\\PlatesRendererFactory , which will both create the Plates engine instance, and the PlatesRenderer instance. If you are using laminas-component-installer , this will be automatically wired for you during installation. The factory looks for the following configuration in the config service, using any it finds: // In config/autoload/templates.global.php: return [ 'plates' =&gt; [ 'extensions' =&gt; [ // string service names or class names of Plates extensions ], ], 'templates' =&gt; [ 'extension' =&gt; 'phtml', // change this if you use a different file // extension for templates 'paths' =&gt; [ // namespace =&gt; [paths] pairs ], ], ]; The factory will also inject two extensions by default, Mezzio\\Plates\\Extension\\UrlExtension and Mezzio\\Plates\\Extension\\EscaperExtension , both listed in more detail below. Shipped Extensions mezzio-plates provides the following extensions. UrlExtension Mezzio\\Plates\\Extension\\UrlExtension composes each of the UrlHelper and ServerUrlHelper , and provides the following template methods: public function url( string $routeName = null, array $routeParams = [], array $queryParams = [], ?string $fragmentIdentifier = null, array $options = [] ) : string; public function serverurl(string $path = null) : string; // Since mezzio-platesrender 2.1.0: public function route() : ?Mezzio\\Router\\RouteResult As an example: &lt;a href=\"&lt;?= $this-&gt;url('blog', ['stub' =&gt; $this-&gt;stub]) ?&gt;\"&gt;A blog post on this&lt;/a&gt; &lt;?php $routing = $this-&gt;route(); $routingIsValid = $routing &amp;&amp; $routing-&gt;isSuccess(); $route = $routingIsValid ? $routing-&gt;getMatchedRouteName() : 'blog'; $routeParams = $routingIsValid ? $routing-&gt;getMatchedParams() : []; ?&gt; &lt;a href=\"&lt;?= $this-&gt;url($route, $routeParams) ?&gt;\"&gt;For more information&lt;/a&gt; EscaperExtension Mezzio\\Plates\\Extension\\EscaperExtension proxies to functionality provided in the laminas-escaper package. It looks for the following configuration in the config service: // In config/autoload/templates.global.php: return [ 'plates' =&gt; [ 'encoding' =&gt; ?string, // character encoding of generated content ], ]; By default it assumes UTF-8 for the encoding. The extension registers the following template methods: public function escapeHtml(string $html) : string; public function escapeHtmlAttr(string $attribute) : string; public function escapeJs(string $js) : string; public function escapeCss(string $css) : string; public function escapeUrl(string $url) : string; As examples: &lt;html&gt; &lt;head&gt; &lt;meta name=\"author\" content=\"&lt;?= $this-&gt;escapeHtmlAttr($this-&gt;author) ?&gt;\"&gt; &lt;link rel=\"alternative\" href=\"&lt;?= $this-&gt;escapeUrl($this-&gt;alternative) ?&gt;\"&gt; &lt;style&gt;&lt;?= $this-&gt;escapeCss($this-&gt;styles) ?&gt;&lt;/style&gt; &lt;script&gt;&lt;?= $this-&gt;escapeJs($this-&gt;script) ?&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;?= $this-&gt;escapeHtml($this-&gt;content) ?&gt; &lt;/body&gt; &lt;/html&gt;","title":"Using Plates"},{"location":"v3/features/template/plates/#using-plates","text":"Plates is a native PHP template system maintained by The League of Extraordinary Packages . it provides: Layout facilities. Template inheritance. Helpers for escaping, and the ability to provide custom helper extensions. We provide a TemplateRendererInterface wrapper for Plates via Mezzio\\Plates\\PlatesRenderer .","title":"Using Plates"},{"location":"v3/features/template/plates/#installing-plates","text":"To use the Plates wrapper, you must install the Plates integration: $ composer require mezzio/mezzio-platesrenderer","title":"Installing Plates"},{"location":"v3/features/template/plates/#using-the-wrapper","text":"If instantiated without arguments, Mezzio\\Plates\\PlatesRenderer will create an instance of the Plates engine, which it will then proxy to. use Mezzio\\Plates\\PlatesRenderer; $renderer = new PlatesRenderer(); Alternately, you can instantiate and configure the engine yourself, and pass it to the Mezzio\\Plates\\PlatesRenderer constructor: use League\\Plates\\Engine as PlatesEngine; use Mezzio\\Plates\\PlatesRenderer; // Create the engine instance: $plates = new PlatesEngine(); // Configure it: $plates-&gt;addFolder('error', 'templates/error/'); $plates-&gt;loadExtension(new CustomExtension()); // Inject: $renderer = new PlatesRenderer($plates);","title":"Using the wrapper"},{"location":"v3/features/template/plates/#configuration-and-factory","text":"mezzio-platesrenderer ships with the factory Mezzio\\Plates\\PlatesRendererFactory , which will both create the Plates engine instance, and the PlatesRenderer instance. If you are using laminas-component-installer , this will be automatically wired for you during installation. The factory looks for the following configuration in the config service, using any it finds: // In config/autoload/templates.global.php: return [ 'plates' =&gt; [ 'extensions' =&gt; [ // string service names or class names of Plates extensions ], ], 'templates' =&gt; [ 'extension' =&gt; 'phtml', // change this if you use a different file // extension for templates 'paths' =&gt; [ // namespace =&gt; [paths] pairs ], ], ]; The factory will also inject two extensions by default, Mezzio\\Plates\\Extension\\UrlExtension and Mezzio\\Plates\\Extension\\EscaperExtension , both listed in more detail below.","title":"Configuration and Factory"},{"location":"v3/features/template/plates/#shipped-extensions","text":"mezzio-plates provides the following extensions.","title":"Shipped Extensions"},{"location":"v3/features/template/request-handlers/","text":"Templated request handlers The primary use case for templating is within request handlers, to provide templated responses. To do this, you will: Inject an instance of Mezzio\\Template\\TemplateRendererInterface into your request handler. Potentially add paths to the templating instance. Render a template. Add the results of rendering to your response. Injecting a TemplateRendererInterface We encourage the use of dependency injection. As such, we recommend writing your request handler to accept the TemplateRendererInterface via either the constructor or a setter. As an example: namespace Acme\\Blog; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\RequestHandlerInterface; use Mezzio\\Template\\TemplateRendererInterface; class EntryHandler implements RequestHandlerInterface { private $templateRenderer; public function __construct(TemplateRendererInterface $renderer) { $this-&gt;templateRenderer = $renderer; } public function handler(ServerRequestInterface $request) : ResponseInterface { // ... } } This will necessitate having a factory for your request handler: namespace Acme\\Blog\\Container; use Acme\\Blog\\EntryHandler; use Psr\\Container\\ContainerInterface; use Mezzio\\Template\\TemplateRendererInterface; class EntryHandlerFactory { public function __invoke(ContainerInterface $container) { return new EntryHandler( $container-&gt;get(TemplateRendererInterface::class) ); } } And, of course, you'll need to tell your container to use the factory; see the container documentation for more information on how you might accomplish that. Consuming templates Now that we have the templating engine injected into our request handler, we can consume it. Most often, we will want to render a template, optionally with substitutions to pass to it. This will typically look like the following: namespace Acme\\Blog; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\RequestHandlerInterface; use Laminas\\Diactoros\\Response\\HtmlResponse; use Mezzio\\Template\\TemplateRendererInterface; class EntryHandler implements RequestHandlerInterface { private $templateRenderer; public function __construct(TemplateRendererInterface $renderer) { $this-&gt;templateRenderer = $renderer; } public function handle(ServerRequestInterface $request) : ResponseInterface { // do some work... return new HtmlResponse( $this-&gt;templateRenderer-&gt;render('blog::entry', [ 'entry' =&gt; $entry, ]) ); } }","title":"Templated Request Handlers"},{"location":"v3/features/template/request-handlers/#templated-request-handlers","text":"The primary use case for templating is within request handlers, to provide templated responses. To do this, you will: Inject an instance of Mezzio\\Template\\TemplateRendererInterface into your request handler. Potentially add paths to the templating instance. Render a template. Add the results of rendering to your response.","title":"Templated request handlers"},{"location":"v3/features/template/request-handlers/#injecting-a-templaterendererinterface","text":"We encourage the use of dependency injection. As such, we recommend writing your request handler to accept the TemplateRendererInterface via either the constructor or a setter. As an example: namespace Acme\\Blog; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\RequestHandlerInterface; use Mezzio\\Template\\TemplateRendererInterface; class EntryHandler implements RequestHandlerInterface { private $templateRenderer; public function __construct(TemplateRendererInterface $renderer) { $this-&gt;templateRenderer = $renderer; } public function handler(ServerRequestInterface $request) : ResponseInterface { // ... } } This will necessitate having a factory for your request handler: namespace Acme\\Blog\\Container; use Acme\\Blog\\EntryHandler; use Psr\\Container\\ContainerInterface; use Mezzio\\Template\\TemplateRendererInterface; class EntryHandlerFactory { public function __invoke(ContainerInterface $container) { return new EntryHandler( $container-&gt;get(TemplateRendererInterface::class) ); } } And, of course, you'll need to tell your container to use the factory; see the container documentation for more information on how you might accomplish that.","title":"Injecting a TemplateRendererInterface"},{"location":"v3/features/template/request-handlers/#consuming-templates","text":"Now that we have the templating engine injected into our request handler, we can consume it. Most often, we will want to render a template, optionally with substitutions to pass to it. This will typically look like the following: namespace Acme\\Blog; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\RequestHandlerInterface; use Laminas\\Diactoros\\Response\\HtmlResponse; use Mezzio\\Template\\TemplateRendererInterface; class EntryHandler implements RequestHandlerInterface { private $templateRenderer; public function __construct(TemplateRendererInterface $renderer) { $this-&gt;templateRenderer = $renderer; } public function handle(ServerRequestInterface $request) : ResponseInterface { // do some work... return new HtmlResponse( $this-&gt;templateRenderer-&gt;render('blog::entry', [ 'entry' =&gt; $entry, ]) ); } }","title":"Consuming templates"},{"location":"v3/features/template/twig/","text":"Using Twig Twig is a template language and engine provided as a standalone component by SensioLabs. It provides: Layout facilities. Template inheritance. Helpers for escaping, and the ability to provide custom helper extensions. We provide a TemplateRendererInterface wrapper for Twig via Mezzio\\Twig\\TwigRenderer . Installing Twig To use the Twig wrapper, you must first install the Twig integration: $ composer require mezzio/mezzio-twigrenderer Using the wrapper If instantiated without arguments, Mezzio\\Twig\\TwigRenderer will create an instance of the Twig engine, which it will then proxy to. use Mezzio\\Twig\\TwigRenderer; $renderer = new TwigRenderer(); Alternately, you can instantiate and configure the engine yourself, and pass it to the Mezzio\\Twig\\TwigRenderer constructor: use Mezzio\\Twig\\TwigRenderer; use Twig\\Loader\\ArrayLoader; use Twig\\Environment; // Create the engine instance: $loader = new ArrayLoader(include 'config/templates.php'); $twig = new Environment($loader); // Configure it: $twig-&gt;addExtension(new CustomExtension()); $twig-&gt;loadExtension(new CustomExtension(); // Inject: $renderer = new TwigRenderer($twig); Included extensions and functions The included Twig extension adds support for url generation. The extension is automatically activated if the UrlHelper and ServerUrlHelper are registered with the container. The following template functions are exposed: path : Render the relative path for a given route and parameters. If there is no route, it returns the current path. {{ path('article_show', {'id': '3'}) }} Generates: /article/3 url : Render the absolute url for a given route with its route parameters, query string arguments, and fragment. If there is no route, it returns the current url. {{ url('article_show', {'id': '3'}, {'foo': 'bar'}, 'fragment') }} Generates: http://example.com/article/3?foo=bar#fragment absolute_url : Render the absolute url from a given path. If the path is empty, it returns the current url. {{ absolute_url('path/to/something') }} Generates: http://example.com/path/to/something asset Render an (optionally versioned) asset url. {{ asset('path/to/asset/name.ext', version=3) }} Generates: path/to/asset/name.ext?v=3 To get the absolute url for an asset: {{ absolute_url(asset('path/to/asset/name.ext', version=3)) }} Generates: http://example.com/path/to/asset/name.ext?v=3 Configuration The following details configuration specific to Twig, as consumed by the TwigRendererFactory : return [ 'templates' =&gt; [ 'extension' =&gt; 'file extension used by templates; defaults to html.twig', 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ], 'twig' =&gt; [ 'autoescape' =&gt; 'html', // Auto-escaping strategy [html|js|css|url|false] 'cache_dir' =&gt; 'path to cached templates', 'assets_url' =&gt; 'base URL for assets', 'assets_version' =&gt; 'base version for assets', 'extensions' =&gt; [ // extension service names or instances ], 'globals' =&gt; [ // Global variables passed to twig templates 'ga_tracking' =&gt; 'UA-XXXXX-X' ], 'optimizations' =&gt; -1, // -1: Enable all (default), 0: disable optimizations 'runtime_loaders' =&gt; [ // runtime loader names or instances ], 'timezone' =&gt; 'default timezone identifier, e.g. America/New_York', 'auto_reload' =&gt; true, // Recompile the template whenever the source code changes ], ]; When specifying the twig.extensions values, always use fully qualified class names or actual extension instances to ensure compatibility with any version of Twig used. Version 2 of Twig requires that a fully qualified class name is used, and not a short-name alias.","title":"Using Twig"},{"location":"v3/features/template/twig/#using-twig","text":"Twig is a template language and engine provided as a standalone component by SensioLabs. It provides: Layout facilities. Template inheritance. Helpers for escaping, and the ability to provide custom helper extensions. We provide a TemplateRendererInterface wrapper for Twig via Mezzio\\Twig\\TwigRenderer .","title":"Using Twig"},{"location":"v3/features/template/twig/#installing-twig","text":"To use the Twig wrapper, you must first install the Twig integration: $ composer require mezzio/mezzio-twigrenderer","title":"Installing Twig"},{"location":"v3/features/template/twig/#using-the-wrapper","text":"If instantiated without arguments, Mezzio\\Twig\\TwigRenderer will create an instance of the Twig engine, which it will then proxy to. use Mezzio\\Twig\\TwigRenderer; $renderer = new TwigRenderer(); Alternately, you can instantiate and configure the engine yourself, and pass it to the Mezzio\\Twig\\TwigRenderer constructor: use Mezzio\\Twig\\TwigRenderer; use Twig\\Loader\\ArrayLoader; use Twig\\Environment; // Create the engine instance: $loader = new ArrayLoader(include 'config/templates.php'); $twig = new Environment($loader); // Configure it: $twig-&gt;addExtension(new CustomExtension()); $twig-&gt;loadExtension(new CustomExtension(); // Inject: $renderer = new TwigRenderer($twig);","title":"Using the wrapper"},{"location":"v3/features/template/twig/#included-extensions-and-functions","text":"The included Twig extension adds support for url generation. The extension is automatically activated if the UrlHelper and ServerUrlHelper are registered with the container. The following template functions are exposed: path : Render the relative path for a given route and parameters. If there is no route, it returns the current path. {{ path('article_show', {'id': '3'}) }} Generates: /article/3 url : Render the absolute url for a given route with its route parameters, query string arguments, and fragment. If there is no route, it returns the current url. {{ url('article_show', {'id': '3'}, {'foo': 'bar'}, 'fragment') }} Generates: http://example.com/article/3?foo=bar#fragment absolute_url : Render the absolute url from a given path. If the path is empty, it returns the current url. {{ absolute_url('path/to/something') }} Generates: http://example.com/path/to/something asset Render an (optionally versioned) asset url. {{ asset('path/to/asset/name.ext', version=3) }} Generates: path/to/asset/name.ext?v=3 To get the absolute url for an asset: {{ absolute_url(asset('path/to/asset/name.ext', version=3)) }} Generates: http://example.com/path/to/asset/name.ext?v=3","title":"Included extensions and functions"},{"location":"v3/features/template/twig/#configuration","text":"The following details configuration specific to Twig, as consumed by the TwigRendererFactory : return [ 'templates' =&gt; [ 'extension' =&gt; 'file extension used by templates; defaults to html.twig', 'paths' =&gt; [ // namespace / path pairs // // Numeric namespaces imply the default/main namespace. Paths may be // strings or arrays of string paths to associate with the namespace. ], ], 'twig' =&gt; [ 'autoescape' =&gt; 'html', // Auto-escaping strategy [html|js|css|url|false] 'cache_dir' =&gt; 'path to cached templates', 'assets_url' =&gt; 'base URL for assets', 'assets_version' =&gt; 'base version for assets', 'extensions' =&gt; [ // extension service names or instances ], 'globals' =&gt; [ // Global variables passed to twig templates 'ga_tracking' =&gt; 'UA-XXXXX-X' ], 'optimizations' =&gt; -1, // -1: Enable all (default), 0: disable optimizations 'runtime_loaders' =&gt; [ // runtime loader names or instances ], 'timezone' =&gt; 'default timezone identifier, e.g. America/New_York', 'auto_reload' =&gt; true, // Recompile the template whenever the source code changes ], ]; When specifying the twig.extensions values, always use fully qualified class names or actual extension instances to ensure compatibility with any version of Twig used. Version 2 of Twig requires that a fully qualified class name is used, and not a short-name alias.","title":"Configuration"},{"location":"v3/getting-started/features/","text":"Overview Mezzio allows you to write PSR-15 middleware applications for the web. PSR-15 consumes PSR-7 HTTP Message Interfaces; these are the incoming request and outgoing response for your application. By using both PSR-15 and PSR-7, we ensure that your applications will work in other contexts that are compatible with these standards. Middleware is any code sitting between a request and a response; it typically analyzes the request to aggregate incoming data, delegates it to another layer to process, and then creates and returns a response. Middleware can and should be relegated only to those tasks, and should be relatively easy to write and maintain. PSR-15 also defines request handlers ; these are classes that receive a request and return a response, without delegating to other layers of the application. These are generally the innermost layers of your application. Middleware is also designed for composability; you should be able to nest middleware and re-use middleware. With Mezzio, you can build middleware applications such as the following: APIs Websites Single Page Applications and more. Features Mezzio builds on laminas-stratigility (Stratigility) to provide a robust convenience layer on which to build applications. The features it provides include: Powerful Routing Stratigility provides the foundation for Mezzio's routing. But, Stratigility only provides limited, literal route matching via PathMiddlewareDecorator . Mezzio builds on this, providing an abstracted routing layer that allows the developer to choose the routing library that best fits the project needs. And, among other features, it: Supports dynamic routing capabilities from a variety of router packages, including FastRoute , and laminas-router Provides much more fine-grained matching capabilities than Stratigility does It allows restricting matched routes to specific HTTP methods and returns 405 Not Allowed responses with an Allow HTTP header containing the allowed HTTP methods for invalid requests A PSR-11 Container Mezzio encourages the use of dependency injection, and defines its core Application class to compose a PSR-11 ContainerInterface instance. The container is used to lazy-load middleware, whether it is piped (Stratigility interface) or routed (Mezzio). Flexible Templating While Mezzio does not assume templating is being used, it provides a templating abstraction layer, allowing developers to choose the templating package that best suits their needs. In addition, developers can write middleware that typehints on this abstraction, and assume that the underlying templating package will provide layout support and namespaced template support. By default, Mezzio provides wrappers for Plates , Twig , and laminas-view . Error Handling Applications should handle errors gracefully, but also handle them differently in development versus production. Mezzio provides both basic error handling via Stratigility's own ErrorHandler implementation, providing specialized error response generators that can perform templating, and integrates with Whoops . Flow Overview Below is a diagram detailing the workflow used by Mezzio. The Application acts as an \"onion\"; in the diagram above, the top is the outermost layer of the onion, while the bottom is the innermost. The Application dispatches each middleware. Each middleware receives a request and a delegate for handing off processing of the request should the middleware not be able to fully process it itself. Internally, the delegate composes a queue of middleware, and invokes the next in the queue when invoked. Any given middleware can return a response , at which point execution winds its way back out the onion. Pipelines The terminology \"pipeline\" is often used to describe the onion. One way of looking at the \"onion\" is as a queue , which is first-in-first-out (FIFO) in operation. This means that the first middleware on the queue is executed first, and this invokes the next, and so on (and hence the \"next\" terminology). When looked at from this perspective: In most cases, the entire queue will not be traversed. The innermost layer of the onion represents the last item in the queue, and should be guaranteed to return a response; usually this is indicative of a malformed request (HTTP 400 response status) and/or inability to route the middleware to a handler (HTTP 404 response status). Responses are returned through the pipeline, in reverse order of traversal. Double pass middleware The system described above is what is known as lambda middleware . Each middleware receives the request and a handler, and you pass only the request to the handler when wanting to hand off processing: function (ServerRequestInterface $request, RequestHandlerInterface $handler) { $response = $handler-&gt;handle($request); return $response-&gt;withHeader('X-Test', time()); } In Mezzio 1.X, the default middleware style was what is known as double pass middleware. Double pass middleware receives both the request and a response in addition to the handler, and passes both the request and response to the handler when invoking it: function (ServerRequestInterface $request, ResponseInterface $response, callable $next) { $response = $next($request, $response); return $response-&gt;withHeader('X-Test', time()); } It is termed \"double pass\" because you pass both the request and response when delegating to the next layer. Mezzio 3 no longer supports double-pass middleware directly. However, if you decorate it using Laminas\\Stratigility\\doublePassMiddleware() , we can consume it. That function requires first the double-pass middleware, and then a response prototype (which will be passed as the $response argument to the middleware): use function Laminas\\Stratigility\\doublePassMiddleware; $app-&gt;pipe(doublePassMiddleware(function ($request, $response, $next) { // ... }, new Response())); If you use double-pass middleware, do not use the $response instance passed to it unless you are returning it specifically (e.g., because you are not delegating to another layer). The Application allows arbitrary middleware to be injected, with each being executed in the order in which they are attached; returning a response from middleware prevents any middleware attached later from executing. The middleware pipeline is executed in the order of attachment. Mezzio provides default implementations of \"routing\" and \"dispatch\" middleware, which you will attach to the middleware pipeline. These are implemented as the classes Mezzio\\Router\\Middleware\\RouteMiddleware and Mezzio\\Router\\Middleware\\DispatchMiddleware , respectively. Routing within Mezzio consists of decomposing the request to match it to middleware that can handle that given request. This typically consists of a combination of matching the requested URI path along with allowed HTTP methods: map a GET request to the path /api/ping to the PingMiddleware map a POST request to the path /contact/process to the HandleContactMiddleware etc. Dispatching is simply the act of calling the middleware mapped by routing. The two events are modeled as separate middleware to allow you to act on the results of routing before attempting to dispatch the mapped middleware; this can be useful for implementing route-based authentication or validation, or, as we provide by default, handling HEAD and OPTIONS requests, or providing 405 Method Not Allowed responses. The majority of your application will consist of routing rules that map to routed middleware and request handlers. Middleware piped to the application earlier than routing should be middleware that you wish to execute for every request. These might include: bootstrapping parsing of request body parameters addition of debugging tools embedded middleware pipelines/application that you want to match at a given literal path etc. Such middleware may decide that a request is invalid, and return a response; doing so means no further middleware will be executed! This is an important feature of middleware architectures, as it allows you to define application-specific workflows optimized for performance, security, etc. Middleware piped to the application after the routing and dispatch middleware will execute in one of two conditions: routing failed routed middleware called on the next middleware instead of returning a response. As such, the largest use case for such middleware is to provide a \"default\" error response for your application, usually as an HTTP 404 Not Found response. The main points to remember are: The application is a queue, and operates in FIFO order. Each middleware can choose whether to return a response, which will cause the queue to unwind, or to traverse to the next middleware. Most of the time, you will be defining routed middleware , and the routing rules that map to them. You get to control the workflow of your application by deciding the order in which middleware is queued.","title":"Overview and Features"},{"location":"v3/getting-started/features/#overview","text":"Mezzio allows you to write PSR-15 middleware applications for the web. PSR-15 consumes PSR-7 HTTP Message Interfaces; these are the incoming request and outgoing response for your application. By using both PSR-15 and PSR-7, we ensure that your applications will work in other contexts that are compatible with these standards. Middleware is any code sitting between a request and a response; it typically analyzes the request to aggregate incoming data, delegates it to another layer to process, and then creates and returns a response. Middleware can and should be relegated only to those tasks, and should be relatively easy to write and maintain. PSR-15 also defines request handlers ; these are classes that receive a request and return a response, without delegating to other layers of the application. These are generally the innermost layers of your application. Middleware is also designed for composability; you should be able to nest middleware and re-use middleware. With Mezzio, you can build middleware applications such as the following: APIs Websites Single Page Applications and more.","title":"Overview"},{"location":"v3/getting-started/features/#features","text":"Mezzio builds on laminas-stratigility (Stratigility) to provide a robust convenience layer on which to build applications. The features it provides include:","title":"Features"},{"location":"v3/getting-started/features/#flow-overview","text":"Below is a diagram detailing the workflow used by Mezzio. The Application acts as an \"onion\"; in the diagram above, the top is the outermost layer of the onion, while the bottom is the innermost. The Application dispatches each middleware. Each middleware receives a request and a delegate for handing off processing of the request should the middleware not be able to fully process it itself. Internally, the delegate composes a queue of middleware, and invokes the next in the queue when invoked. Any given middleware can return a response , at which point execution winds its way back out the onion.","title":"Flow Overview"},{"location":"v3/getting-started/quick-start/","text":"Quick Start The easiest way to get started with Mezzio is to use the skeleton application and installer . The skeleton provides a generic structure for creating your applications, and prompts you to choose a router, dependency injection container, template renderer, and error handler from the outset. Create a new project First, we'll create a new project, using Composer's create-project command: $ composer create-project mezzio/mezzio-skeleton mezzio This will prompt you to choose: Whether to install a minimal skeleton (no default middleware), a flat application structure (all code under src/ ), or a modular structure (directories under src/ are modules, each with source code and potentially templates, configuration, assets, etc.). The default is a \"flat\" structure; you can always add modules to it later. A dependency injection container. We recommend using the default, laminas-servicemanager. A router. We recommend using the default, FastRoute. A template renderer. You can ignore this when creating an API project, but if you will be creating any HTML pages, we recommend installing one. We prefer Plates. An error handler. Whoops is a very nice option for development, as it gives you extensive, browsable information for exceptions and errors raised. Start a web server The Skeleton + Installer creates a full application structure that's ready-to-go when complete. You can test it out using built-in web server . From the project root directory, execute the following: $ composer run --timeout=0 serve This starts up a web server on localhost port 8080; browse to http://localhost:8080/ to see if your application responds correctly! Setting a timeout Composer commands time out after 300 seconds (5 minutes). On Linux-based systems, the php -S command that composer serve spawns continues running as a background process, but on other systems halts when the timeout occurs. As such, we recommend running the serve script using a timeout. This can be done by using composer run to execute the serve script, with a --timeout option. When set to 0 , as in the previous example, no timeout will be used, and it will run until you cancel the process (usually via Ctrl-C ). Alternately, you can specify a finite timeout; as an example, the following will extend the timeout to a full day: $ composer run --timeout=86400 serve Development Tools We ship tools in our skeleton application to make development easier. Development Mode laminas-development-mode allows you to enable and disable development mode from your cli. $ composer development-enable # enable development mode $ composer development-disable # disable development mode $ composer development-status # show development status The development configuration is set in config/autoload/development.local.php.dist . It also allows you to specify configuration and modules that should only be enabled when in development, and not when in production. Clear config cache Production settings are the default, which means enabling the configuration cache. However, it must be easy for developers to clear the configuration cache. That's what this command does. $ composer clear-config-cache Testing Your Code PHPUnit and PHP_CodeSniffer are now installed by default. To execute tests and detect coding standards violations, run the following command: $ composer check Security Advisories We have included the security-advisories package to notify you about installed dependencies with known security vulnerabilities. Each time you run composer update , composer install , or composer require , it prevents installation of software with known and documented security issues. Tooling integration The skeleton ships with mezzio-tooling by default, and integrates with it by exposing it via composer: $ composer mezzio The tooling provides a number of commands; see the CLI tooling chapter for more details. Modules Composer will prompt you during installation to ask if you want a minimal application (no structure or default middleware provided), flat application (all source code under the same tree, and the default selection), or modular application. This latter option allows you to segregate discrete areas of application functionality into modules , which can contain source code, templates, assets, and more; these can later be repackaged for re-use if desired. Support for modules is available via the laminas-component-installer and laminas-config-aggregator packages; the mezzio-tooling . package provides tools for creating and manipulating modules in your application. Component Installer Whenever you add a component or module that exposes itself as such, the laminas-component-installer composer plugin will prompt you, asking if and where you want to inject its configuration. This ensures that components are wired automatically for you. In most cases, you will choose to inject in the config/config.php file; for tools intended only for usage during development, choose config/development.config.php.dist . Config Aggregator The laminas-config-aggregator library collects and merges configuration from different sources. It also supports configuration caching. As an example, your config/config.php file might read as follows in order to aggregate configuration from development mode settings, application configuration, and theoretical User , Blog , and App modules: &lt;?php // config/config.php $aggregator = new ConfigAggregator([ // Module configuration App\\ConfigProvider::class, BlogModule\\ConfigProvider::class, UserModule\\ConfigProvider::class, // Load application config in a pre-defined order in such a way that local settings // overwrite global settings. (Loaded as first to last): // - `global.php` // - `*.global.php` // - `local.php` // - `*.local.php` new PhpFileProvider('config/autoload/{{,*.}global,{,*.}local}.php'), // Load development config if it exists new PhpFileProvider('config/development.config.php'), ], 'data/config-cache.php'); return $aggregator-&gt;getMergedConfig(); The configuration is merged in the same order as it is passed, with later entries having precedence. Config Providers ConfigAggregator works by aggregating \"Config Providers\" passed to its constructor. Each provider should be a callable class that requires no constructor parameters, where invocation returns a configuration array (or a PHP generator) to be merged. Libraries or modules can have configuration providers that provide default values for a library or module. For the UserModule\\ConfigProvider class loaded in the ConfigAggregator above, the ConfigProvider might look like this: &lt;?php namespace UserModule; class ConfigProvider { /** * Returns the configuration array * * To add some sort of a structure, each section is defined in a separate * method which returns an array with its configuration. * * @return array */ public function __invoke() { return [ 'dependencies' =&gt; $this-&gt;getDependencies(), 'users' =&gt; $this-&gt;getConfig(), ]; } /** * Returns the container dependencies * * @return array */ public function getDependencies() : array { return [ 'factories' =&gt; [ Action\\LoginAction::class =&gt; Factory\\Action\\LoginActionFactory::class, Middleware\\AuthenticationMiddleware::class =&gt; Factory\\Middleware\\AuthenticationMiddlewareFactory::class, ], ]; } /** * Returns the default module configuration * * @return array */ public function getConfig() : array { return [ 'paths' =&gt; [ 'enable_registration' =&gt; true, 'enable_username' =&gt; false, 'enable_display_name' =&gt; true, ], ]; } } mezzio module commands To aid in the creation, registration, and deregistration of modules in your application, you can use the CLI tooling provided by default. All commands are exposed via composer mezzio , and include the following: composer mezzio mezzio:module:create &lt;modulename&gt; will create the default directory structure for the named module, create a ConfigProvider for the module, add an autoloading rule to composer.json , and register the ConfigProvider with the application configuration. composer mezzio mezzio:module:register &lt;modulename&gt; will add an autoloading rule to composer.json for the module, and register its ConfigProvider , if found, with the application configuration. mezzio mezzio:module:deregister &lt;modulename&gt; will remove any autoloading rules for the module from composer.json , and deregister its ConfigProvider , if found, from the application configuration. Adding Middleware The skeleton makes the assumption that you will be writing your middleware as classes, and uses piping and routing to add your middleware. Piping Piping is a foundation feature of the underlying laminas-stratigility implementation. You can set up the middleware pipeline in config/pipeline.php . In this section, we'll demonstrate setting up a basic pipeline that includes error handling, segregated applications, routing, middleware dispatch, and more. The error handler should be the first (most outer) middleware to catch all exceptions. $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipe(ServerUrlMiddleware::class); After the ErrorHandler you can pipe more middleware that you want to execute on every request, such as bootstrapping, pre-conditions, and modifications to outgoing responses: $app-&gt;pipe(ServerUrlMiddleware::class); Piped middleware may be callables, middleware instances, or service names. Middleware may also be passed as an array; each item in the array must resolve to middleware eventually (i.e., callable or service name); underneath, Mezzio creates Laminas\\Stratigility\\MiddlewarePipe instances with each of the middleware listed piped to it. Middleware can be attached to specific paths, allowing you to mix and match applications under a common domain. The handlers in each middleware attached this way will see a URI with the MATCHED PATH SEGMENT REMOVED!!! $app-&gt;pipe('/api', $apiMiddleware); $app-&gt;pipe('/docs', $apiDocMiddleware); $app-&gt;pipe('/files', $filesMiddleware); Next, you should register the routing middleware in the middleware pipeline: $app-&gt;pipe(RouteMiddleware::class); Add more middleware that needs to introspect the routing results; this might include: handling for HTTP HEAD requests handling for HTTP OPTIONS requests handling for matched paths where the HTTP method is not allowed middleware for handling URI generation route-based authentication route-based validation etc. $app-&gt;pipe(ImplicitHeadMiddleware::class); $app-&gt;pipe(ImplicitOptionsMiddleware::class); $app-&gt;pipe(MethodNotAllowedMiddleware::class); $app-&gt;pipe(UrlHelperMiddleware::class); Next, register the dispatch middleware in the middleware pipeline: $app-&gt;pipe(DispatchMiddleware::class); At this point, if no response is return by any middleware, we need to provide a way of notifying the user of this; by default, we use the NotFoundHandler , but you can provide any other fallback middleware you wish: $app-&gt;pipe(NotFoundHandler::class); The public/index.php file will require the config/pipeline.php file, and invoke the returned result. When it invokes it, it passes the application instance, a Mezzio\\MiddlewareFactory instance, and the PSR-11 container you are using. The full example then looks something like this: // In config/pipeline.php: use Psr\\Container\\ContainerInterface; use Mezzio\\Application; use Mezzio\\MiddlewareFactory; use Mezzio\\Helper\\ServerUrlMiddleware; use Mezzio\\Helper\\UrlHelperMiddleware; use Mezzio\\Middleware\\NotFoundHandler; use Mezzio\\Router\\Middleware\\DispatchMiddleware; use Mezzio\\Router\\Middleware\\ImplicitHeadMiddleware; use Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware; use Mezzio\\Router\\Middleware\\MethodNotAllowedMiddleware; use Mezzio\\Router\\Middleware\\RouteMiddleware; use Laminas\\Stratigility\\Middleware\\ErrorHandler; return function (Application $app, MiddlewareFactory $factory, ContainerInterface $container) : void { $app-&gt;pipe(ErrorHandler::class); $app-&gt;pipe(ServerUrlMiddleware::class); // These assume that the variables listed are defined in this scope: $app-&gt;pipe('/api', $apiMiddleware); $app-&gt;pipe('/docs', $apiDocMiddleware); $app-&gt;pipe('/files', $filesMiddleware); $app-&gt;pipe(RouteMiddleware::class); $app-&gt;pipe(ImplicitHeadMiddleware::class); $app-&gt;pipe(ImplicitOptionsMiddleware::class); $app-&gt;pipe(MethodNotAllowedMiddleware::class); $app-&gt;pipe(UrlHelperMiddleware::class); $app-&gt;pipe(DispatchMiddleware::class); $app-&gt;pipe(NotFoundHandler::class); }; Routing Routing is an additional feature provided by Mezzio. Routing is set up in config/routes.php . You can setup routes with a single request method: $app-&gt;get('/', App\\Action\\HomePageAction::class, 'home'); $app-&gt;post('/album', App\\Action\\AlbumCreateAction::class, 'album.create'); $app-&gt;put('/album/:id', App\\Action\\AlbumUpdateAction::class, 'album.put'); $app-&gt;patch('/album/:id', App\\Action\\AlbumUpdateAction::class, 'album.patch'); $app-&gt;delete('/album/:id', App\\Action\\AlbumDeleteAction::class, 'album.delete'); Or with multiple request methods: $app-&gt;route('/contact', App\\Action\\ContactAction::class, ['GET', 'POST', ...], 'contact'); Or handling all request methods: $app-&gt;any('/contact', App\\Action\\ContactAction::class)-&gt;setName('contact'); Alternately, to be explicit, the above could be written as: $app-&gt;route( '/contact', App\\Action\\ContactAction::class, Mezzio\\Router\\Route::HTTP_METHOD_ANY, 'contact' ); We recommend a single middleware class per combination of route and request method. Similar to the config/pipeline.php file, the config/routes.php file is expected to return a callable: // In config/routes.php: use Psr\\Container\\ContainerInterface; use Mezzio\\Application; use Mezzio\\MiddlewareFactory; return function (Application $app, MiddlewareFactory $factory, ContainerInterface $container) : void { $app-&gt;get('/books', \\App\\Handler\\ListBooksHandler::class, 'books'); }; Next Steps The skeleton provides a default structure for templates, if you choose to use them. Let's see how you can create your first vanilla middleware, and templated middleware. Creating middleware Middleware must implement Psr\\Http\\Server\\MiddlewareInterface ; this interface defines a single method, process() , which accepts a Psr\\Http\\Message\\ServerRequestInterface instance and a Psr\\Http\\Server\\RequestHandlerInterface instance, and returns a Psr\\Http\\Message\\ResponseInterface instance. Write middleware when you may want to delegate to another layer of the application in order to create a response; do this by calling the handle() method of the handler passed to it. Generally speaking, you will write middleware when you want to conditionally return a response based on the request, and/or alter the response returned by another layer of the application . The skeleton defines an App namespace for you; you can place middleware anywhere within it. We'll create a simple middleware here that will run on every request, and alter the response to add a header. We can use our tooling to create the middleware file: $ composer mezzio mezzio:middleware:create \"App\\XClacksOverheadMiddleware\" This command will create a PSR-15 middleware implementation, a factory for it, and register the two in the application's container configuration. It tells you the location of both files. Now let's edit the middleware class file. Replace the contents of the process() method with: $response = $handler-&gt;handle($request); return $response-&gt;withHeader('X-Clacks-Overhead', 'GNU Terry Pratchett'); Now that we've created our middleware, we still have to tell the pipeline about it. Open the file config/pipeline.php file, and find the line that read: $app-&gt;pipe(ErrorHandler::class); Add the following line after it: $app-&gt;pipe(App\\XClacksOverheadMiddleware::class); If you browse to the home page (or any other page, for that matter) and introspect the headers returned with the response using your browser's development tools, you'll now see the following entry: X-Clacks-Overhead: GNU Terry Pratchett You've created your first middleware! Creating request handlers You may route to either middleware or request handlers. In this section, we'll define a request handler and route to it. Request handlers must implement Psr\\Http\\Server\\RequestHandlerInterface ; this interface defines a single method, handle() , which accepts a Psr\\Http\\Message\\ServerRequestInterface instance and returns a Psr\\Http\\Message\\ResponseInterface instance. Write request handlers when you will not be delegating to another layer of the application, and will be creating and returning a response directly. Generally speaking, you will route to request handlers . The skeleton defines an App namespace for you, and suggests placing request handlers under the namespace App\\Handler . Let's create a \"Hello\" request handler. We can use our tooling to create the file: $ composer mezzio mezzio:handler:create \"App\\Handler\\HelloHandler\" The command will tell you the location in the filesystem in which it created the new class; it will also create a factory for you, and register that factory with the container! Additionally, if you have a template renderer in place, it will create a template file for you. make a note of the locations of both the class file and template file. Open the class file, and now let's edit the handle() contents to read as follows: $target = $request-&gt;getQueryParams()['target'] ?? 'World'; $target = htmlspecialchars($target, ENT_HTML5, 'UTF-8'); return new HtmlResponse($this-&gt;renderer-&gt;render( 'app::hello', ['target' =&gt; $target] )); Templateless handler If you did not select a template engine when creating your application, the contents of your handle() method will be empty to begin. In that case, alter the above example as follows: Add the statement use Laminas\\Diactoros\\Response\\HtmlResponse; to the use statements at the top of the file. Alter the response creation to read: return new HtmlResponse(sprintf( '&lt;h1&gt;Hello %s&lt;/h1&gt;', $target )); You can also skip the next step below where we edit the template file. The above looks for a query string parameter \"target\", and uses its value to provide to the template, which is then rendered and returned in an HTML response. Now, let's edit the template file to have the one of the following header lines (use the one for your chosen template renderer): Plates &lt;!-- plates --&gt; &lt;h1&gt;Hello &lt;?= $this-&gt;e($target) ?&gt;&lt;/h1&gt; laminas-view &lt;!-- laminas-view --&gt; &lt;h1&gt;Hello &lt;?= $this-&gt;target ?&gt;&lt;/h1&gt; Twig &lt;!-- twig --&gt; &lt;h1&gt;Hello {{ target }}&lt;/h1&gt; While the handler is registered with the container, the application does not yet know how to get to it. Let's fix that. Open the file config/routes.php , and add the following at the bottom of the function it exposes: $app-&gt;get('/hello', App\\Handler\\HelloHandler::class, 'hello'); Once you've completed the above, give it a try by going to each of the following URIs: http://localhost:8080/hello http://localhost:8080/hello?target=ME You should see the message change as you go between the two URIs! Congratulations Congratulations! You've now created your application, and started writing middleware! It's time to start learning about the rest of the features of Mezzio: Containers Routing Templating Error Handling","title":"Quick Start"},{"location":"v3/getting-started/quick-start/#quick-start","text":"The easiest way to get started with Mezzio is to use the skeleton application and installer . The skeleton provides a generic structure for creating your applications, and prompts you to choose a router, dependency injection container, template renderer, and error handler from the outset.","title":"Quick Start"},{"location":"v3/getting-started/quick-start/#create-a-new-project","text":"First, we'll create a new project, using Composer's create-project command: $ composer create-project mezzio/mezzio-skeleton mezzio This will prompt you to choose: Whether to install a minimal skeleton (no default middleware), a flat application structure (all code under src/ ), or a modular structure (directories under src/ are modules, each with source code and potentially templates, configuration, assets, etc.). The default is a \"flat\" structure; you can always add modules to it later. A dependency injection container. We recommend using the default, laminas-servicemanager. A router. We recommend using the default, FastRoute. A template renderer. You can ignore this when creating an API project, but if you will be creating any HTML pages, we recommend installing one. We prefer Plates. An error handler. Whoops is a very nice option for development, as it gives you extensive, browsable information for exceptions and errors raised.","title":"Create a new project"},{"location":"v3/getting-started/quick-start/#start-a-web-server","text":"The Skeleton + Installer creates a full application structure that's ready-to-go when complete. You can test it out using built-in web server . From the project root directory, execute the following: $ composer run --timeout=0 serve This starts up a web server on localhost port 8080; browse to http://localhost:8080/ to see if your application responds correctly!","title":"Start a web server"},{"location":"v3/getting-started/quick-start/#development-tools","text":"We ship tools in our skeleton application to make development easier.","title":"Development Tools"},{"location":"v3/getting-started/quick-start/#modules","text":"Composer will prompt you during installation to ask if you want a minimal application (no structure or default middleware provided), flat application (all source code under the same tree, and the default selection), or modular application. This latter option allows you to segregate discrete areas of application functionality into modules , which can contain source code, templates, assets, and more; these can later be repackaged for re-use if desired. Support for modules is available via the laminas-component-installer and laminas-config-aggregator packages; the mezzio-tooling . package provides tools for creating and manipulating modules in your application.","title":"Modules"},{"location":"v3/getting-started/quick-start/#adding-middleware","text":"The skeleton makes the assumption that you will be writing your middleware as classes, and uses piping and routing to add your middleware.","title":"Adding Middleware"},{"location":"v3/getting-started/quick-start/#next-steps","text":"The skeleton provides a default structure for templates, if you choose to use them. Let's see how you can create your first vanilla middleware, and templated middleware.","title":"Next Steps"},{"location":"v3/getting-started/quick-start/#congratulations","text":"Congratulations! You've now created your application, and started writing middleware! It's time to start learning about the rest of the features of Mezzio: Containers Routing Templating Error Handling","title":"Congratulations"},{"location":"v3/reference/cli-tooling/","text":"Command Line Tooling Mezzio offers a number of tools for assisting in project development. This page catalogues each. Development Mode The package laminas/laminas-development-mode provides a simple way to toggle in and out of development mode . Doing so allows you to ship known development-specific settings within your repository, while ensuring they are not enabled in production. The tooling essentially enables optional, development-specific configuration in your application by: Copying the file config/development.config.php.dist to config/development.config.php ; this can be used to enable development-specific modules or settings (such as the debug flag). Copying the file config/autoload/development.local.php.dist to config/autoload/development.local.php ; this can be used to provide local overrides of a number of configuration settings. The package provides the tooling via vendor/bin/laminas-development-mode . If you are using the Mezzio skeleton, it provides aliases via Composer: $ composer development-enable $ composer development-disable $ composer development-status Add settings to your development.*.php.dist files, and commit those files to your repository; always toggle out of and into development mode after making changes, to ensure they pick up in your development environment. Mezzio command-line tool The package mezzio/mezzio-tooling provides the script vendor/bin/mezzio , which contains a number of commands related to migration, modules, and middleware. You can install it if it is not already present in your application: $ composer require --dev mezzio/mezzio-tooling Once installed, invoking the binary without arguments will give a listing of available tools: $ ./vendor/bin/mezzio Integration with Composer In the skeleton application, we provide direct integration with Composer, allowing you to invoke the tooling using: $ composer mezzio You can use either that form, or invoke the script directly as detailed above. Commands supported include: action:create [options] &lt;action&gt; : This is an alias for the handler:create command detailed below. factory:create [options] &lt;class&gt; : Create a factory for the named class. By default, the command will also register the class with its factory in the application container. handler:create [options] &lt;handler&gt; : Create a request handler named after &lt;handler&gt; . By default, the command will also generate a factory, register both with the application container, and, if a template renderer is discovered, generate a template in an appropriate location. Note: &lt;handler&gt; will either need to be quoted or the backslashes escaped. Example: handler:create \"ModuleName\\Handler\\IndexHandler\" or handler:create ModuleName\\\\Handler\\\\IndexHandler . middleware:create &lt;middleware&gt; : Create a class file for the named middleware class. The class must use a namespace already declared in your application, and will be created relative to the path associated with that namespace. migrate:interop-middleware [options] : Migrates former http-interop middleware under the src/ tree to PSR-15 middleware. migrate:middleware-to-request-handler [options] : Migrates PSR-15 middleware under the src/ tree to PSR-15 request handlers; it will only migrate those that never call on their $handler argument. module:create [--composer|-c] [--modules-path|-p] &lt;module&gt; : Create the named module including a filesystem skeleton, add and generate autoloading rules for it, and register the module's ConfigProvider with your application. module:register [--composer|-c] [--modules-path|-p] &lt;module&gt; : Add and generate autoloading rules for the named module, and register the module's ConfigProvider with your application. module:deregister [--composer|-c] [--modules-path|-p] &lt;module&gt; : Remove autoloading rules for the named module and regenerate autoloading rules; remove the module's ConfigProvider from the application configuration. You may obtain full help for each command by invoking: $ ./vendor/bin/mezzio help &lt;command&gt;","title":"CLI Tooling"},{"location":"v3/reference/cli-tooling/#command-line-tooling","text":"Mezzio offers a number of tools for assisting in project development. This page catalogues each.","title":"Command Line Tooling"},{"location":"v3/reference/cli-tooling/#development-mode","text":"The package laminas/laminas-development-mode provides a simple way to toggle in and out of development mode . Doing so allows you to ship known development-specific settings within your repository, while ensuring they are not enabled in production. The tooling essentially enables optional, development-specific configuration in your application by: Copying the file config/development.config.php.dist to config/development.config.php ; this can be used to enable development-specific modules or settings (such as the debug flag). Copying the file config/autoload/development.local.php.dist to config/autoload/development.local.php ; this can be used to provide local overrides of a number of configuration settings. The package provides the tooling via vendor/bin/laminas-development-mode . If you are using the Mezzio skeleton, it provides aliases via Composer: $ composer development-enable $ composer development-disable $ composer development-status Add settings to your development.*.php.dist files, and commit those files to your repository; always toggle out of and into development mode after making changes, to ensure they pick up in your development environment.","title":"Development Mode"},{"location":"v3/reference/cli-tooling/#mezzio-command-line-tool","text":"The package mezzio/mezzio-tooling provides the script vendor/bin/mezzio , which contains a number of commands related to migration, modules, and middleware. You can install it if it is not already present in your application: $ composer require --dev mezzio/mezzio-tooling Once installed, invoking the binary without arguments will give a listing of available tools: $ ./vendor/bin/mezzio","title":"Mezzio command-line tool"},{"location":"v3/reference/mezzio-projects/","text":"Projects powered by mezzio mezzio can be used for anything. Here are some projects, tutorials and the related source code. Have a look around and see how others have used mezzio. Sample Code &amp; Tutorials Expressive Tutorial (WIP) - source AstroSplash - source php-ddd-cargo-sample - source Personal Sites mwop.net - source alejandrocelaya.com - source zimuel.it - source Applications Shlink: A self-hosted URL shortener - source Dotkernel Frontend: Basic CMS application - source Dotkernel Admin: simple CRUD operations on a database - source Dotkernel API: basic application for REST style API - source","title":"Mezzio Projects"},{"location":"v3/reference/mezzio-projects/#projects-powered-by-mezzio","text":"mezzio can be used for anything. Here are some projects, tutorials and the related source code. Have a look around and see how others have used mezzio.","title":"Projects powered by mezzio"},{"location":"v3/reference/mezzio-projects/#sample-code-tutorials","text":"Expressive Tutorial (WIP) - source AstroSplash - source php-ddd-cargo-sample - source","title":"Sample Code &amp; Tutorials"},{"location":"v3/reference/mezzio-projects/#personal-sites","text":"mwop.net - source alejandrocelaya.com - source zimuel.it - source","title":"Personal Sites"},{"location":"v3/reference/mezzio-projects/#applications","text":"Shlink: A self-hosted URL shortener - source Dotkernel Frontend: Basic CMS application - source Dotkernel Admin: simple CRUD operations on a database - source Dotkernel API: basic application for REST style API - source","title":"Applications"},{"location":"v3/reference/migration/","text":"Migration to Mezzio 3.0 Mezzio 3.0 should not result in many upgrade problems for users. However, starting in this version, we offer a few changes affecting the following that you should be aware of, and potentially update your application to adopt: PHP 7.1 support PSR-15 support New dependencies New features Signature and behavior changes Removed classes and traits Upgrading from v2 PHP 7.1 support Starting in Mezzio 3.0 we support only PHP 7.1+. PSR-15 Support All middleware and delegators now implement interfaces from PSR-15 instead of http-interop/http-middleware (a PSR-15 precursor). This means the following changes were made throughout Mezzio: The process() method of all middleware now type hint the second argument against the PSR-15 RequestHandlerInterface , instead of the previous DelegateInterface . The process() method of all middleware now have a return type hint of \\Psr\\Http\\Message\\ResponseInterface . All \"delegators\" have become request handlers: these now implement the PSR-15 interface RequestHandlerInterface instead of the former DelegateInterface . The process() method of handlers (formerly delegators) have been renamed to handle() and given a return type hint of \\Psr\\Http\\Message\\ResponseInterface . This change also affects all middleware you, as an application developer, have written, and your middleware will need to be updated. We provide a tool for this via mezzio-tooling. Make sure that package is up-to-date (a version 1 release should be installed), and run the following: $ ./vendor/bin/mezzio migrate:interop-middleware This tool will locate any http-interop middleware and update it to PSR-15 middleware. New dependencies Mezzio adds the following packages as dependencies: psr/http-server-middleware provides the PSR-15 interfaces, and replaces the previous dependency on http-interop/http-middleware. mezzio/mezzio-router ; previously, we depended on this package indirectly; now it is a direct requirement. mezzio/mezzio-tooling ; this was suggested previously, but is now required as a development dependency. laminas/laminas-httphandlerrunner ; this is now used for the purposes of marshaling the server request, dispatching the application, and emitting the response. The functionality is generalized enough to warrant a separate package. New features The following classes were added in version 3: Mezzio\\Container\\ApplicationConfigInjectionDelegator is a delegator factory capable of piping and routing middleware from configuration. See the recipe on autowiring routes and pipeline middleware for more information. Mezzio\\Container\\ApplicationPipelineFactory will produce an empty MiddlewarePipe for use with Mezzio\\Application . Mezzio\\Container\\EmitterFactory will produce a Laminas\\HttpHandlerRunner\\Emitter\\EmitterStack instance for use with the RequestHandlerRunner instance composed by the Application . See the chapter on emitters for more details. Mezzio\\Container\\MiddlewareContainerFactory will produce a MiddlewareContainer composing the application container instance. Mezzio\\Container\\MiddlewareFactoryFactory will produce a MiddlewareFactory composing a MiddlewareContainer instance. Mezzio\\Container\\RequestHandlerRunnerFactory will produce a Laminas\\HttpHandlerRunner\\RequestHandlerRunner instance for use with the Application instance. See the laminas-httphandlerrunner documentation for more details on this collaborator. Mezzio\\Container\\ServerRequestErrorResponseGeneratorFactory will produce a Mezzio\\Response\\ServerRequestErrorResponseGenerator instance for use with the RequestHandlerRunner . Mezzio\\Container\\ServerRequestFactoryFactory will produce a PHP callable capable of generating a PSR-7 ServerRequestInterface instance for use with the RequestHandlerRunner . Mezzio\\MiddlewareContainer decorates a PSR-11 container, and ensures that the values pulled are PSR-15 MiddlewareInterface instances. If the container returns a PSR-15 RequestHandlerInterface , it decorates it via Laminas\\Stratigility\\Middleware\\RequestHandlerMiddleware . All other types result in an exception being thrown. Mezzio\\MiddlewareFactory allows creation of MiddlewareInterface instances from a variety of argument types, and is used by Application to allow piping and routing to middleware services, arrays of services, and more. It composes a MiddlewareContainer internally. Mezzio\\Response\\ServerRequestErrorResponseGenerator can act as a response generator for the RequestHandlerRunner when its composed server request factory raises an exception. Signature and behavior changes The following signature changes were made that could affect class extensions and/or consumers. Application Mezzio\\Application was refactored dramatically for version 3. If you were instantiating it directly previously, the constructor arguments are now, in order: Mezzio\\MiddlewareFactory Laminas\\Stratigility\\MiddlewarePipeInterface Mezzio\\Router\\RouteCollector Laminas\\HttpHandlerRunner\\RequestHandlerRunner Mezzio\\Application::__construct(...) Application no longer supports piping or routing to double-pass middleware. If you continue to need double-pass middleware (e.g., defined by a third-party library), use Laminas\\Stratigility\\doublePassMiddleware() to decorate it prior to piping or routing to it: use Laminas\\Diactoros\\Response; use function Laminas\\Stratigility\\doublePassMiddleware; $app-&gt;pipe(doublePassMiddleware($someDoublePassMiddleware, new Response())); $app-&gt;get('/foo', doublePassMiddleware($someDoublePassMiddleware, new Response())); Additionally, the following methods were removed : pipeRoutingMiddleware() : use pipe(\\Mezzio\\Router\\Middleware\\RouteMiddleware::class) instead. pipeDispatchMiddleware() : use pipe(\\Mezzio\\Router\\Middleware\\DispatchMiddleware::class) instead. getContainer() getDefaultDelegate() : ensure you pipe middleware or a request handler capable of returning a response at the innermost layer; Mezzio\\Handler\\NotFoundHandler can be used for this. getEmitter() : use the Laminas\\HttpHandlerRunner\\Emitter\\EmitterInterface service from the container. injectPipelineFromConfig() : use the new ApplicationConfigInjectionDelegator and/or the static method of the same name it defines. injectRoutesFromConfig() : use the new ApplicationConfigInjectionDelegator and/or the static method of the same name it defines. ApplicationFactory Mezzio\\Container\\ApplicationFactory no longer looks at the mezzio.programmatic_pipeline flag, nor does it inject pipeline middleware and/or routed middleware from configuration any longer. If you want to use configuration-driven pipelines and/or middleware, you may register the new class Mezzio\\Container\\ApplicationConfigInjectionDelegator as a delegator factory on the Mezzio\\Application service. NotFoundHandlerFactory Mezzio\\Container\\NotFoundHandlerFactory now returns an instance of Mezzio\\Handler\\NotFoundHandler , instead of Mezzio\\Middleware\\NotFoundHandler (which has been removed). LazyLoadingMiddleware Mezzio\\Middleware\\LazyLoadingMiddleware now composes a Mezzio\\MiddlewareContainer instance instead of a more general PSR-11 container; this is to ensure that the value returned is a PSR-15 MiddlewareInterface instance. Removed classes and traits Mezzio\\AppFactory was removed. If you were using it previously, either use Mezzio\\Application directly, or a Laminas\\Stratigility\\MiddlewarePipe instance. Mezzio\\ApplicationConfigInjectionTrait ; the functionality of this trait was replaced by the Mezzio\\Container\\ApplicationConfigInjectionDelegator . Mezzio\\Delegate\\NotFoundDelegate ; use Mezzio\\Handler\\NotFoundHandler instead. Its factory, Mezzio\\Container\\NotFoundDelegateFactory , was also removed. Mezzio\\Emitter\\EmitterStack ; use Laminas\\HttpHandlerRunner\\Emitter\\EmitterStack instead. Mezzio\\IsCallableInteropMiddlewareTrait ; there is no functional equivalent, nor a need for this functionality as of version 3. Mezzio\\MarshalMiddlewareTrait ; the functionality of this trait was replaced by a combination of Mezzio\\MiddlewareContainer and Mezzio\\MiddlewareFactory . Mezzio\\Middleware\\DispatchMiddleware ; use Mezzio\\Router\\Middleware\\DispatchMiddleware instead. Mezzio\\Middleware\\ImplicitHeadMiddleware ; use Mezzio\\Router\\Middleware\\ImplicitHeadMiddleware instead. Mezzio\\Middleware\\ImplicitOptionsMiddleware ; use Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware instead. Mezzio\\Middleware\\NotFoundHandler ; use Mezzio\\Handler\\NotFoundHandler instead. Mezzio\\Middleware\\RouteMiddleware ; use Mezzio\\Router\\Middleware\\RouteMiddleware instead. Upgrading We provide a package you can add to your existing v2 application in order to upgrade it to version 3. Before installing and running the migration tooling, make sure you have checked in your latest changes (assuming you are using version control), or have a backup of your existing code. Install the migration tooling using the following command: $ composer require --dev mezzio/mezzio-migration Once installed, run the following command to migrate your application: $ ./vendor/bin/mezzio-migration migrate This package does the following: Uninstalls all current dependencies (by removing the vendor/ directory). Updates existing dependency constraints for known Mezzio packages to their latest stable versions. (See the tools README for details on what versions of which packages the tool uses.) Adds development dependencies on laminas/laminas-component-installer and mezzio/mezzio-tooling. Updates the config/pipeline.php file to: add strict type declarations. modify it to return a callable, per the v3 skeleton. update the middleware pipeline as follows: pipeRoutingMiddleware() becomes a pipe() operation referencing the mezzio-router RouteMiddleware . pipeDispatchMiddleware() becomes a pipe() operation referencing the mezzio-router DispatchMiddleware . update references to ImplicitHeadMiddleware to reference the version in mezzio-router. update references to ImplicitOptionsMiddleware to reference the version in mezzio-router. update references to Mezzio\\Middleware\\NotFoundHandler to reference Mezzio\\Handler\\NotFoundHandler . add a pipe() entry for the mezzio-router MethodNotAllowedMiddleware . Updates the config/routes.php file to: add strict type declarations. modify it to return a callable, per the v3 skeleton. Replaces the public/index.php file with the latest version from the skeleton. Updates config/container.php when Pimple or Aura.Di are in use: For Pimple: The package xtreamwayz/pimple-container-interop is replaced with laminas/laminas-pimple-config . The Pimple variant of container.php from the v3 skeleton is used. For Aura.Di The package aura/di is replaced with laminas/laminas-auradi-config . The Aura.Di variant of container.php from the v3 skeleton is used. Executes ./vendor/bin/mezzio migrate:interop-middleware . Executes ./vendor/bin/mezzio migrate:middleware-to-request-handler . Runs ./vendor/bin/phpcbf if it is installed. These steps should take care of most migration tasks. It does not update unit tests. These cannot be automatically updated, due to the amount of variance in testing strategies. When done, use a diffing tool to compare and verify all changes. Please be aware that the tool is not designed for edge cases; there may be things it does not do or cannot catch within your code. When unsure, refer to the other sections in this document to determine what else you may need to change.","title":"Migration"},{"location":"v3/reference/migration/#migration-to-mezzio-30","text":"Mezzio 3.0 should not result in many upgrade problems for users. However, starting in this version, we offer a few changes affecting the following that you should be aware of, and potentially update your application to adopt: PHP 7.1 support PSR-15 support New dependencies New features Signature and behavior changes Removed classes and traits Upgrading from v2","title":"Migration to Mezzio 3.0"},{"location":"v3/reference/migration/#php-71-support","text":"Starting in Mezzio 3.0 we support only PHP 7.1+.","title":"PHP 7.1 support"},{"location":"v3/reference/migration/#psr-15-support","text":"All middleware and delegators now implement interfaces from PSR-15 instead of http-interop/http-middleware (a PSR-15 precursor). This means the following changes were made throughout Mezzio: The process() method of all middleware now type hint the second argument against the PSR-15 RequestHandlerInterface , instead of the previous DelegateInterface . The process() method of all middleware now have a return type hint of \\Psr\\Http\\Message\\ResponseInterface . All \"delegators\" have become request handlers: these now implement the PSR-15 interface RequestHandlerInterface instead of the former DelegateInterface . The process() method of handlers (formerly delegators) have been renamed to handle() and given a return type hint of \\Psr\\Http\\Message\\ResponseInterface . This change also affects all middleware you, as an application developer, have written, and your middleware will need to be updated. We provide a tool for this via mezzio-tooling. Make sure that package is up-to-date (a version 1 release should be installed), and run the following: $ ./vendor/bin/mezzio migrate:interop-middleware This tool will locate any http-interop middleware and update it to PSR-15 middleware.","title":"PSR-15 Support"},{"location":"v3/reference/migration/#new-dependencies","text":"Mezzio adds the following packages as dependencies: psr/http-server-middleware provides the PSR-15 interfaces, and replaces the previous dependency on http-interop/http-middleware. mezzio/mezzio-router ; previously, we depended on this package indirectly; now it is a direct requirement. mezzio/mezzio-tooling ; this was suggested previously, but is now required as a development dependency. laminas/laminas-httphandlerrunner ; this is now used for the purposes of marshaling the server request, dispatching the application, and emitting the response. The functionality is generalized enough to warrant a separate package.","title":"New dependencies"},{"location":"v3/reference/migration/#new-features","text":"The following classes were added in version 3: Mezzio\\Container\\ApplicationConfigInjectionDelegator is a delegator factory capable of piping and routing middleware from configuration. See the recipe on autowiring routes and pipeline middleware for more information. Mezzio\\Container\\ApplicationPipelineFactory will produce an empty MiddlewarePipe for use with Mezzio\\Application . Mezzio\\Container\\EmitterFactory will produce a Laminas\\HttpHandlerRunner\\Emitter\\EmitterStack instance for use with the RequestHandlerRunner instance composed by the Application . See the chapter on emitters for more details. Mezzio\\Container\\MiddlewareContainerFactory will produce a MiddlewareContainer composing the application container instance. Mezzio\\Container\\MiddlewareFactoryFactory will produce a MiddlewareFactory composing a MiddlewareContainer instance. Mezzio\\Container\\RequestHandlerRunnerFactory will produce a Laminas\\HttpHandlerRunner\\RequestHandlerRunner instance for use with the Application instance. See the laminas-httphandlerrunner documentation for more details on this collaborator. Mezzio\\Container\\ServerRequestErrorResponseGeneratorFactory will produce a Mezzio\\Response\\ServerRequestErrorResponseGenerator instance for use with the RequestHandlerRunner . Mezzio\\Container\\ServerRequestFactoryFactory will produce a PHP callable capable of generating a PSR-7 ServerRequestInterface instance for use with the RequestHandlerRunner . Mezzio\\MiddlewareContainer decorates a PSR-11 container, and ensures that the values pulled are PSR-15 MiddlewareInterface instances. If the container returns a PSR-15 RequestHandlerInterface , it decorates it via Laminas\\Stratigility\\Middleware\\RequestHandlerMiddleware . All other types result in an exception being thrown. Mezzio\\MiddlewareFactory allows creation of MiddlewareInterface instances from a variety of argument types, and is used by Application to allow piping and routing to middleware services, arrays of services, and more. It composes a MiddlewareContainer internally. Mezzio\\Response\\ServerRequestErrorResponseGenerator can act as a response generator for the RequestHandlerRunner when its composed server request factory raises an exception.","title":"New features"},{"location":"v3/reference/migration/#signature-and-behavior-changes","text":"The following signature changes were made that could affect class extensions and/or consumers.","title":"Signature and behavior changes"},{"location":"v3/reference/migration/#removed-classes-and-traits","text":"Mezzio\\AppFactory was removed. If you were using it previously, either use Mezzio\\Application directly, or a Laminas\\Stratigility\\MiddlewarePipe instance. Mezzio\\ApplicationConfigInjectionTrait ; the functionality of this trait was replaced by the Mezzio\\Container\\ApplicationConfigInjectionDelegator . Mezzio\\Delegate\\NotFoundDelegate ; use Mezzio\\Handler\\NotFoundHandler instead. Its factory, Mezzio\\Container\\NotFoundDelegateFactory , was also removed. Mezzio\\Emitter\\EmitterStack ; use Laminas\\HttpHandlerRunner\\Emitter\\EmitterStack instead. Mezzio\\IsCallableInteropMiddlewareTrait ; there is no functional equivalent, nor a need for this functionality as of version 3. Mezzio\\MarshalMiddlewareTrait ; the functionality of this trait was replaced by a combination of Mezzio\\MiddlewareContainer and Mezzio\\MiddlewareFactory . Mezzio\\Middleware\\DispatchMiddleware ; use Mezzio\\Router\\Middleware\\DispatchMiddleware instead. Mezzio\\Middleware\\ImplicitHeadMiddleware ; use Mezzio\\Router\\Middleware\\ImplicitHeadMiddleware instead. Mezzio\\Middleware\\ImplicitOptionsMiddleware ; use Mezzio\\Router\\Middleware\\ImplicitOptionsMiddleware instead. Mezzio\\Middleware\\NotFoundHandler ; use Mezzio\\Handler\\NotFoundHandler instead. Mezzio\\Middleware\\RouteMiddleware ; use Mezzio\\Router\\Middleware\\RouteMiddleware instead.","title":"Removed classes and traits"},{"location":"v3/reference/migration/#upgrading","text":"We provide a package you can add to your existing v2 application in order to upgrade it to version 3. Before installing and running the migration tooling, make sure you have checked in your latest changes (assuming you are using version control), or have a backup of your existing code. Install the migration tooling using the following command: $ composer require --dev mezzio/mezzio-migration Once installed, run the following command to migrate your application: $ ./vendor/bin/mezzio-migration migrate This package does the following: Uninstalls all current dependencies (by removing the vendor/ directory). Updates existing dependency constraints for known Mezzio packages to their latest stable versions. (See the tools README for details on what versions of which packages the tool uses.) Adds development dependencies on laminas/laminas-component-installer and mezzio/mezzio-tooling. Updates the config/pipeline.php file to: add strict type declarations. modify it to return a callable, per the v3 skeleton. update the middleware pipeline as follows: pipeRoutingMiddleware() becomes a pipe() operation referencing the mezzio-router RouteMiddleware . pipeDispatchMiddleware() becomes a pipe() operation referencing the mezzio-router DispatchMiddleware . update references to ImplicitHeadMiddleware to reference the version in mezzio-router. update references to ImplicitOptionsMiddleware to reference the version in mezzio-router. update references to Mezzio\\Middleware\\NotFoundHandler to reference Mezzio\\Handler\\NotFoundHandler . add a pipe() entry for the mezzio-router MethodNotAllowedMiddleware . Updates the config/routes.php file to: add strict type declarations. modify it to return a callable, per the v3 skeleton. Replaces the public/index.php file with the latest version from the skeleton. Updates config/container.php when Pimple or Aura.Di are in use: For Pimple: The package xtreamwayz/pimple-container-interop is replaced with laminas/laminas-pimple-config . The Pimple variant of container.php from the v3 skeleton is used. For Aura.Di The package aura/di is replaced with laminas/laminas-auradi-config . The Aura.Di variant of container.php from the v3 skeleton is used. Executes ./vendor/bin/mezzio migrate:interop-middleware . Executes ./vendor/bin/mezzio migrate:middleware-to-request-handler . Runs ./vendor/bin/phpcbf if it is installed. These steps should take care of most migration tasks. It does not update unit tests. These cannot be automatically updated, due to the amount of variance in testing strategies. When done, use a diffing tool to compare and verify all changes. Please be aware that the tool is not designed for edge cases; there may be things it does not do or cannot catch within your code. When unsure, refer to the other sections in this document to determine what else you may need to change.","title":"Upgrading"}]}